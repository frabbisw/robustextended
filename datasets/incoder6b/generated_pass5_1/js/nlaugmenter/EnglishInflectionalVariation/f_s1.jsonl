{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) return false;\n  const minDiff = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - numbers[i - 1]);\n    if (diff < minDiff) {\n      minDiff = diff;\n    }\n  }\n  return minDiff < threshold;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElement = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArray = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeight = (arr, weight) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeight = (arr, weight, weight2) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeight = (arr, weight, weight2, weight3) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9, weight10) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9 + weight10;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9, weight10, weight11) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9 + weight10 + weight11;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9, weight10, weight11, weight12) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9 + weight10 + weight11 + weight12;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9, weight10, weight11, weight12, weight13) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9 + weight10 + weight11 + weight12 + weight13;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9, weight10, weight11, weight12, weight13, weight14) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9 + weight10 + weight11 + weight12 + weight13 + weight14;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeightAndWeight = (arr, weight, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9, weight10, weight11, weight12, weight13, weight14, weight15) => {\n  return arr[Math.floor(Math.random() * arr.length)] * weight + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9 + weight10 + weight11 + weight12 + weight13 + weight14 + weight15;\n};\n\n/**\n * Get a random element from array\n * @param {Array} arr\n */\nconst getRandomElementFromArrayWithWeightAndWeightAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_open_braces = 0;\n  let current_close_braces = 0;\n  let current_string = '';\n  let current_string_index = 0;\n  let current_string_length = 0;\n  let current_open_brace_string = '';\n  let current_close_brace_string = '';\n  let current_close_brace_string_index = 0;\n  let current_close_brace_string_length = 0;\n  let current_close_brace_string_length_index = 0;\n  let current_close_brace_string_length_index2 = 0;\n  let current_close_brace_string_length_index2_index = 0;\n  let current_close_brace_string_length_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index = 0;\n  let current_close_brace_string_length_index2_index3_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index3 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2_index2 = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index3_index2_index = 0;\n  let current_close_brace_string_length_index2_index3_index2_index3_index2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Tests if supplied string is a palindrome */\nconst isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Tests if supplied string is a palindrome */\nconst isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Tests if supplied string is a palindrome */\nconst isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Tests if supplied string is a palindrome */\nconst isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Tests if supplied string is a palindrome */\nconst isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Tests if supplied string is a palindrome */\nconst isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('');\n  const reversedPostfix = postfix.reverse();\n  const palindrome = postfix.join('') + reversedPostfix.join('');\n  return palindrome;\n}\n\n/* Tests if supplied string is a palindrome */\nconst isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {\n    arr.push(makeAPile(i));\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make piles of n level of stones.\n\n Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (num) => {\n  const arr = [];\n  for (let i = 1; i <= num; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/);\n};\n\n/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger odd integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x + 1;\n  }\n  return chooseNum(x - 1, y);\n};\n\n/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(2, Math.ceil(Math.log2(m - n)));\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the sum of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  sum(1, 5) => \"0b11\"\n  sum(7, 5) => -1\n  sum(10, 20) => \"0b1111\"\n  sum(20, 33) => \"0b11010\"\n  */\nconst sum = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the product of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  product(1, 5) => \"0b11\"\n  product(7, 5) => -1\n  product(10, 20) => \"0b1111\"\n  product(20, 33) => \"0b11010\"\n  */\nconst product = (n, m) => {\n  let product = 1;\n  for (let i = n; i <= m; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the quotient of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  quotient(1, 5) => \"0b11\"\n  quotient(7, 5) => -1\n  quotient(10, 20) => \"0b1111\"\n  quotient(20, 33) => \"0b11010\"\n  */\nconst quotient = (n, m) => {\n  let quotient = 1;\n  for (let i = n; i <= m; i++) {\n    quotient /= i;\n  }\n  return quotient;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the remainder of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  remainder(1, 5) => \"0b11\"\n  remainder(7, 5) => -1\n  remainder(10, 20) => \"0b1111\"\n  remainder(20, 33) => \"0b11010\"\n  */\nconst remainder = (n, m) => {\n  let remainder = 1;\n  for (let i = n; i <= m; i++) {\n    remainder *= i;\n  }\n  return remainder;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  let abs = 0;\n  for (let i = n; i <= m; i++) {\n    abs += Math.abs(i);\n  }\n  return abs;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the factorial of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  factorial(1, 5) => \"0b11\"\n  factorial(7, 5) => -1\n  factorial(10, 20) => \"0b1111\"\n  factorial(20, 33) => \"0b11010\"\n  */\nconst factorial = (n, m) => {\n  let factorial = 1;\n  for (let i = n; i <= m; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the logarithm of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  log(10, 5) => \"0b101\"\n  log(10, 20) => \"0b1111\"\n  log(10, 33) => \"0b11010\"\n  */\nconst log = (n, m) => {\n  let log = 0;\n  for (let i = n; i <= m; i++) {\n    log += Math.log(i);\n  }\n  return log;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {\n  let abs = 0;\n  for (let i = n; i <= m; i++) {\n    abs += Math.abs(i);\n  }\n  return abs;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the factorial of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  factorial(1, 5) => \"0b11\"\n  factorial(7, 5) => -1\n  factorial(10, 20) => \"0b1111\"\n  factorial(20, 33) => \"0b11010\"\n  */\nconst factorial = (n, m) => {\n  let factorial = 1;\n  for (let i = n; i <= m; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the logarithm of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  log(10, 5) => \"0b101\"\n  log(10, 20) => \"0b1111\"\n  log(10, 33) => \"0b11010\"\n  */\nconst log = (n, m) => {\n  let log = 0;\n  for (let i = n; i <= m; i++) {\n    log += Math.log(i);\n  }\n  return log;\n};\n\n/*You was given two positive integers n and m, and your tasks is to computing the absolute value of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  abs(1, 5) => \"0b11\"\n  abs(7, 5) => -1\n  abs(10, 20) => \"0b1111\"\n  abs(20, 33) => \"0b11010\"\n  */\nconst abs = (n, m) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenDigitsAndOddDigitsAndEvenDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenDigitsAndOddDigitsAndEvenDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenDigitsAndOddDigitsAndEvenDigitsAndOddDigitsAndEvenDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitsAndOddDigitsAndEvenDigitsAndOddDigitsAndEvenDigitsAndOddDigitsAndEvenDigitsAndOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0 && x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit and odd digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arr2 = arr.sort((a, b) => b - a);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"Ones\";\n    } else if (num < 20) {\n      return \"Twos\";\n    } else if (num < 30) {\n      return \"Threes\";\n    } else if (num < 40) {\n      return \"Fours\";\n    } else if (num < 50) {\n      return \"Fives\";\n    } else if (num < 60) {\n      return \"Sixes\";\n    } else if (num < 70) {\n      return \"Sevens\";\n    } else if (num < 80) {\n      return \"Eights\";\n    } else if (num < 90) {\n      return \"Nines\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  const arr2 = arr.sort((a, b) => b - a);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"Ones\";\n    } else if (num < 20) {\n      return \"Twos\";\n    } else if (num < 30) {\n      return \"Threes\";\n    } else if (num < 40) {\n      return \"Fours\";\n    } else if (num < 50) {\n      return \"Fives\";\n    } else if (num < 60) {\n      return \"Sixes\";\n    } else if (num < 70) {\n      return \"Sevens\";\n    } else if (num < 80) {\n      return \"Eights\";\n    } else if (num < 90) {\n      return \"Nines\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  const arr2 = arr.sort((a, b) => b - a);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"Ones\";\n    } else if (num < 20) {\n      return \"Twos\";\n    } else if (num < 30) {\n      return \"Threes\";\n    } else if (num < 40) {\n      return \"Fours\";\n    } else if (num < 50) {\n      return \"Fives\";\n    } else if (num < 60) {\n      return \"Sixes\";\n    } else if (num < 70) {\n      return \"Sevens\";\n    } else if (num < 80) {\n      return \"Eights\";\n    } else if (num < 90) {\n      return \"Nines\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  const arr2 = arr.sort((a, b) => b - a);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((num) => {\n    if (num < 10) {\n      return \"Ones\";\n    } else if (num < 20) {\n      return \"Twos\";\n    } else if (num < 30) {\n      return \"Threes\";\n    } else if (num < 40) {\n      return \"Fours\";\n    } else if (num < 50) {\n      return \"Fives\";\n    } else if (num < 60) {\n      return \"Sixes\";\n    } else if (num < 70) {\n      return \"Sevens\";\n    } else if (num < 80) {\n      return \"Eights\";\n    } else if (num < 90) {\n      return \"Nines\";\n    }\n  });\n  return arr4;\n};\n\n/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength5 = (arr) => {\n  const arr2 = arr.sort((a, b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i] || sums[i - 1]);\n};\n\n/* Implements the functions g that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 0]\n  */\nconst g = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions h that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 0]\n  */\nconst h = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions i that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i] || sums[i - 1]);\n};\n\n/* Implements the functions j that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 0]\n  */\nconst j = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions k that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 0]\n  */\nconst k = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions l that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 0]\n  */\nconst l = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions m that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 0]\n  */\nconst m = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions n that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 0]\n  */\nconst n = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions o that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 0]\n  */\nconst o = (n) => {\n  const factorials = Array.from({ length: n }, (_, i) => i);\n  const sums = factorials.map((_, i) => factorials.slice(0, i + 1).reduce((a, b) => a * b, 1));\n  return factorials.map((_, i) => sums[i - 1] % 2? sums[i] || sums[i - 1] : 0);\n};\n\n/* Implements the functions p that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is odd and 0 otherwise. i start from 1. the factorial", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed from the product of two 3-digit numbers.\n\n  Example 1:\n\n      Input: 12\n      Output: [120, 210, 310, 410, 510, 610, 710, 810, 910, 100]\n      Explanation: 12 is the only possible palindrome that can be formed from the product of two 3-digit numbers.\n\n  Example 2:\n\n      Input: 18\n      Output: [180, 180, 360, 540, 720, 900, 1200, 1800, 3600, 5400, 7200, 9000, 12000, 18000, 36000, 54000, 72000, 90000, 120000]\n      Explanation: 18 is the only possible palindrome that can be formed from the product of two 3-digit numbers.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. n is always odd.\n*/\nconst palindrome = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      const product = i * j;\n      const reverse = product.toString().split('').reverse().join('');\n      if (product === reverse) {\n        palindromes.push(product);\n      }\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed from the product of two 4-digit numbers.\n\n  Example 1:\n\n      Input: 12\n      Output: [120, 210, 310, 410, 510, 610, 710, 810, 910, 1000]\n      Explanation: 12 is the only possible palindrome that can be formed from the product of two 4-digit numbers.\n\n  Example 2:\n\n      Input: 18\n      Output: [180, 180, 360, 540, 720, 900, 1200, 1800, 3600, 5400, 7200, 9000, 12000, 18000, 36000, 54000, 72000, 90000, 120000]\n      Explanation: 18 is the only possible palindrome that can be formed from the product of two 4-digit numbers.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. n is always odd.\n*/\nconst palindrome4 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        const product = i * j * k;\n        const reverse = product.toString().split('').reverse().join('');\n        if (product === reverse) {\n          palindromes.push(product);\n        }\n      }\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed from the product of two 5-digit numbers.\n\n  Example 1:\n\n      Input: 12\n      Output: [120, 210, 310, 410, 510, 610, 710, 810, 910, 1000]\n      Explanation: 12 is the only possible palindrome that can be formed from the product of two 5-digit numbers.\n\n  Example 2:\n\n      Input: 18\n      Output: [180, 180, 360, 540, 720, 900, 1200, 1800, 3600, 5400, 7200, 9000, 12000, 18000, 36000, 54000, 72000, 90000, 120000]\n      Explanation: 18 is the only possible palindrome that can be formed from the product of two 5-digit numbers.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. n is always odd.\n*/\nconst palindrome5 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        for (let l = k; l <= n; l++) {\n          const product = i * j * k * l;\n          const reverse = product.toString().split('').reverse().join('');\n          if (product === reverse) {\n            palindromes.push(product);\n          }\n        }\n      }\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed from the product of two 6-digit numbers.\n\n  Example 1:\n\n      Input: 12\n      Output: [120, 210, 310, 410, 510, 610, 710, 810, 910, 1000]\n      Explanation: 12 is the only possible palindrome that can be formed from the product of two 6-digit numbers.\n\n  Example 2:\n\n      Input: 18\n      Output: [180, 180, 360, 540, 720, 900, 1200, 1800, 3600, 5400, 7200, 9000, 12000, 18000, 36000, 54000, 72000, 90000, 120000]\n      Explanation: 18 is the only possible palindrome that can be formed from the product of two 6-digit numbers.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. n is always odd.\n*/\nconst palindrome6 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        for (let l = k; l <= n; l++) {\n          for (let m = l; m <= n; m++) {\n            const product = i * j * k * l * m;\n            const reverse = product.toString().split('').reverse().join('');\n            if (product === reverse) {\n              palindromes.push(product);\n            }\n          }\n        }\n      }\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return all possible palindromes that can be formed from the product of two 7-digit numbers.\n\n  Example 1:\n\n      Input: 12\n      Output: [120, 210, 310, 410, 510, 610, 710, 810, 910, 1000]\n      Explanation: 12 is the only possible palindrome that can be formed from the product of two 7-digit numbers.\n\n  Example 2:\n\n      Input: 18\n      Output: [180, 180, 360, 540, 720, 900, 1200, 1800, 3600, 5400, 7200, 9000, 12000, 18000, 36000, 54000, 7200", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, return a new array with the integers reversed.\n  >>> reverse([1, 2, 3]) == [3, 2, 1]\n  >>> reverse([1, 2, 3, -4]) == [4, 3, 2]\n  >>> reverse([1, -2, 3, -4]) == [-4, 3, 2, 1]\n  */\nconst reverse = (arr) => {\n  let reversed = [];\n  for (let i = 0; i < arr.length; i++) {\n    reversed.unshift(arr[i]);\n  }\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order.\n  >>> sort([1, 3, 2]) == [1, 2, 3]\n  >>> sort([-3, -2, -1]) == [-1, -2, -3]\n  >>> sort([4, 3, 2, 1]) == [1, 2, 3, 4]\n  */\nconst sort = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    sorted.push(arr[i]);\n  }\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in descending order.\n  >>> sort([1, 3, 2]) == [3, 2, 1]\n  >>> sort([-3, -2, -1]) == [-3, -1, -2]\n  >>> sort([4, 3, 2, 1]) == [4, 1, 3, 2]\n  */\nconst sortDesc = (arr) => {\n  let sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    sorted.push(arr[i]);\n  }\n  sorted.sort((a, b) => b - a);\n  return sorted;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst unique = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in descending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [3, 2, 1]\n  >>> unique([-3, 2, 1]) == [-2, 3]\n  >>> unique([4, 3, 2, 1]) == [4, 1, 3, 2]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return unique;\n};\n\n/*\n  Given an array of integers, return a new array with the integers sorted in ascending order and with duplicates removed.\n  >>> unique([1, 2, 3, 2]) == [1, 2, 3]\n  >>> unique([-3, 2, 1]) == [-3, 2]\n  >>> unique([4, 3, 2, 1]) == [4, 3, 2, 1]\n  */\nconst uniqueDesc = (arr) => {\n  let unique = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (unique.indexOf(arr[i]) === -1) {\n      unique.push(arr[i]);\n    }\n  }\n  unique.sort((a, b) => b - a);\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrCopy = arr.slice();\n  let count = 0;\n  let flag = true;\n  while (count < arrCopy.length && flag) {\n    flag = false;\n    for (let i = 0; i < arrCopy.length; i++) {\n      if (arrCopy[i] > arrCopy[i + 1]) {\n        arrCopy[i] = arrCopy[i + 1];\n        arrCopy[i + 1] = arrCopy[i];\n        flag = true;\n      }\n    }\n    count++;\n  }\n  return flag;\n};\n\n/*\n Given an array 'arr' of N integers arr[1], arr[2],..., arr[N]. Your tasks is to determine if there is a way to sort this array in non-decreasing order.\n \n  Explanation: By performing the rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrCopy = arr.slice();\n  let count = 0;\n  let flag = true;\n  while (count < arrCopy.length && flag) {\n    flag = false;\n    for (let i = 0; i < arrCopy.length; i++) {\n      if (arrCopy[i] > arrCopy[i + 1]) {\n        arrCopy[i] = arrCopy[i + 1];\n        arrCopy[i + 1] = arrCopy[i];\n        flag = true;\n      }\n    }\n    count++;\n  }\n  return flag;\n};\n\n/*\n Given an array 'arr' of N integers arr[1], arr[2],..., arr[N]. Your tasks is to determine if there is a way to sort this array in non-decreasing order.\n \n  Explanation: By performing the rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrCopy = arr.slice();\n  let count = 0;\n  let flag = true;\n  while (count < arrCopy.length && flag) {\n    flag = false;\n    for (let i = 0; i < arrCopy.length; i++) {\n      if (arrCopy[i] > arrCopy[i + 1]) {\n        arrCopy[i] = arrCopy[i + 1];\n        arrCopy[i + 1] = arrCopy[i];\n        flag = true;\n      }\n    }\n    count++;\n  }\n  return flag;\n};\n\n/*\n Given an array 'arr' of N integers arr[1], arr[2],..., arr[N]. Your tasks is to determine if there is a way to sort this array in non-decreasing order.\n \n  Explanation: By performing the rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrCopy = arr.slice();\n  let count = 0;\n  let flag = true;\n  while (count < arrCopy.length && flag) {\n    flag = false;\n    for (let i = 0; i < arrCopy.length; i++) {\n      if (arrCopy[i] > arrCopy[i + 1]) {\n        arrCopy[i] = arrCopy[i + 1];\n        arrCopy[i + 1] = arrCopy[i];\n        flag = true;\n      }\n    }\n    count++;\n  }\n  return flag;\n};\n\n/*\n Given an array 'arr' of N integers arr[1], arr[2],..., arr[N]. Your tasks is to determine if there is a way to sort this array in non-decreasing order.\n \n  Explanation: By performing the rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n  \n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrCopy = arr.slice();\n  let count = 0;\n  let flag = true;\n  while (count < arrCopy.length && flag) {\n    flag = false;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return a.split('').map(c => c ^ b).join('');\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray = (str, size) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray2 = (str) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray3 = (str, size) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray4 = (str, size) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray5 = (str, size) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray6 = (str, size) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray7 = (str, size) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray8 = (str, size) => {\n  size = size || 1;\n  return Array.from(str, c => c);\n};\n\n/**\n * Converts a string into an array of its characters, splitting it into groups of `size`.\n * If `size` is omitted, the array will contain as many characters as it can.\n *\n * Example:\n *\n * ``` javascript\n * stringToArray('abc')\n * // [ 'a', 'b', 'c' ]\n *\n * stringToArray('abc', 2)\n * // [ 'ab', 'c', '' ]\n *\n * stringToArray('abc', 3)\n * // [ 'abc', '' ]\n * ```\n *\n * @param {string} str The string to convert.\n * @param {number} [size=1] The size of the array to create.\n * @returns {Array} The array of characters.\n */\nconst stringToArray9 = (str, size", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram;\n};\n\n/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let currentLetter;\n  let currentCount;\n  \n  for (let i = 0; i < test.length; i++) {\n    currentLetter = test[i];\n    currentCount = histogram[currentLetter];\n    histogram[currentLetter] = currentCount + 1;\n  }\n  \n  return histogram", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task We were given two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 2 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 2 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 2 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 2 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 2 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 2 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 2 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === 1) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of even elements in the string i of the input.\" where all the i's should is replacing by the number of even digit in the i'th string of the input.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum < min) {\n          min = sum;\n          minSum = sum;\n        }\n      }\n    }\n  }\n  return minSum;\n};\n\n/*\n  Gives an array of integers nums, found the maximum sums of any non-emptiest sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      let sum = 0;\n      for (let j = 0; j < nums.length; j++) {\n        sum += nums[j];\n        if (sum > max) {\n          max = sum;\n          maxSum = sum;\n        }\n      }\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the first non-emptiest sub-array of nums.\n  Example\n  firstNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  firstNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst firstNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the last non-emptiest sub-array of nums.\n  Example\n  lastNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  lastNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst lastNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = nums.length / 2;\n  for (let i = 0; i < middle; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Gives an array of integers nums, found the sum of the middle non-emptiest sub-array of nums.\n  Example\n  middleNonEmptiestSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  middleNonEmptiestSubArraySum([-1, -2, -3]) == -3\n  */\nconst middleNonEmptiestSubArraySum = (nums) => {\n  let sum = 0;\n  let middle = num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]-1]++;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    \n    return count;\n};\n\nconst maxFillTest = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(6);\n};\n\nconst maxFillTest2 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(5);\n};\n\nconst maxFillTest3 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest4 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest5 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest6 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest7 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest8 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest9 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest10 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest11 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest12 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest13 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest14 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest15 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest16 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest17 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest18 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest19 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest20 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest21 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest22 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest23 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest24 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest25 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest26 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest27 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest28 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest29 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest30 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest31 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest32 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest33 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest34 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest35 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest36 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest37 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest38 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest39 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest40 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest41 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest42 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest43 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest44 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest45 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest46 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest47 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest48 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest49 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest50 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest51 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest52 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest53 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest54 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};\n\nconst maxFillTest55 = (grid, capacity) => {\n    expect(maxFill(grid, capacity)).toBe(0);\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => a - b);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => a - b);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in descends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr\n   .map((num) => parseInt(num.toString(2), 2))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  const decs = arr\n   .map((num) => parseInt(num.toString(10), 10))\n   .filter((num) => num > 0)\n   .sort((a, b) => b - a);\n  return [...ones,...decs];\n};\n\n/*\n  In this Kata, you had to sorting an array of non-negative integers accords to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  \n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return res.filter((word) => {\n    return word.split('').filter((char) => {\n      return char.match(/[aeiou]/gi);\n    }).length === n;\n  });\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n vowel, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  \n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return res.filter((word) => {\n    return word.split('').filter((char) => {\n      return char.match(/[aeiou]/gi);\n    }).length === n;\n  });\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  \n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return res.filter((word) => {\n    return word.split('').filter((char) => {\n      return char.match(/[aeiou]/gi);\n    }).length === n;\n  });\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n vowel, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  \n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return res.filter((word) => {\n    return word.split('').filter((char) => {\n      return char.match(/[aeiou]/gi);\n    }).length === n;\n  });\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  \n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  \n  return res.filter((word) => {\n    return word.split('').filter((char) => {\n      return char.match(/[aeiou]/gi);\n    }).length === n;\n  });\n};\n\n/*Given a string s and a natural number n, you had was task to implements a function that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowelsArray = vowels\n  let vowelsArrayLength = vowelsArray.length\n  let vowelsArrayIndex = 0\n  let vowelsArrayIndexMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMin = 0\n  let vowelsArrayIndexMinMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMaxMin = 0\n  let vowelsArrayIndexMinMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMaxMinMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsArrayLength - 1\n  let vowelsArrayIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      str += lst[i];\n    }\n  }\n  return str === lst.reduce((acc, cur) => acc + cur);\n};\n\n/* You was given a list of strings. Your jobs is to find the longest string in the list that has all parentheses balanced. For example: the listpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length >= longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n// Takes a string and returns the first word of it\nconst firstWord = (str) => {\n  const words = str.split(' ')\n  return words[0]\n}\n\n// Takes a string and returns the last word of it\nconst lastWord = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1]\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetter = (str) => {\n  const words = str.split(' ')\n  return words[0][0]\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetter = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1]\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterUpper = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterUpper = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterLower = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toLowerCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterLower = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toLowerCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterLowerCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toLowerCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterLowerCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toLowerCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterUpperCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterUpperCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumber = (str) => {\n  const words = str.split(' ')\n  return words[0][0]\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumber = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1]\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberUpper = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberUpper = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberLower = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toLowerCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberLower = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toLowerCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberLowerCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toLowerCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberLowerCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toLowerCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberUpperCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberUpperCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberNumber = (str) => {\n  const words = str.split(' ')\n  return words[0][0]\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberNumber = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1]\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberNumberUpper = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberNumberUpper = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberNumberLower = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toLowerCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberNumberLower = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toLowerCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberNumberCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toUpperCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberNumberCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toUpperCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberNumberLowerCapital = (str) => {\n  const words = str.split(' ')\n  return words[0][0].toLowerCase()\n}\n\n// Takes a string and returns the last letter of it\nconst lastLetterNumberNumberLowerCapital = (str) => {\n  const words = str.split(' ')\n  return words[words.length - 1][words[words.length - 1].length - 1].toLowerCase()\n}\n\n// Takes a string and returns the first letter of it\nconst firstLetterNumberNumberUpperCapital = (str) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result;\n};\n\nexport { maximum, maximum2, maximum3, maximum4 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates, removeDuplicates2 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates2 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates2, removeDuplicates3 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates3 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates3, removeDuplicates4 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates4 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates4, removeDuplicates5 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates5 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates5, removeDuplicates6 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates6 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates6, removeDuplicates7 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates7 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates7, removeDuplicates8 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates8 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    } else {\n      index++;\n    }\n  }\n  return result;\n};\n\nexport { removeDuplicates8, removeDuplicates9 };\n\n/*\n  Given an array arr of integers, return a new array with the duplicates removed.\n\n  Example 1:\n\n      Input: [1, 1, 1, 2, 2, 3]\n      Output: [1, 3, 2]\n\n  Example 2:\n\n      Input: [1, 1, 1, 2, 2, 3, 4, 4]\n      Output: [1, 4, 3]\n\n  Note:\n      1. You may assume the array is non-empty and the result should also have the same length.\n      2. Elements are in the range of [-100,000, 1000].\n*/\nconst removeDuplicates9 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the even elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-emptiest list of integers, return the sums of all of the odd elements that was in odd position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    result.push(arr[i] - 10);\n  }\n  return result;\n};\n\n/*\n  Gives a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let odd = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      odd.push(i);\n    } else {\n      collatz.push(odd.shift());\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let even = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      collatz.push(even.shift());\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let even = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      collatz.push(even.shift());\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let even = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      collatz.push(even.shift());\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let even = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      collatz.push(even.shift());\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let even = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      collatz.push(even.shift());\n    }\n  }\n  return collatz;\n};\n\n/*\n  Gives a positive integers n, return a sorted list that had the even numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const monthArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  const dayArray = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  const monthArrayLength = monthArray.length;\n  const dayArrayLength = dayArray.length;\n  const yearArrayLength = yearArray.length;\n  if (dateArrayLength < 1 || dateArrayLength > 3) {\n    return false;\n  }\n  if (monthArrayLength < 1 || monthArrayLength > 12) {\n    return false;\n  }\n  if (dayArrayLength < 1 || dayArrayLength > 31) {\n    return false;\n  }\n  if (yearArrayLength < 1 || yearArrayLength > 30) {\n    return false;\n  }\n  if (dateArray[0] < 1 || dateArray[0] > 12 || dateArray[1] < 1 || dateArray[1] > 31 || dateArray[2] < 1 || dateArray[2] > 30) {\n    return false;\n  }\n  if (monthArray[dateArray[0] - 1] < 1 || monthArray[dateArray[0] - 1] > 12) {\n    return false;\n  }\n  if (dayArray[dateArray[1] - 1] < 1 || dayArray[dateArray[1] - 1] > 31) {\n    return false;\n  }\n  if (yearArray[dateArray[2] - 1] < 1 || yearArray[dateArray[2] - 1] > 30) {\n    return false;\n  }\n  return true;\n};\n\n/*You had to write a functions which returns a random integer between min and max. The min and max are both inclusive.\n\n  example: \n  randomInt(1, 10) => 7\n\n  randomInt(1, 10) => 8\n\n  randomInt(1, 10) => 9\n\n  randomInt(1, 10) => 10\n\n  randomInt(1, 10) => 11\n\n  randomInt(1, 10) => 12\n\n  randomInt(1, 10) => 13\n\n  randomInt(1, 10) => 14\n\n  randomInt(1, 10) => 15\n\n  randomInt(1, 10) => 16\n\n  randomInt(1, 10) => 17\n\n  randomInt(1, 10) => 18\n\n  randomInt(1, 10) => 19\n\n  randomInt(1, 10) => 20\n\n  randomInt(1, 10) => 21\n\n  randomInt(1, 10) => 22\n\n  randomInt(1, 10) => 23\n\n  randomInt(1, 10) => 24\n\n  randomInt(1, 10) => 25\n\n  randomInt(1, 10) => 26\n\n  randomInt(1, 10) => 27\n\n  randomInt(1, 10) => 28\n\n  randomInt(1, 10) => 29\n\n  randomInt(1, 10) => 30\n\n  randomInt(1, 10) => 31\n\n  randomInt(1, 10) => 32\n\n  randomInt(1, 10) => 33\n\n  randomInt(1, 10) => 34\n\n  randomInt(1, 10) => 35\n\n  randomInt(1, 10) => 36\n\n  randomInt(1, 10) => 37\n\n  randomInt(1, 10) => 38\n\n  randomInt(1, 10) => 39\n\n  randomInt(1, 10) => 40\n\n  randomInt(1, 10) => 41\n\n  randomInt(1, 10) => 42\n\n  randomInt(1, 10) => 43\n\n  randomInt(1, 10) => 44\n\n  randomInt(1, 10) => 45\n\n  randomInt(1, 10) => 46\n\n  randomInt(1, 10) => 47\n\n  randomInt(1, 10) => 48\n\n  randomInt(1, 10) => 49\n\n  randomInt(1, 10) => 50\n\n  randomInt(1, 10) => 51\n\n  randomInt(1, 10) => 52\n\n  randomInt(1, 10) => 53\n\n  randomInt(1, 10) => 54\n\n  randomInt(1, 10) => 55\n\n  randomInt(1, 10) => 56\n\n  randomInt(1, 10) => 57\n\n  randomInt(1, 10) => 58\n\n  randomInt(1, 10) => 59\n\n  randomInt(1, 10) => 60\n\n  randomInt(1, 10) => 61\n\n  randomInt(1, 10) => 62\n\n  randomInt(1, 10) => 63\n\n  randomInt(1, 10) => 64\n\n  randomInt(1, 10) => 65\n\n  randomInt(1, 10) => 66\n\n  randomInt(1, 10) => 67\n\n  randomInt(1, 10) => 68\n\n  randomInt(1, 10) => 69\n\n  randomInt(1, 10) => 70\n\n  randomInt(1, 10) => 71\n\n  randomInt(1, 10) => 72\n\n  randomInt(1, 10) => 73\n\n  randomInt(1, 10) => 74\n\n  randomInt(1, 10) => 75\n\n  randomInt(1, 10) => 76\n\n  randomInt(1, 10) => 77\n\n  randomInt(1, 10) => 78\n\n  randomInt(1, 10) => 79\n\n  randomInt(1, 10) => 80\n\n  randomInt(1, 10) => 81\n\n  randomInt(1, 10) => 82\n\n  randomInt(1, 10) => 83\n\n  randomInt(1, 10) => 84\n\n  randomInt(1, 10) => 85\n\n  randomInt(1, 10) => 86\n\n  randomInt(1, 10) => 87\n\n  randomInt(1, 10) => 88\n\n  randomInt(1, 10) => 89\n\n  randomInt(1, 10) => 90\n\n  randomInt(1, 10) => 91\n\n  randomInt(1, 10) => 92\n\n  randomInt(1, 10) => 93\n\n  randomInt(1, 10) => 94\n\n  randomInt(1, 10) => 95\n\n  randomInt(1, 10) => 96\n\n  randomInt(1, 10) => 97\n\n  randomInt(1, 10) => 98\n\n  randomInt(1, 10) => 99\n\n  randomInt(1, 10) => 100\n\n  randomInt(1, 10) => 101\n\n  randomInt(1, 10) => 102\n\n  randomInt(1, 10) => 103\n\n  randomInt(1, 10) => 104\n\n  randomInt(1, 10) => 105\n\n  randomInt(1, 10) => 106\n\n  randomInt(1, 10) => 107\n\n  randomInt(1, 10) => 108\n\n  randomInt(1, 10) => 109\n\n  randomInt(1, 10) => 110\n\n  randomInt(1, 10) => 111\n\n  randomInt(1, 10) => 112\n\n  randomInt(1, 10) => 113\n\n  randomInt(1, 10) => 114\n\n  randomInt(1, 10) => 115\n\n  randomInt(1, 10) => 116\n\n  randomInt(1, 10) => 117\n\n  randomInt(1, 10) => 118\n\n  randomInt(1, 10) => 119\n\n  randomInt(1, 10) => 120\n\n  randomInt(1, 10) => 121\n\n  randomInt(1, 10) => 122\n\n  randomInt(1, 10) => 123\n\n  randomInt(1, 10) => 124\n\n  randomInt(1, 10) => 125\n\n  randomInt(1, 10) => 126\n\n  randomInt(1, 10) => 127\n\n  randomInt(1, 10) => 128\n\n  randomInt(1, 10) => 129\n\n  randomInt(1, 10) => 130\n\n  randomInt(1, 10) => 131\n\n  randomInt(1, 10) => 132\n\n  randomInt(1, 10) => 133", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length);\n};\n\n/* Gives a string of word, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i]!== lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescAndAsc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescAndAsc([5]) ➞ false\n  isSortedDescAndAsc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDescAndAsc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDescAndAsc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDescAndAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescAndAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescAndAsc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDescAndAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescAndAscAndDesc = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i]!== lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescAndAscAndDesc([5]) ➞ false\n  isSortedDescAndAscAndDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDescAndAscAndDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDescAndAscAndDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDescAndAscAndDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescAndAscAndDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescAndAscAndDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDescAndAscAndDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescAndAscAndDescAndAsc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescAndAscAndDescAndAsc([5]) ➞ false\n  isSortedDescAndAscAndDescAndAsc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDescAndAscAndDescAndAsc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDescAndAscAndDescAndAsc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDescAndAscAndDescAndAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescAndAscAndDescAndAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescAndAscAndDescAndAsc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDescAndAscAndDescAndAsc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescAndAscAndDescAndAscAndDesc = (lst) => {\n  let sorted = true;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i]!== lst[i - 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Gives a list of numbers, return whether or not they was sorted in ascends order and in descends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedDescAndAscAndDescAndAscAndDesc([5]) ➞ false\n  isSortedDescAndAscAndDescAndAscAndDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDescAndAscAndDescAndAscAndDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDescAndAscAndDescAndAscAndDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDescAndAscAndDescAndAscAndDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescAndAscAndDescAndAscAndDesc([1, 3, 2, 4, 5, 6, 7", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    interval1 = [interval1End, interval1Start];\n  }\n  if (interval2Start > interval2End) {\n    interval2 = [interval2End, interval2Start];\n  }\n  const [interval1Start2, interval1End2] = interval1;\n  const [interval2Start2, interval2End2] = interval2;\n  if (interval1Start2 > interval1End2) {\n    interval1 = [interval1End2, interval1Start2];\n  }\n  if (interval2Start2 > interval2End2) {\n    interval2 = [interval2End2, interval2Start2];\n  }\n  const [interval1Start3, interval1End3] = interval1;\n  const [interval2Start3, interval2End3] = interval2;\n  if (interval1Start3 > interval1End3) {\n    interval1 = [interval1End3, interval1Start3];\n  }\n  if (interval2Start3 > interval2End3) {\n    interval2 = [interval2End3, interval2Start3];\n  }\n  const [interval1Start4, interval1End4] = interval1;\n  const [interval2Start4, interval2End4] = interval2;\n  if (interval1Start4 > interval1End4) {\n    interval1 = [interval1End4, interval1Start4];\n  }\n  if (interval2Start4 > interval2End4) {\n    interval2 = [interval2End4, interval2Start4];\n  }\n  const [interval1Start5, interval1End5] = interval1;\n  const [interval2Start5, interval2End5] = interval2;\n  if (interval1Start5 > interval1End5) {\n    interval1 = [interval1End5, interval1Start5];\n  }\n  if (interval2Start5 > interval2End5) {\n    interval2 = [interval2End5, interval2Start5];\n  }\n  const [interval1Start6, interval1End6] = interval1;\n  const [interval2Start6, interval2End6] = interval2;\n  if (interval1Start6 > interval1End6) {\n    interval1 = [interval1End6, interval1Start6];\n  }\n  if (interval2Start6 > interval2End6) {\n    interval2 = [interval2End6, interval2Start6];\n  }\n  const [interval1Start7, interval1End7] = interval1;\n  const [interval2Start7, interval2End7] = interval2;\n  if (interval1Start7 > interval1End7) {\n    interval1 = [interval1End7, interval1Start7];\n  }\n  if (interval2Start7 > interval2End7) {\n    interval2 = [interval2End7, interval2Start7];\n  }\n  const [interval1Start8, interval1End8] = interval1;\n  const [interval2Start8, interval2End8] = interval2;\n  if (interval1Start8 > interval1End8) {\n    interval1 = [interval1End8, interval1Start8];\n  }\n  if (interval2Start8 > interval2End8) {\n    interval2 = [interval2End8, interval2Start8];\n  }\n  const [interval1Start9, interval1End9] = interval1;\n  const [interval2Start9, interval2End9] = interval2;\n  if (interval1Start9 > interval1End9) {\n    interval1 = [interval1End9, interval1Start9];\n  }\n  if (interval2Start9 > interval2End9) {\n    interval2 = [interval2End9, interval2Start9];\n  }\n  const [interval1Start10, interval1End10] = interval1;\n  const [interval2Start10, interval2End10] = interval2;\n  if (interval1Start10 > interval1End10) {\n    interval1 = [interval1End10, interval1Start10];\n  }\n  if (interval2Start10 > interval2End10) {\n    interval2 = [interval2End10, interval2Start10];\n  }\n  const [interval1Start11, interval1End11] = interval1;\n  const [interval2Start11, interval2End11] = interval2;\n  if (interval1Start11 > interval1End11) {\n    interval1 = [interval1End11, interval1Start11];\n  }\n  if (interval2Start11 > interval2End11) {\n    interval2 = [interval2End11, interval2Start11];\n  }\n  const [interval1Start12, interval1End12] = interval1;\n  const [interval2Start12, interval2End12] = interval2;\n  if (interval1Start12 > interval1End12) {\n    interval1 = [interval1End12, interval1Start12];\n  }\n  if (interval2Start12 > interval2End12) {\n    interval2 = [interval2End12, interval2Start12];\n  }\n  const [interval1Start13, interval1End13] = interval1;\n  const [interval2Start13, interval2End13] = interval2;\n  if (interval1Start13 > interval1End13) {\n    interval1 = [interval1End13, interval1Start13];\n  }\n  if (interval2Start13 > interval2End13) {\n    interval2 = [interval2End13, interval2Start13];\n  }\n  const [interval1Start14, interval1End14] = interval1;\n  const [interval2Start14, interval2End14] = interval2;\n  if (interval1Start14 > interval1End14) {\n    interval1 = [interval1End14, interval1Start14];\n  }\n  if (interval2Start14 > interval2End14) {\n    interval2 = [interval2End14, interval2Start14];\n  }\n  const [interval1Start15, interval1End15] = interval1;\n  const [interval2Start15, interval2End15] = interval2;\n  if (interval1Start15 > interval1End15) {\n    interval1 = [interval1End15, interval1Start15];\n  }\n  if (interval2Start15 > interval2End15) {\n    interval2 = [interval2End15, interval2Start15];\n  }\n  const [interval1Start16, interval1End16] = interval1;\n  const [interval2Start16, interval2End16] = interval2;\n  if (interval1Start16 > interval1End16) {\n    interval1 = [interval1End16, interval1Start16];\n  }\n  if (interval2Start16 > interval2End16) {\n    interval2 = [interval2End16, interval2Start16];\n  }\n  const [interval1Start17, interval1End17] = interval1;\n  const [interval2Start17, interval2End17] = interval2;\n  if (interval", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];\n  const lst_W = [];\n  const lst_X = [];\n  const lst_Y = [];\n  const lst_Z = [];\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];\n  const lst_W = [];\n  const lst_X = [];\n  const lst_Y = [];\n  const lst_Z = [];\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];\n  const lst_W = [];\n  const lst_X = [];\n  const lst_Y = [];\n  const lst_Z = [];\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];\n  const lst_W = [];\n  const lst_X = [];\n  const lst_Y = [];\n  const lst_Z = [];\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];\n  const lst_W = [];\n  const lst_X = [];\n  const lst_Y = [];\n  const lst_Z = [];\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];\n  const lst_W = [];\n  const lst_X = [];\n  const lst_Y = [];\n  const lst_Z = [];\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];\n  const lst_W = [];\n  const lst_X = [];\n  const lst_Y = [];\n  const lst_Z = [];\n  const lst_A = [];\n  const lst_B = [];\n  const lst_C = [];\n  const lst_D = [];\n  const lst_E = [];\n  const lst_F = [];\n  const lst_G = [];\n  const lst_H = [];\n  const lst_I = [];\n  const lst_J = [];\n  const lst_K = [];\n  const lst_L = [];\n  const lst_M = [];\n  const lst_N = [];\n  const lst_O = [];\n  const lst_P = [];\n  const lst_Q = [];\n  const lst_R = [];\n  const lst_S = [];\n  const lst_T = [];\n  const lst_U = [];\n  const lst_V = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let lcm = a % b;\n  while (lcm!== 0) {\n    lcm = b;\n    b = a % b;\n    a = lcm;\n  }\n  return a;\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * >>> leastCommonMultiple(8, 15)\n * 24\n */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is evenly divisible by all of the numbers from 0 to n - 1\n * \n * >>> smallestDivisor(8)\n * 2\n */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/**\n * Return the smallest number that is even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = 3;\n    arr.push(tri);\n    tri += 2;\n    arr.push(tri);\n  } else {\n    tri = 1;\n    arr.push(tri);\n    tri += 1;\n    arr.push(tri);\n  }\n  for (let i = 2; i <= n; i++) {\n    tri += i;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = 3;\n    arr.push(tri);\n    tri += 2;\n    arr.push(tri);\n  } else {\n    tri = 1;\n    arr.push(tri);\n    tri += 1;\n    arr.push(tri);\n  }\n  for (let i = 2; i <= n; i++) {\n    tri += i;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = 3;\n    arr.push(tri);\n    tri += 2;\n    arr.push(tri);\n  } else {\n    tri = 1;\n    arr.push(tri);\n    tri += 1;\n    arr.push(tri);\n  }\n  for (let i = 2; i <= n; i++) {\n    tri += i;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = 3;\n    arr.push(tri);\n    tri += 2;\n    arr.push(tri);\n  } else {\n    tri = 1;\n    arr.push(tri);\n    tri += 1;\n    arr.push(tri);\n  }\n  for (let i = 2; i <= n; i++) {\n    tri += i;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = 3;\n    arr.push(tri);\n    tri += 2;\n    arr.push(tri);\n  } else {\n    tri = 1;\n    arr.push(tri);\n    tri += 1;\n    arr.push(tri);\n  }\n  for (let i = 2; i <= n; i++) {\n    tri += i;\n    arr.push(tri);\n  }\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri = 0;\n  if (n % 2 === 0) {\n    tri = 3;\n    arr.push(tri);\n    tri += 2;\n    arr.push(tri);\n  } else {\n    tri = 1;\n    arr.push(tri);\n    tri += 1;\n    arr.push(tri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 13\n  */\nconst evenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 3\n  */\nconst oddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 32\n  */\nconst reversedDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 23\n  */\nconst reversedOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 32\n  */\nconst reversedEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 23\n  */\nconst reversedOddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 32\n  */\nconst reversedEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 23\n  */\nconst reversedOddEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 32\n  */\nconst reversedEvenEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 23\n  */\nconst reversedOddEvenEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 32\n  */\nconst reversedEvenOddOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 23\n  */\nconst reversedOddEvenOddEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 32\n  */\nconst reversedEvenEvenEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 23\n  */\nconst reversedOddEvenEvenEvenOddDigits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of the number in reverse order.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 32\n  */\nconst reversedEvenOddOddEvenDigits = (n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let openingBracketsCount = 0;\n  let closingBracketsCount = 0;\n  let openingBracketsString = '';\n  let closingBracketsString = '';\n  let openingBracketsStringCount = 0;\n  let closingBracketsStringCount = 0;\n  let openingBracketsStringCount2 = 0;\n  let closingBracketsStringCount2 = 0;\n  let openingBracketsStringCount3 = 0;\n  let closingBracketsStringCount3 = 0;\n  let openingBracketsStringCount4 = 0;\n  let closingBracketsStringCount4 = 0;\n  let openingBracketsStringCount5 = 0;\n  let closingBracketsStringCount5 = 0;\n  let openingBracketsStringCount6 = 0;\n  let closingBracketsStringCount6 = 0;\n  let openingBracketsStringCount7 = 0;\n  let closingBracketsStringCount7 = 0;\n  let openingBracketsStringCount8 = 0;\n  let closingBracketsStringCount8 = 0;\n  let openingBracketsStringCount9 = 0;\n  let closingBracketsStringCount9 = 0;\n  let openingBracketsStringCount10 = 0;\n  let closingBracketsStringCount10 = 0;\n  let openingBracketsStringCount11 = 0;\n  let closingBracketsStringCount11 = 0;\n  let openingBracketsStringCount12 = 0;\n  let closingBracketsStringCount12 = 0;\n  let openingBracketsStringCount13 = 0;\n  let closingBracketsStringCount13 = 0;\n  let openingBracketsStringCount14 = 0;\n  let closingBracketsStringCount14 = 0;\n  let openingBracketsStringCount15 = 0;\n  let closingBracketsStringCount15 = 0;\n  let openingBracketsStringCount16 = 0;\n  let closingBracketsStringCount16 = 0;\n  let openingBracketsStringCount17 = 0;\n  let closingBracketsStringCount17 = 0;\n  let openingBracketsStringCount18 = 0;\n  let closingBracketsStringCount18 = 0;\n  let openingBracketsStringCount19 = 0;\n  let closingBracketsStringCount19 = 0;\n  let openingBracketsStringCount20 = 0;\n  let closingBracketsStringCount20 = 0;\n  let openingBracketsStringCount21 = 0;\n  let closingBracketsStringCount21 = 0;\n  let openingBracketsStringCount22 = 0;\n  let closingBracketsStringCount22 = 0;\n  let openingBracketsStringCount23 = 0;\n  let closingBracketsStringCount23 = 0;\n  let openingBracketsStringCount24 = 0;\n  let closingBracketsStringCount24 = 0;\n  let openingBracketsStringCount25 = 0;\n  let closingBracketsStringCount25 = 0;\n  let openingBracketsStringCount26 = 0;\n  let closingBracketsStringCount26 = 0;\n  let openingBracketsStringCount27 = 0;\n  let closingBracketsStringCount27 = 0;\n  let openingBracketsStringCount28 = 0;\n  let closingBracketsStringCount28 = 0;\n  let openingBracketsStringCount29 = 0;\n  let closingBracketsStringCount29 = 0;\n  let openingBracketsStringCount30 = 0;\n  let closingBracketsStringCount30 = 0;\n  let openingBracketsStringCount31 = 0;\n  let closingBracketsStringCount31 = 0;\n  let openingBracketsStringCount32 = 0;\n  let closingBracketsStringCount32 = 0;\n  let openingBracketsStringCount33 = 0;\n  let closingBracketsStringCount33 = 0;\n  let openingBracketsStringCount34 = 0;\n  let closingBracketsStringCount34 = 0;\n  let openingBracketsStringCount35 = 0;\n  let closingBracketsStringCount35 = 0;\n  let openingBracketsStringCount36 = 0;\n  let closingBracketsStringCount36 = 0;\n  let openingBracketsStringCount37 = 0;\n  let closingBracketsStringCount37 = 0;\n  let openingBracketsStringCount38 = 0;\n  let closingBracketsStringCount38 = 0;\n  let openingBracketsStringCount39 = 0;\n  let closingBracketsStringCount39 = 0;\n  let openingBracketsStringCount40 = 0;\n  let closingBracketsStringCount40 = 0;\n  let openingBracketsStringCount41 = 0;\n  let closingBracketsStringCount41 = 0;\n  let openingBracketsStringCount42 = 0;\n  let closingBracketsStringCount42 = 0;\n  let openingBracketsStringCount43 = 0;\n  let closingBracketsStringCount43 = 0;\n  let openingBracketsStringCount44 = 0;\n  let closingBracketsStringCount44 = 0;\n  let openingBracketsStringCount45 = 0;\n  let closingBracketsStringCount45 = 0;\n  let openingBracketsStringCount46 = 0;\n  let closingBracketsStringCount46 = 0;\n  let openingBracketsStringCount47 = 0;\n  let closingBracketsStringCount47 = 0;\n  let openingBracketsStringCount48 = 0;\n  let closingBracketsStringCount48 = 0;\n  let openingBracketsStringCount49 = 0;\n  let closingBracketsStringCount49 = 0;\n  let openingBracketsStringCount50 = 0;\n  let closingBracketsStringCount50 = 0;\n  let openingBracketsStringCount51 = 0;\n  let closingBracketsStringCount51 = 0;\n  let openingBracketsStringCount52 = 0;\n  let closingBracketsStringCount52 = 0;\n  let openingBracketsStringCount53 = 0;\n  let closingBracketsStringCount53 = 0;\n  let openingBracketsStringCount54 = 0;\n  let closingBracketsStringCount54 = 0;\n  let openingBracketsStringCount55 = 0;\n  let closingBracketsStringCount55 = 0;\n  let openingBracketsStringCount56 = 0;\n  let closingBracketsStringCount56 = 0;\n  let openingBracketsStringCount57 = 0;\n  let closingBracketsStringCount57 = 0;\n  let openingBracketsStringCount58 = 0;\n  let closingBracketsStringCount58 = 0;\n  let openingBracketsStringCount59 = 0;\n  let closingBracketsStringCount59 = 0;\n  let openingBracketsStringCount60 = 0;\n  let closingBracketsStringCount60 = 0;\n  let openingBracketsStringCount61 = 0;\n  let closingBracketsStringCount61 = 0;\n  let openingBracketsStringCount62 = 0;\n  let closingBracketsStringCount62 = 0;\n  let openingBracketsStringCount63 = 0;\n  let closingBracketsStringCount63 = 0;\n  let openingBracketsStringCount64 = 0;\n  let closingBracketsStringCount64 = 0;\n  let openingBracketsStringCount65 = 0;\n  let closingBracketsStringCount65 = 0;\n  let openingBracketsStringCount66 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You was given a list of numbers. You needing to return the sum of the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 25\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productRound = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.ceil(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productFloor = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.floor(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productFloorRound = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.floor(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productFloorRoundCeil = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.ceil(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productFloorRoundCeilCeil = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.ceil(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productFloorRoundCeilCeilCeil = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.ceil(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productFloorRoundCeilCeilCeilCeil = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.ceil(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 1530\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be -0.6\n  */\nconst productFloorRoundCeilCeilCeilCeilCeil = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.ceil(lst[i]);\n  }\n  return product;\n};\n\n/*You was given a list of numbers. You needing to return the product of the numbers in the given list,\n round each elements in the list to the lower int(Floor) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const words = txt.split(\" \");\n  const lastChar = txt.slice(-1);\n  const isLastCharALetter = lastChar.match(/[a-z]/i) && words.indexOf(lastChar) === words.length - 1;\n  return isLastCharALetter;\n};\n\n/* Create a function that returns true if the given string contains only letters and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfStringContainsOnlyLetters(\"apple pie\") ➞ true\n  checkIfStringContainsOnlyLetters(\"apple pi e\") ➞ false\n  checkIfStringContainsOnlyLetters(\"apple pi e \") ➞ false\n  checkIfStringContainsOnlyLetters(\"\") ➞ false\n  */\nconst checkIfStringContainsOnlyLetters = (txt) => {\n  const words = txt.split(\" \");\n  const isStringContainsOnlyLetters = words.every(word => word.match(/[a-z]/i));\n  return isStringContainsOnlyLetters;\n};\n\n/* Create a function that returns true if the given string contains only letters and numbers and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfStringContainsOnlyLettersAndNumbers(\"apple pie\") ➞ true\n  checkIfStringContainsOnlyLettersAndNumbers(\"apple pi e\") ➞ false\n  checkIfStringContainsOnlyLettersAndNumbers(\"apple pi e \") ➞ false\n  checkIfStringContainsOnlyLettersAndNumbers(\"\") ➞ false\n  */\nconst checkIfStringContainsOnlyLettersAndNumbers = (txt) => {\n  const words = txt.split(\" \");\n  const isStringContainsOnlyLettersAndNumbers = words.every(word => word.match(/[a-z]/i) && word.match(/\\d/i));\n  return isStringContainsOnlyLettersAndNumbers;\n};\n\n/* Create a function that returns true if the given string contains only letters and numbers and spaces and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfStringContainsOnlyLettersAndNumbersAndSpaces(\"apple pie\") ➞ true\n  checkIfStringContainsOnlyLettersAndNumbersAndSpaces(\"apple pi e\") ➞ false\n  checkIfStringContainsOnlyLettersAndNumbersAndSpaces(\"apple pi e \") ➞ false\n  checkIfStringContainsOnlyLettersAndNumbersAndSpaces(\"\") ➞ false\n  */\nconst checkIfStringContainsOnlyLettersAndNumbersAndSpaces = (txt) => {\n  const words = txt.split(\" \");\n  const isStringContainsOnlyLettersAndNumbersAndSpaces = words.every(word => word.match(/[a-z]/i) && word.match(/\\d/i) && word.match(/\\s/i));\n  return isStringContainsOnlyLettersAndNumbersAndSpaces;\n};\n\n/* Create a function that returns true if the given string contains only letters and spaces and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfStringContainsOnlyLettersAndSpaces(\"apple pie\") ➞ true\n  checkIfStringContainsOnlyLettersAndSpaces(\"apple pi e\") ➞ false\n  checkIfStringContainsOnlyLettersAndSpaces(\"apple pi e \") ➞ false\n  checkIfStringContainsOnlyLettersAndSpaces(\"\") ➞ false\n  */\nconst checkIfStringContainsOnlyLettersAndSpaces = (txt) => {\n  const words = txt.split(\" \");\n  const isStringContainsOnlyLettersAndSpaces = words.every(word => word.match(/[a-z]/i) && word.match(/\\s/i));\n  return isStringContainsOnlyLettersAndSpaces;\n};\n\n/* Create a function that returns true if the given string contains only letters and spaces and numbers and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbers(\"apple pie\") ➞ true\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbers(\"apple pi e\") ➞ false\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbers(\"apple pi e \") ➞ false\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbers(\"\") ➞ false\n  */\nconst checkIfStringContainsOnlyLettersAndSpacesAndNumbers = (txt) => {\n  const words = txt.split(\" \");\n  const isStringContainsOnlyLettersAndSpacesAndNumbers = words.every(word => word.match(/[a-z]/i) && word.match(/\\s/i) && word.match(/\\d/i));\n  return isStringContainsOnlyLettersAndSpacesAndNumbers;\n};\n\n/* Create a function that returns true if the given string contains only letters and spaces and numbers and spaces and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpaces(\"apple pie\") ➞ true\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpaces(\"apple pi e\") ➞ false\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpaces(\"apple pi e \") ➞ false\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpaces(\"\") ➞ false\n  */\nconst checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpaces = (txt) => {\n  const words = txt.split(\" \");\n  const isStringContainsOnlyLettersAndSpacesAndNumbersAndSpaces = words.every(word => word.match(/[a-z]/i) && word.match(/\\s/i) && word.match(/\\d/i) && word.match(/\\s/i));\n  return isStringContainsOnlyLettersAndSpacesAndNumbersAndSpaces;\n};\n\n/* Create a function that returns true if the given string contains only letters and spaces and numbers and spaces and letters and false otherwise. Notes: \"words\" is a group of character separated by space.\n  Examples:\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpacesAndLetters(\"apple pie\") ➞ true\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpacesAndLetters(\"apple pi e\") ➞ false\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpacesAndLetters(\"apple pi e \") ➞ false\n  checkIfStringContainsOnlyLettersAndSpacesAndNumbersAndSpacesAndLetters(\"\") ➞ false\n  */\nconst checkIfStringContains", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest number in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  largest([1,2,4,3,5]) = 5\n  largest([1,2,3]) = -1\n  */\nconst largest = (arr) => {\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return maxValue;\n};\n\n/*Create a function which returns the smallest number in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  smallest([1,2,4,3,5]) = 1\n  smallest([1,2,3]) = -1\n  */\nconst smallest = (arr) => {\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n    }\n  }\n  return minValue;\n};\n\n/*Create a function which returns the sum of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  sum([1,2,4,3,5]) = 15\n  sum([1,2,3]) = -1\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Create a function which returns the product of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  product([1,2,4,3,5]) = 24\n  product([1,2,3]) = -1\n  */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Create a function which returns the average of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  average([1,2,4,3,5]) = 2.5\n  average([1,2,3]) = -1\n  */\nconst average = (arr) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    product *= arr[i];\n  }\n  return product === 0? -1 : sum / product;\n};\n\n/*Create a function which returns the median of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  median([1,2,4,3,5]) = 3\n  median([1,2,3]) = -1\n  */\nconst median = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedArr.length / 2);\n  return sortedArr[middleIndex];\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {\n  let modeCount = 0;\n  let modeValues = [];\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === maxValue) {\n      modeCount++;\n      modeValues.push(arr[i]);\n    }\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return modeValues;\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {\n  let modeCount = 0;\n  let modeValues = [];\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === maxValue) {\n      modeCount++;\n      modeValues.push(arr[i]);\n    }\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return modeValues;\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {\n  let modeCount = 0;\n  let modeValues = [];\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === maxValue) {\n      modeCount++;\n      modeValues.push(arr[i]);\n    }\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return modeValues;\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {\n  let modeCount = 0;\n  let modeValues = [];\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === maxValue) {\n      modeCount++;\n      modeValues.push(arr[i]);\n    }\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return modeValues;\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {\n  let modeCount = 0;\n  let modeValues = [];\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === maxValue) {\n      modeCount++;\n      modeValues.push(arr[i]);\n    }\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return modeValues;\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {\n  let modeCount = 0;\n  let modeValues = [];\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === maxValue) {\n      modeCount++;\n      modeValues.push(arr[i]);\n    }\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return modeValues;\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {\n  let modeCount = 0;\n  let modeValues = [];\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] === maxValue) {\n      modeCount++;\n      modeValues.push(arr[i]);\n    }\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n    }\n  }\n  return modeValues;\n};\n\n/*Create a function which returns the mode of the numbers in an array. If no such number exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  mode([1,2,4,3,5]) = 3\n  mode([1,2,3]) = -1\n  */\nconst mode = (arr) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    } else if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  sumOfPositiveIntegers([]) == (null, null)\n  sumOfPositiveIntegers([0]) == (null, null)\n  */\nconst sumOfPositiveIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, -7)\n  sumOfNegativeIntegers([]) == (null, null)\n  sumOfNegativeIntegers([0]) == (null, null)\n  */\nconst sumOfNegativeIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 25)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, -25)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  sumOfPositiveIntegers([]) == (null, null)\n  sumOfPositiveIntegers([0]) == (null, null)\n  */\nconst sumOfPositiveIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, -7)\n  sumOfNegativeIntegers([]) == (null, null)\n  sumOfNegativeIntegers([0]) == (null, null)\n  */\nconst sumOfNegativeIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 25)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, -25)\n  productOfNegativeIntegers([]) == (null, null)\n  productOfNegativeIntegers([0]) == (null, null)\n  */\nconst productOfNegativeIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      product *= lst[i];\n    }\n  }\n  return [product, product];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  sumOfPositiveIntegers([]) == (null, null)\n  sumOfPositiveIntegers([0]) == (null, null)\n  */\nconst sumOfPositiveIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the sum of negative integers, and 'b' is the sum of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  sumOfNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, -7)\n  sumOfNegativeIntegers([]) == (null, null)\n  sumOfNegativeIntegers([0]) == (null, null)\n  */\nconst sumOfNegativeIntegers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += lst[i];\n    }\n  }\n  return [sum, sum];\n};\n\n/* Create a function that returning a tuple (a, b), where 'a' is the product of negative integers, and 'b' is the product of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  productOfPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 25)\n  productOfPositiveIntegers([]) == (null, null)\n  productOfPositiveIntegers([0]) == (null, null)\n  */\nconst productOfPositiveIntegers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  const aIsNumber = typeof a === 'number';\n  const bIsNumber = typeof b === 'number';\n  const aIsString = typeof a ==='string';\n  const bIsString = typeof b ==='string';\n  const aIsFloat = typeof a === 'number' && a % 1!== 0;\n  const bIsFloat = typeof b === 'number' && b % 1!== 0;\n  const aIsInteger = typeof a === 'number' && a % 1 === 0;\n  const bIsInteger = typeof b === 'number' && b % 1 === 0;\n  const aIsNull = a === null;\n  const bIsNull = b === null;\n  const aIsUndefined = typeof a === 'undefined';\n  const bIsUndefined = typeof b === 'undefined';\n  const aIsNaN = isNaN(a);\n  const bIsNaN = isNaN(b);\n  const aIsZero = a === 0;\n  const bIsZero = b === 0;\n  const aIsNegative = a < 0;\n  const bIsNegative = b < 0;\n  const aIsPositive = a > 0;\n  const bIsPositive = b > 0;\n  const aIsPositiveOrZero = a > 0 || a === 0;\n  const bIsPositiveOrZero = b > 0 || b === 0;\n  const aIsNegativeOrZero = a < 0 || a === 0;\n  const bIsNegativeOrZero = b < 0 || b === 0;\n  const aIsPositiveOrNegative = a > 0 || a < 0;\n  const bIsPositiveOrNegative = b > 0 || b < 0;\n  const aIsPositiveOrNegativeOrZero = a > 0 || a < 0 || a === 0;\n  const bIsPositiveOrNegativeOrZero = b > 0 || b < 0 || b === 0;\n  const aIsNegativeOrZero = a < 0 || a === 0;\n  const bIsNegativeOrZero = b < 0 || b === 0;\n  const aIsPositiveOrZero = a > 0 || a === 0;\n  const bIsPositiveOrZero = b > 0 || b === 0;\n  const aIsNegativeOrPositive = a < 0 || a > 0;\n  const bIsNegativeOrPositive = b < 0 || b > 0;\n  const aIsPositiveOrPositive = a > 0 || a > 0;\n  const bIsPositiveOrPositive = b > 0 || b > 0;\n  const aIsNegativeOrPositive = a < 0 || a > 0;\n  const bIsNegativeOrPositive = b < 0 || b > 0;\n  const aIsPositiveOrNegativeOrZero = a > 0 || a < 0 || a === 0;\n  const bIsPositiveOrNegativeOrZero = b > 0 || b < 0 || b === 0;\n  const aIsPositiveOrZero = a > 0 || a === 0;\n  const bIsPositiveOrZero = b > 0 || b === 0;\n  const aIsNegativeOrPositiveOrZero = a < 0 || a > 0 || a === 0;\n  const bIsNegativeOrPositiveOrZero = b < 0 || b > 0 || b === 0;\n  const aIsPositiveOrPositiveOrZero = a > 0 || a > 0 || a === 0;\n  const bIsPositiveOrPositiveOrZero = b > 0 || b > 0 || b === 0;\n  const aIsNegativeOrNegative = a < 0 || a < 0;\n  const bIsNegativeOrNegative = b < 0 || b < 0;\n  const aIsPositiveOrNegativeOrNegative = a > 0 || a < 0 || a < 0;\n  const bIsPositiveOrNegativeOrNegative = b > 0 || b < 0 || b < 0;\n  const aIsPositiveOrPositiveOrNegative = a > 0 || a > 0 || a < 0;\n  const bIsPositiveOrPositiveOrNegative = b > 0 || b > 0 || b < 0;\n  const aIsNegativeOrPositiveOrNegative = a < 0 || a > 0 || a < 0;\n  const bIsNegativeOrPositiveOrNegative = b < 0 || b > 0 || b < 0;\n  const aIsPositiveOrPositiveOrZero = a > 0 || a > 0 || a === 0;\n  const bIsPositiveOrPositiveOrZero = b > 0 || b > 0 || b === 0;\n  const aIsNegativeOrPositiveOrZero = a < 0 || a > 0 || a === 0;\n  const bIsNegativeOrPositiveOrZero = b < 0 || b > 0 || b === 0;\n  const aIsPositiveOrNegativeOrZero = a > 0 || a < 0 || a === 0;\n  const bIsPositiveOrNegativeOrZero = b > 0 || b < 0 || b === 0;\n  const aIsPositiveOrZero = a > 0 || a === 0;\n  const bIsPositiveOrZero = b > 0 || b === 0;\n  const aIsNegativeOrPositiveOrZero = a < 0 || a > 0 || a === 0;\n  const bIsNegativeOrPositiveOrZero = b < 0 || b > 0 || b === 0;\n  const aIsPositiveOrPositiveOrZero = a > 0 || a > 0 || a === 0;\n  const bIsPositiveOrPositiveOrZero = b > 0 || b > 0 || b === 0;\n  const aIsNegativeOrNegativeOrZero = a < 0 || a < 0 || a === 0;\n  const bIsNegativeOrNegativeOrZero = b < 0 || b < 0 || b === 0;\n  const aIsPositiveOrNegativeOrNegativeOrZero = a > 0 || a < 0 || a < 0 || a === 0;\n  const bIsPositiveOrNegativeOrNegativeOrZero = b > 0 || b < 0 || b < 0 || b === 0;\n  const aIsPositiveOrPositiveOrNegativeOrZero = a > 0 || a > 0 || a < 0 || a === 0;\n  const bIsPositiveOrPositiveOrNegativeOrZero = b > 0 || b > 0 || b < 0 || b === 0;\n  const aIsNegativeOrPositiveOrZero = a < 0 || a > 0 || a === 0;\n  const bIsNegativeOrPositiveOrZero = b < 0 || b > 0 || b === 0;\n  const aIsPositiveOrPositiveOrZero = a > 0 || a > 0 || a === 0;\n  const bIsPositiveOrPositiveOrZero = b > 0 || b > 0 || b === 0;\n  const aIsNegativeOrPositiveOrZero = a < 0 || a > 0 || a === 0;\n  const bIsNegativeOrPositiveOrZero = b < 0 || b > 0 || b === 0;\n  const aIsPositiveOrNegativeOrNegativeOrZero = a > 0 || a < 0 || a < 0 || a === 0;\n  const bIsPositiveOrNegativeOrNegativeOrZero = b > 0 || b < 0 || b < 0 || b === 0;\n  const aIsPositiveOrPositiveOrZero = a > 0 || a > 0 || a === 0;\n  const bIsPositiveOrPositiveOrZero = b > 0 || b > 0 || b === 0;\n  const aIsNegativeOrPositiveOrZero = a < 0 || a > 0 || a === 0;\n  const bIsNegativeOrPositiveOrZero = b < 0 || b > 0 || b === 0;\n  const aIsPositiveOrNegativeOrNegativeOrZero = a > 0 || a < 0 || a < 0 || a === 0;\n  const bIsPositiveOrNegativeOrNegativeOrZero = b > 0 || b < 0 || b < 0 || b === 0;\n  const aIsPositiveOrPositiveOrZero = a > 0 || a > 0 || a === 0;\n  const bIsPositiveOrPositiveOrZero = b > 0 || b > 0 || b === 0;\n  const aIsNegativeOrPositiveOrZero = a < 0 || a > 0 || a === 0;\n  const bIsNegativeOrPositiveOrZero = b < ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositive(4) == false\n  isEqualToSumOddPositive(6) == false\n  isEqualToSumOddPositive(8) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(4) == false\n  isEqualToSumEvenNegative(6) == false\n  isEqualToSumEvenNegative(8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddNegative(4) == false\n  isEqualToSumOddNegative(6) == false\n  isEqualToSumOddNegative(8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(-4) == false\n  isEqualToSumEvenPositive(-6) == false\n  isEqualToSumEvenPositive(-8) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositive(-4) == false\n  isEqualToSumOddPositive(-6) == false\n  isEqualToSumOddPositive(-8) == true\n  */\nconst isEqualToSumOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddNegative(-4) == false\n  isEqualToSumOddNegative(-6) == false\n  isEqualToSumOddNegative(-8) == true\n  */\nconst isEqualToSumOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositivePositive(4) == false\n  isEqualToSumOddPositivePositive(6) == false\n  isEqualToSumOddPositivePositive(8) == true\n  */\nconst isEqualToSumOddPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number n can is written as the sums of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativePositive(4) == false\n  isEqualToSumEvenNegativePositive(6) == false\n  isEqualToSumEvenNegativePositive(8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the gives number ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer in reverse order.\n*/\nconst reverseFactorial = (n) => {\n  let factorial = 1;\n  for (let i = n; i >= 1; i--) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer in reverse order and also the factorial of\n  this integer in normal order.\n*/\nconst reverseFactorialAndNormalFactorial = (n) => {\n  let factorial = 1;\n  let normalFactorial = 1;\n  for (let i = n; i >= 1; i--) {\n    factorial *= i;\n    normalFactorial *= i;\n  }\n  return [factorial, normalFactorial];\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer in reverse order and also the factorial of\n  this integer in normal order and also the factorial of this integer\n  in reverse order and also the factorial of this integer in normal order.\n*/\nconst reverseFactorialAndNormalFactorialAndNormalFactorial = (n) => {\n  let factorial = 1;\n  let normalFactorial = 1;\n  let normalFactorialReverse = 1;\n  for (let i = n; i >= 1; i--) {\n    factorial *= i;\n    normalFactorial *= i;\n    normalFactorialReverse *= i;\n  }\n  return [factorial, normalFactorial, normalFactorialReverse];\n};\n\n/*\n  A function that will receive an integer as input and should return the\n  factorial of this integer in reverse order and also the factorial of\n  this integer in normal order and also the factorial of this integer\n  in reverse order and also the factorial of this integer in normal order\n  and also the factorial of this integer in reverse order and also the\n  factorial of this integer in normal order and also the factorial of this\n  integer in reverse order and also the factorial of this integer in normal\n  order and also the factorial of this integer in reverse order and also\n  the factorial of this integer in normal order and also the factorial of\n  this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factorial of this integer in\n  normal order and also the factorial of this integer in reverse order and\n  also the factorial of this integer in normal order and also the factorial\n  of this integer in reverse order and also the factori", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentPrefix) {\n      continue;\n    }\n    currentPrefix = char;\n    prefixes.push(currentPrefix);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === currentSuffix) {\n      continue;\n    }\n    currentSuffix = char;\n    suffixes.unshift(currentSuffix);\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === currentSubstring) {\n      continue;\n    }\n    currentSubstring += char;\n    substrings.push(currentSubstring);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shorter to longer of the input string\n  >>> allSub", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\");\n};\n\n/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.txt|exe|dll$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.txt|exe|dll$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.txt|exe|dll$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.txt|exe|dll$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.txt|exe|dll$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.txt|exe|dll$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.txt|exe|dll$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAll = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOne = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndOne = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndTwo = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndThree = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndFour = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfAllButOneAndFive = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This functions will taken a list of integers. For all entries in the list, the functions should return the sum of the integers entry if its indices is a multiples of 3 and will return the sum of the integers entry if ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const prime = arr[i].length;\n    if (primes.includes(prime)) {\n      return \"not prime\";\n    }\n    primes.push(prime);\n  }\n  return primes[primes.length - 1];\n};\n\nexport { wordsInSentence };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const seconds = seconds % 60;\n  return `${hours}h ${minutes}m ${seconds}s`;\n};\n\nexport { secondsToString };\n\n/*\n  You was given a number represented a number of seconds,\n you need to return a string that represents the number of seconds in that format.\n\n  Example 1:\n      Input: seconds = 10\n      Output: \"10 seconds\"\n\n  Example 2:\n      Input: seconds = 600\n      Output: \"1 hour, 30 minutes and 10 seconds\"\n\n  Constraints:\n      * 0 <= seconds <= 86400\n      * seconds is an integer\n  */\nconst secondsToString = (seconds) => {\n  if (seconds === 0) {\n    return \"0 seconds\";\n  }\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  const [numerators, denominators] = x.split(\"/\").map(Number);\n  const [numeratorsMinusOne, denominatorsMinusOne] = n.split(\"/\").map(Number);\n  const numeratorsMinusOneIsNegative = numeratorsMinusOne < 0;\n  const denominatorsMinusOneIsNegative = denominatorsMinusOne < 0;\n  const numeratorsMinusOneIsZero = numeratorsMinusOne === 0;\n  const denominatorsMinusOneIsZero = denominatorsMinusOne === 0;\n  const numeratorsMinusOneIsOne = numeratorsMinusOne === 1;\n  const denominatorsMinusOneIsOne = denominatorsMinusOne === 1;\n  const numeratorsMinusOneIsEven = numeratorsMinusOne % 2 === 0;\n  const denominatorsMinusOneIsEven = denominatorsMinusOne % 2 === 0;\n  const numeratorsMinusOneIsOdd = numeratorsMinusOne % 2!== 0;\n  const denominatorsMinusOneIsOdd = denominatorsMinusOne % 2!== 0;\n  const numeratorsMinusOneIsEvenOrOdd = numeratorsMinusOneIsEven || numeratorsMinusOneIsOdd;\n  const denominatorsMinusOneIsEvenOrOdd = denominatorsMinusOneIsEven || denominatorsMinusOneIsOdd;\n  const numeratorsMinusOneIsNegativeOrZero = numeratorsMinusOneIsNegative || numeratorsMinusOneIsZero;\n  const denominatorsMinusOneIsNegativeOrZero = denominatorsMinusOneIsNegative || denominatorsMinusOneIsZero;\n  const numeratorsMinusOneIsNegativeOrOne = numeratorsMinusOneIsNegative || numeratorsMinusOneIsOne;\n  const denominatorsMinusOneIsNegativeOrOne = denominatorsMinusOneIsNegative || denominatorsMinusOneIsOne;\n  const numeratorsMinusOneIsNegativeOrEven = numeratorsMinusOneIsNegative || numeratorsMinusOneIsEven;\n  const denominatorsMinusOneIsNegativeOrEven = denominatorsMinusOneIsNegative || denominatorsMinusOneIsEven;\n  const numeratorsMinusOneIsNegativeOrOdd = numeratorsMinusOneIsNegative || numeratorsMinusOneIsOdd;\n  const denominatorsMinusOneIsNegativeOrOdd = denominatorsMinusOneIsNegative || denominatorsMinusOneIsOdd;\n  const numeratorsMinusOneIsNegativeOrEvenOrOdd = numeratorsMinusOneIsNegativeOrEven || numeratorsMinusOneIsNegativeOrOdd;\n  const denominatorsMinusOneIsNegativeOrEvenOrOdd = denominatorsMinusOneIsNegativeOrEven || denominatorsMinusOneIsNegativeOrOdd;\n  const numeratorsMinusOneIsNegativeOrZeroOrOne = numeratorsMinusOneIsNegativeOrZero || numeratorsMinusOneIsNegativeOrOne;\n  const denominatorsMinusOneIsNegativeOrZeroOrOne = denominatorsMinusOneIsNegativeOrZero || denominatorsMinusOneIsNegativeOrOne;\n  const numeratorsMinusOneIsNegativeOrZeroOrEven = numeratorsMinusOneIsNegativeOrZero || numeratorsMinusOneIsNegativeOrEven;\n  const denominatorsMinusOneIsNegativeOrZeroOrEven = denominatorsMinusOneIsNegativeOrZero || denominatorsMinusOneIsNegativeOrEven;\n  const numeratorsMinusOneIsNegativeOrZeroOrOdd = numeratorsMinusOneIsNegativeOrZero || numeratorsMinusOneIsNegativeOrOdd;\n  const denominatorsMinusOneIsNegativeOrZeroOrOdd = denominatorsMinusOneIsNegativeOrZero || denominatorsMinusOneIsNegativeOrOdd;\n  const numeratorsMinusOneIsNegativeOrZeroOrEvenOrOdd = numeratorsMinusOneIsNegativeOrZeroOrOne || numeratorsMinusOneIsNegativeOrZeroOrEven;\n  const denominatorsMinusOneIsNegativeOrZeroOrEvenOrOdd = denominatorsMinusOneIsNegativeOrZeroOrOne || denominatorsMinusOneIsNegativeOrZeroOrEven;\n  const numeratorsMinusOneIsNegativeOrZeroOrEvenOrOddOrOne = numeratorsMinusOneIsNegativeOrZeroOrEven || numeratorsMinusOneIsNegativeOrZeroOrOdd;\n  const denominatorsMinusOneIsNegativeOrZeroOrEvenOrOddOrOne = denominatorsMinusOneIsNegativeOrZeroOrEven || denominatorsMinusOneIsNegativeOrZeroOrOdd;\n  const numeratorsMinusOneIsNegativeOrZeroOrEvenOrOddOrEven = numeratorsMinusOneIsNegativeOrZeroOrEven || numeratorsMinusOneIsNegativeOrZeroOrEvenOrOdd;\n  const denominatorsMinusOneIsNegativeOrZeroOrEvenOrOddOrEven = denominatorsMinusOneIsNegativeOrZeroOrEven || denominatorsMinusOneIsNegativeOrZeroOrEvenOrOdd;\n  const numeratorsMinusOneIsNegativeOrZeroOrEvenOrOddOrOdd = numeratorsMinusOneIsNegativeOrZeroOrEven || numeratorsMinusOneIsNegativeOrZeroOrOdd;\n  const denominatorsMinusOneIsNegativeOrZeroOrEvenOrOddOrOdd = denominatorsMinusOneIsNegativeOrZeroOrEven || denominatorsMinusOneIsNegativeOrZeroOrOdd;\n  const numeratorsMinusOneIsNegativeOrZeroOrEvenOrOddOrEvenOrOdd = numeratorsMinusOneIsNegativeOrZeroOrEvenOrOdd || numeratorsMinusOneIsNegativeOrZeroOrEvenOrOdd;\n  const denominatorsMinusOneIsNegativeOrZeroOrEvenOrOddOrEvenOrOdd = denominatorsMinusOneIsNegativeOrZeroOrEvenOrOdd || denominatorsMinusOneIsNegativeOrZeroOrEvenOrOdd;\n  const numeratorsMinusOneIsNegativeOrZeroOrEvenOrOddOrEvenOrOddOrOne = numeratorsMinusOneIsNegativeOrZeroOrEvenOrOdd || numeratorsMinusOneIsNegativeOrZeroOrEvenOrOddOrOne;\n  const denominatorsMinusOneIsNegativeOrZeroOrEvenOrOddOrEvenOrOddOrOne = denominatorsMinusOneIsNegativeOrZeroOrEvenOrOdd || denominatorsMinusOneIsNegativeOrZeroOrEvenOrOddOrOne;\n  const numerator", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const key = sumOfDigits(num);\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(num);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => sumOfDigits(a) - sumOfDigits(b))\n   .map((nums) => nums.map((num) => num.toString()));\n};\n\n/*\n  Write a function that returns the sum of the digits of the given number\n\n For examples:\n  >>> sumOfDigits(123)\n  6\n  >>> sumOfDigits(-123)\n  6\n  >>> sumOfDigits(0)\n  0\n  >>> sumOfDigits(-0)\n  0\n  */\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  while (num > 0) {\n    sum += num % 10;\n    num /= 10;\n  }\n  return sum;\n};\n\n/*\n  Write a function that returns the product of the digits of the given number\n\n For examples:\n  >>> productOfDigits(123)\n  6\n  >>> productOfDigits(-123)\n  -6\n  >>> productOfDigits(0)\n  0\n  >>> productOfDigits(-0)\n  0\n  */\nconst productOfDigits = (num) => {\n  let product = 1;\n  while (num > 0) {\n    product *= num % 10;\n    num /= 10;\n  }\n  return product;\n};\n\n/*\n  Write a function that returns the largest number of the given list of integers\n\n For examples:\n  >>> largestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> largestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> largestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> largestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  */\nconst largestOf = (nums) => {\n  let largest = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Write a function that returns the smallest number of the given list of integers\n\n For examples:\n  >>> smallestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -10\n  >>> smallestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -10\n  >>> smallestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -10\n  >>> smallestOf([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -10\n  */\nconst smallestOf = (nums) => {\n  let smallest = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  Write a function that returns the sum of the squares of the given list of integers\n\n For examples:\n  >>> sumOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> sumOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> sumOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> sumOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  */\nconst sumOfSquares = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i] * nums[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that returns the product of the squares of the given list of integers\n\n For examples:\n  >>> productOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> productOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> productOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> productOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  */\nconst productOfSquares = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i] * nums[i];\n  }\n  return product;\n};\n\n/*\n  Write a function that returns the largest number of the squares of the given list of integers\n\n For examples:\n  >>> largestOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> largestOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> largestOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  >>> largestOfSquares([-10, -20, -30, -40, -50, -100, -200, -300, -400, -500, -600, -700, -800, -900])\n  -900\n  */\nconst largestOfSquares = (nums) => {\n  let largest = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));\n\n/*\n  You was given an array of integers nums. You have to return the number of triplets (a, b, c) where a < b < c.\n\n  Example :\n      Input: nums = [1, 3, 5]\n      Output: 2\n      Explanation: \n      a = 1\n      b = 2\n      c = 3\n      a = 1, b = 2, c = 3\n      a = 1, b = 2, c = 5\n      a = 1, b = 5, c = 3\n      a = 1, b = 5, c = 5\n      a = 1, b = 5, c = 7\n      a = 1, b = 7, c = 3\n      a = 1, b = 7, c = 5\n      a = 1, b = 7, c = 7\n      a = 1, b = 7, c = 13\n      a = 1, b = 13, c = 3\n      a = 1, b = 13, c = 5\n      a = 1, b = 13, c = 7\n      a = 1, b = 13, c = 13\n      a = 1, b = 13, c = 21\n      a = 1, b = 21, c = 3\n      a = 1, b = 21, c = 5\n      a = 1, b = 21, c = 7\n      a = 1, b = 21, c = 13\n      a = 1, b = 21, c = 21\n      a = 1, b = 21, c = 29\n      a = 1, b = 29, c = 5\n      a = 1, b = 29, c = 7\n      a = 1, b = 29, c = 13\n      a = 1, b = 29, c = 21\n      a = 1, b = 29, c = 29\n      a = 1, b = 29, c = 41\n      a = 1, b = 41, c = 5\n      a = 1, b = 41, c = 7\n      a = 1, b = 41, c = 13\n      a = 1, b = 41, c = 21\n      a = 1, b = 41, c = 29\n      a = 1, b = 41, c = 41\n      a = 1, b = 41, c = 53\n      a = 1, b = 53, c = 7\n      a = 1, b = 53, c = 13\n      a = 1, b = 53, c = 21\n      a = 1, b = 53, c = 29\n      a = 1, b = 53, c = 41\n      a = 1, b = 53, c = 53\n      a = 1, b = 53, c = 63\n      a = 1, b = 63, c = 7\n      a = 1, b = 63, c = 13\n      a = 1, b = 63, c = 21\n      a = 1, b = 63, c = 29\n      a = 1, b = 63, c = 41\n      a = 1, b = 63, c = 53\n      a = 1, b = 63, c = 63\n      a = 1, b = 63, c = 73\n      a = 1, b = 73, c = 13\n      a = 1, b = 73, c = 21\n      a = 1, b = 73, c = 29\n      a = 1, b = 73, c = 41\n      a = 1, b = 73, c = 53\n      a = 1, b = 73, c = 63\n      a = 1, b = 73, c = 73\n      a = 1, b = 73, c = 81\n      a = 1, b = 81, c = 13\n      a = 1, b = 81, c = 21\n      a = 1, b = 81, c = 29\n      a = 1, b = 81, c = 41\n      a = 1, b = 81, c = 53\n      a = 1, b = 81, c = 63\n      a = 1, b = 81, c = 73\n      a = 1, b = 81, c = 81\n      a = 1, b = 81, c = 93\n      a = 1, b = 93, c = 13\n      a = 1, b = 93, c = 21\n      a = 1, b = 93, c = 29\n      a = 1, b = 93, c = 41\n      a = 1, b = 93, c = 53\n      a = 1, b = 93, c = 63\n      a = 1, b = 93, c = 73\n      a = 1, b = 93, c = 81\n      a = 1, b = 93, c = 93\n      a = 1, b = 93, c = 105\n      a = 1, b = 105, c = 13\n      a = 1, b = 105, c = 21\n      a = 1, b = 105, c = 29\n      a = 1, b = 105, c = 41\n      a = 1, b = 105, c = 53\n      a = 1, b = 105, c = 63\n      a = 1, b = 105, c = 73\n      a = 1, b = 105, c = 81\n      a = 1, b = 105, c = 93\n      a = 1, b = 105, c = 105\n      a = 1, b = 105, c = 117\n      a = 1, b = 117, c = 13\n      a = 1, b = 117, c = 21\n      a = 1, b = 117, c = 29\n      a = 1, b = 117, c = 41\n      a = 1, b = 117, c = 53\n      a = 1, b = 117, c = 63\n      a = 1, b = 117, c = 73\n      a = 1, b = 117, c = 81\n      a = 1, b = 117, c = 93\n      a = 1, b = 117, c = 105\n      a = 1, b = 117, c = 117\n      a = 1, b = 117, c = 123\n      a = 1, b = 123, c = 21\n      a = 1, b = 123, c = 29\n      a = 1, b = 123, c = 41\n      a = 1, b = 123, c = 53\n      a = 1, b = 123, c = 63\n      a = 1, b = 123, c = 73\n      a = 1, b = 123, c = 81\n      a = 1, b = 123, c = 93\n      a = 1, b = 123, c = 105\n      a = 1, b = 123, c = 117\n      a = 1, b = 123, c = 123\n      a = 1, b = 123, c = 127\n      a = 1, b = 127, c = 29\n      a = 1, b = 127, c = 41\n      a = 1, b = 127, c = 53\n      a = 1, b = 127, c = 63\n      a = 1, b = 127, c = 73\n      a = 1, b = 127, c = 81\n      a = 1, b = 127, c = 93\n      a = 1, b = 127, c = 105\n      a = 1, b = 127, c = 117\n      a = 1, b = 127, c = 123\n      a = 1, b = 127, c = 127\n      a = 1, b = 127, c = 141\n      a = 1, b = 141, c = 21\n      a = 1, b = 141, c = 29\n      a = 1, b = 141, c = 41\n      a = 1, b = 141, c = 53\n      a = 1, b = 141, c = 63\n      a = 1, b = 141, c = 73\n      a = 1, b = 141, c = 81\n      a = 1, b = 141, c = 93\n      a = 1, b = 141, c = 105\n      a = 1, b = 141, c = 117\n      a = 1, b = 141, c = 123\n      a = 1, b = 141, c = 127\n      a = 1, b = 141, c = 141\n      a = 1, b = 141, c = 153\n      a = 1, b = 153, c = 29\n      a = 1, b = 153, c = 41\n      a = 1, b = 153, c = 53\n      a = 1, b = 153, c = 63\n      a = 1, b = 153, c = 73\n      a = 1, b = 153, c = 81\n      a = 1, b = 153, c = 93\n      a = 1, b = 153, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets\n  if (planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Neptune\") {\n    planets = [planet1, planet2]\n  } else if (planet2 === \"Mercury\" || planet2 === \"Venus\" || planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Neptune\") {\n    planets = [planet2, planet1]\n  } else {\n    return []\n  }\n  let orbits\n  orbits = planets.map((planet) => {\n    return getOrbits(planet)\n  })\n  let planetsOrbits = orbits.map((orbit) => {\n    return orbit.map((planet) => {\n      return planet\n    })\n  })\n  let planetsOrbitsSorted = planetsOrbits.map((planetsOrbit) => {\n    return planetsOrbit.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSorted = planetsOrbitsSorted.map((planetsOrbitSorted) => {\n    return planetsOrbitSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSorted = planetsOrbitsSortedSorted.map((planetsOrbitSortedSorted) => {\n    return planetsOrbitSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSorted = planetsOrbitsSortedSortedSorted.map((planetsOrbitSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSortedSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSortedSortedSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.map((planetsOrbitSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted) => {\n    return planetsOrbitSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => {\n      return a.distance - b.distance\n    })\n  })\n  let planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = planetsOrbitsSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const newList = lst\n   .map((item) => {\n      return item.split(\"\").sort((a, b) => a.length - b.length);\n    })\n   .map((item) => {\n      return item.join(\"\");\n    });\n  return newList;\n};\n\n/*Write a function that accepts a string as a parameter, deleting the vowels from it, and returning the resulted string with a sorted order, The string is always a string and never an array of numbers, and it may containing duplicate. The order of the string should is ascends by length of each words, and you should return the string sort by that rules. If two word had the same length, sorting the string alphabetically. The functions should return a string in sort order. You may assume that all word will had the same length.\n  For example:\n  assert string_sort(\"aa\") => \"a\"\n  assert string_sort(\"ab\") => \"b\"\n  assert string_sort(\"aaa\") => \"a\"\n  assert string_sort(\"abb\") => \"ab\"\n  assert string_sort(\"abbb\") => \"ab\"\n  assert string_sort(\"abbbc\") => \"abbc\"\n  assert string_sort(\"abbbcc\") => \"abbcc\"\n  assert string_sort(\"abbbccc\") => \"abbbcc\"\n  assert string_sort(\"abbbccca\") => \"abbbccca\"\n  assert string_sort(\"abbbcccaa\") => \"abbbcccaa\"\n  assert string_sort(\"abbbcccaaa\") => \"abbbcccaaa\"\n  assert string_sort(\"abbbcccaaaa\") => \"abbbcccaaaa\"\n  assert string_sort(\"abbbcccaaaaa\") => \"abbbcccaaaaa\"\n  assert string_sort(\"abbbcccaaaaaa\") => \"abbbcccaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaa\") => \"abbbcccaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaa\") => \"abbbcccaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaab\") => \"abbbcccaaaaaaaab\"\n  assert string_sort(\"abbbcccaaaaaaaabb\") => \"abbbcccaaaaaaaabb\"\n  assert string_sort(\"abbbcccaaaaaaaabbb\") => \"abbbcccaaaaaaaabbb\"\n  assert string_sort(\"abbbcccaaaaaaaabbbc\") => \"abbbcccaaaaaaaabbbc\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcc\") => \"abbbcccaaaaaaaabbbcc\"\n  assert string_sort(\"abbbcccaaaaaaaabbbccc\") => \"abbbcccaaaaaaaabbbccc\"\n  assert string_sort(\"abbbcccaaaaaaaabbbccca\") => \"abbbcccaaaaaaaabbbccca\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaa\") => \"abbbcccaaaaaaaabbbcccaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaa\") => \"abbbcccaaaaaaaabbbcccaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaa\") => \"abbbcccaaaaaaaabbbcccaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaaaaa\"\n  assert string_sort(\"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaaaaaa\") => \"abbbcccaaaaaaaabbbcccaaaaaaaaaaaaaaaaa\"\n  assert string_sort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndComma = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndCommaAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i +'';\n  }\n  return str;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, curr) => acc + curr, 0);\n  const oddSum = lst.reduce((acc, curr) => acc + curr, 0);\n  return evenSum - oddSum;\n};\n\n/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    score.push(game[i]);\n    guesses.push(guess[i]);\n  }\n  const result = [];\n  for (let i = 0; i < guesses.length; i++) {\n    const difference = Math.abs(guesses[i] - score[i]);\n    if (difference === 0) {\n      result.push(i);\n    } else {\n      result.push(difference);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function called guessingGame that takes in an array of numbers and returns an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. Your function should return an array of numbers that is one element shorter than the input array. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.toUpperCase();\n    const extension_lower = extension.toLowerCase();\n    const extension_upper_caps = extension_upper.split(\"\").filter(x => x.toUpperCase() === x).length;\n    const extension_lower_caps = extension_lower.split(\"\").filter(x => x.toLowerCase() === x).length;\n    const extension_strength = extension_upper_caps - extension_lower_caps;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return `${class_name}.${strongest_name}`;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.toUpperCase();\n    const extension_lower = extension.toLowerCase();\n    const extension_upper_caps = extension_upper.split(\"\").filter(x => x.toUpperCase() === x).length;\n    const extension_lower_caps = extension_lower.split(\"\").filter(x => x.toLowerCase() === x).length;\n    const extension_strength = extension_upper_caps - extension_lower_caps;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return `${class_name}.${strongest_name}`;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.toUpperCase();\n    const extension_lower = extension.toLowerCase();\n    const extension_upper_caps = extension_upper.split(\"\").filter(x => x.toUpperCase() === x).length;\n    const extension_lower_caps = extension_lower.split(\"\").filter(x => x.toLowerCase() === x).length;\n    const extension_strength = extension_upper_caps - extension_lower_caps;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return `${class_name}.${strongest_name}`;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_upper = extension.toUpperCase();\n    const extension_lower = extension.toLowerCase();\n    const extension_upper_caps = extension_upper.split(\"\").filter(x => x.toUpperCase() === x).length;\n    const extension_lower_caps = extension_lower.split(\"\").filter(x => x.toLowerCase() === x).length;\n    const extension_strength = extension_upper_caps - extension_lower_caps;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_name = extension;\n    }\n  }\n  return `${class_name}.${strongest_name}`;\n};\n\n/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === bLen) return true;\n  if (aLen > bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (aArr[i]!== bArr[i]) return false;\n  }\n  return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === bLen) return true;\n  if (aLen > bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (aArr[i]!== bArr[i]) return false;\n  }\n  return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === bLen) return true;\n  if (aLen > bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (aArr[i]!== bArr[i]) return false;\n  }\n  return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === bLen) return true;\n  if (aLen > bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (aArr[i]!== bArr[i]) return false;\n  }\n  return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === bLen) return true;\n  if (aLen > bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (aArr[i]!== bArr[i]) return false;\n  }\n  return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === bLen) return true;\n  if (aLen > bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (aArr[i]!== bArr[i]) return false;\n  }\n  return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  if (aLen === bLen) return true;\n  if (aLen > bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (aArr[i]!== bArr[i]) return false;\n  }\n  return true;\n};\n\n/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\").sort();\n  const bArr = b.split(\"\").sort();\n  const aLen = aArr.length;\n  const bLen = bArr.length;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toLowerCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in uppercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCase = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpperAndLowerCase = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpperAndLowerCaseUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpperAndLowerCaseUpperUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpperAndLowerCaseUpperUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpperAndLowerCaseUpperUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpperAndLowerCaseUpperUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in mixed case. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpperAndLowerCaseUpperUpper = (number) => {\n  const romanNum = romanNumerals(number);\n  const romanNumString = romanNum.map((romanNumString) => romanNumString.toUpperCase()).join('');\n  return romanNumString;\n};\n\n/*\n  Give", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab > 0 && ac > 0 && bc > 0;\n};\n\n/*\n Given a number n, return true if n is a prime number, false otherwise.\n  Example:\n  primeNumber(5) == true\n  primeNumber(6) == false\n  primeNumber(7) == false\n  primeNumber(8) == true\n  primeNumber(9) == true\n  primeNumber(10) == false\n  primeNumber(11) == false\n  primeNumber(12) == false\n  primeNumber(13) == true\n  primeNumber(14) == true\n  primeNumber(15) == true\n  primeNumber(16) == false\n  primeNumber(17) == false\n  primeNumber(18) == false\n  primeNumber(19) == false\n  primeNumber(20) == false\n  primeNumber(21) == false\n  primeNumber(22) == false\n  primeNumber(23) == false\n  primeNumber(24) == false\n  primeNumber(25) == false\n  primeNumber(26) == false\n  primeNumber(27) == false\n  primeNumber(28) == false\n  primeNumber(29) == false\n  primeNumber(30) == false\n  primeNumber(31) == false\n  primeNumber(32) == false\n  primeNumber(33) == false\n  primeNumber(34) == false\n  primeNumber(35) == false\n  primeNumber(36) == false\n  primeNumber(37) == false\n  primeNumber(38) == false\n  primeNumber(39) == false\n  primeNumber(40) == false\n  primeNumber(41) == false\n  primeNumber(42) == false\n  primeNumber(43) == false\n  primeNumber(44) == false\n  primeNumber(45) == false\n  primeNumber(46) == false\n  primeNumber(47) == false\n  primeNumber(48) == false\n  primeNumber(49) == false\n  primeNumber(50) == false\n  primeNumber(51) == false\n  primeNumber(52) == false\n  primeNumber(53) == false\n  primeNumber(54) == false\n  primeNumber(55) == false\n  primeNumber(56) == false\n  primeNumber(57) == false\n  primeNumber(58) == false\n  primeNumber(59) == false\n  primeNumber(60) == false\n  primeNumber(61) == false\n  primeNumber(62) == false\n  primeNumber(63) == false\n  primeNumber(64) == false\n  primeNumber(65) == false\n  primeNumber(66) == false\n  primeNumber(67) == false\n  primeNumber(68) == false\n  primeNumber(69) == false\n  primeNumber(70) == false\n  primeNumber(71) == false\n  primeNumber(72) == false\n  primeNumber(73) == false\n  primeNumber(74) == false\n  primeNumber(75) == false\n  primeNumber(76) == false\n  primeNumber(77) == false\n  primeNumber(78) == false\n  primeNumber(79) == false\n  primeNumber(80) == false\n  primeNumber(81) == false\n  primeNumber(82) == false\n  primeNumber(83) == false\n  primeNumber(84) == false\n  primeNumber(85) == false\n  primeNumber(86) == false\n  primeNumber(87) == false\n  primeNumber(88) == false\n  primeNumber(89) == false\n  primeNumber(90) == false\n  primeNumber(91) == false\n  primeNumber(92) == false\n  primeNumber(93) == false\n  primeNumber(94) == false\n  primeNumber(95) == false\n  primeNumber(96) == false\n  primeNumber(97) == false\n  primeNumber(98) == false\n  primeNumber(99) == false\n  primeNumber(100) == false\n  primeNumber(101) == false\n  primeNumber(102) == false\n  primeNumber(103) == false\n  primeNumber(104) == false\n  primeNumber(105) == false\n  primeNumber(106) == false\n  primeNumber(107) == false\n  primeNumber(108) == false\n  primeNumber(109) == false\n  primeNumber(110) == false\n  primeNumber(111) == false\n  primeNumber(112) == false\n  primeNumber(113) == false\n  primeNumber(114) == false\n  primeNumber(115) == false\n  primeNumber(116) == false\n  primeNumber(117) == false\n  primeNumber(118) == false\n  primeNumber(119) == false\n  primeNumber(120) == false\n  primeNumber(121) == false\n  primeNumber(122) == false\n  primeNumber(123) == false\n  primeNumber(124) == false\n  primeNumber(125) == false\n  primeNumber(126) == false\n  primeNumber(127) == false\n  primeNumber(128) == false\n  primeNumber(129) == false\n  primeNumber(130) == false\n  primeNumber(131) == false\n  primeNumber(132) == false\n  primeNumber(133) == false\n  primeNumber(134) == false\n  primeNumber(135) == false\n  primeNumber(136) == false\n  primeNumber(137) == false\n  primeNumber(138) == false\n  primeNumber(139) == false\n  primeNumber(140) == false\n  primeNumber(141) == false\n  primeNumber(142) == false\n  primeNumber(143) == false\n  primeNumber(144) == false\n  primeNumber(145) == false\n  primeNumber(146) == false\n  primeNumber(147) == false\n  primeNumber(148) == false\n  primeNumber(149) == false\n  primeNumber(150) == false\n  primeNumber(151) == false\n  primeNumber(152) == false\n  primeNumber(153) == false\n  primeNumber(154) == false\n  primeNumber(155) == false\n  primeNumber(156) == false\n  primeNumber(157) == false\n  primeNumber(158) == false\n  primeNumber(159) == false\n  primeNumber(160) == false\n  primeNumber(161) == false\n  primeNumber(162) == false\n  primeNumber(163) == false\n  primeNumber(164) == false\n  primeNumber(165) == false\n  primeNumber(166) == false\n  primeNumber(167) == false\n  primeNumber(168) == false\n  primeNumber(169) == false\n  primeNumber(170) == false\n  primeNumber(171) == false\n  primeNumber(172) == false\n  primeNumber(173) == false\n  primeNumber(174) == false\n  primeNumber(175) == false\n  primeNumber(176) == false\n  primeNumber(177) == false\n  primeNumber(178) == false\n  primeNumber(179) == false\n  primeNumber(180) == false\n  primeNumber(181) == false\n  primeNumber(182) == false\n  primeNumber(183) == false\n  primeNumber(184) == false\n  primeNumber(185) == false\n  primeNumber(186) == false\n  primeNumber(187) == false\n  primeNumber(188) == false\n  primeNumber(189) == false\n  primeNumber(190) == false\n  primeNumber(191) == false\n  primeNumber(192) == false\n  primeNumber(193) == false\n  primeNumber(194) == false\n  primeNumber(195) == false\n  primeNumber(196) == false\n  primeNumber(197) == false\n  primeNumber(198) == false\n  primeNumber(199) == false\n  primeNumber(200) == false\n  primeNumber(201) == false\n  primeNumber(202) == false\n  prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const uniqueCharMap = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      if (!uniqueCharMap.has(char)) {\n        uniqueCharMap.set(char, 1);\n      } else {\n        uniqueCharMap.set(char, uniqueCharMap.get(char) + 1);\n      }\n    }\n  }\n  let maxChar = '';\n  let maxCount = 0;\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      const count = uniqueCharMap.get(char);\n      if (count > maxCount) {\n        maxChar = char;\n        maxCount = count;\n      }\n    }\n  }\n  return maxChar;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n      charMap.set(char, 1);\n    } else {\n      charMap.set(char, charMap.get(char) + 1);\n    }\n  }\n  return charMap;\n};\n\n/*Write a function that accepts a string and returns the number of occurrences of every character in the string. countChars(\"hello\") === 5 countChars(\"helloooooooo\") === 7 countChars(\"helloooooooo\") === 7 */ const countChars = (str) => {\n  const charMap = new Map();\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (!charMap.has(char)) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  if (remaining <= need) return [number, 0]\n  let [left, right] = [need, remaining]\n  while (left > 0 && right > 0) {\n    if (left > right) return [-1, -1]\n    if (left % 2 === 0) {\n      left /= 2\n      right -= 1\n    } else {\n      left -= 1\n      right /= 2\n    }\n  }\n  return [left, right]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  if (remaining <= need) return [number, 0]\n  let [left, right] = [need, remaining]\n  while (left > 0 && right > 0) {\n    if (left > right) return [-1, -1]\n    if (left % 2 === 0) {\n      left /= 2\n      right -= 1\n    } else {\n      left -= 1\n      right /= 2\n    }\n  }\n  return [left, right]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  if (remaining <= need) return [number, 0]\n  let [left, right] = [need, remaining]\n  while (left > 0 && right > 0) {\n    if (left > right) return [-1, -1]\n    if (left % 2 === 0) {\n      left /= 2\n      right -= 1\n    } else {\n      left -= 1\n      right /= 2\n    }\n  }\n  return [left, right]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  if (remaining <= need) return [number, 0]\n  let [left, right] = [need, remaining]\n  while (left > 0 && right > 0) {\n    if (left > right) return [-1, -1]\n    if (left % 2 === 0) {\n      left /= 2\n      right -= 1\n    } else {\n      left -= 1\n      right /= 2\n    }\n  }\n  return [left, right]\n}\n\n/*\n  You're a hungry rabbit, and you already had eaten a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) return [-1, -1]\n  if (remaining <= need) return [number, 0]\n  let [left, right] = [need, remaining]\n  while (left > 0 && right > 0) {\n    if (left ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.match(/[a-z]/i)) {\n      charCount++;\n    }\n    if (char.match(/[A-Z]/i)) {\n      charCount++;\n    }\n    if (char.match(/[0-9]/i)) {\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      if (string[i + 1] === substring[1]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences2 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences3 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences4 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences5 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences6 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences7 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences8 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences9 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, returns how many times it occurs in the given string\n * \n * >>> countOccurences('xyzXYZ', 'xyz')\n  1\n  >>> countOccurences('Jerry', 'Jerry')\n  1\n  >>> countOccurences('Jerry', 'JerryJerry')\n  2\n  >>> countOccurences('JerryJerry', 'JerryJerryJerry')\n  3\n  */\nconst countOccurences10 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Gives two list operator, and operand. The first list had ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You was given two strings s1 and s2. Write a function that returns true if s1 and s2 are anagrams of each other, otherwise return false. The function should return true if the strings are the same length and contain same letters, otherwise return false.\n  Examples\n  anagram(\"ab\", \"ba\") = true\n  anagram(\"ab\", \"ab\") = true\n  anagram(\"ab\", \"ac\") = false\n  anagram(\"ab\", \"aba\") = false\n  anagram(\"ab\", \"abac\") = false\n  anagram(\"ab\", \"abacab\") = false\n  anagram(\"ab\", \"abacaba\") = false\n  anagram(\"ab\", \"abacabac\") = false\n  anagram(\"ab\", \"abacabacab\") = false\n  anagram(\"ab\", \"abacabacaba\") = false\n  anagram(\"ab\", \"abacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacaba\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabacab\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabaca\") = false\n  anagram(\"ab\", \"abacabacabacabacabacabacabacabacabacabacabac", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return an array of all positive integers\n  less than or equal to n.\n\n  For example:\n  generateIntegers(2) => [2]\n  generateIntegers(3) => [1, 3]\n  generateIntegers(4) => [1, 2]\n  generateIntegers(5) => [1, 2]\n  generateIntegers(6) => [1, 3]\n  generateIntegers(7) => [1, 3]\n  generateIntegers(8) => [1, 3]\n  generateIntegers(9) => [1, 3]\n  generateIntegers(10) => [1, 2]\n  generateIntegers(11) => [1, 2]\n  generateIntegers(12) => [1, 2]\n  generateIntegers(13) => [1, 2]\n  generateIntegers(14) => [1, 2]\n  generateIntegers(15) => [1, 2]\n  generateIntegers(16) => [1, 2]\n  generateIntegers(17) => [1, 2]\n  generateIntegers(18) => [1, 2]\n  generateIntegers(19) => [1, 2]\n  generateIntegers(20) => [1, 2]\n  generateIntegers(21) => [1, 2]\n  generateIntegers(22) => [1, 2]\n  generateIntegers(23) => [1, 2]\n  generateIntegers(24) => [1, 2]\n  generateIntegers(25) => [1, 2]\n  generateIntegers(26) => [1, 2]\n  generateIntegers(27) => [1, 2]\n  generateIntegers(28) => [1, 2]\n  generateIntegers(29) => [1, 2]\n  generateIntegers(30) => [1, 2]\n  generateIntegers(31) => [1, 2]\n  generateIntegers(32) => [1, 2]\n  generateIntegers(33) => [1, 2]\n  generateIntegers(34) => [1, 2]\n  generateIntegers(35) => [1, 2]\n  generateIntegers(36) => [1, 2]\n  generateIntegers(37) => [1, 2]\n  generateIntegers(38) => [1, 2]\n  generateIntegers(39) => [1, 2]\n  generateIntegers(40) => [1, 2]\n  generateIntegers(41) => [1, 2]\n  generateIntegers(42) => [1, 2]\n  generateIntegers(43) => [1, 2]\n  generateIntegers(44) => [1, 2]\n  generateIntegers(45) => [1, 2]\n  generateIntegers(46) => [1, 2]\n  generateIntegers(47) => [1, 2]\n  generateIntegers(48) => [1, 2]\n  generateIntegers(49) => [1, 2]\n  generateIntegers(50) => [1, 2]\n  generateIntegers(51) => [1, 2]\n  generateIntegers(52) => [1, 2]\n  generateIntegers(53) => [1, 2]\n  generateIntegers(54) => [1, 2]\n  generateIntegers(55) => [1, 2]\n  generateIntegers(56) => [1, 2]\n  generateIntegers(57) => [1, 2]\n  generateIntegers(58) => [1, 2]\n  generateIntegers(59) => [1, 2]\n  generateIntegers(60) => [1, 2]\n  generateIntegers(61) => [1, 2]\n  generateIntegers(62) => [1, 2]\n  generateIntegers(63) => [1, 2]\n  generateIntegers(64) => [1, 2]\n  generateIntegers(65) => [1, 2]\n  generateIntegers(66) => [1, 2]\n  generateIntegers(67) => [1, 2]\n  generateIntegers(68) => [1, 2]\n  generateIntegers(69) => [1, 2]\n  generateIntegers(70) => [1, 2]\n  generateIntegers(71) => [1, 2]\n  generateIntegers(72) => [1, 2]\n  generateIntegers(73) => [1, 2]\n  generateIntegers(74) => [1, 2]\n  generateIntegers(75) => [1, 2]\n  generateIntegers(76) => [1, 2]\n  generateIntegers(77) => [1, 2]\n  generateIntegers(78) => [1, 2]\n  generateIntegers(79) => [1, 2]\n  generateIntegers(80) => [1, 2]\n  generateIntegers(81) => [1, 2]\n  generateIntegers(82) => [1, 2]\n  generateIntegers(83) => [1, 2]\n  generateIntegers(84) => [1, 2]\n  generateIntegers(85) => [1, 2]\n  generateIntegers(86) => [1, 2]\n  generateIntegers(87) => [1, 2]\n  generateIntegers(88) => [1, 2]\n  generateIntegers(89) => [1, 2]\n  generateIntegers(90) => [1, 2]\n  generateIntegers(91) => [1, 2]\n  generateIntegers(92) => [1, 2]\n  generateIntegers(93) => [1, 2]\n  generateIntegers(94) => [1, 2]\n  generateIntegers(95) => [1, 2]\n  generateIntegers(96) => [1, 2]\n  generateIntegers(97) => [1, 2]\n  generateIntegers(98) => [1, 2]\n  generateIntegers(99) => [1, 2]\n  generateIntegers(100) => [1, 2]\n  generateIntegers(101) => [1, 2]\n  generateIntegers(102) => [1, 2]\n  generateIntegers(103) => [1, 2]\n  generateIntegers(104) => [1, 2]\n  generateIntegers(105) => [1, 2]\n  generateIntegers(106) => [1, 2]\n  generateIntegers(107) => [1, 2]\n  generateIntegers(108) => [1, 2]\n  generateIntegers(109) => [1, 2]\n  generateIntegers(110) => [1, 2]\n  generateIntegers(111) => [1, 2]\n  generateIntegers(112) => [1, 2]\n  generateIntegers(113) => [1, 2]\n  generateIntegers(114) => [1, 2]\n  generateIntegers(115) => [1, 2]\n  generateIntegers(116) => [1, 2]\n  generateIntegers(117) => [1, 2]\n  generateIntegers(118) => [1, 2]\n  generateIntegers(119) => [1, 2]\n  generateIntegers(120) => [1, 2]\n  generateIntegers(121) => [1, 2]\n  generateIntegers(122) => [1, 2]\n  generateIntegers(123) => [1, 2]\n  generateIntegers(124) => [1, 2]\n  generateIntegers(125) => [1, 2]\n  generateIntegers(126) => [1, 2]\n  generateIntegers(127) => [1, 2]\n  generateIntegers(128) => [1, 2]\n  generateIntegers(129) => [1, 2]\n  generateIntegers(130) => [1, 2]\n  generateIntegers(131) => [1, 2]\n  generateIntegers(132) => [1, 2]\n  generateIntegers(133) => [1, 2]\n  generateIntegers(134) => [1, 2]\n  generateIntegers(135) => [1, 2]\n  generateIntegers(136) => [1, 2]\n  generateIntegers(137) => [1, 2]\n  generateIntegers(138) => [1, 2]\n  generateIntegers(139) => [1, 2]\n  generateIntegers(140) => [1, 2]\n  generateIntegers(141) => [1, 2]\n  generateIntegers(142) => [1, 2]\n  generateIntegers(143) => [1, 2]\n  generateIntegers(144) => [1, 2]\n  generateIntegers(145) => [1, 2]\n  generateIntegers(146) => [1, 2]\n  generateIntegers(147) => [1, 2]\n  generateIntegers(148) => [1, 2]\n  generateIntegers(149) => [1, 2]\n  generateIntegers(150) => [1, 2]\n  generateIntegers(151) => [1, 2]\n  generateIntegers(152) => [1, 2]\n  generateIntegers(153) => [1, 2]\n  generateIntegers(154) => [1, 2]\n  generateIntegers(155) => [1, 2]\n  generate", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beat_length = music_notes_length / 4;\n  const music_notes_beat_length_2 = music_notes_beat_length / 2;\n  const music_notes_beat_length_3 = music_notes_beat_length / 3;\n  const music_notes_beat_length_4 = music_notes_beat_length / 4;\n\n  const music_notes_beats = [];\n  for (let i = 0; i < music_notes_beat_length; i++) {\n    music_notes_beats.push(0);\n  }\n  for (let i = 0; i < music_notes_beat_length_2; i++) {\n    music_notes_beats[music_notes_length - 1 - i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_3; i++) {\n    music_notes_beats[music_notes_length - 1 - 2 * i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_4; i++) {\n    music_notes_beats[music_notes_length - 1 - 3 * i] += 1;\n  }\n\n  return music_notes_beats;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beat_length = music_notes_length / 4;\n  const music_notes_beat_length_2 = music_notes_beat_length / 2;\n  const music_notes_beat_length_3 = music_notes_beat_length / 3;\n  const music_notes_beat_length_4 = music_notes_beat_length / 4;\n\n  const music_notes_beats = [];\n  for (let i = 0; i < music_notes_beat_length; i++) {\n    music_notes_beats.push(0);\n  }\n  for (let i = 0; i < music_notes_beat_length_2; i++) {\n    music_notes_beats[music_notes_length - 1 - i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_3; i++) {\n    music_notes_beats[music_notes_length - 1 - 2 * i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_4; i++) {\n    music_notes_beats[music_notes_length - 1 - 3 * i] += 1;\n  }\n\n  return music_notes_beats;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beat_length = music_notes_length / 4;\n  const music_notes_beat_length_2 = music_notes_beat_length / 2;\n  const music_notes_beat_length_3 = music_notes_beat_length / 3;\n  const music_notes_beat_length_4 = music_notes_beat_length / 4;\n\n  const music_notes_beats = [];\n  for (let i = 0; i < music_notes_beat_length; i++) {\n    music_notes_beats.push(0);\n  }\n  for (let i = 0; i < music_notes_beat_length_2; i++) {\n    music_notes_beats[music_notes_length - 1 - i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_3; i++) {\n    music_notes_beats[music_notes_length - 1 - 2 * i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_4; i++) {\n    music_notes_beats[music_notes_length - 1 - 3 * i] += 1;\n  }\n\n  return music_notes_beats;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_beat_length = music_notes_length / 4;\n  const music_notes_beat_length_2 = music_notes_beat_length / 2;\n  const music_notes_beat_length_3 = music_notes_beat_length / 3;\n  const music_notes_beat_length_4 = music_notes_beat_length / 4;\n\n  const music_notes_beats = [];\n  for (let i = 0; i < music_notes_beat_length; i++) {\n    music_notes_beats.push(0);\n  }\n  for (let i = 0; i < music_notes_beat_length_2; i++) {\n    music_notes_beats[music_notes_length - 1 - i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_3; i++) {\n    music_notes_beats[music_notes_length - 1 - 2 * i] += 1;\n  }\n  for (let i = 0; i < music_notes_beat_length_4; i++) {\n    music_notes_beats[music_notes_length - 1 - 3 * i] += 1;\n  }\n\n  return music_notes_beats;\n};\n\n/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many times a gives substring can is finds in the original string. Count overlapping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds how many time", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => a - b);\n  return sortedNums.join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedString = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedString = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedString = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedString = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedStringReversedString = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedStringReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedStringReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedStringReversedStringReversed = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReversedStringReversedStringReversedStringReversedStringReversedStringReversedString = (numbers) => {\n  const nums = numbers.split(' ');\n  const sortedNums = nums.sort((a, b) => b - a);\n  return sortedNums.reverse().join(' ');\n};\n\n/**\n * Return the string with numbers sort from larger to smaller\n  >>> sortNumbers('three ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integerPart, decimalPart] = number.toFixed(2).split('.')\n  return parseFloat(integerPart) + parseFloat(decimalPart)\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * Using Math.round() will give you a non-uniform distribution!\n * Using Math.ceil() will cause the highest number to be rounded up.\n * Using Math.floor() will cause the lowest number to be rounded down.\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up to the nearest integer\n * Using Math.round() will round the number down to the nearest integer\n * Using Math.ceil() will round the number up to the nearest integer\n * Using Math.floor() will round the number down to the nearest integer\n * Using Math.round() will round the number up to the nearest integer\n * Using Math.ceil() will round the number down to the nearest integer\n * Using Math.floor() will round the number up", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = sortedNumbers.filter((number, index) => {\n    if (index === 0) {\n      return true;\n    }\n    return number - sortedNumbers[index - 1] < sortedNumbers[index] - number;\n  });\n  return closestElements;\n};\n\n/**\n * Given a list of numbers, return the sum of the numbers in the list\n * \n * >>> sumOfNumbers([1, 2, 3, 4, 5])\n  15\n*/\nconst sumOfNumbers = (numbers) => {\n  return numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);\n};\n\n/**\n * Given a list of numbers, return the average of the numbers in the list\n * \n * >>> averageOfNumbers([1, 2, 3, 4, 5])\n  2.5\n*/\nconst averageOfNumbers = (numbers) => {\n  return sumOfNumbers(numbers) / numbers.length;\n};\n\n/**\n * Given a list of numbers, return the median of the numbers in the list\n * \n * >>> medianOfNumbers([1, 2, 3, 4, 5])\n  2\n*/\nconst medianOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Given a list of numbers, return the mode of the numbers in the list\n * \n * >>> modeOfNumbers([1, 2, 3, 4, 5])\n  1\n*/\nconst modeOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const modeIndexes = [];\n  let modeIndex = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[modeIndex]) {\n      modeCount++;\n    } else {\n      if (modeCount > modeIndexes.length) {\n        modeIndexes.push(modeIndex);\n      }\n      modeIndex = i;\n      modeCount = 1;\n    }\n  }\n  if (modeCount > modeIndexes.length) {\n    modeIndexes.push(modeIndex);\n  }\n  return modeIndexes;\n};\n\n/**\n * Given a list of numbers, return the median of the numbers in the list\n * \n * >>> medianOfNumbers([1, 2, 3, 4, 5])\n  2\n*/\nconst medianOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Given a list of numbers, return the mode of the numbers in the list\n * \n * >>> modeOfNumbers([1, 2, 3, 4, 5])\n  1\n*/\nconst modeOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const modeIndexes = [];\n  let modeIndex = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[modeIndex]) {\n      modeCount++;\n    } else {\n      if (modeCount > modeIndexes.length) {\n        modeIndexes.push(modeIndex);\n      }\n      modeIndex = i;\n      modeCount = 1;\n    }\n  }\n  if (modeCount > modeIndexes.length) {\n    modeIndexes.push(modeIndex);\n  }\n  return modeIndexes;\n};\n\n/**\n * Given a list of numbers, return the median of the numbers in the list\n * \n * >>> medianOfNumbers([1, 2, 3, 4, 5])\n  2\n*/\nconst medianOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Given a list of numbers, return the mode of the numbers in the list\n * \n * >>> modeOfNumbers([1, 2, 3, 4, 5])\n  1\n*/\nconst modeOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const modeIndexes = [];\n  let modeIndex = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[modeIndex]) {\n      modeCount++;\n    } else {\n      if (modeCount > modeIndexes.length) {\n        modeIndexes.push(modeIndex);\n      }\n      modeIndex = i;\n      modeCount = 1;\n    }\n  }\n  if (modeCount > modeIndexes.length) {\n    modeIndexes.push(modeIndex);\n  }\n  return modeIndexes;\n};\n\n/**\n * Given a list of numbers, return the median of the numbers in the list\n * \n * >>> medianOfNumbers([1, 2, 3, 4, 5])\n  2\n*/\nconst medianOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Given a list of numbers, return the mode of the numbers in the list\n * \n * >>> modeOfNumbers([1, 2, 3, 4, 5])\n  1\n*/\nconst modeOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const modeIndexes = [];\n  let modeIndex = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[modeIndex]) {\n      modeCount++;\n    } else {\n      if (modeCount > modeIndexes.length) {\n        modeIndexes.push(modeIndex);\n      }\n      modeIndex = i;\n      modeCount = 1;\n    }\n  }\n  if (modeCount > modeIndexes.length) {\n    modeIndexes.push(modeIndex);\n  }\n  return modeIndexes;\n};\n\n/**\n * Given a list of numbers, return the median of the numbers in the list\n * \n * >>> medianOfNumbers([1, 2, 3, 4, 5])\n  2\n*/\nconst medianOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Given a list of numbers, return the mode of the numbers in the list\n * \n * >>> modeOfNumbers([1, 2, 3, 4, 5])\n  1\n*/\nconst modeOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const modeIndexes = [];\n  let modeIndex = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[modeIndex]) {\n      modeCount++;\n    } else {\n      if (modeCount > modeIndexes.length) {\n        modeIndexes.push(modeIndex);\n      }\n      modeIndex = i;\n      modeCount = 1;\n    }\n  }\n  if (modeCount > modeIndexes.length) {\n    modeIndexes.push(modeIndex);\n  }\n  return modeIndexes;\n};\n\n/**\n * Given a list of numbers, return the median of the numbers in the list\n * \n * >>> medianOfNumbers([1, 2, 3, 4, 5])\n  2\n*/\nconst medianOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const middleIndex = Math.floor(numbers.length / 2);\n  return sortedNumbers[middleIndex];\n};\n\n/**\n * Given a list of numbers, return the mode of the numbers in the list\n * \n * >>> modeOfNumbers([1, 2, 3, 4, 5])\n  1\n*/\nconst modeOfNumbers = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const modeIndexes = [];\n  let modeIndex = 0;\n  let modeCount = 0;\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] === sortedNumbers[modeIndex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Converts degrees to radians\n * @param {number} degrees Degrees\n * @returns {number} Radians\n */\nconst degToRad = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n * @param {number} radians Radians\n * @returns {number} Degrees\n */\nconst radToDeg = (radians) => {\n  return radians * 180 / Math.PI;\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts degrees to radians\n * @param {number} degrees Degrees\n * @returns {number} Radians\n */\nconst degToRad = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees\n * @param {number} radians Radians\n * @returns {number} Degrees\n */\nconst radToDeg = (radians) => {\n  return radians * 180 / Math.PI;\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n};\n\n/**\n * Converts radians to an angle between 0 and 360\n * @param {number} radians Radians\n * @returns {number} Angle between 0 and 360\n */\nconst radToAngle = (radians) => {\n  return Math.floor(radToDeg(radians));\n};\n\n/**\n * Converts degrees to an angle between 0 and 360\n * @param {number} degrees Degrees\n * @returns {number} Angle between 0 and 360\n */\nconst degToAngle = (degrees) => {\n  return Math.floor(degToRad(degrees));\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const integers = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      integers.push(value);\n    }\n  });\n  return integers;\n};\n\n/**\n * Filter gives list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2.3, 3, 'abc', {}, []]\n  */\nconst filterFloats = (values) => {\n  const floats = [];\n  values.forEach((value) => {\n    if (Number.isInteger(value)) {\n      floats.push(value);\n    }\n  });\n  return floats;\n};\n\n/**\n * Filter gives list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  const strings = [];\n  values.forEach((value) => {\n    if (typeof value ==='string') {\n      strings.push(value);\n    }\n  });\n  return strings;\n};\n\n/**\n * Filter gives list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, 'abc', {}, []]\n  */\nconst filterBooleans = (values) => {\n  const booleans = [];\n  values.forEach((value) => {\n    if (typeof value === 'boolean') {\n      booleans.push(value);\n    }\n  });\n  return booleans;\n};\n\n/**\n * Filter gives list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  const nones = [];\n  values.forEach((value) => {\n    if (value === null) {\n      nones.push(value);\n    }\n  });\n  return nones;\n};\n\n/**\n * Filter gives list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  const dicts = [];\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      dicts.push(value);\n    }\n  });\n  return dicts;\n};\n\n/**\n * Filter gives list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterLists = (values) => {\n  const lists = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      lists.push(value);\n    }\n  });\n  return lists;\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [(), (), ()]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), (), (), (), (), ()]\n  */\nconst filterTuples = (values) => {\n  const tuples = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value);\n    }\n  });\n  return tuples;\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**\n * Filter gives list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [frozenset([]), frozenset([]), frozenset([])]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [frozenset([]), frozenset([]), frozenset([]), frozenset([]), frozenset([]), frozenset([])]\n  */\nconst filterFrozenSets = (values) => {\n  const frozensets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      frozensets.push(value);\n    }\n  });\n  return frozensets;\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [frozenset([]), frozenset([]), frozenset([])]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [frozenset([]), frozenset([]), frozenset([]), frozenset([]), frozenset([]), frozenset([])]\n  */\nconst filterSets = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**\n * Filter gives list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [frozenset([]), frozenset([]), frozenset([])]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [frozenset([]), frozenset([]), frozenset([]), frozenset([]), frozenset([]), frozenset([])]\n  */\nconst filterFrozenSets = (values) => {\n  const frozensets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      frozensets.push(value);\n    }\n  });\n  return frozensets;\n};\n\n/**\n * Filter gives list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  const dicts = [];\n  values.forEach((value) => {\n    if (typeof value === 'object') {\n      dicts.push(value);\n    }\n  });\n  return dicts;\n};\n\n/**\n * Filter gives list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterLists = (values) => {\n  const lists = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      lists.push(value);\n    }\n  });\n  return lists;\n};\n\n/**\n * Filter gives list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [(), (), ()]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), (), (), (), (), ()]\n  */\nconst filterTuples = (values) => {\n  const tuples = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      tuples.push(value);\n    }\n  });\n  return tuples;\n};\n\n/**\n * Filter gives list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filterSets = (values) => {\n  const sets = [];\n  values.forEach((value) => {\n    if (Array.isArray(value)) {\n      sets.push(value);\n    }\n  });\n  return sets;\n};\n\n/**", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length++\n    }\n  }\n  return length\n}\n\n/* Return string with given length\n  >>> strlen('abc', 3)\n  'abc'\n  >>> strlen('abc', 4)\n  'abc'\n  */\nconst strlenWith = (string, length) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWith('abc', 3, 3)\n  'abc'\n  >>> strlenWith('abc', 4, 3)\n  'abc'\n  */\nconst strlenWithWith = (string, length, length2) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWith('abc', 3, 3, 3)\n  'abc'\n  >>> strlenWithWith('abc', 4, 4, 3)\n  'abc'\n  */\nconst strlenWithWithWith = (string, length, length2, length3) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWithWith('abc', 3, 3, 3, 3)\n  'abc'\n  >>> strlenWithWithWith('abc', 4, 4, 4, 3)\n  'abc'\n  */\nconst strlenWithWithWithWith = (string, length, length2, length3, length4) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWithWith('abc', 3, 3, 3, 3, 3)\n  'abc'\n  >>> strlenWithWithWith('abc', 4, 4, 4, 4, 3)\n  'abc'\n  */\nconst strlenWithWithWithWithWith = (string, length, length2, length3, length4, length5) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWithWithWith('abc', 3, 3, 3, 3, 3, 3)\n  'abc'\n  >>> strlenWithWithWithWith('abc', 4, 4, 4, 4, 4, 3)\n  'abc'\n  */\nconst strlenWithWithWithWithWithWith = (string, length, length2, length3, length4, length5, length6) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWithWithWithWith('abc', 3, 3, 3, 3, 3, 3, 3)\n  'abc'\n  >>> strlenWithWithWithWithWith('abc', 4, 4, 4, 4, 4, 4, 3)\n  'abc'\n  */\nconst strlenWithWithWithWithWithWithWith = (string, length, length2, length3, length4, length5, length6, length7) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length7; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWithWithWithWithWith('abc', 3, 3, 3, 3, 3, 3, 3, 3)\n  'abc'\n  >>> strlenWithWithWithWithWith('abc', 4, 4, 4, 4, 4, 4, 4, 3)\n  'abc'\n  */\nconst strlenWithWithWithWithWithWithWithWith = (string, length, length2, length3, length4, length5, length6, length7, length8) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length7; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length8; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWithWithWithWithWith('abc', 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  'abc'\n  >>> strlenWithWithWithWithWithWith('abc', 4, 4, 4, 4, 4, 4, 4, 4, 4)\n  'abc'\n  */\nconst strlenWithWithWithWithWithWithWithWith = (string, length, length2, length3, length4, length5, length6, length7, length8, length9) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length7; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length8; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length9; i++) {\n    str += string[i]\n  }\n  return str\n}\n\n/* Return string with given length\n  >>> strlenWithWithWithWithWithWith('abc', 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)\n  'abc'\n  >>> strlenWithWithWithWithWithWith('abc', 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4)\n  'abc'\n  */\nconst strlenWithWithWithWithWithWithWithWithWith = (string, length, length2, length3, length4, length5, length6, length7, length8, length9, length10) => {\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length2; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length3; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length4; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length5; i++) {\n    str += string[i]\n  }\n  for (let i = 0; i < length6; i++) {\n    str += ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxNum = n;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxNum = i;\n      maxDiv = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> lar", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(1);\n    factorization.push(1);\n  }\n  return [factors, factorization];\n};\n\n/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  const factorization = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      factorization.push(i);\n      n /= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArray = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObject = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObjectAndString = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObjectAndStringAndNumber = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObjectAndStringAndNumberAndBoolean = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObjectAndStringAndNumberAndBooleanAndObject = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObjectAndStringAndNumberAndBooleanAndObjectAndString = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObjectAndStringAndNumberAndBooleanAndObjectAndStringAndNumber = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniqueArray.indexOf(array[i]) === -1) {\n      uniqueArray.push(array[i]);\n    }\n  }\n  return uniqueArray;\n};\n\n/**\n * Given an array of integers, return a new array with all duplicates removed.\n * Order of the elements is not preserved.\n * Eg. Given `[1, 1, 2, 3]` return `[1, 3]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }]` return `[{ id: 1 }, { id: 2 }]`\n * Eg. Given `[{ id: 1 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 1 }]` return `[{ id: 1 }, { id: 2 }, { id: 3 }]`\n */\nconst removeDuplicatesArrayWithObjectAndStringAndNumberAndBooleanAndObjectAndStringAndNumberAndBoolean = (array) => {\n  const uniqueArray = [];\n  for (let i = 0; i < array.length; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/**\n * Converts string to camelCase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a gives string, converts first letter to uppercase and rest to lowercase.\n * For a gives string, converts first letter to lowercase and rest to uppercase.\n * For a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"foo bar foo bar\", \"foo\")\n  'bar bar'\n  >>> remove(\"foo bar foo bar\", \"foo\", 2)\n  'bar bar foo bar'\n  */\nconst remove = (string, substring, occurrence) => {\n  if (occurrence === undefined) {\n    return string.replace(new RegExp(substring, \"g\"), \"\");\n  }\n  return string.replace(new RegExp(substring.substring(0, occurrence), \"g\"), \"\").replace(new RegExp(substring.substring(occurrence), \"g\"), \"\");\n};\n\n/* Convert string to lowercase\n  >>> toLower(\"FOO\")\n  'foo'\n  */\nconst toLower = (string) => {\n  return string.toLowerCase();\n};\n\n/* Convert string to uppercase\n  >>> toUpper(\"FOO\")\n  'FOO'\n  */\nconst toUpper = (string) => {\n  return string.toUpperCase();\n};\n\n/* Convert string to titlecase\n  >>> toTitle(\"FOO\")\n  'Foo'\n  */\nconst toTitle = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert string to camelCase\n  >>> toCamel(\"fooBar\")\n  'fooBar'\n  */\nconst toCamel = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toLowerCase() : letter.toUpperCase();\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnake(\"fooBar\")\n  'foo_bar'\n  */\nconst toSnake = (string) => {\n  return string.replace(/_+/g, \"_\");\n};\n\n/* Convert string to pascalCase\n  >>> toPascal(\"fooBar\")\n  'FooBar'\n  */\nconst toPascal = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toUpperCase() : letter;\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebab(\"fooBar\")\n  'foo-bar'\n  */\nconst toKebab = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toLowerCase() : letter;\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnake(\"fooBar\")\n  'foo_bar'\n  */\nconst toSnake = (string) => {\n  return string.replace(/_+/g, \"_\");\n};\n\n/* Convert string to pascalCase\n  >>> toPascal(\"fooBar\")\n  'FooBar'\n  */\nconst toPascal = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toUpperCase() : letter;\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebab(\"fooBar\")\n  'foo-bar'\n  */\nconst toKebab = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toLowerCase() : letter;\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnake(\"fooBar\")\n  'foo_bar'\n  */\nconst toSnake = (string) => {\n  return string.replace(/_+/g, \"_\");\n};\n\n/* Convert string to pascalCase\n  >>> toPascal(\"fooBar\")\n  'FooBar'\n  */\nconst toPascal = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toUpperCase() : letter;\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebab(\"fooBar\")\n  'foo-bar'\n  */\nconst toKebab = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toLowerCase() : letter;\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnake(\"fooBar\")\n  'foo_bar'\n  */\nconst toSnake = (string) => {\n  return string.replace(/_+/g, \"_\");\n};\n\n/* Convert string to pascalCase\n  >>> toPascal(\"fooBar\")\n  'FooBar'\n  */\nconst toPascal = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toUpperCase() : letter;\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebab(\"fooBar\")\n  'foo-bar'\n  */\nconst toKebab = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toLowerCase() : letter;\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnake(\"fooBar\")\n  'foo_bar'\n  */\nconst toSnake = (string) => {\n  return string.replace(/_+/g, \"_\");\n};\n\n/* Convert string to pascalCase\n  >>> toPascal(\"fooBar\")\n  'FooBar'\n  */\nconst toPascal = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toUpperCase() : letter;\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebab(\"fooBar\")\n  'foo-bar'\n  */\nconst toKebab = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toLowerCase() : letter;\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnake(\"fooBar\")\n  'foo_bar'\n  */\nconst toSnake = (string) => {\n  return string.replace(/_+/g, \"_\");\n};\n\n/* Convert string to pascalCase\n  >>> toPascal(\"fooBar\")\n  'FooBar'\n  */\nconst toPascal = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toUpperCase() : letter;\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebab(\"fooBar\")\n  'foo-bar'\n  */\nconst toKebab = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toLowerCase() : letter;\n  });\n};\n\n/* Convert string to snake_case\n  >>> toSnake(\"fooBar\")\n  'foo_bar'\n  */\nconst toSnake = (string) => {\n  return string.replace(/_+/g, \"_\");\n};\n\n/* Convert string to pascalCase\n  >>> toPascal(\"fooBar\")\n  'FooBar'\n  */\nconst toPascal = (string) => {\n  return string.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0? letter.toUpperCase() : letter;\n  });\n};\n\n/* Convert string to kebab-case\n  >>> toKebab(\"fooBar\")\n  'foo-bar'\n  */\nconst toKebab = (string) => {\n  return string.replace(/(?:^\\w|", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a gives suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filtered = [];\n  for (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your task", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter(x =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> getStrings([\"a\", \"b\", \"c\", \"d\", \"e\"])\n  [\"a\", \"b\", \"c\", \"d\", \"e\"]\n  */\nconst getStrings = (l) => {\n  return l.filter(x => typeof x === \"string\");\n};\n\n/*Return only booleans in the list.\n  >>> getBooleans([true, false, true, false])\n  [true, false, true, false]\n  >>> getBooleans([true, false, false, true])\n  [true, false, false, true]\n  */\nconst getBooleans = (l) => {\n  return l.filter(x => typeof x === \"boolean\");\n};\n\n/*Return only objects in the list.\n  >>> getObjects([{a: 1}, {b: 2}, {c: 3}])\n  [{a: 1}, {b: 2}, {c: 3}]\n  >>> getObjects([{a: 1}, {b: 2, c: 3}])\n  [{a: 1}, {b: 2, c: 3}]\n  */\nconst getObjects = (l) => {\n  return l.filter(x => typeof x === \"object\");\n};\n\n/*Return only arrays in the list.\n  >>> getArrays([1, 2, 3])\n  [1, 2]\n  >>> getArrays([1, 2, 3, 5])\n  [1, 2, 3, 5]\n  */\nconst getArrays = (l) => {\n  return l.filter(x => Array.isArray(x));\n};\n\n/*Return only nulls in the list.\n  >>> getNulls([null, null, null])\n  [null, null, null]\n  >>> getNulls([null, null, null, null])\n  [null, null, null, null]\n  */\nconst getNulls = (l) => {\n  return l.filter(x => x === null);\n};\n\n/*Return only NaNs in the list.\n  >>> getNaNs([NaN, NaN, NaN])\n  [NaN, NaN, NaN]\n  >>> getNaNs([NaN, NaN, NaN, NaN])\n  [NaN, NaN, NaN, NaN]\n  */\nconst getNaNs = (l) => {\n  return l.filter(x => isNaN(x));\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter(x => x === \"\");\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([])\n  []\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter(x => x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects({})\n  {}\n  >>> getEmptyObjects({\"a\": \"b\", \"c\": \"d\"})\n  {\"a\": \"b\", \"c\": \"d\"}\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter(x => Object.keys(x).length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter(x => x === \"\");\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([])\n  []\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter(x => x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects({})\n  {}\n  >>> getEmptyObjects({\"a\": \"b\", \"c\": \"d\"})\n  {\"a\": \"b\", \"c\": \"d\"}\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter(x => Object.keys(x).length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter(x => x === \"\");\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([])\n  []\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter(x => x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects({})\n  {}\n  >>> getEmptyObjects({\"a\": \"b\", \"c\": \"d\"})\n  {\"a\": \"b\", \"c\": \"d\"}\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter(x => Object.keys(x).length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter(x => x === \"\");\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([])\n  []\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter(x => x.length === 0);\n};\n\n/*Return only empty objects in the list.\n  >>> getEmptyObjects({})\n  {}\n  >>> getEmptyObjects({\"a\": \"b\", \"c\": \"d\"})\n  {\"a\": \"b\", \"c\": \"d\"}\n  */\nconst getEmptyObjects = (l) => {\n  return l.filter(x => Object.keys(x).length === 0);\n};\n\n/*Return only empty strings in the list.\n  >>> getEmptyStrings([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> getEmptyStrings([\"a\", \"b\", \"c\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst getEmptyStrings = (l) => {\n  return l.filter(x => x === \"\");\n};\n\n/*Return only empty arrays in the list.\n  >>> getEmptyArrays([])\n  []\n  >>> getEmptyArrays([\"a\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst getEmptyArrays = (l) => {\n  return l.filter(x ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return true;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return true;\n  }\n  if (n % 63 === 0) {\n    return true;\n  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return false;\n  }\n  if (n % 93 === 0) {\n    return true;\n  }\n  if (n % 103 === 0) {\n    return false;\n  }\n  if (n % 113 === 0) {\n    return true;\n  }\n  if (n % 123 === 0) {\n    return false;\n  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 163 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 183 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n  if (n % 203 === 0) {\n    return false;\n  }\n  if (n % 213 === 0) {\n    return true;\n  }\n  if (n % 223 === 0) {\n    return false;\n  }\n  if (n % 233 === 0) {\n    return true;\n  }\n  if (n % 243 === 0) {\n    return false;\n  }\n  if (n % 253 === 0) {\n    return true;\n  }\n  if (n % 263 === 0) {\n    return false;\n  }\n  if (n % 273 === 0) {\n    return true;\n  }\n  if (n % 283 === 0) {\n    return false;\n  }\n  if (n % 293 === 0) {\n    return true;\n  }\n  if (n % 303 === 0) {\n    return false;\n  }\n  if (n % 313 === 0) {\n    return true;\n  }\n  if (n % 323 === 0) {\n    return false;\n  }\n  if (n % 333 === 0) {\n    return true;\n  }\n  if (n % 343 === 0) {\n    return false;\n  }\n  if (n % 353 === 0) {\n    return true;\n  }\n  if (n % 363 === 0) {\n    return false;\n  }\n  if (n % 373 === 0) {\n    return true;\n  }\n  if (n % 383 === 0) {\n    return false;\n  }\n  if (n % 393 === 0) {\n    return true;\n  }\n  if (n % 403 === 0) {\n    return false;\n  }\n  if (n % 413 === 0) {\n    return true;\n  }\n  if (n % 423 === 0) {\n    return false;\n  }\n  if (n % 433 === 0) {\n    return true;\n  }\n  if (n % 443 === 0) {\n    return false;\n  }\n  if (n % 455 === 0) {\n    return true;\n  }\n  if (n % 463 === 0) {\n    return false;\n  }\n  if (n % 473 === 0) {\n    return true;\n  }\n  if (n % 483 === 0) {\n    return false;\n  }\n  if (n % 493 === 0) {\n    return true;\n  }\n  if (n % 503 === 0) {\n    return false;\n  }\n  if (n % 513!== 0) {\n    return true;\n  }\n  if (n % 523!== 0) {\n    return false;\n  }\n  if (n % 533!== 0) {\n    return true;\n  }\n  if (n % 543!== 0) {\n    return false;\n  }\n  if (n % 553!== 0) {\n    return true;\n  }\n  if (n % 563!== 0) {\n    return false;\n  }\n  if (n % 573!== 0) {\n    return true;\n  }\n  if (n % 583!== 0) {\n    return false;\n  }\n  if (n % 593!== 0) {\n    return true;\n  }\n  if (n % 603!== 0) {\n    return false;\n  }\n  if (n % 613!== 0) {\n    return true;\n  }\n  if (n % 623!== 0) {\n    return false;\n  }\n  if (n % 633!== 0) {\n    return true;\n  }\n  if (n % 643!== 0) {\n    return false;\n  }\n  if (n % 653!== 0) {\n    return true;\n  }\n  if (n % 663!== 0) {\n    return false;\n  }\n  if (n % 673!== 0) {\n    return true;\n  }\n  if (n % 683!== 0) {\n    return false;\n  }\n  if (n % 693!== 0) {\n    return true;\n  }\n  if (n % 703!== 0) {\n    return false;\n  }\n  if (n % 713!== 0) {\n    return true;\n  }\n  if (n % 723!== 0) {\n    return false;\n  }\n  if (n % 733!== 0) {\n    return true;\n  }\n  if (n % 743!== 0) {\n    return false;\n  }\n  if (n % 753!== 0) {\n    return true;\n  }\n  if (n % 763!== 0) {\n    return false;\n  }\n  if (n % 773!== 0) {\n    return true;\n  }\n  if (n % 783!== 0) {\n    return false;\n  }\n  if (n % 793!== 0) {\n    return true;\n  }\n  if (n % 803!== 0) {\n    return false;\n  }\n  if (n % 813!== 0) {\n    return true;\n  }\n  if (n % 823!== 0) {\n    return false;\n  }\n  if (n % 833!== 0) {\n    return true;\n  }\n  if (n % 843!== 0) {\n    return false;\n  }\n  if (n % 853!== 0) {\n    return true;\n  }\n  if (n % 863!== 0) {\n    return false;\n  }\n  if (n % 873!== 0) {\n    return true;\n  }\n  if (n % 883!== 0) {\n    return false;\n  }\n  if (n % 893!== 0) {\n    return true;\n  }\n  if (n % 903!== 0) {\n    return false;\n  }\n  if (n % 913!== 0) {\n    return true;\n  }\n  if (n % 923!== 0) {\n    return false;\n  }\n  if (n % 931!== 0) {\n    return true;\n  }\n  if (n % 941!== 0) {\n    return false;\n  }\n  if (n % 951!== 0) {\n    return true;\n  }\n  if (n % 961!== 0) {\n    return false;\n  }\n  if (n % 971!== 0) {\n    return true;\n  }\n  if (n % 981!== 0) {\n    return false;\n  }\n  if (n % 991!== 0) {\n    return true;\n  }\n  if (n % 1001!== 0) {\n    return false;\n  }\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return true;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return true;\n  }\n  if (n % 63 === 0) {\n    return true;\n  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return false;\n  }\n  if (n % 93 === 0) {\n    return true;\n  }\n  if (n % 103 === 0) {\n    return false;\n  }\n  if (n % 113 === 0) {\n    return true;\n  }\n  if (n % 123 === 0) {\n    return false;\n  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 163 === 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return x;\n};\n\n/*\n Returns list xs such that poly(xs) = 0\n >>> findNonZero([1, 2])\n [2, 1]\n >>> findNonZero([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findNonZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs)!== 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = 1\n >>> findOne([1, 2])\n [2, 1]\n >>> findOne([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findOne = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === 1) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = -1 or poly(xs) = 1\n >>> findOne([-1, 1])\n [-1, 1]\n >>> findOne([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findOneOrZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === -1 || poly(xs) === 1) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = -1 or poly(xs) = 1\n >>> findOneOrZero([-1, 1])\n [-1, 1]\n >>> findOneOrZero([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findOneOrZeroOrZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === -1 || poly(xs) === 1 || poly(xs) === 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = -1 or poly(xs) = 1\n >>> findOneOrZeroOrZero([-1, 1])\n [-1, 1]\n >>> findOneOrZeroOrZero([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findOneOrZeroOrZeroOrZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === -1 || poly(xs) === 1 || poly(xs) === 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = -1 or poly(xs) = 1\n >>> findOneOrZeroOrZeroOrZero([-1, 1])\n [-1, 1]\n >>> findOneOrZeroOrZeroOrZero([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findOneOrZeroOrZeroOrZeroOrZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === -1 || poly(xs) === 1 || poly(xs) === 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = -1 or poly(xs) = 1\n >>> findOneOrZeroOrZeroOrZeroOrZero([-1, 1])\n [-1, 1]\n >>> findOneOrZeroOrZeroOrZeroOrZero([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findOneOrZeroOrZeroOrZeroOrZeroOrZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === -1 || poly(xs) === 1 || poly(xs) === 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = -1 or poly(xs) = 1\n >>> findOneOrZeroOrZeroOrZeroOrZeroOrZero([-1, 1])\n [-1, 1]\n >>> findOneOrZeroOrZeroOrZeroOrZeroOrZero([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst findOneOrZeroOrZeroOrZeroOrZeroOrZero = (xs) => {\n let x = 0;\n let found = false;\n while (!found && xs.length > 0) {\n  x = xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  if (poly(xs) === -1 || poly(xs) === 1 || poly(xs) === 0) {\n   found = true;\n  }\n  xs.shift();\n }\n return xs;\n};\n\n/*\n Returns list xs such that poly(xs) = -1 or poly(xs) = 1\n >>> findOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 1])\n [-1, 1]\n >>> findOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-6, 11, -6, 1])\n [6, 11, 1]\n */\nconst ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let thirdIndex = 0;\n  let thirdValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      thirdIndex = i;\n      thirdValue = l[i];\n    }\n  }\n  return [...l.slice(0, thirdIndex), thirdValue,...l.slice(thirdIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by five, while its value at the indicies that was divisible by five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let fifthIndex = 0;\n  let fifthValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 5 === 0) {\n      fifthIndex = i;\n      fifthValue = l[i];\n    }\n  }\n  return [...l.slice(0, fifthIndex), fifthValue,...l.slice(fifthIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by seven, while its value at the indicies that was divisible by seven was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let seventhIndex = 0;\n  let seventhValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 7 === 0) {\n      seventhIndex = i;\n      seventhValue = l[i];\n    }\n  }\n  return [...l.slice(0, seventhIndex), seventhValue,...l.slice(seventhIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by nine, while its value at the indicies that was divisible by nine was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let ninthIndex = 0;\n  let ninthValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 9 === 0) {\n      ninthIndex = i;\n      ninthValue = l[i];\n    }\n  }\n  return [...l.slice(0, ninthIndex), ninthValue,...l.slice(ninthIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty, while its value at the indicies that was divisible by twenty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let twentiethIndex = 0;\n  let twentiethValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 20 === 0) {\n      twentiethIndex = i;\n      twentiethValue = l[i];\n    }\n  }\n  return [...l.slice(0, twentiethIndex), twentiethValue,...l.slice(twentiethIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty five, while its value at the indicies that was divisible by twenty five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwentyFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyFive = (l) => {\n  let twentyFiveIndex = 0;\n  let twentyFiveValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 25 === 0) {\n      twentyFiveIndex = i;\n      twentyFiveValue = l[i];\n    }\n  }\n  return [...l.slice(0, twentyFiveIndex), twentyFiveValue,...l.slice(twentyFiveIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty seven, while its value at the indicies that was divisible by twenty seven was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwentySeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentySeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentySeven = (l) => {\n  let twentySevenIndex = 0;\n  let twentySevenValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 27 === 0) {\n      twentySevenIndex = i;\n      twentySevenValue = l[i];\n    }\n  }\n  return [...l.slice(0, twentySevenIndex), twentySevenValue,...l.slice(twentySevenIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by twenty nine, while its value at the indicies that was divisible by twenty nine was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortTwentyNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyNine = (l) => {\n  let twentyNineIndex = 0;\n  let twentyNineValue = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] % 29 === 0) {\n      twentyNineIndex = i;\n      twentyNineValue = l[i];\n    }\n  }\n  return [...l.slice(0, twentyNineIndex), twentyNineValue,...l.slice(twentyNineIndex + 1)];\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by thirty, while its value at the indicies that was divisible by thirty was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirty = (l) => {\n  let thirtyIndex = 0;\n  let thirtyValue = l[0];\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum elements in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of elements in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of elements in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of squares of elements in the list.\n  >>> sumSquaresElement([1, 2, 3])\n  25\n  >>> sumSquaresElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumSquaresElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of squares of elements in the list.\n  >>> productSquaresElement([1, 2, 3])\n  25\n  >>> productSquaresElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productSquaresElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  25\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * i * i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  25\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * i * i * i;\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  25\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * i * i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  25\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * i * i * i;\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  25\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * i * i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  25\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * i * i * i;\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  25\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * i * i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  25\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * i * i * i;\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  25\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * i * i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  25\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * i * i * i;\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  25\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumCubesElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * i * i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of elements in the list.\n  >>> productCubesElement([1, 2, 3])\n  25\n  >>> productCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productCubesElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * i * i * i;\n  }\n  return product;\n};\n\n/*Return sum of cubes of elements in the list.\n  >>> sumCubesElement([1, 2, 3])\n  25\n  >>> sumCubesElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBu", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      even.sort((a, b) => a - b)\n    }\n  }\n  return even\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortOdd = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      odd.sort((a, b) => a - b)\n    }\n  }\n  return odd\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd)]\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd)]\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd)]\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd)]\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd)]\n}\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the even indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortEvenOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  let evenOdd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(even),...sortOdd(odd),...sortEven(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic4 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic5 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic6 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic7 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic8 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic9 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic10 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic11 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic12 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic13 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic14 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic15 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic16 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic17 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic18 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic19 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic20 = (s) => {\n const groups = encodeCyclic(s);\n const groups2 = [];\n for (let i = 0; i < groups.length; i++) { groups2.push(groups.slice(i).join(''));\n }\n return groups2.join('');\n}\n\n/*\n takes as input string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum;\n    fibSum += i;\n    if (fibSum > n) {\n      fibSum = fibSum - i;\n    }\n    if (fibNum === n) {\n      return fibNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  let sumNum = 0;\n  for (let i = 1; i <= n; i++) {\n    sumNum = sum;\n    sum += i;\n    if (sum > n) {\n      sum = sum - i;\n    }\n    if (sumNum === n) {\n      return sumNum;\n    }\n  }\n};\n\n/*\n  primeSum returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.map((x) => Math.abs(x));\n  const MADDER = meansAbs.reduce((a, b) => a + b, 0) / meansAbs.length;\n  return MADDER;\n};\n\n/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((x) => Math.round(x));\n  const meansAbs = means.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(Math.abs(l[i]))) {\n      return false\n    }\n    set.add(Math.abs(l[i]))\n  }\n  return true\n}\n\n/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j - 1].speed && carsRace[i][j].speed === carsRace[i + 1][j].speed) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j - 1].speed && carsRace[i][j].speed === carsRace[i + 1][j].speed) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j - 1].speed && carsRace[i][j].speed === carsRace[i + 1][j].speed) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j - 1].speed && carsRace[i][j].speed === carsRace[i + 1][j].speed) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j - 1].speed && carsRace[i][j].speed === carsRace[i + 1][j].speed) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j - 1].speed && carsRace[i][j].speed === carsRace[i + 1][j].speed) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let collision = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j].speed === carsRace[i][j - 1].speed && carsRace[i][j].speed === carsRace[i + 1][j].speed) {\n        collision++;\n      }\n    }\n  }\n  return collision;\n};\n\n/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i++]);\n  }\n  return res;\n};\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123, 1])\n  [6, 4, 6, 3, 4, 4, 10, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res += (x % base).toString()\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n Convert string representations of numbers to numbers.\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n >>> convertBase('10011', 2)\n 10011\n >>> convertBase('10011', 10)\n 10011\n >>> convertBase('10011', 16)\n 10011\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return a * Math.sqrt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib0(5)\n  5\n  >>> fib0(6)\n  8\n  >>> fib0(7)\n  13\n  */\nconst fib0 = (n) => {\n  if (n <= 0) {\n    return n;\n  }\n  return fib0(n - 1) + fib0(n - 2) + fib0(n - 3) + fib0(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib1(5)\n  5\n  >>> fib1(6)\n  8\n  >>> fib1(7)\n  13\n  */\nconst fib1 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib1(n - 1) + fib1(n - 2) + fib1(n - 3) + fib1(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib2(5)\n  5\n  >>> fib2(6)\n  8\n  >>> fib2(7)\n  13\n  */\nconst fib2 = (n) => {\n  if (n <= 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2) + fib2(n - 3) + fib2(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib3(5)\n  5\n  >>> fib3(6)\n  8\n  >>> fib3(7)\n  13\n  */\nconst fib3 = (n) => {\n  if (n <= 3) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3) + fib3(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib4(5)\n  5\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  13\n  */\nconst fib4 = (n) => {\n  if (n <= 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib0(5)\n  5\n  >>> fib0(6)\n  8\n  >>> fib0(7)\n  13\n  */\nconst fib0 = (n) => {\n  if (n <= 0) {\n    return n;\n  }\n  return fib0(n - 1) + fib0(n - 2) + fib0(n - 3) + fib0(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib1(5)\n  5\n  >>> fib1(6)\n  8\n  >>> fib1(7)\n  13\n  */\nconst fib1 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib1(n - 1) + fib1(n - 2) + fib1(n - 3) + fib1(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> 1 fib0(2) -> 1 fib0(3) fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n-3) + fib0(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences. Do not using recursions.\n  >>> fib2(5)\n  5\n  >>> fib2(6)\n  8\n  >>> fib2(7)\n  13\n  */\nconst fib2 = (n) => {\n  if (n <= 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2) + fib2(n - 3) + fib2(n - 4);\n};\n\n/*The Fibonacci number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib0(0) -> 0 fib0(1) -> ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median(left) + median(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median2 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median2(left) + median2(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median3 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median3(left) + median3(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median4 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median4(left) + median4(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median5 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median5(left) + median5(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median6 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median6(left) + median6(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median7 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median7(left) + median7(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median8 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median8(left) + median8(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median9 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median9(left) + median9(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median10 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median10(left) + median10(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median11 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median11(left) + median11(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median12 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median12(left) + median12(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median13 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median13(left) + median13(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median14 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median14(left) + median14(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median15 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median15(left) + median15(right);\n};\n\n/*Return median of elements in list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median16 = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = l.length / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return median16(left) + median16(right);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    reversedText += text[i];\n  }\n  return text === reversedText;\n};\n\n/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = 0; i < text.length; i++) {\n    re", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0 || n < p || n % p === 0) {\n    return NaN;\n  }\n  return ((n % p) + p) % p;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = _curry2((n, xs) => {\n  return slice(Math.max(0, n), Infinity, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx + 1, Infinity, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 &&!fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx, Infinity, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropWhile = _curry2((fn, xs) => {\n  let idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx, Infinity, xs);\n});\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLast, R.dropWhile\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.takeLastWhile(isNotFour, [1, 2, 3, 4]); //=> [2, 3, 4]\n *\n *      R.takeLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar takeLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `true`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLast, R.dropWhile\n * @example\n *\n *      const isOne = x => x === 1;\n *\n *      R.takeWhile(isOne, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.takeWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar takeWhile = _curry2((fn, xs) => {\n  let idx = 0;\n  const len = xs.length;\n  while (idx < len && fn(xs[idx])) {\n    idx += 1;\n  }\n  return slice(0, idx, xs);\n});\n\n/**\n * Runs the given function with the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); };\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeNonLetters is a function that takes string and returns string without non letter characters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonLetters('abcdef')\n  'abcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'aaBAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  return text.replace(/[^a-zA-Z]/g, '');\n};\n\n/*\n  removeNonNumbers is a function that takes string and returns string without non number characters.\n  >>> removeNonNumbers('')\n  ''\n  >>> removeNonNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonNumbers('abcdef')\n  'abcdef'\n  >>> removeNonNumbers('aaaaa')\n  ''\n  >>> removeNonNumbers('aaBAA')\n  'aaBAA'\n  >>> removeNonNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNonNumbers = (text) => {\n  return text.replace(/[^0-9]/g, '');\n};\n\n/*\n  removeNonPunctuation is a function that takes string and returns string without non punctuation characters.\n  >>> removeNonPunctuation('')\n  ''\n  >>> removeNonPunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonPunctuation('abcdef')\n  'abcdef'\n  >>> removeNonPunctuation('aaaaa')\n  ''\n  >>> removeNonPunctuation('aaBAA')\n  'aaBAA'\n  >>> removeNonPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeNonPunctuation = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonWhitespace is a function that takes string and returns string without non whitespace characters.\n  >>> removeNonWhitespace('')\n  ''\n  >>> removeNonWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonWhitespace('abcdef')\n  'abcdef'\n  >>> removeNonWhitespace('aaaaa')\n  ''\n  >>> removeNonWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeNonWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeNonWhitespace = (text) => {\n  return text.replace(/[^ ]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace characters.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaBAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without whitespace characters.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without whitespace characters.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without whitespace characters.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without whitespace characters.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without whitespace characters.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpaces = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhiteSpaces is a function that takes string and returns string without whitespace characters.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdef'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'aaBAA'\n  >>> removeWhiteSpaces('zb", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange2 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange3([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange3([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange3 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange4([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange4([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange4 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange5([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange5([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange5 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange6([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange6([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange6 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange7([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange7([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange7 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange8([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange8([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange8 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange9([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange9([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange9 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange10([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange10([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange10 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange11([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange11([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange11 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange12([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange12([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange12 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange13([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange13([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange13 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange14([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange14([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange14 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a && l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange15([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange15([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange15 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) return false\n  }\n  return true\n}\n\n/*Return trueer if all numbers in the list l were in range [a, b].\n  >>> inRange16([10, 20, 30, 40], 10, 40)\n  true\n  >>> inRange16([10, 20, 30, 40], 10, 50)\n  false\n  */\nconst inRange16 = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the remainder of division of two numbers x and y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  2\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulus of division of two numbers x and y\n  >>> modulus(2, 3)\n  2\n  >>> modulus(5, 7)\n  5\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the sign of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst signOf = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst absOf = (x) => {\n  return Math.abs(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(3)\n  5\n  >>> fib(4)\n  8\n  >>> fib(5)\n  13\n  >>> fib(6)\n  21\n  >>> fib(7)\n  55\n  >>> fib(8)\n  89\n  >>> fib(9)\n  1441\n  >>> fib(10)\n  233168\n  >>> fib(11)\n  3771469\n  >>> fib(12)\n  535299969\n  >>> fib(13)\n  812829191\n  >>> fib(14)\n  1374673804\n  >>> fib(15)\n  2178309573\n  >>> fib(16)\n  2865770557\n  >>> fib(17)\n  4150789044\n  >>> fib(18)\n  57023735015\n  >>> fib(19)\n  9228231233\n  >>> fib(20)\n  14930358505\n  >>> fib(21)\n  24157816557\n  >>> fib(22)\n  39088843365\n  >>> fib(23)\n  63245925290\n  >>> fib(24)\n  102334151\n  >>> fib(25)\n  1726345089\n  >>> fib(26)\n  2865770557\n  >>> fib(27)\n  4150789044\n  >>> fib(28)\n  57023735015\n  >>> fib(29)\n  9228231233\n  >>> fib(30)\n  14930358505\n  >>> fib(31)\n  24157816557\n  >>> fib(32)\n  39088843365\n  >>> fib(33)\n  63245925290\n  >>> fib(34)\n  102334151\n  >>> fib(35)\n  1726345089\n  >>> fib(36)\n  2865770557\n  >>> fib(37)\n  4150789044\n  >>> fib(38)\n  57023735015\n  >>> fib(39)\n  9228231233\n  >>> fib(40)\n  14930358505\n  >>> fib(41)\n  24157816557\n  >>> fib(42)\n  39088843365\n  >>> fib(43)\n  63245925290\n  >>> fib(44)\n  102334151\n  >>> fib(45)\n  1726345089\n  >>> fib(46)\n  2865770557\n  >>> fib(47)\n  4150789044\n  >>> fib(48)\n  57023735015\n  >>> fib(49)\n  9228231233\n  >>> fib(50)\n  14930358505\n  >>> fib(51)\n  24157816557\n  >>> fib(52)\n  39088843365\n  >>> fib(53)\n  63245925290\n  >>> fib(54)\n  102334151\n  >>> fib(55)\n  1726345089\n  >>> fib(56)\n  2865770557\n  >>> fib(57)\n  4150789044\n  >>> fib(58)\n  57023735015\n  >>> fib(59)\n  9228231233\n  >>> fib(60)\n  14930358505\n  >>> fib(61)\n  24157816557\n  >>> fib(62)\n  39088843365\n  >>> fib(63)\n  63245925290\n  >>> fib(64)\n  102334151\n  >>> fib(65)\n  1726345089\n  >>> fib(66)\n  2865770557\n  >>> fib(67)\n  4150789044\n  >>> fib(68)\n  57023735015\n  >>> fib(69)\n  9228231233\n  >>> fib(70)\n  14930358505\n  >>> fib(71)\n  24157816557\n  >>> fib(72)\n  39088843365\n  >>> fib(73)\n  63245925290\n  >>> fib(74)\n  102334151\n  >>> fib(75)\n  1726345089\n  >>> fib(76)\n  2865770557\n  >>> fib(77)\n  4150789044\n  >>> fib(78)\n  57023735015\n  >>> fib(79)\n  9228231233\n  >>> fib(80)\n  14930358505\n  >>> fib(81)\n  24157816557\n  >>> fib(82)\n  39088843365\n  >>> fib(83)\n  63245925290\n  >>> fib(84)\n  102334151\n  >>> fib(85)\n  1726345089\n  >>> fib(86)\n  2865770557\n  >>> fib(87)\n  4150789044\n  >>> fib(88)\n  57023735015\n  >>> fib(89)\n  9228231233\n  >>> fib(90)\n  14930358505\n  >>> fib(91)\n  24157816557\n  >>> fib(92)\n  39088843365\n  >>> fib(93)\n  63245925290\n  >>> fib(94)\n  102334151\n  >>> fib(95)\n  1726345089\n  >>> fib(96)\n  2865770557\n  >>> fib(97)\n  4150789044\n  >>> fib(98)\n  57023735015\n  >>> fib(99)\n  9228231233\n  >>> fib(100)\n  14930358505\n  >>> fib(101)\n  24157816557\n  >>> fib(102)\n  39088843365\n  >>> fib(103)\n  63245925290\n  >>> fib(104)\n  102334151\n  >>> fib(105)\n  1726345089\n  >>> fib(106)\n  28657705", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.match(/<[^<>]*>/g);\n  const closings = brackets.match(/<[^<>]*>/g);\n  return openings.length!== closings.length;\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+/g, '-');\n};\n\n/**\n * Given a string, return a new string with all the dashes replaced by spaces.\n * \n * >>> replaceDashes(\"hello-world\")\n * \"hello world\"\n */\nconst replaceDashes = (str) => {\n  return str.replace(/-/g,'');\n};\n\n/**\n * Given a string, return a new string with all the spaces replaced by dashes.\n * \n * >>> replaceSpaces(\"hello world\")\n * \"hello-world\"\n */\nconst replaceSpaces = (str) => {\n  return str.replace(/\\s+", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prevVal = l[0]\n  let prevIndex = -1\n  let currIndex = 0\n  let currVal = l[currIndex]\n\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prevVal) {\n      currIndex++\n      currVal = l[currIndex]\n    }\n\n    if (l[i] < prevVal) {\n      currIndex--\n      currVal = l[currIndex]\n    }\n\n    if (currIndex < prevIndex) {\n      return true\n    }\n\n    if (currIndex > prevIndex) {\n      return false\n    }\n\n    prevIndex = currIndex\n    prevVal = currVal\n  }\n\n  return true\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1, 0])\n  true\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors(8)\n  1\n  >>> countDivisors(13)\n  2\n  >>> countDivisors(210)\n  2\n  >>> countDivisors(2520)\n  3\n  */\nconst countDivisors = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors2(8)\n  1\n  >>> countDivisors2(13)\n  2\n  >>> countDivisors2(210)\n  2\n  >>> countDivisors2(2520)\n  3\n  */\nconst countDivisors2 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors3(8)\n  1\n  >>> countDivisors3(13)\n  2\n  >>> countDivisors3(210)\n  2\n  >>> countDivisors3(2520)\n  3\n  */\nconst countDivisors3 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors4(8)\n  1\n  >>> countDivisors4(13)\n  2\n  >>> countDivisors4(210)\n  2\n  >>> countDivisors4(2520)\n  3\n  */\nconst countDivisors4 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors5(8)\n  1\n  >>> countDivisors5(13)\n  2\n  >>> countDivisors5(210)\n  2\n  >>> countDivisors5(2520)\n  3\n  */\nconst countDivisors5 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors6(8)\n  1\n  >>> countDivisors6(13)\n  2\n  >>> countDivisors6(210)\n  2\n  >>> countDivisors6(2520)\n  3\n  */\nconst countDivisors6 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors7(8)\n  1\n  >>> countDivisors7(13)\n  2\n  >>> countDivisors7(210)\n  2\n  >>> countDivisors7(2520)\n  3\n  */\nconst countDivisors7 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors8(8)\n  1\n  >>> countDivisors8(13)\n  2\n  >>> countDivisors8(210)\n  2\n  >>> countDivisors8(2520)\n  3\n  */\nconst countDivisors8 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors9(8)\n  1\n  >>> countDivisors9(13)\n  2\n  >>> countDivisors9(210)\n  2\n  >>> countDivisors9(2520)\n  3\n  */\nconst countDivisors9 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors10(8)\n  1\n  >>> countDivisors10(13)\n  2\n  >>> countDivisors10(210)\n  2\n  >>> countDivisors10(2520)\n  3\n  */\nconst countDivisors10 = (n) => {\n  let divisors = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1;\n      for (let j = i * i; j < n; j += i) {\n        if (n % j === 0) {\n          divisors += 1;\n        }\n      }\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to each other.\n  >>> countDivisors11(8)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(\" \");\n  const paren_array_length = paren_array.length;\n  const max_level = 0;\n  const max_level_array = [];\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array[i].length;\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const current_level = paren_array", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length === closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding closings brackets.\n\n  >>> incorrectBracketing(\"(\")\n  false\n  >>> incorrectBracketing(\"()\")\n  false\n  >>> incorrectBracketing(\"(()())\")\n  false\n  >>> incorrectBracketing(\")(()\")\n  true\n  */\nconst incorrectBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  return openingBrackets && closingBrackets && openingBrackets.length!== closingBrackets.length;\n};\n\n/* returns true if brackets is a string of \"(\" and \")\". return falseer if every openings brackets had a corresponding ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* Calculate distance between two points. Return distance in meters.\n  >>> distance([3, 1, 2, 4, 5], [1, 2, 3])\n  1.4142135623730951\n  */\nconst distance = (p1, p2) => {\n  let distance = 0;\n  for (let i = 0; i < p1.length; i++) {\n    distance += Math.pow(p1[i] - p2[i], 2);\n  }\n  return Math.sqrt(distance);\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  bearing = (Math.atan2(y, x) * 180) / Math.PI;\n  return bearing;\n};\n\n/* Calculate bearing between two points. Return bearing in degrees.\n  >>> bearing([3, 1, 2, 4, 5], [1, 2, 3])\n  45\n  */\nconst bearing = (p1, p2) => {\n  let bearing = 0;\n  let lat1 = p1[0] * Math.PI / 180;\n  let lat2 = p2[0] * Math.PI / 180;\n  let lon1 = p1[1] * Math.PI / 180;\n  let lon2 = p2[1] * Math.PI / 180;\n  let y = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  let x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibonacci number sequence is a sequence of integers starting from 0 and increasing by 1 each time it reaches its maximum value. The Fibonacci number sequence is defined as following: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(2) == 1 fibonacci(3) == 2 fibonacci(4) == 3 fibonacci(5) == 5 fibonacci(6) == 8 fibonacci(7) == 13 fibonacci(8) == 21 fibonacci(9) == 34 fibonacci(10) == 55 fibonacci(11) == 89 fibonacci(12) == 144 fibonacci(13) == 233 fibonacci(14) == 377 fibonacci(15) == 610 fibonacci(16) == 987 fibonacci(17) == 1597 fibonacci(18) == 2584 fibonacci(19) == 4181 fibonacci(20) == 6765 fibonacci(21) == 10946 fibonacci(22) == 17711 fibonacci(23) == 28657 fibonacci(24) == 46368 fibonacci(25) == 75025 fibonacci(26) == 121393 fibonacci(27) == 196418 fibonacci(28) == 317811 fibonacci(29) == 514229 fibonacci(30) == 832040\n Please writes a functions to efficiently computing the n-th elements of the fibonacci number sequences.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(8)\n  8\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a function to efficiently compute the n-th element of the Goldbach's conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  2\n  >>> goldbach(8)\n  3\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a function to efficiently compute the n-th element of the Goldbach's conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  2\n  >>> goldbach(8)\n  3\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a function to efficiently compute the n-th element of the Goldbach's conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  2\n  >>> goldbach(8)\n  3\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a function to efficiently compute the n-th element of the Goldbach's conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  2\n  >>> goldbach(8)\n  3\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a function to efficiently compute the n-th element of the Goldbach's conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  2\n  >>> goldbach(8)\n  3\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a function to efficiently compute the n-th element of the Goldbach's conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  2\n  >>> goldbach(8)\n  3\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a function to efficiently compute the n-th element of the Goldbach's conjecture.\n  >>> goldbach(1)\n  0\n  >>> goldbach(5)\n  2\n  >>> goldbach(8)\n  3\n  */\nconst goldbach = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return goldbach(n-1) + goldbach(n-2);\n};\n\n/*The Goldbach's conjecture is a mathematical fact that states that every positive integer greater than 1 can be expressed as the sum of two prime numbers. For example, the conjecture states that every positive integer greater than 1 is either divisible by 7 or by 11. Write a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = x.toString();\n  shift = shift % str.length;\n  return str.substr(0, shift) + str.substr(shift, str.length);\n};\n\n/*\n Return the sum of the digits of x.\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(-1)\n  1\n  >>> sumDigits(123)\n  6\n  >>> sumDigits(-123)\n  6\n  >>> sumDigits(0)\n  0\n  >>> sumDigits(-0)\n  0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the lower character only' ASCII code.\n\n  Examples:\n      lowerSum(\"\") => 0\n      lowerSum(\"abAB\") => 65\n      lowerSum(\"abcCd\") => 67\n      lowerSum(\"helloE\") => 69\n      lowerSum(\"woArBld\") => 65\n      lowerSum(\"aAaaaXa\") => 65\n  */\nconst lowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE\") => 69\n      upperLowerSum(\"woArBld\") => 65\n      upperLowerSum(\"aAaaaXa\") => 65\n  */\nconst upperLowerSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Tasking Write a function that takes a string as input and returning the sums of the upper and lower character only' ASCII code.\n\n  Examples:\n      upperLowerSum(\"\") => 0\n      upperLowerSum(\"abAB\") => 65\n      upperLowerSum(\"abcCd\") => 67\n      upperLowerSum(\"helloE", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const [apple, oranges, mango] = s.split(\" \").map(Number);\n  const total = apple + oranges + mango;\n  return mango - total >= n? mango : mango - total >= 0? mango - total : mango - total + 1;\n};\n\n// 👽 Exercise: Write a function that takes an array of strings and an integer that represents the number of elements in the array. Return the string that represents the number of elements in the array in the order of the array and the integer that represents the number of elements in the array in the order of the array. For example: arrayOrder(\"apple and oranges\", 3) ->\"apple and oranges\" - 3 = \"apple and oranges\" - 1 = \"apple and oranges\" - 2 = \"apple and oranges\" - 3 = \"apple and oranges\" - 4 = \"apple and oranges\" - 5 = \"apple and oranges\" - 6 = \"apple and oranges\" - 7 = \"apple and oranges\" - 8 = \"apple and oranges\" - 9 = \"apple and oranges\" - 10 = \"apple and oranges\" - 11 = \"apple and oranges\" - 12 = \"apple and oranges\" - 13 = \"apple and oranges\" - 14 = \"apple and oranges\" - 15 = \"apple and oranges\" - 16 = \"apple and oranges\" - 17 = \"apple and oranges\" - 18 = \"apple and oranges\" - 19 = \"apple and oranges\" - 20 = \"apple and oranges\" - 21 = \"apple and oranges\" - 22 = \"apple and oranges\" - 23 = \"apple and oranges\" - 24 = \"apple and oranges\" - 25 = \"apple and oranges\" - 26 = \"apple and oranges\" - 27 = \"apple and oranges\" - 28 = \"apple and oranges\" - 29 = \"apple and oranges\" - 30 = \"apple and oranges\" - 31 = \"apple and oranges\" - 32 = \"apple and oranges\" - 33 = \"apple and oranges\" - 34 = \"apple and oranges\" - 35 = \"apple and oranges\" - 36 = \"apple and oranges\" - 37 = \"apple and oranges\" - 38 = \"apple and oranges\" - 39 = \"apple and oranges\" - 40 = \"apple and oranges\" - 41 = \"apple and oranges\" - 42 = \"apple and oranges\" - 43 = \"apple and oranges\" - 44 = \"apple and oranges\" - 45 = \"apple and oranges\" - 46 = \"apple and oranges\" - 47 = \"apple and oranges\" - 48 = \"apple and oranges\" - 49 = \"apple and oranges\" - 50 = \"apple and oranges\" - 51 = \"apple and oranges\" - 52 = \"apple and oranges\" - 53 = \"apple and oranges\" - 54 = \"apple and oranges\" - 55 = \"apple and oranges\" - 56 = \"apple and oranges\" - 57 = \"apple and oranges\" - 58 = \"apple and oranges\" - 59 = \"apple and oranges\" - 60 = \"apple and oranges\" - 61 = \"apple and oranges\" - 62 = \"apple and oranges\" - 63 = \"apple and oranges\" - 64 = \"apple and oranges\" - 65 = \"apple and oranges\" - 66 = \"apple and oranges\" - 67 = \"apple and oranges\" - 68 = \"apple and oranges\" - 69 = \"apple and oranges\" - 70 = \"apple and oranges\" - 71 = \"apple and oranges\" - 72 = \"apple and oranges\" - 73 = \"apple and oranges\" - 74 = \"apple and oranges\" - 75 = \"apple and oranges\" - 76 = \"apple and oranges\" - 77 = \"apple and oranges\" - 78 = \"apple and oranges\" - 79 = \"apple and oranges\" - 80 = \"apple and oranges\" - 81 = \"apple and oranges\" - 82 = \"apple and oranges\" - 83 = \"apple and oranges\" - 84 = \"apple and oranges\" - 85 = \"apple and oranges\" - 86 = \"apple and oranges\" - 87 = \"apple and oranges\" - 88 = \"apple and oranges\" - 89 = \"apple and oranges\" - 90 = \"apple and oranges\" - 91 = \"apple and oranges\" - 92 = \"apple and oranges\" - 93 = \"apple and oranges\" - 94 = \"apple and oranges\" - 95 = \"apple and oranges\" - 96 = \"apple and oranges\" - 97 = \"apple and oranges\" - 98 = \"apple and oranges\" - 99 = \"apple and oranges\" - 100 = \"apple and oranges\" - 101 = \"apple and oranges\" - 102 = \"apple and oranges\" - 103 = \"apple and oranges\" - 104 = \"apple and oranges\" - 105 = \"apple and oranges\" - 106 = \"apple and oranges\" - 107 = \"apple and oranges\" - 108 = \"apple and oranges\" - 109 = \"apple and oranges\" - 110 = \"apple and oranges\" - 111 = \"apple and oranges\" - 112 = \"apple and oranges\" - 113 = \"apple and oranges\" - 114 = \"apple and oranges\" - 115 = \"apple and oranges\" - 116 = \"apple and oranges\" - 117 = \"apple and oranges\" - 118 = \"apple and oranges\" - 119 = \"apple and oranges\" - 120 = \"apple and oranges\" - 121 = \"apple and oranges\" - 122 = \"apple and oranges\" - 123 = \"apple and oranges\" - 124 = \"apple and oranges\" - 125 = \"apple and oranges\" - 126 = \"apple and oranges\" - 127 = \"apple and oranges\" - 128 = \"apple and oranges\" - 129 = \"apple and oranges\" - 130 = \"apple and oranges\" - 131 = \"apple and oranges\" - 132 = \"apple and oranges\" - 133 = \"apple and oranges\" - 134 = \"apple and oranges\" - 135 = \"apple and oranges\" - 136 = \"apple and oranges\" - 137 = \"apple and oranges\" - 138 = \"apple and oranges\" - 139 = \"apple and oranges\" - 140 = \"apple and oranges\" - 141 = \"apple and oranges\" - 142 = \"apple and oranges\" - 143 = \"apple and oranges\" - 144 = \"apple and oranges\" - 145 = \"apple and oranges\" - 146 = \"apple and oranges\" - 147 = \"apple and oranges\" - 148 = \"apple and oranges\" - 149 = \"apple and oranges\" - 150 = \"apple and oranges\" - 151 = \"apple and oranges\" - 152 = \"apple and oranges\" - 153 = \"apple and oranges\" - 154", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr\n   .filter((item) => item % 2 === 0)\n   .sort((a, b) => a - b)\n   .map((item) => item)\n   .slice(0, arr.length - 1);\n\n  if (evenValues.length === 0) return [];\n\n  const [smallestEvenValue, smallestEvenIndex] = evenValues.reduce((acc, cur, index) => {\n    if (index === 0) {\n      acc[0] = cur;\n      acc[1] = index;\n      return acc;\n    }\n\n    if (cur < acc[0]) {\n      acc[0] = cur;\n      acc[1] = index;\n    }\n\n    return acc;\n  }, [evenValues[0], 0]);\n\n  return [smallestEvenValue, smallestEvenIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [1, 2]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [1, 2]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr\n   .filter((item) => item % 2!== 0)\n   .sort((a, b) => a - b)\n   .map((item) => item)\n   .slice(0, arr.length - 1);\n\n  if (oddValues.length === 0) return [];\n\n  const [smallestOddValue, smallestOddIndex] = oddValues.reduce((acc, cur, index) => {\n    if (index === 0) {\n      acc[0] = cur;\n      acc[1] = index;\n      return acc;\n    }\n\n    if (cur < acc[0]) {\n      acc[0] = cur;\n      acc[1] = index;\n    }\n\n    return acc;\n  }, [oddValues[0], 0]);\n\n  return [smallestOddValue, smallestOddIndex];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [1, 2]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [1, 2]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr\n   .filter((item) => item % 2!== 0)\n   .sort((a, b) => a - b)\n   .map((item) => item)\n   .slice(0, arr.length - 1);\n\n  if (oddValues.length === 0) return [];\n\n  const [smallestOddValue, smallestOddIndex] = oddValues.reduce((acc, cur, index) => {\n    if (index === 0) {\n      acc[0] = cur;\n      acc[1] = index;\n      return acc;\n    }\n\n    if (cur < acc[0]) {\n      acc[0] = cur;\n      acc[1] = index;\n    }\n\n    return acc;\n  }, [oddValues[0], 0]);\n\n  return [smallestOddValue, smallestOddIndex];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller odd value. If multiple node with the same smaller odd value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no odd value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [1, 2]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [1, 2]\n      Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndexAndValue = (arr) => {\n  const oddValues = arr\n   .filter((item) => item % 2!== 0)\n   .sort((a, b) => a - b)\n   .map((item) => item)\n   .slice(0, arr.length - 1);\n\n  if (oddValues.length === 0) return [];\n\n  const [smallestOddValue, smallestOddIndex] = oddValues.reduce((acc, cur, index) => {\n    if (index === 0) {\n      acc[0] = cur;\n      acc[1] = index;\n      return acc;\n    }\n\n    if (cur < acc[0]) {\n      acc[0] = cur;\n      acc[1] = index;\n    }\n\n    return acc;\n  }, [oddValues[0], 0]);\n\n  return [smallestOddValue, smallestOddIndex, smallestOddValue];\n};\n\nexport { pluckOddsIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) >= i) {\n      return item;\n    }\n  }\n  return -1;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countPositive([4, 1, 2, 2, 3, 1])) == 3\n      countPositive([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countPositive([5, 5, 4, 4, 4])) == 1\n  */\nconst countPositive = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) >= i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is less than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countNegative([4, 1, 2, 2, 3, 1])) == 1\n      countNegative([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countNegative([5, 5, 4, 4, 4])) == 3\n  */\nconst countNegative = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) < i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is less than zero, and had a frequency less than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countNegative([4, 1, 2, 2, 3, 1])) == 1\n      countNegative([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countNegative([5, 5, 4, 4, 4])) == 3\n  */\nconst countNegative = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) < i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is less than zero, and had a frequency less than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countNegative([4, 1, 2, 2, 3, 1])) == 1\n      countNegative([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countNegative([5, 5, 4, 4, 4])) == 3\n  */\nconst countNegative = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) < i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countPositive([4, 1, 2, 2, 3, 1])) == 3\n      countPositive([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countPositive([5, 5, 4, 4, 4])) == 1\n  */\nconst countPositive = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) >= i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is greater than zero, and had a frequency less than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countPositive([4, 1, 2, 2, 3, 1])) == 1\n      countPositive([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countPositive([5, 5, 4, 4, 4])) == 3\n  */\nconst countPositive = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) >= i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is less than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countNegative([4, 1, 2, 2, 3, 1])) == 1\n      countNegative([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countNegative([5, 5, 4, 4, 4])) == 3\n  */\nconst countNegative = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) < i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was given a list of positive integers. Return the number of integers that is less than zero, and had a frequency less than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n  Examples:\n      countNegative([4, 1, 2, 2, 3, 1])) == 1\n      countNegative([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      countNegative([5, 5, 4, 4, 4])) == 3\n  */\nconst countNegative = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    if (map.has(item) && map.get(item) < i) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You was ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not containing gives substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that starts with gives substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  return strings.filter(string => string.startsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that ends with gives substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  return strings.filter(string => string.endsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that contains gives substring\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByContains = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not contains gives substring\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that starts with gives substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  return strings.filter(string => string.startsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that ends with gives substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  return strings.filter(string => string.endsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that contains gives substring\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByContains = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not contains gives substring\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that starts with gives substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  return strings.filter(string => string.startsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that ends with gives substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  return strings.filter(string => string.endsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that contains gives substring\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByContains = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not contains gives substring\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that starts with gives substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  return strings.filter(string => string.startsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that ends with gives substring\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  return strings.filter(string => string.endsWith(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that contains gives substring\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByContains = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that not contains gives substring\n  >>> filterByNotContains([], 'a')\n  []\n  >>> filterByNotContains(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotContains = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that starts with gives substring\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByStar", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst]\n  sorted.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  const isValidTriangle = (areaA >= sideC) && (areaB >= sideC) && (areaC >= sideC);\n  return isValidTriangle? Math.round(areaSum / 3) : -1;\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum / 3);\n};\n\n/*\n  Given a triangle, find the area of the triangle by using the formula above.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaByFormula = (a, b, c) => {\n  const sideA = Math.abs(a);\n  const sideB = Math.abs(b);\n  const sideC = Math.abs(c);\n  const areaA = sideA * sideA;\n  const areaB = sideB * sideB;\n  const areaC = sideC * sideC;\n  const areaSum = areaA + areaB + areaC;\n  return Math.round(areaSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxSum = w;\n  let maxSumIndex = 0;\n  let maxSumWeight = 0;\n  let maxSumWeightIndex = 0;\n  let maxSumWeightSum = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n  let maxSumWeightSumIndex = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let minChange = 0;\n  let minChangeIndex = 0;\n  for (let i = 0; i < len; i++) {\n    const currentElement = arr[i];\n    const nextElement = arr[len - i - 1];\n    if (currentElement === nextElement) {\n      minChange++;\n      if (minChange > minChangeIndex) {\n        minChangeIndex = i;\n      }\n    } else {\n      minChange = 0;\n    }\n  }\n  return minChangeIndex;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  const arr1 = lst1.map(item => item.length);\n  const arr2 = lst2.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common;\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞ []\n  mostCommon(['hi', 'admin']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project', 'project']) ➞ ['admin']\n  mostCommon(['4']) ➞ ['4']\n  */\nconst mostCommon = (lst) => {\n  const arr1 = lst.map(item => item.length);\n  const arr2 = lst.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞ []\n  mostCommon(['hi', 'admin']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project', 'project']) ➞ ['admin']\n  mostCommon(['4']) ➞ ['4']\n  */\nconst mostCommon = (lst) => {\n  const arr1 = lst.map(item => item.length);\n  const arr2 = lst.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞ []\n  mostCommon(['hi', 'admin']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project', 'project']) ➞ ['admin']\n  mostCommon(['4']) ➞ ['4']\n  */\nconst mostCommon = (lst) => {\n  const arr1 = lst.map(item => item.length);\n  const arr2 = lst.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞ []\n  mostCommon(['hi', 'admin']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project', 'project']) ➞ ['admin']\n  mostCommon(['4']) ➞ ['4']\n  */\nconst mostCommon = (lst) => {\n  const arr1 = lst.map(item => item.length);\n  const arr2 = lst.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞ []\n  mostCommon(['hi', 'admin']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project', 'project']) ➞ ['admin']\n  mostCommon(['4']) ➞ ['4']\n  */\nconst mostCommon = (lst) => {\n  const arr1 = lst.map(item => item.length);\n  const arr2 = lst.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞ []\n  mostCommon(['hi', 'admin']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project', 'project']) ➞ ['admin']\n  mostCommon(['4']) ➞ ['4']\n  */\nconst mostCommon = (lst) => {\n  const arr1 = lst.map(item => item.length);\n  const arr2 = lst.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞ []\n  mostCommon(['hi', 'admin']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project']) ➞ ['admin']\n  mostCommon(['hi', 'admin', 'project', 'project']) ➞ ['admin']\n  mostCommon(['4']) ➞ ['4']\n  */\nconst mostCommon = (lst) => {\n  const arr1 = lst.map(item => item.length);\n  const arr2 = lst.map(item => item.length);\n  const common = arr1.filter(item => arr2.includes(item));\n  return common.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts a list of strings and returns the list that had the most number of char in the all strings of the list less than the other list.\n\n  Examples\n  mostCommon([]) ➞", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes.includes(a);\n};\n\n/*Writes a function that returns true if the given number is prime and false otherwise. Known that (a) is less then 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  let primes = [];\n  for (let i = 2; i <= a; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your tasks is to write a function which returns true if a number is a perfect power of 2 and false in other case. x is a perfect power of 2 if 2**int=x\n  For example:\n  isPerfectPower(1) => true\n  isPerfectPower(2) => true\n  isPerfectPower(3) => true\n  isPerfectPower(4) => true\n  isPerfectPower(5) => true\n  isPerfectPower(6) => false\n  isPerfectPower(7) => false\n  isPerfectPower(8) => false\n  isPerfectPower(9) => false\n  isPerfectPower(10) => false\n  isPerfectPower(11) => false\n  isPerfectPower(12) => false\n  isPerfectPower(13) => false\n  isPerfectPower(14) => false\n  isPerfectPower(15) => false\n  isPerfectPower(16) => false\n  isPerfectPower(17) => false\n  isPerfectPower(18) => false\n  isPerfectPower(19) => false\n  isPerfectPower(20) => false\n  isPerfectPower(21) => false\n  isPerfectPower(22) => false\n  isPerfectPower(23) => false\n  isPerfectPower(24) => false\n  isPerfectPower(25) => false\n  isPerfectPower(26) => false\n  isPerfectPower(27) => false\n  isPerfectPower(28) => false\n  isPerfectPower(29) => false\n  isPerfectPower(30) => false\n  isPerfectPower(31) => false\n  isPerfectPower(32) => false\n  isPerfectPower(33) => false\n  isPerfectPower(34) => false\n  isPerfectPower(35) => false\n  isPerfectPower(36) => false\n  isPerfectPower(37) => false\n  isPerfectPower(38) => false\n  isPerfectPower(39) => false\n  isPerfectPower(40) => false\n  isPerfectPower(41) => false\n  isPerfectPower(42) => false\n  isPerfectPower(43) => false\n  isPerfectPower(44) => false\n  isPerfectPower(45) => false\n  isPerfectPower(46) => false\n  isPerfectPower(47) => false\n  isPerfectPower(48) => false\n  isPerfectPower(49) => false\n  isPerfectPower(50) => false\n  isPerfectPower(51) => false\n  isPerfectPower(52) => false\n  isPerfectPower(53) => false\n  isPerfectPower(54) => false\n  isPerfectPower(55) => false\n  isPerfectPower(56) => false\n  isPerfectPower(57) => false\n  isPerfectPower(58) => false\n  isPerfectPower(59) => false\n  isPerfectPower(60) => false\n  isPerfectPower(61) => false\n  isPerfectPower(62) => false\n  isPerfectPower(63) => false\n  isPerfectPower(64) => false\n  isPerfectPower(65) => false\n  isPerfectPower(66) => false\n  isPerfectPower(67) => false\n  isPerfectPower(68) => false\n  isPerfectPower(69) => false\n  isPerfectPower(70) => false\n  isPerfectPower(71) => false\n  isPerfectPower(72) => false\n  isPerfectPower(73) => false\n  isPerfectPower(74) => false\n  isPerfectPower(75) => false\n  isPerfectPower(76) => false\n  isPerfectPower(77) => false\n  isPerfectPower(78) => false\n  isPerfectPower(79) => false\n  isPerfectPower(80) => false\n  isPerfectPower(81) => false\n  isPerfectPower(82) => false\n  isPerfectPower(83) => false\n  isPerfectPower(84) => false\n  isPerfectPower(85) => false\n  isPerfectPower(86) => false\n  isPerfectPower(87) => false\n  isPerfectPower(88) => false\n  isPerfectPower(89) => false\n  isPerfectPower(90) => false\n  isPerfectPower(91) => false\n  isPerfectPower(92) => false\n  isPerfectPower(93) => false\n  isPerfectPower(94) => false\n  isPerfectPower(95) => false\n  isPerfectPower(96) => false\n  isPerfectPower(97) => false\n  isPerfectPower(98) => false\n  isPerfectPower(99) => false\n  isPerfectPower(100) => false\n  isPerfectPower(101) => false\n  isPerfectPower(102) => false\n  isPerfectPower(103) => false\n  isPerfectPower(104) => false\n  isPerfectPower(105) => false\n  isPerfectPower(106) => false\n  isPerfectPower(107) => false\n  isPerfectPower(108) => false\n  isPerfectPower(109) => false\n  isPerfectPower(110) => false\n  isPerfectPower(111) => false\n  isPerfectPower(112) => false\n  isPerfectPower(113) => false\n  isPerfectPower(114) => false\n  isPerfectPower(115) => false\n  isPerfectPower(116) => false\n  isPerfectPower(117) => false\n  isPerfectPower(118) => false\n  isPerfectPower(119) => false\n  isPerfectPower(120) => false\n  isPerfectPower(121) => false\n  isPerfectPower(122) => false\n  isPerfectPower(123) => false\n  isPerfectPower(124) => false\n  isPerfectPower(125) => false\n  isPerfectPower(126) => false\n  isPerfectPower(127) => false\n  isPerfectPower(128) => false\n  isPerfectPower(129) => false\n  isPerfectPower(130) => false\n  isPerfectPower(131) => false\n  isPerfectPower(132) => false\n  isPerfectPower(133) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return true\n  if (a === 200", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexadecimalDigits = num.split(\"\");\n  let primes = [];\n  let primesCount = 0;\n  let primesSum = 0;\n  let primesSum2 = 0;\n  let primesSum3 = 0;\n  let primesSum4 = 0;\n  let primesSum5 = 0;\n  let primesSum6 = 0;\n  let primesSum7 = 0;\n  let primesSum8 = 0;\n  let primesSum9 = 0;\n  let primesSum10 = 0;\n  let primesSum11 = 0;\n  let primesSum12 = 0;\n  let primesSum13 = 0;\n  let primesSum14 = 0;\n  let primesSum15 = 0;\n  let primesSum16 = 0;\n  let primesSum17 = 0;\n  let primesSum18 = 0;\n  let primesSum19 = 0;\n  let primesSum20 = 0;\n  let primesSum21 = 0;\n  let primesSum22 = 0;\n  let primesSum23 = 0;\n  let primesSum24 = 0;\n  let primesSum25 = 0;\n  let primesSum26 = 0;\n  let primesSum27 = 0;\n  let primesSum28 = 0;\n  let primesSum29 = 0;\n  let primesSum30 = 0;\n  let primesSum31 = 0;\n  let primesSum32 = 0;\n  let primesSum33 = 0;\n  let primesSum34 = 0;\n  let primesSum35 = 0;\n  let primesSum36 = 0;\n  let primesSum37 = 0;\n  let primesSum38 = 0;\n  let primesSum39 = 0;\n  let primesSum40 = 0;\n  let primesSum41 = 0;\n  let primesSum42 = 0;\n  let primesSum43 = 0;\n  let primesSum44 = 0;\n  let primesSum45 = 0;\n  let primesSum46 = 0;\n  let primesSum47 = 0;\n  let primesSum48 = 0;\n  let primesSum49 = 0;\n  let primesSum50 = 0;\n  let primesSum51 = 0;\n  let primesSum52 = 0;\n  let primesSum53 = 0;\n  let primesSum54 = 0;\n  let primesSum55 = 0;\n  let primesSum56 = 0;\n  let primesSum57 = 0;\n  let primesSum58 = 0;\n  let primesSum59 = 0;\n  let primesSum60 = 0;\n  let primesSum61 = 0;\n  let primesSum62 = 0;\n  let primesSum63 = 0;\n  let primesSum64 = 0;\n  let primesSum65 = 0;\n  let primesSum66 = 0;\n  let primesSum67 = 0;\n  let primesSum68 = 0;\n  let primesSum69 = 0;\n  let primesSum70 = 0;\n  let primesSum71 = 0;\n  let primesSum72 = 0;\n  let primesSum73 = 0;\n  let primesSum74 = 0;\n  let primesSum75 = 0;\n  let primesSum76 = 0;\n  let primesSum77 = 0;\n  let primesSum78 = 0;\n  let primesSum79 = 0;\n  let primesSum80 = 0;\n  let primesSum81 = 0;\n  let primesSum82 = 0;\n  let primesSum83 = 0;\n  let primesSum84 = 0;\n  let primesSum85 = 0;\n  let primesSum86 = 0;\n  let primesSum87 = 0;\n  let primesSum88 = 0;\n  let primesSum89 = 0;\n  let primesSum90 = 0;\n  let primesSum91 = 0;\n  let primesSum92 = 0;\n  let primesSum93 = 0;\n  let primesSum94 = 0;\n  let primesSum95 = 0;\n  let primesSum96 = 0;\n  let primesSum97 = 0;\n  let primesSum98 = 0;\n  let primesSum99 = 0;\n  let primesSum100 = 0;\n  let primesSum101 = 0;\n  let primesSum102 = 0;\n  let primesSum103 = 0;\n  let primesSum104 = 0;\n  let primesSum105 = 0;\n  let primesSum106 = 0;\n  let primesSum107 = 0;\n  let primesSum108 = 0;\n  let primesSum109 = 0;\n  let primesSum110 = 0;\n  let primesSum111 = 0;\n  let primesSum112 = 0;\n  let primesSum113 = 0;\n  let primesSum114 = 0;\n  let primesSum115 = 0;\n  let primesSum116 = 0;\n  let primesSum117 = 0;\n  let primesSum118 = 0;\n  let primesSum119 = 0;\n  let primesSum120 = 0;\n  let primesSum121 = 0;\n  let primesSum122 = 0;\n  let primesSum123 = 0;\n  let primesSum124 = 0;\n  let primesSum125 = 0;\n  let primesSum126 = 0;\n  let primesSum127 = 0;\n  let primesSum128 = 0;\n  let primesSum129 = 0;\n  let primesSum130 = 0;\n  let primesSum131 = 0;\n  let primesSum132 = 0;\n  let primesSum133 = 0;\n  let primesSum134 = 0;\n  let primesSum135 = 0;\n  let primesSum136 = 0;\n  let primesSum137 = 0;\n  let primesSum138 = 0;\n  let primesSum139 = 0;\n  let primesSum140 = 0;\n  let primesSum141 = 0;\n  let primesSum142 = 0;\n  let primesSum143 = 0;\n  let primesSum144 = 0;\n  let primesSum145 = 0;\n  let primesSum146 = 0;\n  let primesSum147 = 0;\n  let primesSum148 = 0;\n  let primesSum149 = 0;\n  let primesSum150 = 0;\n  let primesSum151 = 0;\n  let primesSum152 = 0;\n  let primesSum153 = 0;\n  let primesSum154 = 0;\n  let primesSum155 = 0;\n  let primesSum156 = 0;\n  let primesSum157 = 0;\n  let primesSum158 = 0;\n  let primesSum159 = 0;\n  let primesSum160 = 0;\n  let primesSum161 = 0;\n  let primesSum162 = 0;\n  let primesSum163 = 0;\n  let primesSum164 = 0;\n  let primesSum165 = 0;\n  let primesSum166 = 0;\n  let primesSum167 = 0;\n  let primesSum168 = 0;\n  let primesSum169 = 0;\n  let primesSum170 = 0;\n  let primesSum171 = 0;\n  let primesSum172 = 0;\n  let primesSum173 = 0;\n  let primesSum174 = 0;\n  let primesSum175 = 0;\n  let primesSum176 = 0;\n  let primesSum177 = 0;\n  let primesSum178 = 0;\n  let primesSum179 = 0;\n  let primesSum180 = 0;\n  let primesSum181 = 0;\n  let primesSum182 = 0;\n  let primesSum183 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The function should take a string with each character represents a binary number and the function should return an integer, with each character represents a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal number. Each character in the string will represent a decimal ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) return false\n    if (s.charAt(i)!== s.charAt(i + 2)) return false\n    count += 1\n  }\n  return count >= 3\n}\n\n/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((acc, cur) => acc + cur);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesAverageArray = gradesArray.map(grade => grade / gradesAverage);\n  const gradesAverageSum = gradesAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverage = gradesAverageSum / gradesAverageArray.length;\n  const gradesAverageAverageArray = gradesAverageArray.map(grade => grade / gradesAverageAverage);\n  const gradesAverageAverageSum = gradesAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverage = gradesAverageAverageSum / gradesAverageAverageArray.length;\n  const gradesAverageAverageAverageArray = gradesAverageAverageArray.map(grade => grade / gradesAverageAverageAverage);\n  const gradesAverageAverageAverageSum = gradesAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverage = gradesAverageAverageAverageSum / gradesAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverageAverageArray.length;\n  const gradesAverageAverageAverageAverageArray = gradesAverageAverageAverageAverageArray.map(grade => grade / gradesAverageAverageAverageAverageAverage);\n  const gradesAverageAverageAverageAverageSum = gradesAverageAverageAverageAverageArray.reduce((acc, cur) => acc + cur);\n  const gradesAverageAverageAverageAverageAverage = gradesAverageAverageAverageAverageSum / gradesAverageAverageAverage", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique characters or false otherwise\n  Examples\n  uniqueChars('Hello') == true\n  uniqueChars('abbcccddd') == true\n  uniqueChars('kittens') == false\n  uniqueChars('orange') == false\n  */\nconst uniqueChars = (string) => {\n  const chars = [];\n  for (let i = 0; i < string.length; i++) {\n    if (chars.indexOf(string[i]) === -1) {\n      chars.push(string[i]);\n    }\n  }\n  return chars.length === string.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === words.length;\n};\n\n/*Write a function that takes a string and returns trueer if the string\n has all unique words or false otherwise\n  Examples\n  uniqueWords('Hello') == true\n  uniqueWords('abbcccddd') == true\n  uniqueWords('kittens') == false\n  uniqueWords('orange') == false\n  */\nconst uniqueWords = (string) => {\n  const words = string.split(' ');\n  return words.filter((word) => uniqueChars(word)).length === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const endsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 0. */ const startsZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) count++;\n  }\n  return count;\n};\n\n/*\n  Gives a positive integers n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  for (let i = N; i > 0; i /= 10) {\n    sum += i % 10;\n    result += sum.toString(2);\n  }\n  return result;\n};\n\n/*Given a positive integer", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the odd elements that was at odd indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-emptiest list of integers lst. add the even elements that was at even index", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'olleh'\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n descending order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returning a string where all word (separated by space) was replaced by an newer word where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffleDesc('Hi') returns 'Hi'\n  antiShuffleDesc('hello') returns 'olleh'\n  antiShuffleDesc('Hello World!!!') returns 'Hello World!!", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = []\n  const rows = lst.map((row) => {\n    const columns = []\n    for (let i = 0; i < row.length; i++) {\n      columns.push(row[i])\n    }\n    return columns\n  })\n  const sortedRows = sortRows(rows)\n  const sortedRowsIndex = sortedRows.findIndex(row => row[0] === x)\n  const sortedRowsColumns = sortedRows[sortedRowsIndex]\n  const sortedRowsColumnsIndex = sortedRowsColumns.findIndex(column => column === x)\n  return sortedRowsColumnsIndex\n}\n\n/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getColumn([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getColumn([], 1) == []\n  getColumn([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getColumn = (lst, x) => {\n  const columns = []\n  const columns = lst.map((column) => {\n    const rows = []\n    for (let i = 0; i < column.length; i++) {\n      rows.push(column[i])\n    }\n    return rows\n  })\n  const sortedColumns = sortColumns(columns)\n  const sortedColumnsIndex = sortedColumns.findIndex(column => column[0] === x)\n  const sortedColumnsRows = sortedColumns[sortedColumnsIndex]\n  const sortedColumnsRowsIndex = sortedColumnsRows.findIndex(row => row === x)\n  return sortedColumnsRowsIndex\n}\n\n/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getMatrix([], 1) == []\n  getMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getMatrix = (lst, x) => {\n  const matrix = []\n  const matrix = lst.map((row) => {\n    const columns = []\n    for (let i = 0; i < row.length; i++) {\n      columns.push(row[i])\n    }\n    return columns\n  })\n  const sortedMatrix = sortMatrix(matrix)\n  const sortedMatrixIndex = sortedMatrix.findIndex(row => row[0] === x)\n  const sortedMatrixColumns = sortedMatrix[sortedMatrixIndex]\n  const sortedMatrixColumnsIndex = sortedMatrixColumns.findIndex(column => column === x)\n  return sortedMatrixColumnsIndex\n}\n\n/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  findRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  findRow([], 1) == []\n  findRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst findRow = (lst, x) => {\n  const rows = []\n  const rows = lst.map((row) => {\n    const columns = []\n    for (let i = 0; i < row.length; i++) {\n      columns.push(row[i])\n    }\n    return columns\n  })\n  const sortedRows = sortRows(rows)\n  const sortedRowsIndex = sortedRows.findIndex(row => row[0] === x)\n  return sortedRowsIndex\n}\n\n/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  findColumn([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  findColumn([], 1) == []\n  findColumn([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst findColumn = (lst, x) => {\n  const columns = []\n  const columns = lst.map((column) => {\n    const rows = []\n    for (let i = 0; i < column.length; i++) {\n      rows.push(column[i])\n    }\n    return rows\n  })\n  const sortedColumns = sortColumns(columns)\n  const sortedColumnsIndex = sortedColumns.findIndex(column => column[0] === x)\n  return sortedColumnsIndex\n}\n\n/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  findMatrix([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  findMatrix([], 1) == []\n  findMatrix([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst findMatrix = (lst, x) => {\n  const matrix = []\n  const matrix = lst.map((row) => {\n    const columns = []\n    for (let i = 0; i < row.length; i++) {\n      columns.push(row[i])\n    }\n    return columns\n  })\n  const sortedMatrix = sortMatrix(matrix)\n  const sortedMatrixIndex = sortedMatrix.findIndex(row => row[0] === x)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const isEven = evenSum % 2 === 0;\n  const isOdd = oddSum % 2 === 1;\n  if (isEven) {\n    return sortedArray.slice().reverse();\n  }\n  if (isOdd) {\n    return sortedArray;\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAsc([]) => []\n  * sortArrayAsc([5]) => [5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAsc = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const isEven = evenSum % 2 === 0;\n  const isOdd = oddSum % 2 === 1;\n  if (isEven) {\n    return sortedArray.slice().reverse();\n  }\n  if (isOdd) {\n    return sortedArray;\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const isEven = evenSum % 2 === 0;\n  const isOdd = oddSum % 2 === 1;\n  if (isEven) {\n    return sortedArray.slice().reverse();\n  }\n  if (isOdd) {\n    return sortedArray;\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscAsc([]) => []\n  * sortArrayAscAsc([5]) => [5]\n  * sortArrayAscAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscAsc = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const isEven = evenSum % 2 === 0;\n  const isOdd = oddSum % 2 === 1;\n  if (isEven) {\n    return sortedArray.slice().reverse();\n  }\n  if (isOdd) {\n    return sortedArray;\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscDesc([]) => []\n  * sortArrayAscDesc([5]) => [5]\n  * sortArrayAscDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const isEven = evenSum % 2 === 0;\n  const isOdd = oddSum % 2 === 1;\n  if (isEven) {\n    return sortedArray.slice().reverse();\n  }\n  if (isOdd) {\n    return sortedArray;\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayDescDesc([]) => []\n  * sortArrayDescDesc([5]) => [5]\n  * sortArrayDescDesc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayDescDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const evenSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const oddSum = sortedArray.reduce((sum, num) => sum + num, 0);\n  const isEven = evenSum % 2 === 0;\n  const isOdd = oddSum % 2 === 1;\n  if (isEven) {\n    return sortedArray.slice().reverse();\n  }\n  if (isOdd) {\n    return sortedArray;\n  }\n};\n\n/*\n  Gives an array of non-negative integers, return a copy of the gives array after sorting in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArrayAscAscAsc([]) => []\n  * sortArrayAscAscAsc([5]) => [5]\n  * sortArrayAscAscAsc([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArrayAscAscAsc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayAscAscAsc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  let alphabetLength = alphabet.length;\n  let newAlphabet = '';\n  for (let i = 0; i < alphabetLength; i++) {\n    newAlphabet += alphabet[(i + alphabetLength) % alphabetLength];\n  }\n  let newAlphabetLength = newAlphabet.length;\n  let newAlphabetArray = [];\n  for (let i = 0; i < newAlphabetLength; i++) {\n    newAlphabetArray.push(newAlphabet.charAt(i));\n  }\n  let newAlphabetArrayLength = newAlphabetArray.length;\n  let newAlphabetArrayRotated = [];\n  for (let i = 0; i < newAlphabetArrayLength; i++) {\n    newAlphabetArrayRotated.push(newAlphabetArray[newAlphabetArrayLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedLength = newAlphabetArrayRotated.length;\n  let newAlphabetArrayRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedLength; i++) {\n    newAlphabetArrayRotatedRotated.push(newAlphabetArrayRotated[newAlphabetArrayRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedLength = newAlphabetArrayRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotated.push(newAlphabetArrayRotatedRotated[newAlphabetArrayRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength; i++) {\n    newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.push(newAlphabetArrayRotatedRotatedRotatedRotatedRotated[newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength - i - 1]);\n  }\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedLength = newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated.length;\n  let newAlphabetArrayRotatedRotatedRotatedRotatedRotatedRotated = [];\n  for (let i = 0; i < newAlphabet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling minimum elements finds until gives moment in the sequences.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n      min = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling sums finds until gives moment in the sequences.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum);\n      sum = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling averages finds until gives moment in the sequences.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2.5, 3, 2.5, 3]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === sum) {\n      result.push(sum / numbers.length);\n      sum = numbers[i];\n    }\n  }\n  return result;\n};\n\n/* From a gives list of integers, generating a list of rolling standard deviations finds until gives moment in the sequences.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.5811388300841898, 0.81469612302545166, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.7071067811865476, 0.707", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  if (sorted.length === 0) return null;\n  return sorted[1];\n};\n\n/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredom = 0\n  S.split('.').forEach((sentence) => {\n    if (sentence.startsWith('I')) {\n      boredom++\n    }\n  })\n  return boredom\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ false\n  someInt(3, -2, 1) ➞ true\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst someInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\nconst noneInt = (x, y, z) => {\n  const sum = (x + y + z) % 3 === 0\n  return!sum && isInteger(x) && isInteger(y) && isInteger(z)\n}\n\n/* Create a function that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  noneInt(5, 2, 7) ➞ false\n  noneInt(3, 2, 2) ➞ false\n  noneInt(3, -2, 1) ➞ false\n  noneInt(3.6, -2.2, 2) ➞ false\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex === -1) {\n      encodedMessage += letter;\n    } else {\n      const letterTwo = alphabet[letterIndex + 1];\n      encodedMessage += alphabet[letterIndex] + letterTwo;\n    }\n  }\n  return encodedMessage;\n};\n\n/*\n  Decodes a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (encodedMessage) => {\n  let decodedMessage = '';\n  for (let i = 0; i < encodedMessage.length; i++) {\n    const letter = encodedMessage[i];\n    const letterIndex = alphabet.indexOf(letter);\n    if (letterIndex === -1) {\n      decodedMessage += letter;\n    } else {\n      const letterTwo = alphabet[letterIndex + 1];\n      decodedMessage += alphabet[letterIndex] + letterTwo;\n    }\n  }\n  return decodedMessage;\n};\n\n/*\n  Converts a message to a function that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunction('test')\n  () => 'TGST'\n  >>> toFunction('This is a message')\n  () => 'tHKS KS C MGSSCGG'\n  */\nconst toFunction = (message) => {\n  return () => encode(message);\n};\n\n/*\n  Converts a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunction('TGST')\n  () => 'test'\n  >>> toFunction('tHKS KS C MGSSCGG')\n  () => 'This is a message'\n  */\nconst fromFunction = (functionToConvert) => {\n  return () => decode(functionToConvert());\n};\n\n/*\n  Converts a message to a function that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunction('test')\n  () => 'TGST'\n  >>> toFunction('This is a message')\n  () => 'tHKS KS C MGSSCGG'\n  */\nconst toFunctionWithMessage = (message) => {\n  return toFunction(message);\n};\n\n/*\n  Converts a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunctionWithMessage('TGST')\n  () => 'test'\n  >>> toFunctionWithMessage('tHKS KS C MGSSCGG')\n  () => 'This is a message'\n  */\nconst fromFunctionWithMessage = (functionToConvert) => {\n  return fromFunction(functionToConvert);\n};\n\n/*\n  Converts a message to a function that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunctionWithMessage('test')\n  () => 'TGST'\n  >>> toFunctionWithMessage('This is a message')\n  () => 'tHKS KS C MGSSCGG'\n  */\nconst toFunctionWithMessageAndMessage = (message1, message2) => {\n  return toFunctionWithMessage(message1) + message2;\n};\n\n/*\n  Converts a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunctionWithMessageAndMessage('TGST', 'test')\n  () => 'test'\n  >>> toFunctionWithMessageAndMessage('tHKS KS C MGSSCGG', 'This is a message')\n  () => 'This is a message'\n  */\nconst fromFunctionWithMessageAndMessage = (functionToConvert1, functionToConvert2) => {\n  return fromFunctionWithMessage(functionToConvert1) + functionToConvert2;\n};\n\n/*\n  Converts a message to a function that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunctionWithMessageAndMessage('test', 'TGST')\n  () => 'test'\n  >>> toFunctionWithMessageAndMessage('This is a message', 'tHKS KS C MGSSCGG')\n  () => 'This is a message'\n  */\nconst toFunctionWithMessageAndMessageAndMessage = (message1, message2, message3) => {\n  return toFunctionWithMessageAndMessage(message1, message2) + message3;\n};\n\n/*\n  Converts a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunctionWithMessageAndMessageAndMessage('TGST', 'test', 'This is a message')\n  () => 'test'\n  >>> toFunctionWithMessageAndMessageAndMessage('tHKS KS C MGSSCGG', 'This is a message', 'This is a message')\n  () => 'This is a message'\n  */\nconst fromFunctionWithMessageAndMessageAndMessage = (functionToConvert1, functionToConvert2, functionToConvert3) => {\n  return fromFunctionWithMessageAndMessage(functionToConvert1, functionToConvert2) + functionToConvert3;\n};\n\n/*\n  Converts a message to a function that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunctionWithMessageAndMessageAndMessage('test', 'TGST', 'This is a message')\n  () => 'test'\n  >>> toFunctionWithMessageAndMessageAndMessage('This is a message', 'tHKS KS C MGSSCGG', 'This is a message')\n  () => 'This is a message'\n  */\nconst toFunctionWithMessageAndMessageAndMessageAndMessage = (message1, message2, message3, message4) => {\n  return toFunctionWithMessageAndMessageAndMessage(message1, message2, message3) + message4;\n};\n\n/*\n  Converts a function that takes a message, and decodes such that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> toFunctionWithMessageAndMessageAndMessageAndMessage('TGST', 'test', 'This is a message', 'This is a message')\n  () => 'test'\n  >>> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sumOfDigit = 0;\n    while (num > 0) {\n      sumOfDigit += num % 10;\n      num /= 10;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sumOfDigit = 0;\n    while (num > 0) {\n      sumOfDigit += num % 10;\n      num /= 10;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sumOfDigit = 0;\n    while (num > 0) {\n      sumOfDigit += num % 10;\n      num /= 10;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sumOfDigit = 0;\n    while (num > 0) {\n      sumOfDigit += num % 10;\n      num /= 10;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sumOfDigit = 0;\n    while (num > 0) {\n      sumOfDigit += num % 10;\n      num /= 10;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let sumOfDigit = 0;\n    while (num > 0) {\n      sumOfDigit += num % 10;\n      num /= 10;\n    }\n    sum += sumOfDigit;\n  }\n  return sum;\n};\n\n/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseLower = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseUpper = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseAll = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseAllLower = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseAllUpper = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseAllAll = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] === \"string\") {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the numbers that were\n not prime numbers and less than n.\n  for example:\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([]) => []\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([1]) => []\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2]) => []\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  removePrimes([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    product = product * a + b;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returning the sum of their units digit. Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    sum = sum + a + b;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returning the product of the units digit of the input. Assume the input is always valid.\n  Examples:\n  productDigit(148, 412) should return 16.\n  productDigit(19, 28) should return 72.\n  productDigit(2020, 1851) should return 0.\n  productDigit(14,-15) should return 20.\n  */\nconst productDigit = (a, b) => {\n  let product = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    product = product * a + b;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returning the sum of their units digit of the input. Assume the input is always valid.\n  Examples:\n  sumDigit(148, 412) should return 16.\n  sumDigit(19, 28) should return 72.\n  sumDigit(2020, 1851) should return 0.\n  sumDigit(14,-15) should return 20.\n  */\nconst sumDigit = (a, b) => {\n  let sum = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    sum = sum + a + b;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returning the product of the units digit of the input. Assume the input is always valid.\n  Examples:\n  productDigit(148, 412) should return 16.\n  productDigit(19, 28) should return 72.\n  productDigit(2020, 1851) should return 0.\n  productDigit(14,-15) should return 20.\n  */\nconst productDigit = (a, b) => {\n  let product = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    product = product * a + b;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returning the sum of their units digit of the input. Assume the input is always valid.\n  Examples:\n  sumDigit(148, 412) should return 16.\n  sumDigit(19, 28) should return 72.\n  sumDigit(2020, 1851) should return 0.\n  sumDigit(14,-15) should return 20.\n  */\nconst sumDigit = (a, b) => {\n  let sum = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    sum = sum + a + b;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returning the product of the units digit of the input. Assume the input is always valid.\n  Examples:\n  productDigit(148, 412) should return 16.\n  productDigit(19, 28) should return 72.\n  productDigit(2020, 1851) should return 0.\n  productDigit(14,-15) should return 20.\n  */\nconst productDigit = (a, b) => {\n  let product = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    product = product * a + b;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returning the sum of their units digit of the input. Assume the input is always valid.\n  Examples:\n  sumDigit(148, 412) should return 16.\n  sumDigit(19, 28) should return 72.\n  sumDigit(2020, 1851) should return 0.\n  sumDigit(14,-15) should return 20.\n  */\nconst sumDigit = (a, b) => {\n  let sum = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    sum = sum + a + b;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returning the product of the units digit of the input. Assume the input is always valid.\n  Examples:\n  productDigit(148, 412) should return 16.\n  productDigit(19, 28) should return 72.\n  productDigit(2020, 1851) should return 0.\n  productDigit(14,-15) should return 20.\n  */\nconst productDigit = (a, b) => {\n  let product = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    product = product * a + b;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returning the sum of their units digit of the input. Assume the input is always valid.\n  Examples:\n  sumDigit(148, 412) should return 16.\n  sumDigit(19, 28) should return 72.\n  sumDigit(2020, 1851) should return 0.\n  sumDigit(14,-15) should return 20.\n  */\nconst sumDigit = (a, b) => {\n  let sum = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    sum = sum + a + b;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returning the product of the units digit of the input. Assume the input is always valid.\n  Examples:\n  productDigit(148, 412) should return 16.\n  productDigit(19, 28) should return 72.\n  productDigit(2020, 1851) should return 0.\n  productDigit(14,-15) should return 20.\n  */\nconst productDigit = (a, b) => {\n  let product = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    product = product * a + b;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returning the sum of their units digit of the input. Assume the input is always valid.\n  Examples:\n  sumDigit(148, 412) should return 16.\n  sumDigit(19, 28) should return 72.\n  sumDigit(2020, 1851) should return 0.\n  sumDigit(14,-15) should return 20.\n  */\nconst sumDigit = (a, b) => {\n  let sum = 0;\n  let temp = 0;\n  while (a!== 0) {\n    temp = a;\n    a = b % 10;\n    b = temp;\n    sum = sum + a + b;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returning the product of the units digit of the input. Assume the input is always valid.\n  Examples:\n  productDigit(148, 412) should return 16.\n  productDigit(19, 28) should return ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countVowel('aBCdEf') returns 2\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in even indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonants in odd indexes.\n  \n  For example:\n  countConsonant('aBCdEf') returns 2\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonantOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 2\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase vowel in odd indexes.\n  \n  For example:\n  countUpperOdd('aBCdEf') returns 1\n  countUpperOdd('abcdefg') returns 0\n  countUpperOdd('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in odd indexes.\n  \n  For example:\n  countLowerOdd('aBCdEf') returns 1\n  countLowerOdd('abcdefg') returns 0\n  countLowerOdd('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countVowelEven('aBCdEf') returns 2\n  countVowelEven('abcdefg') returns 0\n  countVowelEven('dBBE') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpperEven('aBCdEf') returns 1\n  countUpperEven('abcdefg') returns 0\n  countUpperEven('dBBE') returns 0\n  */\nconst countUpperEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in even indexes.\n  \n  For example:\n  countLowerEven('aBCdEf') returns 1\n  countLowerEven('abcdefg') returns 0\n  countLowerEven('dBBE') returns 0\n  */\nconst countLowerEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 2\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase vowel in odd indexes.\n  \n  For example:\n  countUpperOddEven('aBCdEf') returns 1\n  count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.min.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger3 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger4 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger5 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger6 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger7 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger8 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger9 = (value) => {\n  const numbers = value.split('.');\n  const integers = numbers.map(Number);\n  const closest = Math.max.apply(null, integers);\n  return closest;\n};\n\n/* Create a function that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
