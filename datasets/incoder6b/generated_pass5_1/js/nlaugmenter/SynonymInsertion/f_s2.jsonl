{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementDistance = firstElement - threshold;\n  const lastElementDistance = lastElement + threshold;\n  return firstElementDistance < lastElementDistance;\n};\n\n/**\n * Given a sorted array of numbers, return the first number in the array that is closer to \n   the given threshold than the next number.\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  2.0\n  >>> getClosestElement([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9)\n  2.0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let groups = [];\n  let paren_group = [];\n  let paren_group_open = false;\n  let paren_group_closed = false;\n  let paren_group_open_index = 0;\n  let paren_group_closed_index = 0;\n  let paren_group_open_string = '';\n  let paren_group_closed_string = '';\n  let paren_group_open_string_index = 0;\n  let paren_group_closed_string_index = 0;\n  let paren_group_open_string_string = '';\n  let paren_group_closed_string_string = '';\n  let paren_group_open_string_string_index = 0;\n  let paren_group_closed_string_string_index = 0;\n  let paren_group_open_string_string_string = '';\n  let paren_group_closed_string_string_string = '';\n  let paren_group_open_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_closed_string_string_string_string_string_string_string_string_string = '';\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_closed_string_string_string_string_string_string_string_string_string_string_index = 0;\n  let paren_group_open_string_string_string_string_string_string_string_string_string_string_string = '';\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  let longestPalindromePalindrome = '';\n  let longestPalindromePalindromeLength = 0;\n  let longestPalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindrome = '';\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeLength = 0;\n  let longestPalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromePalindromeIndex = 0;\n  let longestPalindrome", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = nextLevel / 2;\n    levels.push(nextLevelFloor);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make have a pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = nextLevel / 2;\n    levels.push(nextLevelFloor);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make have a pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = nextLevel / 2;\n    levels.push(nextLevelFloor);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make have a pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = nextLevel / 2;\n    levels.push(nextLevelFloor);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make have a pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = nextLevel / 2;\n    levels.push(nextLevelFloor);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make have a pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = nextLevel / 2;\n    levels.push(nextLevelFloor);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make have a pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = nextLevel / 2;\n    levels.push(nextLevelFloor);\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make have a pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [n];\n  let nextLevel = n;\n  let nextLevelFloor = 0;\n  while (nextLevel > 0) {\n    nextLevelFloor = nextLevel % 2 === 0? nextLevelFloor + 1 : nextLevelFloor;\n    nextLevel = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s\\n]+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest odd integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest odd integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest odd integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest odd integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest odd integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest odd integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n};\n\n/*This function takes two positive plus numbers act x and y and returns the \n   biggest odd integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 11\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return chooseNum(x + 1, y);\n  }\n  if (y % 2 === 0) {\n    return chooseNum(x, y + 1);\n  }\n  return chooseNum(x + 1, y + 1);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / Math.pow(2, n - m);\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"\n  */\nconst countNInM = (n, m) => {\n  if (n >= m) return -1;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i === n) count++;\n  }\n  return count;\n};\n\n/*You are given an integer n and an integer m and your task is to find how many times \n   the integer n appears in m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  countNInM(1, 5) => \"0b11\"\n  countNInM(7, 5) => -1\n  countNInM(10, 20) => \"0b1111\"\n  countNInM(20, 33) => \"0b11010\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (parseInt(digit) % 2 === 0) {\n        result.push(item);\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any odd digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (parseInt(digit) % 2!== 0) {\n        result.push(item);\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears more than once. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueRepeatedDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (result.indexOf(digit) === -1) {\n        result.push(digit);\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears less than once. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueRepeatedOddDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (result.indexOf(digit)!== -1) {\n        result.push(digit);\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears more than once and \n   less than once. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueRepeatedOddAndEvenDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (result.indexOf(digit)!== -1) {\n        if (result.indexOf(digit) === result.lastIndexOf(digit)) {\n          result.push(digit);\n        }\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears more than once and \n   less than or equal to once. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueRepeatedOddAndEvenOddDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (result.indexOf(digit)!== -1) {\n        if (result.indexOf(digit) === result.lastIndexOf(digit)) {\n          result.push(digit);\n        }\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears more than once and \n   more than or equal to once. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueRepeatedOddAndEvenOddAndEvenDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (result.indexOf(digit)!== -1) {\n        if (result.indexOf(digit) === result.lastIndexOf(digit)) {\n          result.push(digit);\n        }\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears more than once and \n   less than or equal to once. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueRepeatedOddAndEvenOddAndEvenOddDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (result.indexOf(digit)!== -1) {\n        if (result.indexOf(digit) === result.lastIndexOf(digit)) {\n          result.push(digit);\n        }\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears more than once and \n   more than or equal to once. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueRepeatedOddAndEvenOddAndEvenOddAndEvenDigits = (x) => {\n  const result = [];\n  x.forEach((item) => {\n    const digits = item.toString().split('');\n    digits.forEach((digit) => {\n      if (result.indexOf(digit)!== -1) {\n        if (result.indexOf(digit) === result.lastIndexOf(digit)) {\n          result.push(digit);\n        }\n      }\n    });\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any digit that appears more than once and \n   less than or ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = reversed.map((item, index) => {\n    if (item === 1) {\n      return \"One\";\n    }\n    if (item === 2) {\n      return \"Two\";\n    }\n    if (item === 3) {\n      return \"Three\";\n    }\n    if (item === 4) {\n      return \"Four\";\n    }\n    if (item === 5) {\n      return \"Five\";\n    }\n    if (item === 6) {\n      return \"Six\";\n    }\n    if (item === 7) {\n      return \"Seven\";\n    }\n    if (item === 8) {\n      return \"Eight\";\n    }\n    if (item === 9) {\n      return \"Nine\";\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = reversed.map((item, index) => {\n    if (item === 1) {\n      return \"One\";\n    }\n    if (item === 2) {\n      return \"Two\";\n    }\n    if (item === 3) {\n      return \"Three\";\n    }\n    if (item === 4) {\n      return \"Four\";\n    }\n    if (item === 5) {\n      return \"Five\";\n    }\n    if (item === 6) {\n      return \"Six\";\n    }\n    if (item === 7) {\n      return \"Seven\";\n    }\n    if (item === 8) {\n      return \"Eight\";\n    }\n    if (item === 9) {\n      return \"Nine\";\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = reversed.map((item, index) => {\n    if (item === 1) {\n      return \"One\";\n    }\n    if (item === 2) {\n      return \"Two\";\n    }\n    if (item === 3) {\n      return \"Three\";\n    }\n    if (item === 4) {\n      return \"Four\";\n    }\n    if (item === 5) {\n      return \"Five\";\n    }\n    if (item === 6) {\n      return \"Six\";\n    }\n    if (item === 7) {\n      return \"Seven\";\n    }\n    if (item === 8) {\n      return \"Eight\";\n    }\n    if (item === 9) {\n      return \"Nine\";\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = reversed.map((item, index) => {\n    if (item === 1) {\n      return \"One\";\n    }\n    if (item === 2) {\n      return \"Two\";\n    }\n    if (item === 3) {\n      return \"Three\";\n    }\n    if (item === 4) {\n      return \"Four\";\n    }\n    if (item === 5) {\n      return \"Five\";\n    }\n    if (item === 6) {\n      return \"Six\";\n    }\n    if (item === 7) {\n      return \"Seven\";\n    }\n    if (item === 8) {\n      return \"Eight\";\n    }\n    if (item === 9) {\n      return \"Nine\";\n    }\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0.\n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let flag = false;\n  let temp = 0;\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i];\n    arr[i] = arr[i + 1];\n    arr[i + 1] = temp;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that checks if a given array is sorted or not.\n  \n  If the given array is sorted then return true else return false.\n  \n  If the given array is empty then return true.\n  \n  Note: The given array is guaranteed to have unique elements element.\n  \n  For Example:\n  \n  checkSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  checkSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst checkSorted = (arr) => {\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that checks if a given array is sorted or not.\n  \n  If the given array is sorted then return true else return false.\n  \n  If the given array is empty then return true.\n  \n  Note: The given array is guaranteed to have unique elements element.\n  \n  For Example:\n  \n  checkSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  checkSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst checkSorted = (arr) => {\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that checks if a given array is sorted or not.\n  \n  If the given array is sorted then return true else return false.\n  \n  If the given array is empty then return true.\n  \n  Note: The given array is guaranteed to have unique elements element.\n  \n  For Example:\n  \n  checkSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  checkSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst checkSorted = (arr) => {\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that checks if a given array is sorted or not.\n  \n  If the given array is sorted then return true else return false.\n  \n  If the given array is empty then return true.\n  \n  Note: The given array is guaranteed to have unique elements element.\n  \n  For Example:\n  \n  checkSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  checkSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst checkSorted = (arr) => {\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that checks if a given array is sorted or not.\n  \n  If the given array is sorted then return true else return false.\n  \n  If the given array is empty then return true.\n  \n  Note: The given array is guaranteed to have unique elements element.\n  \n  For Example:\n  \n  checkSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  checkSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst checkSorted = (arr) => {\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that checks if a given array is sorted or not.\n  \n  If the given array is sorted then return true else return false.\n  \n  If the given array is empty then return true.\n  \n  Note: The given array is guaranteed to have unique elements element.\n  \n  For Example:\n  \n  checkSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  checkSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst checkSorted = (arr) => {\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that checks if a given array is sorted or not.\n  \n  If the given array is sorted then return true else return false.\n  \n  If the given array is empty then return true.\n  \n  Note: The given array is guaranteed to have unique elements element.\n  \n  For Example:\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('001', '111')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor2('001', '111')\n  '100'\n  */\nconst stringXor3 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor3('001', '111')\n  '100'\n  */\nconst stringXor4 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor4('001', '111')\n  '100'\n  */\nconst stringXor5 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor5('001', '111')\n  '100'\n  */\nconst stringXor6 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor6('001', '111')\n  '100'\n  */\nconst stringXor7 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor7('001', '111')\n  '100'\n  */\nconst stringXor8 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor8('001', '111')\n  '100'\n  */\nconst stringXor9 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor9('001', '111')\n  '100'\n  */\nconst stringXor10 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor10('001', '111')\n  '100'\n  */\nconst stringXor11 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor11('001', '111')\n  '100'\n  */\nconst stringXor12 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor12('001', '111')\n  '100'\n  */\nconst stringXor13 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor13('001', '111')\n  '100'\n  */\nconst stringXor14 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor14('001', '111')\n  '100'\n  */\nconst stringXor15 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor15('001', '111')\n  '100'\n  */\nconst stringXor16 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor16('001', '111')\n  '100'\n  */\nconst stringXor17 = (x, y) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += (x[i] ^ y[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting of 0s and 1s only. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor17('001', '111')\n  '100'\n  */\nconst ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \" NO \"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i]!== odd[i]) {\n      return \" NO \"\n    }\n  }\n  return \" YES \"\n}\n\n/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \" NO \"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i]!== odd[i]) {\n      return \" NO \"\n    }\n  }\n  return \" YES \"\n}\n\n/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \" NO \"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i]!== odd[i]) {\n      return \" NO \"\n    }\n  }\n  return \" YES \"\n}\n\n/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \" NO \"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i]!== odd[i]) {\n      return \" NO \"\n    }\n  }\n  return \" YES \"\n}\n\n/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even.push(lst1[i])\n    } else {\n      odd.push(lst1[i])\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even.push(lst2[i])\n    } else {\n      odd.push(lst2[i])\n    }\n  }\n  if (even.length!== lst1.length || odd.length!== lst2.length) {\n    return \" NO \"\n  }\n  for (let i = 0; i < even.length; i++) {\n    if (even[i]!== odd[i]) {\n      return \" NO \"\n    }\n  }\n  return \" YES \"\n}\n\n/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" Y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let splitted = test.split(' ')\n  splitted.forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1\n    } else {\n      histogram[letter] += 1\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space outer space separated divide lowercase letters, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      newS += s[i];\n    } else {\n      newS += c[i];\n    }\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      newC += c[i];\n    } else {\n      newC += s[i];\n    }\n  }\n  return [newS, newC];\n};\n\n/*Task \n   You are given a string s and a number k. \n   Your task is to find and return the substring that appears most frequently in s. \n   You should return the substring as a string and you should not count the substring in s.\n   Example\n   For s = \"abcabcbb\", and k = 3, the output should be \"abc\".\n   For s = \"bbbbb\", and k = 2, the output should be \"b\".\n   For s = \"pwwkew\", and k = 2, the output should be \"w\".\n   For s = \"pwwkew\", and k = 1, the output should be \"\".\n   For s = \"pwwkew\", and k = 0, the output should be \"\".\n   For s = \"pwwkew\", and k = -1, the output should be \"\".\n   For s = \"pwwkew\", and k = -2, the output should be \"\".\n   For s = \"pwwkew\", and k = -10, the output should be \"\".\n   For s = \"pwwkew\", and k = -20, the output should be \"\".\n   For s = \"pwwkew\", and k = -30, the output should be \"\".\n   For s = \"pwwkew\", and k = -40, the output should be \"\".\n   For s = \"pwwkew\", and k = -50, the output should be \"\".\n   For s = \"pwwkew\", and k = -60, the output should be \"\".\n   For s = \"pwwkew\", and k = -70, the output should be \"\".\n   For s = \"pwwkew\", and k = -80, the output should be \"\".\n   For s = \"pwwkew\", and k = -90, the output should be \"\".\n   For s = \"pwwkew\", and k = -100, output should be \"\".\n   For s = \"pwwkew\", and k = -110, output should be \"\".\n   For s = \"pwwkew\", and k = -120, output should be \"\".\n   For s = \"pwwkew\", and k = -130, output should be \"\".\n   For s = \"pwwkew\", and k = -140, output should be \"\".\n   For s = \"pwwkew\", and k = -150, output should be \"\".\n   For s = \"pwwkew\", and k = -160, output should be \"\".\n   For s = \"pwwkew\", and k = -170, output should be \"\".\n   For s = \"pwwkew\", and k = -180, output should be \"\".\n   For s = \"pwwkew\", and k = -190, output should be \"\".\n   For s = \"pwwkew\", and k = -200, output should be \"\".\n   For s = \"pwwkew\", and k = -210, output should be \"\".\n   For s = \"pwwkew\", and k = -220, output should be \"\".\n   For s = \"pwwkew\", and k = -230, output should be \"\".\n   For s = \"pwwkew\", and k = -240, output should be \"\".\n   For s = \"pwwkew\", and k = -250, output should be \"\".\n   For s = \"pwwkew\", and k = -260, output should be \"\".\n   For s = \"pwwkew\", and k = -270, output should be \"\".\n   For s = \"pwwkew\", and k = -280, output should be \"\".\n   For s = \"pwwkew\", and k = -290, output should be \"\".\n   For s = \"pwwkew\", and k = -300, output should be \"\".\n   For s = \"pwwkew\", and k = -310, output should be \"\".\n   For s = \"pwwkew\", and k = -320, output should be \"\".\n   For s = \"pwwkew\", and k = -330, output should be \"\".\n   For s = \"pwwkew\", and k = -340, output should be \"\".\n   For s = \"pwwkew\", and k = -350, output should be \"\".\n   For s = \"pwwkew\", and k = -360, output should be \"\".\n   For s = \"pwwkew\", and k = -370, output should be \"\".\n   For s = \"pwwkew\", and k = -380, output should be \"\".\n   For s = \"pwwkew\", and k = -390, output should be \"\".\n   For s = \"pwwkew\", and k = -400, output should be \"\".\n   For s = \"pwwkew\", and k = -410, output should be \"\".\n   For s = \"pwwkew\", and k = -420, output should be \"\".\n   For s = \"pwwkew\", and k = -430, output should be \"\".\n   For s = \"pwwkew\", and k = -440, output should be \"\".\n   For s = \"pwwkew\", and k = -450, output should be \"\".\n   For s = \"pwwkew\", and k = -460, output should be \"\".\n   For s = \"pwwkew\", and k = -470, output should be \"\".\n   For s = \"pwwkew\", and k = -480, output should be \"\".\n   For s = \"pwwkew\", and k = -490, output should be \"\".\n   For s = \"pwwkew\", and k = -50, output should be \"\".\n   For s = \"pwwkew\", and k = -510, output should be \"\".\n   For s = \"pwwkew\", and k = -520, output should be \"\".\n   For s = \"pwwkew\", and k = -530, output should be \"\".\n   For s = \"pwwkew\", and k = -540, output should be \"\".\n   For s = \"pwwkew\", and k = -550, output should be \"\".\n   For s = \"pwwkew\", and k = -560, output should be \"\".\n   For s = \"pwwkew\", and k = -570, output should be \"\".\n   For s = \"pwwkew\", and k = -580, output should be \"\".\n   For s = \"pwwkew\", and k = -590, output should be \"\".\n   For s = \"pwwkew\", and k = -600, output should be \"\".\n   For s = \"pwwkew\", and k = -601, output should be \"\".\n   For s = \"pwwkew\", and k = -602, output should be \"\".\n   For s = \"pwwkew\", and k = -603, output should be \"\".\n   For s = \"pwwkew\", and k = -604, output should be \"\".\n   For s = \"pwwkew\", and k = -60", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of even elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of even digits digit in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n in the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n in the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2!== 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of even and odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of even and odd digits digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n in the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of even and odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of even and odd digits digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n in the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2!== 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of even and odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of even and odd digits digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n in the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of even and odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of even and odd digits digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n in the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2!== 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of even and odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of even and odd digits digit in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 2n in the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n in the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n in the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find receive the maximum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty the buckets to lower the bucket capacity.\n */\nconst maxFill = (grid, bucket_capacity) => {\n    let result = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                let count = 0;\n                while (bucket > 0) {\n                    count += bucket;\n                    bucket -= bucket_capacity;\n                }\n                if (count > result) {\n                    result = count;\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, bucket_capacity)\n * where grid is the given 2D array, and bucket_capacity is an integer that represents the bucket capacity.\n * Return the number of times you need to empty ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let ones = 0;\n  let dec = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] > 0) ones++;\n    if (arrCopy[i] < 0) dec++;\n  }\n  return [...arrCopy].sort((a, b) => {\n    if (ones > dec) return 1;\n    if (ones < dec) return -1;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in descending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  let ones = 0;\n  let dec = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] > 0) ones++;\n    if (arrCopy[i] < 0) dec++;\n  }\n  return [...arrCopy].sort((a, b) => {\n    if (ones > dec) return -1;\n    if (ones < dec) return 1;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  let ones = 0;\n  let dec = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] > 0) ones++;\n    if (arrCopy[i] < 0) dec++;\n  }\n  return [...arrCopy].sort((a, b) => {\n    if (ones > dec) return -1;\n    if (ones < dec) return 1;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  let ones = 0;\n  let dec = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] > 0) ones++;\n    if (arrCopy[i] < 0) dec++;\n  }\n  return [...arrCopy].sort((a, b) => {\n    if (ones > dec) return -1;\n    if (ones < dec) return 1;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  let ones = 0;\n  let dec = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] > 0) ones++;\n    if (arrCopy[i] < 0) dec++;\n  }\n  return [...arrCopy].sort((a, b) => {\n    if (ones > dec) return -1;\n    if (ones < dec) return 1;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sortArrayDesc = (arr) => {\n  let ones = 0;\n  let dec = 0;\n  let arrCopy = arr.slice();\n  arrCopy.sort((a, b) => {\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] > 0) ones++;\n    if (arrCopy[i] < 0) dec++;\n  }\n  return [...arrCopy].sort((a, b) => {\n    if (ones > dec) return -1;\n    if (ones < dec) return 1;\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n};\n\n/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n vowels, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n vowels, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n vowels, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.slice(0, i));\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.includes(n)) {\n      words.push(s.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsCount = vowels.length;\n  let vowelIndex = 0;\n  let vowelsCountFromRight = 0;\n  let vowelsCountFromLeft = 0;\n  let vowelsCountFromRightFromLeft = 0;\n  let vowelsCountFromLeftFromRight = 0;\n  let vowelsCountFromRightFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromRightFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeftFromLeft = 0;\n  let vowelsCountFromLeftFromRightFromLeftFromLeftFromLeftFrom", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let index = 0;\n  let isGood = true;\n  while (index < lst.length) {\n    if (lst[index] === '(') {\n      stack.push(lst[index]);\n      index++;\n    } else if (lst[index] === ')') {\n      if (stack.length === 0) {\n        isGood = false;\n        break;\n      } else {\n        stack.pop();\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return isGood;\n};\n\n/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let index = 0;\n  let isGood = true;\n  while (index < lst.length) {\n    if (lst[index] === '(') {\n      stack.push(lst[index]);\n      index++;\n    } else if (lst[index] === ')') {\n      if (stack.length === 0) {\n        isGood = false;\n        break;\n      } else {\n        stack.pop();\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return isGood;\n};\n\n/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let index = 0;\n  let isGood = true;\n  while (index < lst.length) {\n    if (lst[index] === '(') {\n      stack.push(lst[index]);\n      index++;\n    } else if (lst[index] === ')') {\n      if (stack.length === 0) {\n        isGood = false;\n        break;\n      } else {\n        stack.pop();\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return isGood;\n};\n\n/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let index = 0;\n  let isGood = true;\n  while (index < lst.length) {\n    if (lst[index] === '(') {\n      stack.push(lst[index]);\n      index++;\n    } else if (lst[index] === ')') {\n      if (stack.length === 0) {\n        isGood = false;\n        break;\n      } else {\n        stack.pop();\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return isGood;\n};\n\n/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let index = 0;\n  let isGood = true;\n  while (index < lst.length) {\n    if (lst[index] === '(') {\n      stack.push(lst[index]);\n      index++;\n    } else if (lst[index] === ')') {\n      if (stack.length === 0) {\n        isGood = false;\n        break;\n      } else {\n        stack.pop();\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return isGood;\n};\n\n/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let index = 0;\n  let isGood = true;\n  while (index < lst.length) {\n    if (lst[index] === '(') {\n      stack.push(lst[index]);\n      index++;\n    } else if (lst[index] === ')') {\n      if (stack.length === 0) {\n        isGood = false;\n        break;\n      } else {\n        stack.pop();\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n  return isGood;\n};\n\n/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > longestString.length) {\n      longestString = currentString\n    }\n  }\n  return longestString\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar + nextChar)\n    }\n  }\n  return substrings\n}\n\n// Given a string, return a list of all possible substrings\nconst substrings = (string) => {\n  const substrings = []\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i]\n    for (let j = i + 1; j < string.length; j++) {\n      const nextChar = string[j]\n      substrings.push(currentChar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nexport { maximum, maximum2, maximum3, maximum4 };\n\n/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === min) {\n      result.push(min);\n    }\n  }\n  return result;\n};\n\nexport { minimum, minimum2, minimum3, minimum4 };\n\n/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst largest = (arr, k) => {\n  const result = [];\n  let largest = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === largest) {\n      result.push(largest);\n    }\n  }\n  return result;\n};\n\nexport { largest, largest2, largest3, largest4 };\n\n/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst smallest = (arr, k) => {\n  const result = [];\n  let smallest = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === smallest) {\n      result.push(smallest);\n    }\n  }\n  return result;\n};\n\nexport { smallest, smallest2, smallest3, smallest4 };\n\n/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the k largest and smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthLargest = (arr, k) => {\n  const result = [];\n  let largest = 0;\n  let smallest = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === largest) {\n      result.push(largest);\n    }\n    if (arr[i] === smallest) {\n      result.push(smallest);\n    }\n  }\n  return result;\n};\n\nexport { kthLargest, kthLargest2, kthLargest3, kthLargest4 };\n\n/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the k smallest and largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthSmallest = (arr, k) => {\n  const result = [];\n  let largest = 0;\n  let smallest = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < largest) {\n      largest = arr[i];\n    }\n    if (arr[i] > smallest) {\n      smallest = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === largest) {\n      result.push(largest);\n    }\n    if (arr[i] === smallest) {\n      result.push(smallest);\n    }\n  }\n  return result;\n};\n\nexport { kthSmallest, kthSmallest2, kthSmallest3, kthSmallest4 };\n\n/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the k smallest and largest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [5, 4, 3]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4, 4]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraint", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz[i] = n;\n      i++;\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n  }\n  return collatz.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz[i] = n;\n      i++;\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n  }\n  return collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz[i] = n;\n      i++;\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n  }\n  return collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz[i] = n;\n      i++;\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n  }\n  return collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 0;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz[i] = n;\n      i++;\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n  }\n  return collatz.sort((a, b) => b - a);\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n  }\n  if (dateArray[1].length < 1 || dateArray[1].length > 2) {\n    return false;\n  }\n  if (dateArray[2].length < 1 || dateArray[2].length > 4) {\n    return false;\n  }\n  return true;\n};\n\n/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const set = new Set(lst);\n  return!set.size || set.size === lst.filter((x, i) => x === lst[i]).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in descending descend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.size || set.size === lst.filter((x, i) => x === lst[i]).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.size || set.size === lst.filter((x, i) => x === lst[i]).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in descending descend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSortedDesc([5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.size || set.size === lst.filter((x, i) => x === lst[i]).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSortedAsc([5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ false\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const set = new Set(lst);\n  return!set.size || set.size === lst.filter((x, i) => x === lst[i]).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in descending descend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const set = new Set(lst);\n  return!set.size || set.size === lst.filter((x, i) => x === lst[i]).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSortedAsc([5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ false\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const set = new Set(lst);\n  return!set.size || set.size === lst.filter((x, i) => x === lst[i]).length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted classify \n   in descending descend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [interval1Start, interval1End] = interval1;\n  const [interval2Start, interval2End] = interval2;\n  if (interval1Start > interval1End) {\n    return [interval1Start, interval1End];\n  }\n  if (interval2Start > interval2End) {\n    return [interval2Start, interval2End];\n  }\n  if (interval1Start === interval1End && interval2Start === interval2End) {\n    return [];\n  }\n  const [interval1Start2, interval1End2] = interval1;\n  const [interval2Start2, interval2End2] = interval2;\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return [];\n  }\n  if (interval1Start > interval1End2 || interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start > interval1End2 && interval2Start > interval2End2) {\n    return \"NO\";\n  }\n  if (interval1Start === interval1End2 && interval2Start === interval2End2) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * Math.pow(Math.abs(arr[i]), arr.length)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast2 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast3 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast4 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast5 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast6 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast7 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast8 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> sumSigns([1, 2, 2, -4]) == -2\n  >>> sumSigns([0, 1]) == 0\n  >>> sumSigns([]) == null\n  */\nconst sumSignsFast9 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] >= 0? 1 : -1\n    sum += sign * arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum of all integers multiplied by product merchan", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const path = new Array(N).fill(0);\n  const visited = new Array(N).fill(0);\n  const queue = new Array(N).fill(0);\n  const result = [];\n  const visitedPath = [];\n  for (let i = 0; i < N; i++) {\n    visited[i] = 0;\n    queue[i] = i;\n  }\n  M[0] = 1;\n  path[0] = 0;\n  visitedPath[0] = 0;\n  while (queue.length > 0) {\n    const curr = queue.shift();\n    if (curr === N) {\n      result.push(M);\n      M = new Array(N).fill(0);\n      path = new Array(N).fill(0);\n      visited = new Array(N).fill(0);\n      queue = new Array(N).fill(0);\n    } else {\n      for (let i = 0; i < N; i++) {\n        if (grid[curr][i] === grid[curr][curr]) {\n          M[i] = M[curr] + 1;\n          path[i] = path[curr] + 1;\n          visited[i] = visited[curr] + 1;\n          queue[i] = queue[curr];\n        }\n      }\n    }\n  }\n  const sortedResult = result.sort((a, b) => a[0] - b[0]);\n  const sortedResult2 = sortedResult.map((v) => v[0]);\n  const sortedResult3 = sortedResult2.filter((v) => v < k);\n  return sortedResult3;\n};\n\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 1));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 3));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 5));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 7));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 9));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 11));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 13));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 15));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 17));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 19));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 21));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 23));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 25));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 27));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 29));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 31));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 33));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 35));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 37));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 39));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 41));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 43));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 45));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 47));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 49));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 51));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 53));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 55));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 57));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, 6],\n//   [7, 8, 2]\n// ], 59));\n// console.log(minPath([\n//   [5, 9, 3],\n//   [4, 1, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a * b\n    a = b\n    b = r\n  }\n  return a\n}\n\n/**\n * Return the least common multiple of two integers a and b\n * >>> leastCommonMultiple(7, 5)\n * 21\n */\nconst leastCommonMultiple = (a, b) => {\n  let r\n  while (b!== 0) {\n    r = a", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n    arr.push(n / 2 + 1);\n    return arr;\n  }\n  arr.push(1);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n    arr.push(n / 2 + 1);\n    return arr;\n  }\n  arr.push(1);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n    arr.push(n / 2 + 1);\n    return arr;\n  }\n  arr.push(1);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n    arr.push(n / 2 + 1);\n    return arr;\n  }\n  arr.push(1);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(1);\n    arr.push(n / 2);\n    arr.push(n / 2 + 1);\n    return arr;\n  }\n  arr.push(1);\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  return arr;\n};\n\n/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 10) {\n    product *= i % 2;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 7\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\n/*Return the sum of the digits of n.\n  For example:\n  digitSum(123)  == 6\n  digitSum(1234) == 10\n  digitSum(12345) == 15\n  digitSum(123456) == 18\n  digitSum(1234567) == 21\n  digitSum(12345678) == 24\n  digitSum(123456789) == 27\n  digitSum(1234567890) == 30\n  digitSum(12345678901) == 33\n  digitSum(123456789012) == 36\n  digitSum(1234567890123) == 39\n  digitSum(12345678901234) == 42\n  digitSum(123456789012345) == 45\n  digitSum(1234567890123456) == 48\n  digitSum(12345678901234567) == 51\n  digitSum(123456789012345678) == 54\n  digitSum(1234567890123456789) == 57\n  digitSum(12345678901234567890) == 60\n  digitSum(123456789012345678901) == 63\n  digitSum(1234567890123456789012) == 66\n  digitSum(12345678901234567890123) == 69\n  digitSum(123456789012345678901234) == 72\n  digitSum(1234567890123456789012345) == 75\n  digitSum(12345678901234567890123456) == 78\n  digitSum(123456789012345678901234567) == 81\n  digitSum(1234567890123456789012345678) == 84\n  digitSum(12345678901234567890123456789) == 87\n  digitSum(123456789012345678901234567890) == 90\n  digitSum(1234567890123456789012345678901) == 93\n  digitSum(12345678901234567890123456789012) == 96\n  digitSum(123456789012345678901234567890123) == 99\n  digitSum(1234567890123456789012345678901234) == 102\n  digitSum(12345678901234567890123456789012345) == 105\n  digitSum(123456789012345678901234567890123456) == 108\n  digitSum(1234567890123456789012345678901234567) == 111\n  digitSum(12345678901234567890123456789012345678) == 114\n  digitSum(123456789012345678901234567890123456789) == 117\n  digitSum(1234567890123456789012345678901234567890) == 120\n  digitSum(12345678901234567890123456789012345678901) == 123\n  digitSum(123456789012345678901234567890123456789012) == 126\n  digitSum(1234567890123456789012345678901234567890123) == 129\n  digitSum(12345678901234567890123456789012345678901234) == 132\n  digitSum(123456789012345678901234567890123456789012345) == 135\n  digitSum(1234567890123456789012345678901234567890123456) == 138\n  digitSum(12345678901234567890123456789012345678901234567) == 141\n  digitSum(123456789012345678901234567890123456789012345678) == 144\n  digitSum(1234567890123456789012345678901234567890123456789) == 147\n  digitSum(12345678901234567890123456789012345678901234567890) == 150\n  digitSum(123456789012345678901234567890123456789012345678901) == 153\n  digitSum(1234567890123456789012345678901234567890123456789012) == 156\n  digitSum(12345678901234567890123456789012345678901234567890123) == 159\n  digitSum(123456789012345678901234567890123456789012345678901234) == 162\n  digitSum(1234567890123456789012345678901234567890123456789012345) == 165\n  digitSum(12345678901234567890123456789012345678901234567890123456) == 168\n  digitSum(123456789012345678901234567890123456789012345678901234567) == 171\n  digitSum(1234567890123456789012345678901234567890123456789012345678) == 174\n  digitSum(12345678901234567890123456789012345678901234567890123456789) == 177\n  digitSum(123456789012345678901234567890123456789012345678901234567890) == 180\n  digitSum(1234567890123456789012345678901234567890123456789012345678901) == 183\n  digitSum(12345678901234567890123456789012345678901234567890123456789012) == 186\n  digitSum(123456789012345678901234567890123456789012345678901234567890123) == 189\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234) == 192\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345) == 195\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456) == 198\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567) == 201\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678) == 204\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789) == 207\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890) == 210\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901) == 213\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012) == 216\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123) == 219\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234) == 222\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345) == 225\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456) == 228\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567) == 231\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678) == 234\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789) == 237\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567890) == 240\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678901) == 243\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789012) == 246\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567890123) == 249\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678901234) == 252\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345) == 255\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456) == 258\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567) == 261\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678) == 264\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789) == 267\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) == 270\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901) == 273\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012) == 276\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123) == 279\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234) == 282\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345) == 285\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456) == 288\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567) == 291\n  digitSum(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678) == 294\n  digitSum(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789) == 297\n  digitSum(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890) == 300\n  digitSum(1234567890123456789", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n   let openBrackets = 0;\n   let closeBrackets = 0;\n   for (let i = 0; i < string.length; i++) {\n     if (string[i] === '[') {\n       openBrackets++;\n     } else if (string[i] === ']') {\n       closeBrackets++;\n     }\n   }\n   return (openBrackets > closeBrackets);\n };\n */\nconst isNested = (string) => {\n  let openBrackets = 0;\n  let closeBrackets = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openBrackets++;\n    } else if (string[i] === ']') {\n      closeBrackets++;\n    }\n  }\n  return (openBrackets > closeBrackets);\n};\n\n// TESTS\n\nconsole.log(isNestedpassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([1.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z]/i) && lastChar!== \" \";\n  return lastCharIsALetter;\n}\n\n/* Create a function that returns render true if the last character of a given sacrifice string bowed \n   stringed instrument is a digit, and false otherwise. \n   Note eminence: \" digit \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[0-9]/i) && lastChar!== \" \";\n  return lastCharIsALetter;\n}\n\n/* Create a function that returns render true if the last character of a given sacrifice string bowed \n   stringed instrument is a punctuation mark, and false otherwise. \n   Note eminence: \" punctuation \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]/i) && lastChar!== \" \";\n  return lastCharIsALetter;\n}\n\n/* Create a function that returns render true if the last character of a given sacrifice string bowed \n   stringed instrument is a symbol, and false otherwise. \n   Note eminence: \" symbol \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[~]/i) && lastChar!== \" \";\n  return lastCharIsALetter;\n}\n\n/* Create a function that returns render true if the last character of a given sacrifice string bowed \n   stringed instrument is a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[a-z]+/i) && lastChar!== \" \";\n  return lastCharIsALetter;\n}\n\n/* Create a function that returns render true if the last character of a given sacrifice string bowed \n   stringed instrument is a digit, and false otherwise. \n   Note eminence: \" digit \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[0-9]+/i) && lastChar!== \" \";\n  return lastCharIsALetter;\n}\n\n/* Create a function that returns render true if the last character of a given sacrifice string bowed \n   stringed instrument is a punctuation mark, and false otherwise. \n   Note eminence: \" punctuation \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar.match(/[!,@,#,$,%,^,&,*,?,_,~]+/i) && lastChar!== \" \";\n  return lastCharIsALetter;\n}\n\n/* Create a function that returns render true if the last character of a given sacrifice string bowed \n   stringed instrument is a symbol, and false otherwise. \n   Note eminence: \" symbol \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = -1;\n  let maxVal = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largestBombastic = lst.filter((x) => x < 0).sort((a, b) => b - a)\n  const smallestModest = lst.filter((x) => x > 0).sort((a, b) => a - b)\n  return largestBombastic.length? largestBombastic[0] : smallestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the smallest bombastic of positive integers, and 'b' is the largest modest \n   of negative plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  const smallestBombastic = lst.filter((x) => x < 0).sort((a, b) => a - b)\n  const largestModest = lst.filter((x) => x > 0).sort((a, b) => b - a)\n  return smallestBombastic.length? smallestBombastic[0] : largestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the smallest bombastic of positive integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  smallestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  smallestSmallestIntegers([]) == (null, null)\n  smallestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  const smallestBombastic = lst.filter((x) => x < 0).sort((a, b) => a - b)\n  const smallestModest = lst.filter((x) => x > 0).sort((a, b) => b - a)\n  return smallestBombastic.length? smallestBombastic[0] : smallestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of positive integers, and 'b' is the smallest modest \n   of negative plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, null)\n  largestLargestIntegers([]) == (null, null)\n  largestLargestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  const largestBombastic = lst.filter((x) => x < 0).sort((a, b) => b - a)\n  const largestModest = lst.filter((x) => x > 0).sort((a, b) => a - b)\n  return largestBombastic.length? largestBombastic[0] : largestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the smallest bombastic of positive integers, and 'b' is the smallest modest \n   of negative plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, null)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  const smallestBombastic = lst.filter((x) => x < 0).sort((a, b) => a - b)\n  const smallestModest = lst.filter((x) => x > 0).sort((a, b) => b - a)\n  return smallestBombastic.length? smallestBombastic[0] : smallestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the smallest bombastic of positive integers, and 'b' is the smallest modest \n   of negative plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  smallestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, null)\n  smallestSmallestIntegers([]) == (null, null)\n  smallestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  const smallestBombastic = lst.filter((x) => x < 0).sort((a, b) => a - b)\n  const smallestModest = lst.filter((x) => x > 0).sort((a, b) => b - a)\n  return smallestBombastic.length? smallestBombastic[0] : smallestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of positive integers, and 'b' is the smallest modest \n   of negative plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, null)\n  largestLargestIntegers([]) == (null, null)\n  largestLargestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  const largestBombastic = lst.filter((x) => x < 0).sort((a, b) => b - a)\n  const largestModest = lst.filter((x) => x > 0).sort((a, b) => a - b)\n  return largestBombastic.length? largestBombastic[0] : largestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the smallest bombastic of positive integers, and 'b' is the smallest modest \n   of negative plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  smallestLargestIntegers([2, 4, 1, 3, 5, 7]) == (null, null)\n  smallestLargestIntegers([]) == (null, null)\n  smallestLargestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  const smallestBombastic = lst.filter((x) => x < 0).sort((a, b) => a - b)\n  const smallestModest = lst.filter((x) => x > 0).sort((a, b) => b - a)\n  return smallestBombastic.length? smallestBombastic[0] : smallestModest[0]\n}\n\n/* Create a function that returns render a tuple (a, b), where 'a' is \n   the smallest bombastic of positive integers, and 'b' is the smallest modest \n   of negative plus integers in a list.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n   const aIsNumber = typeof a === \"number\";\n   const bIsNumber = typeof b === \"number\";\n   const aIsString = typeof a === \"string\";\n   const bIsString = typeof b === \"string\";\n   const aIsFloat = typeof a === \"number\" && a % 1!== 0;\n   const bIsFloat = typeof b === \"number\" && b % 1!== 0;\n   const aIsNull = a === null;\n   const bIsNull = b === null;\n   const aIsUndefined = typeof a === \"undefined\";\n   const bIsUndefined = typeof b === \"undefined\";\n   const aIsNullOrUndefined = aIsNull || aIsUndefined;\n   const bIsNullOrUndefined = bIsNull || bIsUndefined;\n   const aIsNullOrUndefinedOrNaN = aIsNullOrUndefined || isNaN(a);\n   const bIsNullOrUndefinedOrNaN = bIsNullOrUndefined || isNaN(b);\n   const aIsNullOrUndefinedOrNaNOrNaN = aIsNullOrUndefinedOrNaN || isNaN(a) || isNaN(b);\n   const aIsNullOrUndefinedOrNaNOrNaNOrNaN = aIsNullOrUndefinedOrNaN || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b);\n   const aIsNullOrUndefinedOrNaNOrNaNOrNaNOrNaN = aIsNullOrUndefinedOrNaN || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN(b) || isNaN(a) || isNaN", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced odd numbers numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced odd numbers numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced odd numbers numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced odd numbers numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced odd numbers numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced odd numbers numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced odd numbers numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 3;\n};\n\n/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that will receive a number as input and will return the sum\n  of all the numbers from 1 to that number. For example:\n  >>> sumOfNumbers(10)\n  55\n*/\nconst sumOfNumbers = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that will receive a number as input and will return the average\n  of all the numbers from 1 to that number. For example:\n  >>> averageOfNumbers(10)\n  5.5\n*/\nconst averageOfNumbers = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum / n;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that will receive a number as input and will return the smallest\n  number from 1 to that number. For example:\n  >>> smallestNumberOfFive(10)\n  1\n*/\nconst smallestNumberOfFive = (n) => {\n  let smallest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that will receive a number as input and will return the smallest\n  number from 1 to that number. For example:\n  >>> smallestNumberOfFive(10)\n  1\n*/\nconst smallestNumberOfFive = (n) => {\n  let smallest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that will receive a number as input and will return the smallest\n  number from 1 to that number. For example:\n  >>> smallestNumberOfFive(10)\n  1\n*/\nconst smallestNumberOfFive = (n) => {\n  let smallest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that will receive a number as input and will return the smallest\n  number from 1 to that number. For example:\n  >>> smallestNumberOfFive(10)\n  1\n*/\nconst smallestNumberOfFive = (n) => {\n  let smallest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that will receive a number as input and will return the smallest\n  number from 1 to that number. For example:\n  >>> smallestNumberOfFive(10)\n  1\n*/\nconst smallestNumberOfFive = (n) => {\n  let smallest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that will receive a number as input and will return the smallest\n  number from 1 to that number. For example:\n  >>> smallestNumberOfFive(10)\n  1\n*/\nconst smallestNumberOfFive = (n) => {\n  let smallest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  A function that will receive a number as input and will return the smallest\n  number from 1 to that number. For example:\n  >>> smallestNumberOfFive(10)\n  1\n*/\nconst smallestNumberOfFive = (n) => {\n  let smallest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i < smallest) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*\n  A function that will receive a number as input and will return the largest\n  number from 1 to that number. For example:\n  >>> largestNumberOfFive(10)\n  5\n*/\nconst largestNumberOfFive = (n) => {\n  let largest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i > largest) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentPrefix = currentPrefix + string[i];\n    } else {\n      prefixes.push(currentPrefix);\n      currentPrefix = string[i];\n    }\n  }\n  prefixes.push(currentPrefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === string[string.length - 1]) {\n      currentSuffix = currentSuffix + string[i];\n    } else {\n      suffixes.push(currentSuffix);\n      currentSuffix = string[i];\n    }\n  }\n  suffixes.push(currentSuffix);\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + string[i];\n    } else {\n      substrings.push(currentSubstring);\n      currentSubstring = string[i];\n    }\n  }\n  substrings.push(currentSubstring);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest long of the input stimulation string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', '']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[0]) {\n      currentSubstring = currentSubstring + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  +/g, '_').replace(/  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-Z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-Z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-Z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-Z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-Z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-zA-Z]+$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries entry in the list, the function shall cube the integer entry introduction if its index exponent is a \n   multiple of 4 and will square the integer entry if its index exponent is a multiple of 3 and not a multiple of 4. The function will not \n   change the entries in the list whose indexes are not a multiple of 4 or 3. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries entry in the list, the function shall cube the integer entry introduction if its index exponent is a \n   multiple of 4 and will square the integer entry if its index exponent is a multiple of 3 and not a multiple of 4. The function will not \n   change the entries in the list whose indexes are not a multiple of 4 or 3. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries entry in the list, the function shall cube the integer entry introduction if its index exponent is a \n   multiple of 4 and will square the integer entry if its index exponent is a multiple of 3 and not a multiple of 4. The function will not \n   change the entries in the list whose indexes are not a multiple of 4 or 3. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries entry in the list, the function shall cube the integer entry introduction if its index exponent is a \n   multiple of 4 and will square the integer entry if its index exponent is a multiple of 3 and not a multiple of 4. The function will not \n   change the entries in the list whose indexes are not a multiple of 4 or 3. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries entry in the list, the function shall cube the integer entry introduction if its index exponent is a \n   multiple of 4 and will square the integer entry if its index exponent is a multiple of 3 and not a multiple of 4. The function will not \n   change the entries in the list whose indexes are not a multiple of 4 or 3. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries entry in the list, the function shall cube the integer entry introduction if its index exponent is a \n   multiple of 4 and will square the integer entry if its index exponent is a multiple of 3 and not a multiple of 4. The function will not \n   change the entries in the list whose indexes are not a multiple of 4 or 3. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers integer. For all entries entry in the list, the function shall cube the integer entry introduction if its index exponent is a \n   multiple of 4 and will square the integer entry if its index exponent is a multiple of 3 and not a multiple of 4. The function will not \n   change the entries in the list whose indexes are not a multiple of 4 or 3. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let prime = true;\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (prime) {\n            for (let j = 2; j < length; j++) {\n                if (length % j === 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        if (prime) {\n            result.push(word);\n        }\n    }\n    return result.join(\" \");\n};\n\n/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let prime = true;\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (prime) {\n            for (let j = 2; j < length; j++) {\n                if (length % j === 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        if (prime) {\n            result.push(word);\n        }\n    }\n    return result.join(\" \");\n};\n\n/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let prime = true;\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (prime) {\n            for (let j = 2; j < length; j++) {\n                if (length % j === 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        if (prime) {\n            result.push(word);\n        }\n    }\n    return result.join(\" \");\n};\n\n/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let prime = true;\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (prime) {\n            for (let j = 2; j < length; j++) {\n                if (length % j === 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        if (prime) {\n            result.push(word);\n        }\n    }\n    return result.join(\" \");\n};\n\n/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let prime = true;\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (prime) {\n            for (let j = 2; j < length; j++) {\n                if (length % j === 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        if (prime) {\n            result.push(word);\n        }\n    }\n    return result.join(\" \");\n};\n\n/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let prime = true;\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (prime) {\n            for (let j = 2; j < length; j++) {\n                if (length % j === 0) {\n                    prime = false;\n                    break;\n                }\n            }\n        }\n        if (prime) {\n            result.push(word);\n        }\n    }\n    return result.join(\" \");\n};\n\n/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let prime = true;\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const length = word.length;\n        if (prime) {\n            for (let j = 2; j < length; j++) {\n                if (length % j === 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n   let result = false\n   let numerator = parseInt(x.split('/')[0])\n   let denominator = parseInt(x.split('/')[1])\n   let numerator2 = parseInt(n.split('/')[0])\n   let denominator2 = parseInt(n.split('/')[1])\n   let numerator3 = numerator * numerator2\n   let denominator3 = denominator * denominator2\n   let numerator4 = numerator * numerator3\n   let denominator4 = denominator * denominator3\n   let numerator5 = numerator * numerator4\n   let denominator5 = denominator * denominator4\n   let numerator6 = numerator * numerator5\n   let denominator6 = denominator * denominator5\n   let numerator7 = numerator * numerator6\n   let denominator7 = denominator * denominator6\n   let numerator8 = numerator * numerator7\n   let denominator8 = denominator * denominator7\n   let numerator9 = numerator * numerator8\n   let denominator9 = denominator * denominator8\n   let numerator10 = numerator * numerator9\n   let denominator10 = denominator * denominator9\n   let numerator11 = numerator * numerator10\n   let denominator11 = denominator * denominator10\n   let numerator12 = numerator * numerator11\n   let denominator12 = denominator * denominator11\n   let numerator13 = numerator * numerator12\n   let denominator13 = denominator * denominator12\n   let numerator14 = numerator * numerator13\n   let denominator14 = denominator * denominator13\n   let numerator15 = numerator * numerator14\n   let denominator15 = denominator * denominator14\n   let numerator16 = numerator * numerator15\n   let denominator16 = denominator * denominator15\n   let numerator17 = numerator * numerator16\n   let denominator17 = denominator * denominator16\n   let numerator18 = numerator * numerator17\n   let denominator18 = denominator * denominator17\n   let numerator19 = numerator * numerator18\n   let denominator19 = denominator * denominator18\n   let numerator20 = numerator * numerator19\n   let denominator20 = denominator * denominator19\n   let numerator21 = numerator * numerator20\n   let denominator21 = denominator * denominator20\n   let numerator22 = numerator * numerator21\n   let denominator22 = denominator * denominator21\n   let numerator23 = numerator * numerator22\n   let denominator23 = denominator * denominator22\n   let numerator24 = numerator * numerator23\n   let denominator24 = denominator * denominator23\n   let numerator25 = numerator * numerator24\n   let denominator25 = denominator * denominator24\n   let numerator26 = numerator * numerator25\n   let denominator26 = denominator * denominator25\n   let numerator27 = numerator * numerator26\n   let denominator27 = denominator * denominator26\n   let numerator28 = numerator * numerator27\n   let denominator28 = denominator * denominator27\n   let numerator29 = numerator * numerator28\n   let denominator29 = denominator * denominator28\n   let numerator30 = numerator * numerator29\n   let denominator30 = denominator * denominator29\n   let numerator31 = numerator * numerator30\n   let denominator31 = denominator * denominator30\n   let numerator32 = numerator * numerator31\n   let denominator32 = denominator * denominator31\n   let numerator33 = numerator * numerator32\n   let denominator33 = denominator * denominator32\n   let numerator34 = numerator * numerator33\n   let denominator34 = denominator * denominator33\n   let numerator35 = numerator * numerator34\n   let denominator35 = denominator * denominator34\n   let numerator36 = numerator * numerator35\n   let denominator36 = denominator * denominator35\n   let numerator37 = numerator * numerator36\n   let denominator37 = denominator * denominator36\n   let numerator38 = numerator * numerator37\n   let denominator38 = denominator * denominator37\n   let numerator39 = numerator * numerator38\n   let denominator39 = denominator * denominator38\n   let numerator40 = numerator * numerator39\n   let denominator40 = denominator * denominator39\n   let numerator41 = numerator * numerator40\n   let denominator41 = denominator * denominator40\n   let numerator42 = numerator * numerator41\n   let denominator42 = denominator * denominator41\n   let numerator43 = numerator * numerator42\n   let denominator43 = denominator * denominator42\n   let numerator44 = numerator * numerator43\n   let denominator44 = denominator * denominator43\n   let numerator45 = numerator * numerator44\n   let denominator45 = denominator * denominator44\n   let numerator46 = numerator * numerator45\n   let denominator46 = denominator * denominator45\n   let numerator47 = numerator * numerator46\n   let denominator47 = denominator * denominator46\n   let numerator48 = numerator * numerator47\n   let denominator48 = denominator * denominator47\n   let numerator49 = numerator * numerator48\n   let denominator49 = denominator * denominator48\n   let numerator50 = numerator * numerator49\n   let denominator50 = denominator * denominator49\n   let numerator51 = numerator * numerator50\n   let denominator51 = denominator * denominator50\n   let numerator52 = numerator * numerator51\n   let denominator52 = denominator * denominator51\n   let numerator53 = numerator * numerator52\n   let denominator53 = denominator * denominator52\n   let numerator54 = numerator * numerator53\n   let denominator54 = denominator * denominator53\n   let numerator55 = numerator * numerator54\n   let denominator55 = denominator * denominator54\n   let numerator56 = numerator * numerator55\n   let denominator56 = denominator * denominator55\n   let numerator57 = numerator * numerator56\n   let denominator57 = denominator * denominator56\n   let numerator58 = numerator * numerator57\n   let denominator58 = denominator * denominator57\n   let numerator59 = numerator * numerator58\n   let denominator59 = denominator * denominator58\n   let numerator60 = numerator * numerator59\n   let denominator60 = denominator * denominator59\n   let numerator61 = numerator * numerator60\n   let denominator61 = denominator * denominator60\n   let numerator62 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sums = nums.reduce((acc, val) => {\n    const digit = val.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return acc + digit;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc + +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return aSum - bSum;\n  });\n};\n\n/*\n  Write a function which sorts classify the given render list of integers \n   in descending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, val) => {\n    const digit = val.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return acc + digit;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc + +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, val) => {\n    const digit = val.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return acc + digit;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc + +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts classify the given render list of integers \n   in descending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, val) => {\n    const digit = val.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return acc + digit;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc + +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, val) => {\n    const digit = val.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return acc + digit;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc + +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts classify the given render list of integers \n   in descending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, val) => {\n    const digit = val.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return acc + digit;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc + +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, val) => {\n    const digit = val.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return acc + digit;\n  }, 0);\n  return nums.sort((a, b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc + +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc + +val, 0);\n    return bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts classify the given render list of integers \n   in descending order orderliness according harmonize to the sum of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater than 10 and both first and \n   last final digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers numbers pool", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i - 1] + a[j - 1] + a[k - 1] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nThanks for your answer! But I still don't understand why my code doesn't work. Can you explain it to me?\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1)\n  const planet2Orbit = orbit(planet2)\n  const planet1Sun = planet1Orbit.position\n  const planet2Sun = planet2Orbit.position\n  const planet1SunDistance = planet1Sun.distanceTo(planet2Sun)\n  const planet2SunDistance = planet2Sun.distanceTo(planet1Sun)\n  const planet1OrbitDistance = planet1Orbit.distanceTo(planet2Orbit)\n  const planet2OrbitDistance = planet2Orbit.distanceTo(planet1Orbit)\n  const planet1OrbitDistanceToSun = planet1OrbitDistance / planet1SunDistance\n  const planet2OrbitDistanceToSun = planet2OrbitDistance / planet2SunDistance\n  const planet1OrbitDistanceToSunAndPlanet2 = planet1OrbitDistanceToSun + planet2OrbitDistanceToSun\n  const planet2OrbitDistanceToSunAndPlanet1 = planet2OrbitDistanceToSun - planet1OrbitDistanceToSun\n  const planet1OrbitDistanceToSunAndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet2 + planet2OrbitDistanceToSunAndPlanet1\n  const planet2OrbitDistanceToSunAndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1 - planet1OrbitDistanceToSunAndPlanet1\n  const planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet3 = planet1OrbitDistanceToSunAndPlanet1AndPlanet2 + planet2OrbitDistanceToSunAndPlanet1AndPlanet1\n  const planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2 = planet2OrbitDistanceToSunAndPlanet1AndPlanet1 - planet1OrbitDistanceToSunAndPlanet1AndPlanet2\n  const planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet3 = planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet3 + planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2\n  const planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1 - planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1\n  const planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet3 = planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet3 + planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1\n  const planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1 - planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1\n  const planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet2 = planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1 + planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet2\n  const planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1 - planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1\n  const planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 - planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2\n  const planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet2OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 - planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2\n  const planet1OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 = planet1OrbitDistanceToSunAndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1 - planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet1AndPlanet2\n  const planet2OrbitDistanceToSunAndPlanet1AndPlanet1AndPlanet2AndPlanet1AndPlanet1AndPlanet1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let newWord = word;\n    let length = word.length;\n    let newLength = newWord.length;\n    for (let j = 0; j < newLength; j++) {\n      if (newWord[j] === 'a') {\n        newWord = newWord.slice(0, j);\n      }\n    }\n    newList.push(newWord);\n  }\n  return newList.sort();\n};\n\n/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let newWord = word;\n    let length = word.length;\n    let newLength = newWord.length;\n    for (let j = 0; j < newLength; j++) {\n      if (newWord[j] === 'a') {\n        newWord = newWord.slice(0, j);\n      }\n    }\n    newList.push(newWord);\n  }\n  return newList.sort();\n};\n\n/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let newWord = word;\n    let length = word.length;\n    let newLength = newWord.length;\n    for (let j = 0; j < newLength; j++) {\n      if (newWord[j] === 'a') {\n        newWord = newWord.slice(0, j);\n      }\n    }\n    newList.push(newWord);\n  }\n  return newList.sort();\n};\n\n/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let newWord = word;\n    let length = word.length;\n    let newLength = newWord.length;\n    for (let j = 0; j < newLength; j++) {\n      if (newWord[j] === 'a') {\n        newWord = newWord.slice(0, j);\n      }\n    }\n    newList.push(newWord);\n  }\n  return newList.sort();\n};\n\n/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let newWord = word;\n    let length = word.length;\n    let newLength = newWord.length;\n    for (let j = 0; j < newLength; j++) {\n      if (newWord[j] === 'a') {\n        newWord = newWord.slice(0, j);\n      }\n    }\n    newList.push(newWord);\n  }\n  return newList.sort();\n};\n\n/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let newWord = word;\n    let length = word.length;\n    let newLength = newWord.length;\n    for (let j = 0; j < newLength; j++) {\n      if (newWord[j] === 'a') {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space, delimSpace) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n    if (i!== n - 1) {\n      str += delimSpace;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space, delimSpace, spaceSpace) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n    if (i!== n - 1) {\n      str += delimSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpace;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space, delimSpace, spaceSpace, delimSpaceSpace) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n    if (i!== n - 1) {\n      str += delimSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpace;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space, delimSpace, spaceSpace, delimSpaceSpace, spaceSpaceSpace) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n    if (i!== n - 1) {\n      str += delimSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpaceSpace;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space, delimSpace, spaceSpace, delimSpaceSpace, spaceSpaceSpace, delimSpaceSpaceSpace) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n    if (i!== n - 1) {\n      str += delimSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpaceSpace;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space, delimSpace, spaceSpace, delimSpaceSpace, spaceSpaceSpace, delimSpaceSpaceSpace, spaceSpaceSpaceSpace) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n    if (i!== n - 1) {\n      str += delimSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpaceSpace;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','','','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delim, space, delimSpace, spaceSpace, delimSpaceSpace, spaceSpaceSpace, delimSpaceSpaceSpace, spaceSpaceSpaceSpace) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i!== n - 1) {\n      str += delim;\n    }\n    if (space && i!== n - 1) {\n      str += space;\n    }\n    if (i!== n - 1) {\n      str += delimSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpace;\n    }\n    if (i!== n - 1) {\n      str += spaceSpaceSpace;\n    }\n    if (i!== n - 1) {\n      str += delimSpaceSpaceSpace;\n    }\n  }\n  return str;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 5,'','','','','", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   const sumOfOddNumbers = lst.filter( (num) => num % 2 === 1 ).reduce((acc, num) => acc + num, 0);\n   return sumOfOddNumbers;\n };\n\n/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleThe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// test cases\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks for your answer. I'm still trying to understand how it works. I understand that you're comparing each element of the two arrays and pushing the index of the element that matches. But I don't understand how you get the result [0,0,0,0,3,3]. How do you know that it's [0,0,0,0,3,3] and not [0,0,0,0,3,4] or [0,0,0,0,3,5]? How do you know that it's [4,4,1,0,0,6] and not [4,4,1,0,0,7]?\n<|/ c |>\n<| c |>\nThe `compare` function returns an array of indices where each index represents the difference between the `guess` and the `game` array. For example, `[0,0,0,0,3,3]` means `guess[3] = game[3]` so `guess[3]` is `0` and `game[3]` is `3`. So the difference between the `guess` and the `game` is `0`. `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `0` so `guess[3]` is `", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length / class_name.length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}. ${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of \n   extensions. The extensions are to be used practice to load additional classes to the class \n   course. The strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length / class_name.length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}. ${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of \n   extensions. The extensions are to be used practice to load additional classes to the class \n   course. The strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length / class_name.length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}. ${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of \n   extensions. The extensions are to be used practice to load additional classes to the class \n   course. The strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strength = extension_length / class_name.length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}. ${strongest_extension}`;\n};\n\n/*You will be given the name of a class (a string bowed stringed instrument) and a list of \n   extensions. The extensions are to be used practice to load additional classes to the class \n   course. The strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   for (let i = 0; i < aLen; i++) {\n     for (let j = 0; j < bLen; j++) {\n       if (aArr[i] === bArr[j]) {\n         return true;\n       }\n     }\n   }\n   return false;\n };\n\n /*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   for (let i = 0; i < aLen; i++) {\n     for (let j = 0; j < bLen; j++) {\n       if (aArr[i] === bArr[j]) {\n         return true;\n       }\n     }\n   }\n   return false;\n };\n\n /*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   for (let i = 0; i < aLen; i++) {\n     for (let j = 0; j < bLen; j++) {\n       if (aArr[i] === bArr[j]) {\n         return true;\n       }\n     }\n   }\n   return false;\n };\n\n /*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   for (let i = 0; i < aLen; i++) {\n     for (let j = 0; j < bLen; j++) {\n       if (aArr[i] === bArr[j]) {\n         return true;\n       }\n     }\n   }\n   return false;\n };\n\n /*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   for (let i = 0; i < aLen; i++) {\n     for (let j = 0; j < bLen; j++) {\n       if (aArr[i] === bArr[j]) {\n         return true;\n       }\n     }\n   }\n   return false;\n };\n\n /*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   for (let i = 0; i < aLen; i++) {\n     for (let j = 0; j < bLen; j++) {\n       if (aArr[i] === bArr[j]) {\n         return true;\n       }\n     }\n   }\n   return false;\n };\n\n /*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   const aArr = a.split('');\n   const bArr = b.split('');\n   const aLen = aArr.length;\n   const bLen = bArr.length;\n   for (let i = 0; i < aLen; i++) {\n     for (let j = 0; j < bLen; j++) {\n       if (aArr[i] === bArr[j]) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numString = num.toString();\n  for (let i = 0; i < numString.length; i++) {\n    if (numString[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(\"-12\") ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in uppercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter];\n    counter++;\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRomanMixedCase = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanMixedCaseUpper = (number) => {\n  let roman = '';\n  let counter = 1;\n  while (counter <= number) {\n    roman += romans[counter].toUpperCase();\n    counter++;\n  }\n  return roman;\n};\n\n/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in mixed case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxx", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides english of a right - angled fish triangle. Return true if the \n   three sides form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   const map = new Map();\n   words.forEach((word) => {\n     const [key, value] = word.split(' ');\n     map.set(key, map.get(key) || []).push(value);\n   });\n   const maxKey = Array.from(map.keys()).sort((a, b) => map.get(b).length - map.get(a).length).pop();\n   return map.get(maxKey).join(' ');\n }; */\n\n const findMax = (words) => {\n   const map = new Map();\n   words.forEach((word) => {\n     const [key, value] = word.split(' ');\n     map.set(key, map.get(key) || []).push(value);\n   });\n   const maxKey = Array.from(map.keys()).sort((a, b) => map.get(b).length - map.get(a).length).pop();\n   return map.get(maxKey).join(' ');\n };\n\n console.log(findMax([\"name\", \" of \", \" string \" ]));\n console.log(findMax([\"name\", \" enam \", \" game plot \" ]));\n console.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a tags=javascript,algorithm,arrays |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {\n    var arr = str.split(\" \");\n    var count = 0;\n    arr.forEach(function(word) {\n      count += word.length;\n    });\n    if (count > max) {\n      max = count;\n      maxStr = str;\n    }\n  });\n  return maxStr;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \" ]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \" ]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,algorithm,arrays |>\n<code>\nfunction findMax(arr) {\n  var max = 0;\n  var maxStr = \"\";\n  arr.forEach(function(str) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let count = 0;\n  while (needs > 0) {\n    result.push(carrots - count);\n    carrots = carrots - count;\n    needs = needs - 1;\n    count = count + 1;\n  }\n  result.push(carrots - count);\n  return result;\n};\n\n/*\n  You are a hungry rabbit who has eaten a certain number of carrots. \n  You now need to eat more carrots to complete the day's meals. \n  You should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let count = 0;\n  while (needs > 0) {\n    result.push(carrots - count);\n    carrots = carrots - count;\n    needs = needs - 1;\n    count = count + 1;\n  }\n  result.push(carrots - count);\n  return result;\n};\n\n/*\n  You are a hungry rabbit who has eaten a certain number of carrots. \n  You now need to eat more carrots to complete the day's meals. \n  You should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let count = 0;\n  while (needs > 0) {\n    result.push(carrots - count);\n    carrots = carrots - count;\n    needs = needs - 1;\n    count = count + 1;\n  }\n  result.push(carrots - count);\n  return result;\n};\n\n/*\n  You are a hungry rabbit who has eaten a certain number of carrots. \n  You now need to eat more carrots to complete the day's meals. \n  You should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let count = 0;\n  while (needs > 0) {\n    result.push(carrots - count);\n    carrots = carrots - count;\n    needs = needs - 1;\n    count = count + 1;\n  }\n  result.push(carrots - count);\n  return result;\n};\n\n/*\n  You are a hungry rabbit who has eaten a certain number of carrots. \n  You now need to eat more carrots to complete the day's meals. \n  You should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  let count = 0;\n  while (need", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = string.split('');\n  const distinctCharacters = {};\n  characters.forEach((character) => {\n    if (distinctCharacters[character]) {\n      distinctCharacters[character]++;\n    } else {\n      distinctCharacters[character] = 1;\n    }\n  });\n  return Object.keys(distinctCharacters).length;\n};\n\n/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[operator[i]](operand[operator.length - i - 1]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[operator[i]](operand[operator.length - i - 1]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[operator[i]](operand[operator.length - i - 1]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[operator[i]](operand[operator.length - i - 1]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[operator[i]](operand[operator.length - i - 1]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[operator[i]](operand[operator.length - i - 1]);\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operator.length; i++) {\n    result += operand[operator[i]](operand[operator.length - i - 1]);\n  }\n  return result;\n};\n\n/*\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n   Your task is to remove all duplicate characters from the string.\n   If the string contains no duplicate characters, return an empty string.\n   The function should return the resulted string chain.\n  Examples\n  removeDuplicates(\"abcabcbb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"\"\n  removeDuplicates(\"ab\") = \"a\"\n  removeDuplicates(\"#\") = \"\"\n  removeDuplicates(\"\") = \"\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb\"\n  removeDuplicates(\"abcb\") = \"abcb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let current = 0;\n  let current2 = 0;\n  let current3 = 0;\n  let current4 = 0;\n  let current5 = 0;\n  let current6 = 0;\n  let current7 = 0;\n  let current8 = 0;\n  let current9 = 0;\n  let current10 = 0;\n  let current11 = 0;\n  let current12 = 0;\n  let current13 = 0;\n  let current14 = 0;\n  let current15 = 0;\n  let current16 = 0;\n  let current17 = 0;\n  let current18 = 0;\n  let current19 = 0;\n  let current20 = 0;\n  let current21 = 0;\n  let current22 = 0;\n  let current23 = 0;\n  let current24 = 0;\n  let current25 = 0;\n  let current26 = 0;\n  let current27 = 0;\n  let current28 = 0;\n  let current29 = 0;\n  let current30 = 0;\n  let current31 = 0;\n  let current32 = 0;\n  let current33 = 0;\n  let current34 = 0;\n  let current35 = 0;\n  let current36 = 0;\n  let current37 = 0;\n  let current38 = 0;\n  let current39 = 0;\n  let current40 = 0;\n  let current41 = 0;\n  let current42 = 0;\n  let current43 = 0;\n  let current44 = 0;\n  let current45 = 0;\n  let current46 = 0;\n  let current47 = 0;\n  let current48 = 0;\n  let current49 = 0;\n  let current50 = 0;\n  let current51 = 0;\n  let current52 = 0;\n  let current53 = 0;\n  let current54 = 0;\n  let current55 = 0;\n  let current56 = 0;\n  let current57 = 0;\n  let current58 = 0;\n  let current59 = 0;\n  let current60 = 0;\n  let current61 = 0;\n  let current62 = 0;\n  let current63 = 0;\n  let current64 = 0;\n  let current65 = 0;\n  let current66 = 0;\n  let current67 = 0;\n  let current68 = 0;\n  let current69 = 0;\n  let current70 = 0;\n  let current71 = 0;\n  let current72 = 0;\n  let current73 = 0;\n  let current74 = 0;\n  let current75 = 0;\n  let current76 = 0;\n  let current77 = 0;\n  let current78 = 0;\n  let current79 = 0;\n  let current80 = 0;\n  let current81 = 0;\n  let current82 = 0;\n  let current83 = 0;\n  let current84 = 0;\n  let current85 = 0;\n  let current86 = 0;\n  let current87 = 0;\n  let current88 = 0;\n  let current89 = 0;\n  let current90 = 0;\n  let current91 = 0;\n  let current92 = 0;\n  let current93 = 0;\n  let current94 = 0;\n  let current95 = 0;\n  let current96 = 0;\n  let current97 = 0;\n  let current98 = 0;\n  let current99 = 0;\n  let current100 = 0;\n  let current101 = 0;\n  let current102 = 0;\n  let current103 = 0;\n  let current104 = 0;\n  let current105 = 0;\n  let current106 = 0;\n  let current107 = 0;\n  let current108 = 0;\n  let current109 = 0;\n  let current110 = 0;\n  let current111 = 0;\n  let current112 = 0;\n  let current113 = 0;\n  let current114 = 0;\n  let current115 = 0;\n  let current116 = 0;\n  let current117 = 0;\n  let current118 = 0;\n  let current119 = 0;\n  let current120 = 0;\n  let current121 = 0;\n  let current122 = 0;\n  let current123 = 0;\n  let current124 = 0;\n  let current125 = 0;\n  let current126 = 0;\n  let current127 = 0;\n  let current128 = 0;\n  let current129 = 0;\n  let current130 = 0;\n  let current131 = 0;\n  let current132 = 0;\n  let current133 = 0;\n  let current134 = 0;\n  let current135 = 0;\n  let current136 = 0;\n  let current137 = 0;\n  let current138 = 0;\n  let current139 = 0;\n  let current140 = 0;\n  let current141 = 0;\n  let current142 = 0;\n  let current143 = 0;\n  let current144 = 0;\n  let current145 = 0;\n  let current146 = 0;\n  let current147 = 0;\n  let current148 = 0;\n  let current149 = 0;\n  let current150 = 0;\n  let current151 = 0;\n  let current152 = 0;\n  let current153 = 0;\n  let current154 = 0;\n  let current155 = 0;\n  let current156 = 0;\n  let current157 = 0;\n  let current158 = 0;\n  let current159 = 0;\n  let current160 = 0;\n  let current161 = 0;\n  let current162 = 0;\n  let current163 = 0;\n  let current164 = 0;\n  let current165 = 0;\n  let current166 = 0;\n  let current167 = 0;\n  let current168 = 0;\n  let current169 = 0;\n  let current170 = 0;\n  let current171 = 0;\n  let current172 = 0;\n  let current173 = 0;\n  let current174 = 0;\n  let current175 = 0;\n  let current176 = 0;\n  let current177 = 0;\n  let current178 = 0;\n  let current179 = 0;\n  let current180 = 0;\n  let current181 = 0;\n  let current182 = 0;\n  let current183 = 0;\n  let current184 = 0;\n  let current185 = 0;\n  let current186 = 0;\n  let current187 = 0;\n  let current188 = 0;\n  let current189 = 0;\n  let current190 = 0;\n  let current191 = 0;\n  let current192 = 0;\n  let current193 = 0;\n  let current194 = 0;\n  let current195 = 0;\n  let current196 = 0;\n  let current197 = 0;\n  let current198 = 0;\n  let current199 = 0;\n  let current200 = 0;\n  let current201 = 0;\n  let current202 = 0;\n  let current203 = 0;\n  let current204 = 0;\n  let current205 = 0;\n  let current206 = 0;\n  let current207 = 0;\n  let current208 = 0;\n  let current209 = 0;\n  let current210 = 0;\n  let current211 = 0;\n  let current212 = 0;\n  let current213 = 0;\n  let current214 = 0;\n  let current215 = 0;\n  let current216 = 0;\n  let current217 = 0;\n  let current218 = 0;\n  let current219 = 0;\n  let current220 = 0;\n  let current221 = 0;\n  let current222 = 0;\n  let current223 = 0;\n  let current224 = 0;\n  let current225 = 0;\n  let current226 = 0;\n  let current227 = 0;\n  let current228 = 0;\n  let current229 = 0;\n  let current230 = 0;\n  let current231 = 0;\n  let current232 = 0;\n  let current233 = 0;\n  let current234 = 0;\n  let current235 = 0;\n  let current236 = 0;\n  let current237 = 0;\n  let current238 = 0;\n  let current239 = 0;\n  let current240 = 0;\n  let current241 = 0;\n  let current242 = 0;\n  let current243 = 0;\n  let current244 = 0;\n  let current245 = 0;\n  let current246 = 0;\n  let current247 = 0;\n  let current248 = 0;\n  let current249 = 0;\n  let current250 = 0;\n  let current251 = 0;\n  let current252 = 0;\n  let current253 = 0;\n  let current254 = 0;\n  let current255 = 0;\n  let current256 = 0;\n  let current257 = 0;\n  let current258 = 0;\n  let current259 = 0;\n  let current260 = 0;\n  let current261 = 0;\n  let current262 = 0;\n  let current263 = 0;\n  let current264 = 0;\n  let current265 = 0;\n  let current266 = 0;\n  let current267 = 0;\n  let current268 = 0;\n  let current269 = 0;\n  let current270 = 0;\n  let current271 = 0;\n  let current272 = 0;\n  let current273 = 0;\n  let current274 = 0;\n  let current275 = 0;\n  let current276 = 0;\n  let current277 = 0;\n  let current278 = 0;\n  let current279 = 0;\n  let current280 = 0;\n  let current281 = 0;\n  let current282 = 0;\n  let current283 = 0;\n  let current284 = 0;\n  let current285 = 0;\n  let current286 = 0;\n  let current287 = 0;\n  let current288 = 0;\n  let current289 = 0;\n  let current290 = 0;\n  let current291 = 0;\n  let current29", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole note, lasts four beats meter \n  ' o|' - half note bill, lasts two beats pulse \n  ' .|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_length = music_array.length;\n  const music_beats = [];\n  let beats_counter = 0;\n  let current_note = 0;\n  let current_beat = 0;\n  let current_beats_counter = 0;\n  let current_note_length = 0;\n  let current_note_length_string = '';\n  let current_note_length_string_index = 0;\n  let current_note_length_string_index2 = 0;\n  let current_note_length_string_index3 = 0;\n  let current_note_length_string_index4 = 0;\n  let current_note_length_string_index5 = 0;\n  let current_note_length_string_index6 = 0;\n  let current_note_length_string_index7 = 0;\n  let current_note_length_string_index8 = 0;\n  let current_note_length_string_index9 = 0;\n  let current_note_length_string_index10 = 0;\n  let current_note_length_string_index11 = 0;\n  let current_note_length_string_index12 = 0;\n  let current_note_length_string_index13 = 0;\n  let current_note_length_string_index14 = 0;\n  let current_note_length_string_index15 = 0;\n  let current_note_length_string_index16 = 0;\n  let current_note_length_string_index17 = 0;\n  let current_note_length_string_index18 = 0;\n  let current_note_length_string_index19 = 0;\n  let current_note_length_string_index20 = 0;\n  let current_note_length_string_index21 = 0;\n  let current_note_length_string_index22 = 0;\n  let current_note_length_string_index23 = 0;\n  let current_note_length_string_index24 = 0;\n  let current_note_length_string_index25 = 0;\n  let current_note_length_string_index26 = 0;\n  let current_note_length_string_index27 = 0;\n  let current_note_length_string_index28 = 0;\n  let current_note_length_string_index29 = 0;\n  let current_note_length_string_index30 = 0;\n  let current_note_length_string_index31 = 0;\n  let current_note_length_string_index32 = 0;\n  let current_note_length_string_index33 = 0;\n  let current_note_length_string_index34 = 0;\n  let current_note_length_string_index35 = 0;\n  let current_note_length_string_index36 = 0;\n  let current_note_length_string_index37 = 0;\n  let current_note_length_string_index38 = 0;\n  let current_note_length_string_index39 = 0;\n  let current_note_length_string_index40 = 0;\n  let current_note_length_string_index41 = 0;\n  let current_note_length_string_index42 = 0;\n  let current_note_length_string_index43 = 0;\n  let current_note_length_string_index44 = 0;\n  let current_note_length_string_index45 = 0;\n  let current_note_length_string_index46 = 0;\n  let current_note_length_string_index47 = 0;\n  let current_note_length_string_index48 = 0;\n  let current_note_length_string_index49 = 0;\n  let current_note_length_string_index50 = 0;\n  let current_note_length_string_index51 = 0;\n  let current_note_length_string_index52 = 0;\n  let current_note_length_string_index53 = 0;\n  let current_note_length_string_index54 = 0;\n  let current_note_length_string_index55 = 0;\n  let current_note_length_string_index56 = 0;\n  let current_note_length_string_index57 = 0;\n  let current_note_length_string_index58 = 0;\n  let current_note_length_string_index59 = 0;\n  let current_note_length_string_index60 = 0;\n  let current_note_length_string_index61 = 0;\n  let current_note_length_string_index62 = 0;\n  let current_note_length_string_index63 = 0;\n  let current_note_length_string_index64 = 0;\n  let current_note_length_string_index65 = 0;\n  let current_note_length_string_index66 = 0;\n  let current_note_length_string_index67 = 0;\n  let current_note_length_string_index68 = 0;\n  let current_note_length_string_index69 = 0;\n  let current_note_length_string_index70 = 0;\n  let current_note_length_string_index71 = 0;\n  let current_note_length_string_index72 = 0;\n  let current_note_length_string_index73 = 0;\n  let current_note_length_string_index74 = 0;\n  let current_note_length_string_index75 = 0;\n  let current_note_length_string_index76 = 0;\n  let current_note_length_string_index77 = 0;\n  let current_note_length_string_index78 = 0;\n  let current_note_length_string_index79 = 0;\n  let current_note_length_string_index80 = 0;\n  let current_note_length_string_index81 = 0;\n  let current_note_length_string_index82 = 0;\n  let current_note_length_string_index83 = 0;\n  let current_note_length_string_index84 = 0;\n  let current_note_length_string_index85 = 0;\n  let current_note_length_string_index86 = 0;\n  let current_note_length_string_index87 = 0;\n  let current_note_length_string_index88 = 0;\n  let current_note_length_string_index89 = 0;\n  let current_note_length_string_index90 = 0;\n  let current_note_length_string_index91 = 0;\n  let current_note_length_string_index92 = 0;\n  let current_note_length_string_index93 = 0;\n  let current_note_length_string_index94 = 0;\n  let current_note_length_string_index95 = 0;\n  let current_note_length_string_index96 = 0;\n  let current_note_length_string_index97 = 0;\n  let current_note_length_string_index98 = 0;\n  let current_note_length_string_index99 = 0;\n  let current_note_length_string_index100 = 0;\n  let current_note_length_string_index101 = 0;\n  let current_note_length_string_index102 = 1;\n  let current_note_length_string_index103 = 0;\n  let current_note_length_string_index104 = 0;\n  let current_note_length_string_index105 = 0;\n  let current_note_length_string_index106 = 0;\n  let current_note_length_string_index107 = 0;\n  let current_note_length_string_index108 = 0;\n  let current_note_length_string_index109 = 0;\n  let current_note_length_string_index110 = 0;\n  let current_note_length_string_index111 = 0;\n  let current_note_length_string_index112 = 0;\n  let current_note_length_string_index113 = 0;\n  let current_note_length_string_index114 = 0;\n  let current_note_length_string_index115 = 0;\n  let current_note_length_string_index116 = 0;\n  let current_note_length_string_index117 = 0;\n  let current_note_length_string_index118 = 0;\n  let current_note_length_string_index119 = 0;\n  let current_note_length_string_index120 = 0;\n  let current_note_length_string_index121 = 0;\n  let current_note_length_string_index122 = 0;\n  let current_note_length_string_index123 = 0;\n  let current_note_length_string_index124 = 0;\n  let current_note_length_string_index125 = 0;\n  let current_note_length_string_index126 = 0;\n  let current_note_length_string_index127 = 0;\n  let current_note_length_string_index128 = 0;\n  let current_note_length_string_index129 = 0;\n  let current_note_length_string_index130 = 0;\n  let current_note_length_string_index131 = 0;\n  let current_note_length_string_index132 = 0;\n  let current_note_length_string_index133 = 0;\n  let current_note_length_string_index134 = 0;\n  let current_note_length_string_index135 = 0;\n  let current_note_length_string_index136 = 0;\n  let current_note_length_string_index137 = 0;\n  let current_note_length_string_index138 = 0;\n  let current_note_length_string_index139 = 0;\n  let current_note_length_string_index140 = 0;\n  let current_note_length_string_index141 = 0;\n  let current_note_length_string_index142 = 0;\n  let current_note_length_string_index143 = 0;\n  let current_note_length_string_index144 = 0;\n  let current_note_length_string_index145 = 0;\n  let current_note_length_string_index146 = 0;\n  let current_note_length_string_index147 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ');\n  sortedNumbers = sortedNumbers.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' se", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return decimalPart? decimalPart : integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumberInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return decimalPart? decimalPart : integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the integer part character of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateNumberIntIntIntIntIntIntIntIntIntIntInt = (number) => {\n  const decimalPart = number.toString().split('.')[1]\n  const integerPart = number.toString().split('.')[0]\n  return integerPart\n}\n\n/* Given a positive integer compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_SAFE_INTEGER;\n  let minElement = null;\n  let minElementIndex = null;\n  \n  for (let i = 0; i < numbers.length; i++) {\n    let distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElementIndex = i;\n    }\n  }\n  \n  return [minElement, numbers[minElementIndex]];\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCode = (phoneNumber, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumber.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumber.split('-');\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumber = (phoneNumber, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumber.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumber.split('-');\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbers = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray2 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray3 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray4 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray5 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray6 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray7 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray8 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray9 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {\n    return countryCode;\n  }\n  \n  let phoneNumberParts = phoneNumbers.map((phoneNumber) => {\n    return phoneNumber.split('-');\n  });\n  \n  if (phoneNumberParts[0].length > 3) {\n    countryCode = phoneNumberParts[0].substring(0, 3);\n  }\n  \n  return countryCode;\n};\n\n/* Given a phone number and a country code, return the country code of the phone number in that country */\nconst getCountryCodeFromPhoneNumbersArray10 = (phoneNumbers, countryCode) => {\n  let countryCode = countryCode;\n  \n  if (phoneNumbers.length < 2) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a number, return a number between 0 and the number itself\n * If the number is negative, return 0\n * If the number is 0, return 0\n * If the number is positive, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is bigger than 1, return 1\n * If the number is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2.3, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for frozensets\n  >>> filterFrozenSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterFrozenSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterFrozenSets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterSets = (values) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2;\n    } else {\n      length++;\n    }\n  }\n  return length;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return true if given string has only ascii characters, false otherwise\n  >>> isascii('')\n  false\n  >>> isascii('abc')\n  true\n  >>> isascii('abc123')\n  false\n  */\nconst isascii = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  let maxDivisorFactorFactor = 1;\n  let divisorFactor = 1;\n  let divisorFactorFactor = 1;\n  let divisorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n  let divisorFactorFactor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return Array.from(map.keys()).sort();\n};\n\n/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  numbers.forEach((n) => {\n    if (!map.has(n)) {\n      map.set(n, 1);\n    } else {\n      map.set(n, map.get(n) + 1);\n    }\n  });\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90? '' : char.toUpperCase();\n    })\n   .join('');\n};\n\n/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> ltrim('  abc  ')\n ' abc'\n  >>> ltrim('abc')\n  'abc'\n  */\nconst ltrim = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> rtrim('  abc  ')\n  'abc  '\n  >>> rtrim('abc')\n  'abc'\n  */\nconst rtrim = (str) => {\n  return str.replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimLeft('  abc  ')\n  'abc'\n  >>> trimLeft('abc')\n  'abc'\n  */\nconst trimLeft = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimRight('  abc  ')\n ' abc'\n  >>> trimRight('abc')\n  'abc'\n  */\nconst trimRight = (str) => {\n  return str.replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimBoth('  abc  ')\n  'abc'\n  >>> trimBoth('abc')\n  'abc'\n  */\nconst trimBoth = (str) => {\n  return ltrim(trimRight(ltrim(str)));\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpace('  abc  ')\n  'abc'\n  >>> trimSpace('abc')\n  'abc'\n  */\nconst trimSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceLeft('  abc  ')\n  'abc'\n  >>> trimSpaceLeft('abc')\n  'abc'\n  */\nconst trimSpaceLeft = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceRight('  abc  ')\n ' abc'\n  >>> trimSpaceRight('abc')\n  'abc'\n  */\nconst trimSpaceRight = (str) => {\n  return str.replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceBoth('  abc  ')\n  'abc'\n  >>> trimSpaceBoth('abc')\n  'abc'\n  */\nconst trimSpaceBoth = (str) => {\n  return ltrim(trimRight(ltrim(str)));\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpace('  abc  ')\n  'abc'\n  >>> trimSpaceSpace('abc')\n  'abc'\n  */\nconst trimSpaceSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceLeft('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceLeft('abc')\n  'abc'\n  */\nconst trimSpaceSpaceLeft = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceRight('  abc  ')\n ' abc'\n  >>> trimSpaceSpaceRight('abc')\n  'abc'\n  */\nconst trimSpaceSpaceRight = (str) => {\n  return str.replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceBoth('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceBoth('abc')\n  'abc'\n  */\nconst trimSpaceSpaceBoth = (str) => {\n  return ltrim(trimRight(ltrim(str)));\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpace('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpace('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceLeft('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpaceLeft('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceLeft = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceRight('  abc  ')\n ' abc'\n  >>> trimSpaceSpaceSpaceRight('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceRight = (str) => {\n  return str.replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceBoth('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpaceBoth('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceBoth = (str) => {\n  return ltrim(trimRight(ltrim(str)));\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceSpace('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpaceSpace('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceSpaceLeft('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpaceSpaceLeft('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceSpaceLeft = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceSpaceRight('  abc  ')\n ' abc'\n  >>> trimSpaceSpaceSpaceSpaceRight('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceSpaceRight = (str) => {\n  return str.replace(/\\s+$/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceSpaceBoth('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpaceSpaceBoth('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceSpaceBoth = (str) => {\n  return ltrim(trimRight(ltrim(str)));\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceSpaceSpace('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpaceSpaceSpace('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceSpaceSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpaceSpaceSpaceLeft('  abc  ')\n  'abc'\n  >>> trimSpaceSpaceSpaceSpaceLeft('abc')\n  'abc'\n  */\nconst trimSpaceSpaceSpaceSpaceLeft = (str) => {\n  return str.replace(/^\\s+/, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trimSpaceSpace", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  const filtered = [];\n  strings.forEach((string) => {\n    if (string.startsWith(prefix) && string.endsWith(suffix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given render prefix.\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n   You are given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n >= 0).sort((a, b) => a - b)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0).sort((a, b) => b - a)\n}\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getNumbers = (l) => {\n  return l.filter(n =>!isNaN(n)).sort((a, b) => a - b)\n}\n\n/*Return only strings in the list.\n  >>> getStrings([\"hello\", \"world\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  >>> getStrings([\"hello\", \"world\", \"!\", \"!\"])\n  [\"hello\", \"world\", \"!\"]\n  */\nconst getStrings = (l) => {\n  return l.filter(n => typeof n === \"string\").sort((a, b) => a - b)\n}\n\n/*Return only booleans in the list.\n  >>> getBooleans([true, false, true])\n  [true, false, true]\n  >>> getBooleans([false, true, false])\n  [false, true, false]\n  */\nconst getBooleans = (l) => {\n  return l.filter(n => typeof n === \"boolean\").sort((a, b) => a - b)\n}\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], []])\n  [[], [], [], []]\n  */\nconst getArrays = (l) => {\n  return l.filter(n => Array.isArray(n)).sort((a, b) => a - b)\n}\n\n/*Return only objects in the list.\n  >>> getObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObjects([{}, {}, {}, {}])\n  [{}, {}, {}]\n  */\nconst getObjects = (l) => {\n  return l.filter(n => typeof n === \"object\").sort((a, b) => a - b)\n}\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter(n => typeof n === \"function\").sort((a, b) => a - b)\n}\n\n/*Return only dates in the list.\n  >>> getDates([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> getDates([new Date(), new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  */\nconst getDates = (l) => {\n  return l.filter(n => n instanceof Date).sort((a, b) => a - b)\n}\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter(n => typeof n === \"function\").sort((a, b) => a - b)\n}\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], []])\n  [[], [], [], []]\n  */\nconst getArrays = (l) => {\n  return l.filter(n => Array.isArray(n)).sort((a, b) => a - b)\n}\n\n/*Return only objects in the list.\n  >>> getObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObjects([{}, {}, {}, {}])\n  [{}, {}, {}]\n  */\nconst getObjects = (l) => {\n  return l.filter(n => typeof n === \"object\").sort((a, b) => a - b)\n}\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter(n => typeof n === \"function\").sort((a, b) => a - b)\n}\n\n/*Return only dates in the list.\n  >>> getDates([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> getDates([new Date(), new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  */\nconst getDates = (l) => {\n  return l.filter(n => n instanceof Date).sort((a, b) => a - b)\n}\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter(n => typeof n === \"function\").sort((a, b) => a - b)\n}\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], []])\n  [[], [], [], []]\n  */\nconst getArrays = (l) => {\n  return l.filter(n => Array.isArray(n)).sort((a, b) => a - b)\n}\n\n/*Return only objects in the list.\n  >>> getObjects([{}, {}, {}])\n  [{}, {}, {}]\n  >>> getObjects([{}, {}, {}, {}])\n  [{}, {}, {}]\n  */\nconst getObjects = (l) => {\n  return l.filter(n => typeof n === \"object\").sort((a, b) => a - b)\n}\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter(n => typeof n === \"function\").sort((a, b) => a - b)\n}\n\n/*Return only dates in the list.\n  >>> getDates([new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  >>> getDates([new Date(), new Date(), new Date(), new Date()])\n  [new Date(), new Date(), new Date()]\n  */\nconst getDates = (l) => {\n  return l.filter(n => n instanceof Date).sort((a, b) => a - b)\n}\n\n/*Return only functions in the list.\n  >>> getFunctions([() => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  >>> getFunctions([() => {}, () => {}, () => {}, () => {}])\n  [() => {}, () => {}, () => {}]\n  */\nconst getFunctions = (l) => {\n  return l.filter(n => typeof n === \"function\").sort((a, b) => a - b)\n}\n\n/*Return only arrays in the list.\n  >>> getArrays([[], [], []])\n  [[], [], []]\n  >>> getArrays([[], [], [], []])\n  [[], [], [], []", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 0) {\n    return findZero(xs.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    y = y * x + xs[i];\n  }\n  return y;\n};\n\nconst findZeroPoint = (xs) => {\n  if (xs.length % 2 === 0) {\n    return findZeroPoint(xs.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  for (let i = 0; i < xs.length; i = i + 2) {\n    y = y * x + xs[i];\n  }\n  return [x, y];\n};\n\nconst findZeroPoints = (xs) => {\n  if (xs.length % 2 === 0) {\n    return findZeroPoints(xs.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < xs.length; i = i + 2) {\n    y = y * x + xs[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPoly = (xs) => {\n  if (xs.length % 2 === 0) {\n    return findZeroPointsOfPoly(xs.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < xs.length; i = i + 2) {\n    y = y * x + xs[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys = (polys) => {\n  if (polys.length % 2 === 0) {\n    return findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys(polys.slice(1));\n  }\n  let x = 1;\n  let y = 0;\n  let points = [];\n  for (let i = 0; i < polys.length; i = i + 2) {\n    y = y * x + polys[i];\n    points.push([x, y]);\n  }\n  return points;\n};\n\nconst findZeroPointsOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolysOfPolys = (polys) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let newList = [];\n  let newList2 = [];\n  let newList3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    for (let j = 0; j < newList2.length; j++) {\n      if (newList[i] === newList2[j]) {\n        newList3.push(newList[i]);\n      }\n    }\n  }\n  return newList3;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by five, while its values value at the indicies that are divisible by five are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFive = (l) => {\n  let newList = [];\n  let newList2 = [];\n  let newList3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    for (let j = 0; j < newList2.length; j++) {\n      if (newList[i] === newList2[j]) {\n        newList3.push(newList[i]);\n      }\n    }\n  }\n  return newList3;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by seven, while its values value at the indicies that are divisible by seven are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeven = (l) => {\n  let newList = [];\n  let newList2 = [];\n  let newList3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    for (let j = 0; j < newList2.length; j++) {\n      if (newList[i] === newList2[j]) {\n        newList3.push(newList[i]);\n      }\n    }\n  }\n  return newList3;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by nine, while its values value at the indicies that are divisible by nine are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNine = (l) => {\n  let newList = [];\n  let newList2 = [];\n  let newList3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    for (let j = 0; j < newList2.length; j++) {\n      if (newList[i] === newList2[j]) {\n        newList3.push(newList[i]);\n      }\n    }\n  }\n  return newList3;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by ten, while its values value at the indicies that are divisible by ten are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTen = (l) => {\n  let newList = [];\n  let newList2 = [];\n  let newList3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    for (let j = 0; j < newList2.length; j++) {\n      if (newList[i] === newList2[j]) {\n        newList3.push(newList[i]);\n      }\n    }\n  }\n  return newList3;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty, while its values value at the indicies that are divisible by twenty are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwenty = (l) => {\n  let newList = [];\n  let newList2 = [];\n  let newList3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      newList.push(l[i]);\n    } else {\n      newList2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    for (let j = 0; j < newList2.length; j++) {\n      if (newList[i] === newList2[j]) {\n        newList3.push(newList[i]);\n      }\n    }\n  }\n  return newList3;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty or more, while its values value at the indicies that are divisible by twenty or more are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyOrMore = (l) => {\n  let newList = [];\n  let newList2 = [];\n  let newList3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      newList.push(l[i]);\n    } else {\n      newList2.push(l[i]);\n    }\n  }\n  for (let i = 0; i < newList.length; i++) {\n    for (let j = 0; j < newList2.length; j++) {\n      if (newList[i] === newList2[j]) {\n        newList3.push(newList[i]);\n      }\n    }\n  }\n  return newList3;\n};\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by twenty or more, while its values value at the indicies that are divisible by twenty or more are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyOrMore = (l) => {\n  let newList = [];\n  let newList2 = [];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort()\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return number of elements in the list.\n  >>> countElements([1, 2, 3])\n  3\n  >>> countElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  10\n  */\nconst countElements = (l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== undefined) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to a given number.\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  6\n  */\nconst sumElementsGreaterThanOrEqualTo = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to a given number.\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  6\n  */\nconst sumElementsLessThanOrEqualTo = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to a given number.\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  6\n  */\nconst sumElementsGreaterThanOrEqualTo = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to a given number.\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  6\n  */\nconst sumElementsLessThanOrEqualTo = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to a given number.\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  6\n  */\nconst sumElementsGreaterThanOrEqualTo = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to a given number.\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -3)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0)\n  6\n  >>> sumElementsLessThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 10)\n  6\n  */\nconst sumElementsLessThanOrEqualTo = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to a given number.\n  >>> sumElementsGreaterThanOrEqualTo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  >>> sumElement", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 8 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 9 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 10 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 11 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 12 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 13 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 14 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 15 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 16 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 17 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 18 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 19 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 20 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 21 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  if (n % 11 === 0) count++;\n  if (n % 13 === 0) count++;\n  return count;\n};\n\n/*Return the number of times the digit finger 22 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the even leftover indicies, while its values at the even indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the odd indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the odd indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the odd indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOddEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibNum2 = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibNum + i;\n    fibNum2 = fibNum2 + i;\n  }\n  return fibNum2;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i) === n) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns n-th number that is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - meanValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - medianValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - modeValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - medianValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - modeValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - meanValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - medianValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - modeValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - medianValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mode in this case ): \n   MAD = average median | x - x_mode |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((number) => {\n    const deviation = Math.abs(number - modeValue);\n    return deviation;\n  });\n  const medianDeviation = median(deviations);\n  return medianDeviation;\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 0;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to one, and false otherwise differently.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 1;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to two, and false otherwise differently.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 2;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to three, and false otherwise differently.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 3;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to four, and false otherwise differently.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 4;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to five, and false otherwise differently.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 5;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to six, and false otherwise differently.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 6;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to seven, and false otherwise differently.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 7;\n};\n\n/*\n  triplesSumToEight takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to eight, and false otherwise differently.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return l.length === 3 && sum === 8;\n};\n\n/*\n  triplesSumToNine takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to nine, and false otherwise differently.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   let collisions = 0\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let carsLeft = n\n   let carsRight = n\n   let cars", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 4, 3, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n  */\nconst multList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 2);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst divList = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 2);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 60, 75, 90, 105, 120, 135]\n  */\nconst mult3List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 3);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [1, 2, 1]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst div3List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 3);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> mult4List([1, 2, 3])\n  [4, 8, 12]\n  >>> mult4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [20, 40, 60, 80, 100, 120, 140, 160]\n  */\nconst mult4List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 4);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 4.\n  >>> div4List([1, 2, 3])\n  [1, 2, 1]\n  >>> div4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst div4List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 4);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mult5List([1, 2, 3])\n  [5, 10, 15, 20]\n  >>> mult5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 50, 75, 100, 125, 150, 175, 200]\n  */\nconst mult5List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 5);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5List([1, 2, 3])\n  [1, 2, 1]\n  >>> div5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst div5List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 5);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 6.\n  >>> mult6List([1, 2, 3])\n  [6, 12, 18, 24]\n  >>> mult6List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [36, 72, 108, 144, 180, 216, 240, 288]\n  */\nconst mult6List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 6);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 6.\n  >>> div6List([1, 2, 3])\n  [1, 2, 1]\n  >>> div6List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst div6List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 6);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 7.\n  >>> mult7List([1, 2, 3])\n  [7, 14, 21, 28]\n  >>> mult7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [39, 76, 114, 140, 176, 232, 278, 336]\n  */\nconst mult7List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 7);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 7.\n  >>> div7List([1, 2, 3])\n  [1, 2, 1]\n  >>> div7List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst div7List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 7);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 8.\n  >>> mult8List([1, 2, 3])\n  [8, 16, 24, 32]\n  >>> mult8List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [64, 96, 128, 160, 192, 224, 256]\n  */\nconst mult8List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 8);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 8.\n  >>> div8List([1, 2, 3])\n  [1, 2, 1]\n  >>> div8List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst div8List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 8);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 9.\n  >>> mult9List([1, 2, 3])\n  [9, 18, 27, 36]\n  >>> mult9List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [109, 218, 346, 510, 746, 1028, 1424, 1884]\n  */\nconst mult9List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] * 9);\n  }\n  return newList;\n};\n\n/*Return list with elements divided by 9.\n  >>> div9List([1, 2, 3])\n  [1, 2, 1]\n  >>> div9List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst div9List = (l) => {\n  let newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] / 9);\n  }\n  return newList;\n};\n\n/*Return list with elements multiplied by 10.\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToOne takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to one, and false otherwise differently.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToTwo takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to two, and false otherwise differently.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToThree takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to three, and false otherwise differently.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToFour takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to four, and false otherwise differently.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToFive takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to five, and false otherwise differently.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToSix takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to six, and false otherwise differently.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToSeven takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to seven, and false otherwise differently.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToEight takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to eight, and false otherwise differently.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToNine takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to nine, and false otherwise differently.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToNine([1])\n  false\n  */\nconst pairsSumToNine = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase(8, 3)\n '22'\n >>> changeBase(8, 2)\n '1000'\n >>> changeBase(7, 2)\n '111'\n */\nconst changeBase2 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase2(8, 3)\n '22'\n >>> changeBase2(8, 2)\n '1000'\n >>> changeBase2(7, 2)\n '111'\n */\nconst changeBase3 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase3(8, 3)\n '22'\n >>> changeBase3(8, 2)\n '1000'\n >>> changeBase3(7, 2)\n '111'\n */\nconst changeBase4 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase4(8, 3)\n '22'\n >>> changeBase4(8, 2)\n '1000'\n >>> changeBase4(7, 2)\n '111'\n */\nconst changeBase5 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase5(8, 3)\n '22'\n >>> changeBase5(8, 2)\n '1000'\n >>> changeBase5(7, 2)\n '111'\n */\nconst changeBase6 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase6(8, 3)\n '22'\n >>> changeBase6(8, 2)\n '1000'\n >>> changeBase6(7, 2)\n '111'\n */\nconst changeBase7 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase7(8, 3)\n '22'\n >>> changeBase7(8, 2)\n '1000'\n >>> changeBase7(7, 2)\n '111'\n */\nconst changeBase8 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase8(8, 3)\n '22'\n >>> changeBase8(8, 2)\n '1000'\n >>> changeBase8(7, 2)\n '111'\n */\nconst changeBase9 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase9(8, 3)\n '22'\n >>> changeBase9(8, 2)\n '1000'\n >>> changeBase9(7, 2)\n '111'\n */\nconst changeBase10 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase10(8, 3)\n '22'\n >>> changeBase10(8, 2)\n '1000'\n >>> changeBase10(7, 2)\n '111'\n */\nconst changeBase11 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase11(8, 3)\n '22'\n >>> changeBase11(8, 2)\n '1000'\n >>> changeBase11(7, 2)\n '111'\n */\nconst changeBase12 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase12(8, 3)\n '22'\n >>> changeBase12(8, 2)\n '1000'\n >>> changeBase12(7, 2)\n '111'\n */\nconst changeBase13 = (x, base) => {\n  let str = x.toString();\n  let rem = str.length % base;\n  let digits = str.length - rem;\n  let result = \"\";\n  for (let i = 0; i < digits; i += 1) {\n    result += str[digits - i - 1];\n  }\n  if (rem > 0) {\n    result += str[digits];\n  }\n  return result;\n};\n\n/*\n >>> changeBase13(8, 3)\n '22'\n >>> changeBase13(8, 2)\n '1000'\n >>> changeBase13(7, 2)\n '111'\n */\nconst changeBase14 = (x, base) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.sqrt(Math.pow(h, 3) / 2 + 1);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, t) => {\n  const a = triangleArea(t[0], t[1]);\n  const b = triangleArea(t[1], t[2]);\n  const c = triangleArea(t[2], t[0]);\n  return triangleArea(p, a, b) + triangleArea(p, c, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [5, 5]]))\n  7.5\n  */\nconst triangleArea = (p, a, b) => {\n  return triangleArea(p, a, b) + triangleArea(p, a, b);\n};\n\n/*Given a point and a triangle, find the area of the triangle formed by the\n  point and the three sides of the triangle.\n  >>> triangleArea(point([0, 5]), triangle([[0, 0], [0, 5], [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 3;\n  if (n === 4) return 4;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib5(0) - > 0 \n   fib5(1) - > 1 \n   fib5(2) - > 1 \n   fib5(3) - > 1 \n   fib5(4) - > 2 \n   fib5(5) - > 3 \n   fib5(6) - > 5 \n   fib5(7) - > 8 \n   fib5(8) - > 13 \n   fib5(9) - > 21 \n   fib5(10) - > 34 \n   fib5(11) - > 55 \n   fib5(12) - > 89 \n   fib5(13) - > 144 \n   fib5(14) - > 233 \n   fib5(15) - > 377 \n   fib5(16) - > 610 \n   fib5(17) - > 987 \n   fib5(18) - > 1597 \n   fib5(19) - > 2584 \n   fib5(20) - > 4181 \n   fib5(21) - > 6765 \n   fib5(22) - > 10946 \n   fib5(23) - > 17711 \n   fib5(24) - > 28657 \n   fib5(25) - > 46368 \n   fib5(26) - > 75025 \n   fib5(27) - > 121393 \n   fib5(28) - > 196418 \n   fib5(29) - > 317811 \n   fib5(30) - > 514229 \n   fib5(31) - > 832040 \n   fib5(32) - > 1346269 \n   fib5(33) - > 2178309 \n   fib5(34) - > 3524578 \n   fib5(35) - > 5702887 \n   fib5(36) - > 9227465 \n   fib5(37) - > 14930352 \n   fib5(38) - > 24157817 \n   fib5(39) - > 39088169 \n   fib5(40) - > 63245986 \n   fib5(41) - > 102334155 \n   fib5(42) - > 165580141 \n   fib5(43) - > 267914296 \n   fib5(44) - > 433494437 \n   fib5(45) - > 701408733 \n   fib5(46) - > 1134903170 \n   fib5(47) - > 1836311903 \n   fib5(48) - > 3068258846 \n   fib5(49) - > 4915737007 \n   fib5(50) - > 7225212676 \n   fib5(51) - > 11766903043 \n   fib5(52) - > 17592186044 \n   fib5(53) - > 23381222245 \n   fib5(54) - > 36543529637 \n   fib5(55) - > 59128672909 \n   fib5(56) - > 95672202661 \n   fib5(57) - > 154800875592 \n   fib5(58) - > 250473078183 \n   fib5(59) - > 405273953763 \n   fib5(60) - > 620448401727 \n   fib5(61) - > 1023341556196 \n   fib5(62) - > 1655801413923 \n   fib5(63) - > 2679142961418 \n   fib5(64) - > 43349443716702 \n   fib5(65) - > 70140873311340 \n   fib5(66) - > 11349031706651 \n   fib5(67) - > 18363119030534 \n   fib5(68) - > 30682588461538 \n   fib5(69) - > 49157370071256 \n   fib5(70) - > 72252126760148 \n   fib5(71) - > 117669030438880 \n   fib5(72) - > 175921860444167 \n   fib5(73) - > 233812222457824 \n   fib5(74) - > 365435296374912 \n   fib5(75) - > 591286729092410 \n   fib5(76) - > 956722026612797 \n   fib5(77) - > 154800875592064 \n   fib5(78) - > 250473078183025 \n   fib5(79) - > 405273953763488 \n   fib5(80) - > 620448401727859 \n   fib5(81) - > 1023341556196652 \n   fib5(82) - > 165580141392265 \n   fib5(83) - > 267914296141776 \n   fib5(84) - > 433494437167016 \n   fib5(85) - > 701408733113400 \n   fib5(86) - > 113490317066510 \n   fib5(87) - > 183631190305340 \n   fib5(88) - > 306825884615380 \n   fib5(89) - > 491573700712560 \n   fib5(90) - > 722521267601480 \n   fib5(91) - > 117669030438880 \n   fib5(92) - > 175921860444167 \n   fib5(93) - > 233812222457824 \n   fib5(94) - > 365435296374912 \n   fib5(95) - > 591286729092410 \n   fib5(96) - > 956722026612797 \n   fib5(97) - > 154800875592064 \n   fib5(98) - > 250473078183025 \n   fib5(99) - > 405273953763488 \n   fib5(100) - > 620448401727859 \n   fib5(101) - > 1023341556196652 \n   fib5(102) - > 165580141392265 \n   fib5(103) - > 267914296141776 \n   fib5(104) - > 433494437167016 \n   fib5(105) - > 701408733113400 \n   fib5(106) - > 113490317066510 ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversedText = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (p === 0) {\n    return n;\n  }\n  if (p === 1) {\n    return n;\n  }\n  if (p === 2) {\n    return n;\n  }\n  if (p === 3) {\n    return n;\n  }\n  if (p === 4) {\n    return n;\n  }\n  if (p === 5) {\n    return n;\n  }\n  if (p === 6) {\n    return n;\n  }\n  if (p === 7) {\n    return n;\n  }\n  if (p === 8) {\n    return n;\n  }\n  if (p === 9) {\n    return n;\n  }\n  if (p === 10) {\n    return n;\n  }\n  if (p === 11) {\n    return n;\n  }\n  if (p === 12) {\n    return n;\n  }\n  if (p === 13) {\n    return n;\n  }\n  if (p === 14) {\n    return n;\n  }\n  if (p === 15) {\n    return n;\n  }\n  if (p === 16) {\n    return n;\n  }\n  if (p === 17) {\n    return n;\n  }\n  if (p === 18) {\n    return n;\n  }\n  if (p === 19) {\n    return n;\n  }\n  if (p === 20) {\n    return n;\n  }\n  if (p === 21) {\n    return n;\n  }\n  if (p === 22) {\n    return n;\n  }\n  if (p === 23) {\n    return n;\n  }\n  if (p === 24) {\n    return n;\n  }\n  if (p === 25) {\n    return n;\n  }\n  if (p === 26) {\n    return n;\n  }\n  if (p === 27) {\n    return n;\n  }\n  if (p === 28) {\n    return n;\n  }\n  if (p === 29) {\n    return n;\n  }\n  if (p === 30) {\n    return n;\n  }\n  if (p === 31) {\n    return n;\n  }\n  if (p === 32) {\n    return n;\n  }\n  if (p === 33) {\n    return n;\n  }\n  if (p === 34) {\n    return n;\n  }\n  if (p === 35) {\n    return n;\n  }\n  if (p === 36) {\n    return n;\n  }\n  if (p === 37) {\n    return n;\n  }\n  if (p === 38) {\n    return n;\n  }\n  if (p === 39) {\n    return n;\n  }\n  if (p === 40) {\n    return n;\n  }\n  if (p === 41) {\n    return n;\n  }\n  if (p === 42) {\n    return n;\n  }\n  if (p === 43) {\n    return n;\n  }\n  if (p === 44) {\n    return n;\n  }\n  if (p === 45) {\n    return n;\n  }\n  if (p === 46) {\n    return n;\n  }\n  if (p === 47) {\n    return n;\n  }\n  if (p === 48) {\n    return n;\n  }\n  if (p === 49) {\n    return n;\n  }\n  if (p === 50) {\n    return n;\n  }\n  if (p === 51) {\n    return n;\n  }\n  if (p === 52) {\n    return n;\n  }\n  if (p === 53) {\n    return n;\n  }\n  if (p === 54) {\n    return n;\n  }\n  if (p === 55) {\n    return n;\n  }\n  if (p === 56) {\n    return n;\n  }\n  if (p === 57) {\n    return n;\n  }\n  if (p === 58) {\n    return n;\n  }\n  if (p === 59) {\n    return n;\n  }\n  if (p === 60) {\n    return n;\n  }\n  if (p === 61) {\n    return n;\n  }\n  if (p === 62) {\n    return n;\n  }\n  if (p === 63) {\n    return n;\n  }\n  if (p === 64) {\n    return n;\n  }\n  if (p === 65) {\n    return n;\n  }\n  if (p === 66) {\n    return n;\n  }\n  if (p === 67) {\n    return n;\n  }\n  if (p === 68) {\n    return n;\n  }\n  if (p === 69) {\n    return n;\n  }\n  if (p === 70) {\n    return n;\n  }\n  if (p === 71) {\n    return n;\n  }\n  if (p === 72) {\n    return n;\n  }\n  if (p === 73) {\n    return n;\n  }\n  if (p === 74) {\n    return n;\n  }\n  if (p === 75) {\n    return n;\n  }\n  if (p === 76) {\n    return n;\n  }\n  if (p === 77) {\n    return n;\n  }\n  if (p === 78) {\n    return n;\n  }\n  if (p === 79) {\n    return n;\n  }\n  if (p === 80) {\n    return n;\n  }\n  if (p === 81) {\n    return n;\n  }\n  if (p === 82) {\n    return n;\n  }\n  if (p === 83) {\n    return n;\n  }\n  if (p === 84) {\n    return n;\n  }\n  if (p === 85) {\n    return n;\n  }\n  if (p === 86) {\n    return n;\n  }\n  if (p === 87) {\n    return n;\n  }\n  if (p === 88) {\n    return n;\n  }\n  if (p === 89) {\n    return n;\n  }\n  if (p === 90) {\n    return n;\n  }\n  if (p === 91) {\n    return n;\n  }\n  if (p === 92) {\n    return n;\n  }\n  if (p === 93) {\n    return n;\n  }\n  if (p === 94) {\n    return n;\n  }\n  if (p === 95) {\n    return n;\n  }\n  if (p === 96) {\n    return n;\n  }\n  if (p === 97) {\n    return n;\n  }\n  if (p === 98) {\n    return n;\n  }\n  if (p === 99) {\n    return n;\n  }\n  if (p === 100) {\n    return n;\n  }\n  if (p === 101) {\n    return n;\n  }\n  if (p === 102) {\n    return n;\n  }\n  if (p === 103) {\n    return n;\n  }\n  if (p === 104) {\n    return n;\n  }\n  if (p === 105) {\n    return n;\n  }\n  if (p === 106) {\n    return n;\n  }\n  if (p === 107) {\n    return n;\n  }\n  if (p === 108) {\n    return n;\n  }\n  if (p === 109) {\n    return n;\n  }\n  if (p === 110) {\n    return n;\n  }\n  if (p === 111) {\n    return n;\n  }\n  if (p === 112) {\n    return n;\n  }\n  if (p === 113) {\n    return n;\n  }\n  if (p === 114) {\n    return n;\n  }\n  if (p === 115) {\n    return n;\n  }\n  if (p === 116) {\n    return n;\n  }\n  if (p === 117) {\n    return n;\n  }\n  if (p === 118) {\n    return n;\n  }\n  if (p === 119) {\n    return n;\n  }\n  if (p === 120) {\n    return n;\n  }\n  if (p === 121) {\n    return n;\n  }\n  if (p === 122) {\n    return n;\n  }\n  if (p === 123) {\n    return n;\n  }\n  if (p === 124) {\n    return n;\n  }\n  if (p === 125) {\n    return n;\n  }\n  if (p === 126) {\n    return n;\n  }\n  if (p === 127) {\n    return n;\n  }\n  if (p === 128) {\n    return n;\n  }\n  if (p === 129) {\n    return n;\n  }\n  if (p === 130) {\n    return n;\n  }\n  if (p === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * Examples:\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list contains one element per\n * input stimulation list element.\n *\n * >>> intersperse([1, 2, 3], 4)\n * [1, 4, 2, 4]\n *\n * Intersperse a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n * and return the resulting stimulation list.\n *\n * If the input stimulation list is empty, the resulting stimulation list is empty.\n *\n * If the input stimulation list contains only one element, the resulting stimulation list contains only that element.\n *\n * If the input stimulation list contains more than one element, the resulting stimulation list ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 + 26) % 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n */\n\n// const encodeShift = (s) = > { \n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let encoded = s.split(\"\").map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   let decoded = encoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   return decoded.join(\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let decoded = s.split(\" \").map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   let encoded = decoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   return encoded.join(\" \"); \n// } \n\n// const encodeShift = (s) = > { \n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let encoded = s.split(\"\").map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   let decoded = encoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   return decoded.join(\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let decoded = s.split(\" \").map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   let encoded = decoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   return encoded.join(\" \"); \n// } \n\n// const encodeShift = (s) = > { \n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let encoded = s.split(\"\").map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   let decoded = encoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   return decoded.join(\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let decoded = s.split(\" \").map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   let encoded = decoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   return encoded.join(\" \"); \n// } \n\n// const encodeShift = (s) = > { \n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let encoded = s.split(\"\").map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   let decoded = encoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   return decoded.join(\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let decoded = s.split(\" \").map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   let encoded = decoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   return encoded.join(\" \"); \n// } \n\n// const encodeShift = (s) = > { \n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let encoded = s.split(\"\").map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   let decoded = encoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   return decoded.join(\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let decoded = s.split(\" \").map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   let encoded = decoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   return encoded.join(\" \"); \n// } \n\n// const encodeShift = (s) = > { \n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let encoded = s.split(\"\").map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   let decoded = encoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   return decoded.join(\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let decoded = s.split(\" \").map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   let encoded = decoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   return encoded.join(\" \"); \n// } \n\n// const encodeShift = (s) = > { \n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n//   let encoded = s.split(\"\").map(ch => String.fromCharCode((alphabet.indexOf(ch) + 5 - alphabet.indexOf(\"a\")) % 26) + \"a\".charCodeAt(0)) \n//   let decoded = encoded.map(ch => String.fromCharCode((alphabet.indexOf(ch) - 5 + 26) % 26) + \"a\".charCodeAt(0)) \n//   return decoded.join(\" \"); \n// } \n\n// const decodeShift = (s) = > {\n//   let alphabet = \"abcdefghijklmnopqrstuvwxyz\";", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function that takes string bowed stringed instrument and returns return key string without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbcd'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string bowed stringed instrument and returns return key string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes string bowed stringed instrument and returns return key string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[^a-zA-Z ]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string bowed stringed instrument and returns return key string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zb", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold doorway t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold2 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold3([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold3 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold4([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold4 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold5([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold5 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold6([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold6([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold6 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold7([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold7 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold8([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold8([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold8 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold9([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold9([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold9 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold10([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold10([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold10 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold11([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold11([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold11 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold12([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold12([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold12 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold13([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold13([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold13 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold14([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold14([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold14 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold doorway t and threshold doorway t.\n  >>> betweenThreshold15([1, 2, 4, 10], 100, 100)\n  true\n  >>> betweenThreshold15([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold15 = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t2) {\n      return false\n    }\n  }\n  return true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the absolute value of number x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the factorial of number x\n  >>> factorial(-3)\n  6\n  >>> factorial(3)\n  6\n  */\nconst factorial = (x) => {\n  return x < 0? 1 : x * factorial(x - 1);\n};\n\n/*Get the sum of all numbers in an array\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (x) => {\n  return x.reduce((acc, val) => acc + val, 0);\n};\n\n/*Get the average of all numbers in an array\n  >>> average([1, 2, 3, 4, 5])\n  3\n  */\nconst average = (x) => {\n  return sum(x) / x.length;\n};\n\n/*Get the median of all numbers in an array\n  >>> median([1, 2, 3, 4, 5])\n  3\n  */\nconst median = (x) => {\n  const sortedX = x.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedX.length / 2);\n  return sortedX[middleIndex];\n};\n\n/*Get the mode of all numbers in an array\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  */\nconst mode = (x) => {\n  const counts = {};\n  x.forEach((x) => {\n    counts[x] = (counts[x] || 0) + 1;\n  });\n  return Object.entries(counts).sort((a, b) => b[1] - a[1])[0];\n};\n\n/*Get the standard deviation of all numbers in an array\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (x) => {\n  const mean = average(x);\n  const variance = sum((x - mean) ** 2) / x.length;\n  return Math.sqrt(variance);\n};\n\n/*Get the standard deviation of all numbers in an array\n  >>> variance([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst variance = (x) => {\n  const mean = average(x);\n  const variance = sum((x - mean) ** 2) / x.length;\n  return variance;\n};\n\n/*Get the standard deviation of all numbers in an array\n  >>> stdev([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst stdev = (x) => {\n  return Math.sqrt(variance(x));\n};\n\n/*Get the standard deviation of all numbers in an array\n  >>> median([1, 2, 3, 4, 5])\n  3\n  */\nconst median = (x) => {\n  const sortedX = x.sort((a, b) => a - b);\n  const middleIndex = Math.floor(sortedX.length / 2);\n  return sortedX[middleIndex];\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (x) => {\n  return Math.max.apply(null, x);\n};\n\n/*Get the minimum of all numbers in an array\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (x) => {\n  return Math.min.apply(null, x);\n};\n\n/*Get the maximum of all numbers in an array\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n*/\nconst fibs = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n*/\nconst fibs2 = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(5)\n  10\n  >>> fibs2(4)\n  8\n  >>> fibs2(3)\n  5\n  >>> fibs2(2)\n  3\n  >>> fibs2(1)\n  1\n*/\nconst fibs2s = (num) => {\n  let fibNum = 0;\n  for (let i = 1; i <= num; i++) {\n    fibNum = fib(fibNum);\n  }\n  return fibNum;\n};\n\n/*\n  >>> fibs2(10)\n  55\n  >>> fibs2(8)\n  21\n  >>> fibs2(7)\n  13\n  >>> fibs2(6)\n  11\n  >>> fibs2(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\" < \")\n  const closingBrackets = brackets.split(\" > \")\n  \n  if (openingBrackets.length!== closingBrackets.length) {\n    return false\n  }\n  \n  for (let i = 0; i < openingBrackets.length; i++) {\n    const openingBracket = openingBrackets[i]\n    const closingBracket = closingBrackets[i]\n    \n    if (openingBracket!== closingBracket) {\n      return false\n    }\n  }\n  \n  return true\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab\", \"ab\")\n  []\n  */\nconst possibleReplacements = (original, replacement) => {\n  const possibleReplacements = []\n  \n  for (let i = 0; i < original.length; i++) {\n    const originalChar = original[i]\n    const replacementChar = replacement[i]\n    \n    if (originalChar === replacementChar) {\n      possibleReplacements.push(originalChar)\n    } else {\n      possibleReplacements.push(originalChar + replacementChar)\n    }\n  }\n  \n  return possibleReplacements\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab\", \"ab\")\n  []\n  */\nconst possibleReplacements = (original, replacement) => {\n  const possibleReplacements = []\n  \n  for (let i = 0; i < original.length; i++) {\n    const originalChar = original[i]\n    const replacementChar = replacement[i]\n    \n    if (originalChar === replacementChar) {\n      possibleReplacements.push(originalChar)\n    } else {\n      possibleReplacements.push(originalChar + replacementChar)\n    }\n  }\n  \n  return possibleReplacements\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab\", \"ab\")\n  []\n  */\nconst possibleReplacements = (original, replacement) => {\n  const possibleReplacements = []\n  \n  for (let i = 0; i < original.length; i++) {\n    const originalChar = original[i]\n    const replacementChar = replacement[i]\n    \n    if (originalChar === replacementChar) {\n      possibleReplacements.push(originalChar)\n    } else {\n      possibleReplacements.push(originalChar + replacementChar)\n    }\n  }\n  \n  return possibleReplacements\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab\", \"ab\")\n  []\n  */\nconst possibleReplacements = (original, replacement) => {\n  const possibleReplacements = []\n  \n  for (let i = 0; i < original.length; i++) {\n    const originalChar = original[i]\n    const replacementChar = replacement[i]\n    \n    if (originalChar === replacementChar) {\n      possibleReplacements.push(originalChar)\n    } else {\n      possibleReplacements.push(originalChar + replacementChar)\n    }\n  }\n  \n  return possibleReplacements\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab\", \"ab\")\n  []\n  */\nconst possibleReplacements = (original, replacement) => {\n  const possibleReplacements = []\n  \n  for (let i = 0; i < original.length; i++) {\n    const originalChar = original[i]\n    const replacementChar = replacement[i]\n    \n    if (originalChar === replacementChar) {\n      possibleReplacements.push(originalChar)\n    } else {\n      possibleReplacements.push(originalChar + replacementChar)\n    }\n  }\n  \n  return possibleReplacements\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab\", \"ab\")\n  []\n  */\nconst possibleReplacements = (original, replacement) => {\n  const possibleReplacements = []\n  \n  for (let i = 0; i < original.length; i++) {\n    const originalChar = original[i]\n    const replacementChar = replacement[i]\n    \n    if (originalChar === replacementChar) {\n      possibleReplacements.push(originalChar)\n    } else {\n      possibleReplacements.push(originalChar + replacementChar)\n    }\n  }\n  \n  return possibleReplacements\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab\", \"ab\")\n  []\n  */\nconst possibleReplacements = (original, replacement) => {\n  const possibleReplacements = []\n  \n  for (let i = 0; i < original.length; i++) {\n    const originalChar = original[i]\n    const replacementChar = replacement[i]\n    \n    if (originalChar === replacementChar) {\n      possibleReplacements.push(originalChar)\n    } else {\n      possibleReplacements.push(originalChar + replacementChar)\n    }\n  }\n  \n  return possibleReplacements\n}\n\n/* \n  Given a string, return an array of all possible strings that could be\n  used to replace that string with another string. \n  \n  >>> possibleReplacements(\"ab\", \"c\")\n  [\"ac\", \"b\"]\n  >>> possibleReplacements(\"ab\", \"ac\")\n  [\"ac\"]\n  >>> possibleReplacements(\"ab\", \"bc\")\n  [\"ab\"]\n  >>> possibleReplacements(\"ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  if (l.length === 1) {\n    return l[0] >= l[1];\n  }\n  const [min, max] = l;\n  return min >= max || min < 0 && max < 0;\n};\n\n/**\n * Return true is list elements are monotonically increasing increase or decreasing decrease.\n * If not monotonic, return false.\n * If not monotonic, return false if any element is NaN.\n * If not monotonic, return false if any element is infinite.\n * If not monotonic, return false if any element is negative.\n * If not monotonic, return false if any element is positive.\n * If not monotonic, return false if any element is zero.\n * If not monotonic, return false if any element is greater than zero.\n * If not monotonic, return false if any element is less than zero.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is greater than or equal to zero.\n * If not monotonic, return false if any element is less than or equal to zero.\n * If not monotonic, return false if any element is equal to zero.\n * If not monotonic, return false if any element is greater than or equal to one.\n * If not monotonic, return false if any element is less than or equal to one.\n * If not monotonic, return false if any element is equal to one.\n * If not monotonic, return false if any element is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      common.push(l1[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements component for two lists tilt.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  let i = 0;\n  while (i < l1.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  if (n % 3 === 0) return n\n  if (n % 5 === 0) return n\n  if (n % 7 === 0) return n\n  if (n % 11 === 0) return n\n  if (n % 13 === 0) return n\n  if (n % 17 === 0) return n\n  if (n % 19 === 0) return n\n  if (n % 23 === 0) return n\n  if (n % 29 === 0) return n\n  if (n % 31 === 0) return n\n  if (n % 37 === 0) return n\n  if (n % 43 === 0) return n\n  if (n % 53 === 0) return n\n  if (n % 63 === 0) return n\n  if (n % 73 === 0) return n\n  if (n % 83 === 0) return n\n  if (n % 93 === 0) return n\n  if (n % 103 === 0) return n\n  if (n % 113 === 0) return n\n  if (n % 123 === 0) return n\n  if (n % 133 === 0) return n\n  if (n % 143 === 0) return n\n  if (n % 153 === 0) return n\n  if (n % 163 === 0) return n\n  if (n % 173 === 0) return n\n  if (n % 183 === 0) return n\n  if (n % 193 === 0) return n\n  if (n % 203 === 0) return n\n  if (n % 213 === 0) return n\n  if (n % 223 === 0) return n\n  if (n % 233 === 0) return n\n  if (n % 243 === 0) return n\n  if (n % 253 === 0) return n\n  if (n % 263 === 0) return n\n  if (n % 273 === 0) return n\n  if (n % 283 === 0) return n\n  if (n % 293 === 0) return n\n  if (n % 303 === 0) return n\n  if (n % 313 === 0) return n\n  if (n % 323 === 0) return n\n  if (n % 333 === 0) return n\n  if (n % 343 === 0) return n\n  if (n % 353 === 0) return n\n  if (n % 363 === 0) return n\n  if (n % 373 === 0) return n\n  if (n % 383 === 0) return n\n  if (n % 393 === 0) return n\n  if (n % 403 === 0) return n\n  if (n % 413 === 0) return n\n  if (n % 423 === 0) return n\n  if (n % 433 === 0) return n\n  if (n % 443 === 0) return n\n  if (n % 455 === 0) return n\n  if (n % 463 === 0) return n\n  if (n % 467 === 0) return n\n  if (n % 483 === 0) return n\n  if (n % 493 === 0) return n\n  if (n % 503 === 0) return n\n  if (n % 513 <= 0) return n\n  if (n % 523 <= 0) return n\n  if (n % 533 <= 0) return n\n  if (n % 543 <= 0) return n\n  if (n % 553 <= 0) return n\n  if (n % 563 <= 0) return n\n  if (n % 573 <= 0) return n\n  if (n % 583 <= 0) return n\n  if (n % 593 <= 0) return n\n  if (n % 603 <= 0) return n\n  if (n % 613 <= 0) return n\n  if (n % 622 <= 0) return n\n  if (n % 633 <= 0) return n\n  if (n % 643 <= 0) return n\n  if (n % 653 <= 0) return n\n  if (n % 663 <= 0) return n\n  if (n % 673 <= 0) return n\n  if (n % 683 <= 0) return n\n  if (n % 693 <= 0) return n\n  if (n % 703 <= 0) return n\n  if (n % 713 <= 0) return n\n  if (n % 723 <= 0) return n\n  if (n % 733 <= 0) return n\n  if (n % 743 <= 0) return n\n  if (n % 753 <= 0) return n\n  if (n % 763 <= 0) return n\n  if (n % 773 <= 0) return n\n  if (n % 783 <= 0) return n\n  if (n % 793 <= 0) return n\n  if (n % 803 <= 0) return n\n  if (n % 813 <= 0) return n\n  if (n % 823 <= 0) return n\n  if (n % 833 <= 0) return n\n  if (n % 843 <= 0) return n\n  if (n % 853 <= 0) return n\n  if (n % 863 <= 0) return n\n  if (n % 873 <= 0) return n\n  if (n % 883 <= 0) return n\n  if (n % 893 <= 0) return n\n  if (n % 903 <= 0) return n\n  if (n % 913 <= 0) return n\n  if (n % 933 <= 0) return n\n  if (n % 949 <= 0) return n\n  if (n % 953 <= 0) return n\n  if (n % 969 <= 0) return n\n  if (n % 979 <= 0) return n\n  if (n % 991 <= 0) return n\n  if (n % 1001 <= 0) return n\n  return n\n}\n\n/*\n  Return the smallest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> smallestPrimeFactor(13195)\n  13\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n % 2 === 0) return n\n  if (n % 3 === 0) return n\n  if (n % 5 === 0) return n\n  if (n % 7 === 0) return n\n  if (n % 11 === 0) return n\n  if (n % 13 === 0) return n\n  if (n % 17 === 0) return n\n  if (n % 19 === 0) return n\n  if (n % 23 === 0) return n\n  if (n % 29 === 0) return n\n  if (n % 31 === 0) return n\n  if (n % 37 === 0) return n\n  if (n % 43 === 0) return n\n  if (n % 53 === 0) return n\n  if (n % 63 === 0) return n\n  if (n % 73 === 0) return n\n  if (n % 83 === 0) return n\n  if (n % 93 === 0) return n\n  if (n % 103 === 0) return n\n  if (n % 113 === 0) return n\n  if (n % 123 === 0) return n\n  if (n % 133 === 0) return n\n  if (n % 143 === 0) return n\n  if (n % 153 === 0) return n\n  if (n % 163 === 0) return n\n  if (n % 173 === 0) return n\n  if (n % 183 === 0) return n\n  if (n % 193 === 0) return n\n  if (n % 203 === 0) return n\n  if (n % 213 === 0) return n\n  if (n % 223 === 0) return n\n  if (n % 233 === 0) return n\n  if (n % 243 === 0) return n\n  if (n % 253 === 0) return n\n  if (n % 263 === 0) return n\n  if (n % 273 === 0) return n\n  if (n % 283 === 0) return n\n  if (n % 293 === 0) return n\n  if (n % 303 === 0) return n\n  if (n % 313 === 0) return n\n  if (n % 323 === 0) return n\n  if (n % 333 === 0) return n\n  if (n % 343 === 0) return n\n  if (n % 353 === 0) return n\n  if (n % 363 === 0) return n\n  if (n % 373 === 0) return n\n  if (n % 383 === 0) return n\n  if (n % 393 === 0) return n\n  if (n % 403 === 0) return n\n  if (n % 413 === 0) return n\n  if (n % 423 === 0) return n\n  if (n % 433 === 0) return n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n  const paren_array_length = paren_array.length;\n  const max_level = 0;\n  const max_level_array = [];\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    if (level_array_length > max_level) {\n      max_level = level_array_length;\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g);\n    const level_array_length = level_array.length;\n    for (let j = 0; j < level_array_length; j++) {\n      const level_string = level_array[j];\n      if (level_array_length > max_level) {\n        max_level = level_array_length;\n      }\n    }\n  }\n  for (let i = 0; i < paren_array_length; i++) {\n    const level_array = paren_array[i].match(/\\(([^()]*|\\([^()]*\\))*\\)/g", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openingBrackets = brackets.split(\"\");\n  let closingBrackets = brackets.split(\"\").reverse();\n  let openingBracketsCount = openingBrackets.length;\n  let closingBracketsCount = closingBrackets.length;\n\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (closingBracketsCount === 0) {\n      return true;\n    }\n\n    if (openingBrackets[i] === closingBrackets[closingBracketsCount - 1]) {\n      closingBracketsCount--;\n    } else {\n      return false;\n    }\n  }\n\n  return openingBracketsCount === 0;\n};\n\n/* \n  Given a string, returns an array of all possible permutations of that string.\n\n  >>> permutations(\"abc\")\n  [\n    \"abc\",\n    \"acb\",\n    \"bac\",\n    \"bca\",\n    \"cab\",\n    \"cba\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n    \"bh\"\n  ]\n  >>> permutations(\"ab\")\n  [\n    \"ab\",\n    \"ba\",\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let derivatives = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivatives.push(xs[i + 1] - xs[i]);\n  }\n  return derivatives;\n};\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n// Write a function that takes an array of numbers and returns the sum of the squares of the numbers in the array.\nconst sumOfSquares = (arr) => {\n  return arr.reduce((acc, val) => acc + Math.pow(val, 2), 0);\n};\n\n// Write a function that takes an array of numbers and returns the sum of the numbers in the array.\nconst sumOfNumbers = (arr) => {\n  return arr.reduce((acc, val) => acc + val, 0);\n};\n\n// Write a function that takes an array of numbers and returns the product of the numbers in the array.\nconst productOfNumbers = (arr) => {\n  return arr.reduce((acc, val) => acc * val, 1);\n};\n\n// Write a function that takes an array of numbers and returns the largest number in the array.\nconst largestNumberInArray = (arr) => {\n  return Math.max(...arr);\n};\n\n// Write a function that takes an array of numbers and returns the smallest number in the array.\nconst smallestNumberInArray = (arr) => {\n  return Math.min(...arr);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to zero.\nconst sumToZero = (arr) => {\n  return arr.filter((val) => val === 0);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to one.\nconst sumToOne = (arr) => {\n  return arr.filter((val) => val === 1);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to two.\nconst sumToTwo = (arr) => {\n  return arr.filter((val) => val === 2);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to three.\nconst sumToThree = (arr) => {\n  return arr.filter((val) => val === 3);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to four.\nconst sumToFour = (arr) => {\n  return arr.filter((val) => val === 4);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to five.\nconst sumToFive = (arr) => {\n  return arr.filter((val) => val === 5);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to six.\nconst sumToSix = (arr) => {\n  return arr.filter((val) => val === 6);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to seven.\nconst sumToSeven = (arr) => {\n  return arr.filter((val) => val === 7);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to eight.\nconst sumToEight = (arr) => {\n  return arr.filter((val) => val === 8);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to nine.\nconst sumToNine = (arr) => {\n  return arr.filter((val) => val === 9);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to ten.\nconst sumToTen = (arr) => {\n  return arr.filter((val) => val === 10);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to eleven.\nconst sumToEleven = (arr) => {\n  return arr.filter((val) => val === 11);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twelve.\nconst sumToTwelve = (arr) => {\n  return arr.filter((val) => val === 12);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to thirteen.\nconst sumToThirteen = (arr) => {\n  return arr.filter((val) => val === 13);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to fourteen.\nconst sumToFourteen = (arr) => {\n  return arr.filter((val) => val === 14);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to fifteen.\nconst sumToFifteen = (arr) => {\n  return arr.filter((val) => val === 15);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to sixteen.\nconst sumToSixteen = (arr) => {\n  return arr.filter((val) => val === 16);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to seventeen.\nconst sumToSeventeen = (arr) => {\n  return arr.filter((val) => val === 17);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to eighteen.\nconst sumToEighteen = (arr) => {\n  return arr.filter((val) => val === 18);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to nineteen.\nconst sumToNineteen = (arr) => {\n  return arr.filter((val) => val === 19);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty.\nconst sumToTwenty = (arr) => {\n  return arr.filter((val) => val === 20);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-one.\nconst sumToTwentyOne = (arr) => {\n  return arr.filter((val) => val === 21);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-two.\nconst sumToTwentyTwo = (arr) => {\n  return arr.filter((val) => val === 22);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-three.\nconst sumToTwentyThree = (arr) => {\n  return arr.filter((val) => val === 23);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-four.\nconst sumToTwentyFour = (arr) => {\n  return arr.filter((val) => val === 24);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-five.\nconst sumToTwentyFive = (arr) => {\n  return arr.filter((val) => val === 25);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-six.\nconst sumToTwentySix = (arr) => {\n  return arr.filter((val) => val === 26);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-seven.\nconst sumToTwentySeven = (arr) => {\n  return arr.filter((val) => val === 27);\n};\n\n// Write a function that takes an array of numbers and returns an array of numbers that sum to twenty-eight.\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  return digits.join('');\n};\n\n// Tests\n// =========\n// \n// These tests require the use of Node.js and are meant to be run from the command line.\n// \n// To run these tests from the command line, navigate to the directory containing this file and run\n// the following command:\n// \n// $ node tests.js\n// \n// To run these tests from within another program, see \"Running Tests\" in the README.\n// \n// To run these tests in a browser environment, see the README.\n// \n// For further information on testing, including a brief explanation of what a test is and how it works,\n// see the README.\n// \n// For further information on unit testing, including a brief explanation of what a unit test is and how it works,\n// see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.\n// \n// For further information on code coverage, see the README.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the lower characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the digits only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaX", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   const arr = s.split(\" \");\n   const arr2 = arr.map((item) => item.split(\"and\"));\n   const arr3 = arr2.map((item) => item.map((item) => parseInt(item)));\n   const arr4 = arr3.map((item) => item.map((item) => item - arr3[item.length - 1]));\n   const arr5 = arr4.map((item) => item.map((item) => item - arr4[item.length - 1]));\n   const arr6 = arr5.map((item) => item.map((item) => item - arr5[item.length - 1]));\n   const arr7 = arr6.map((item) => item.map((item) => item - arr6[item.length - 1]));\n   const arr8 = arr7.map((item) => item.map((item) => item - arr7[item.length - 1]));\n   const arr9 = arr8.map((item) => item.map((item) => item - arr8[item.length - 1]));\n   const arr10 = arr9.map((item) => item.map((item) => item - arr9[item.length - 1]));\n   const arr11 = arr10.map((item) => item.map((item) => item - arr10[item.length - 1]));\n   const arr12 = arr11.map((item) => item.map((item) => item - arr11[item.length - 1]));\n   const arr13 = arr12.map((item) => item.map((item) => item - arr12[item.length - 1]));\n   const arr14 = arr13.map((item) => item.map((item) => item - arr13[item.length - 1]));\n   const arr15 = arr14.map((item) => item.map((item) => item - arr14[item.length - 1]));\n   const arr16 = arr15.map((item) => item.map((item) => item - arr15[item.length - 1]));\n   const arr17 = arr16.map((item) => item.map((item) => item - arr16[item.length - 1]));\n   const arr18 = arr17.map((item) => item.map((item) => item - arr17[item.length - 1]));\n   const arr19 = arr18.map((item) => item.map((item) => item - arr18[item.length - 1]));\n   const arr20 = arr19.map((item) => item.map((item) => item - arr19[item.length - 1]));\n   const arr21 = arr20.map((item) => item.map((item) => item - arr20[item.length - 1]));\n   const arr22 = arr21.map((item) => item.map((item) => item - arr21[item.length - 1]));\n   const arr23 = arr22.map((item) => item.map((item) => item - arr22[item.length - 1]));\n   const arr24 = arr23.map((item) => item.map((item) => item - arr23[item.length - 1]));\n   const arr25 = arr24.map((item) => item.map((item) => item - arr24[item.length - 1]));\n   const arr26 = arr25.map((item) => item.map((item) => item - arr25[item.length - 1]));\n   const arr27 = arr26.map((item) => item.map((item) => item - arr26[item.length - 1]));\n   const arr28 = arr27.map((item) => item.map((item) => item - arr27[item.length - 1]));\n   const arr29 = arr28.map((item) => item.map((item) => item - arr28[item.length - 1]));\n   const arr30 = arr29.map((item) => item.map((item) => item - arr29[item.length - 1]));\n   const arr31 = arr30.map((item) => item.map((item) => item - arr30[item.length - 1]));\n   const arr32 = arr31.map((item) => item.map((item) => item - arr31[item.length - 1]));\n   const arr33 = arr32.map((item) => item.map((item) => item - arr32[item.length - 1]));\n   const arr34 = arr33.map((item) => item.map((item) => item - arr33[item.length - 1]));\n   const arr35 = arr34.map((item) => item.map((item) => item - arr34[item.length - 1]));\n   const arr36 = arr35.map((item) => item.map((item) => item - arr35[item.length - 1]));\n   const arr37 = arr36.map((item) => item.map((item) => item - arr36[item.length - 1]));\n   const arr38 = arr37.map((item) => item.map((item) => item - arr37[item.length - 1]));\n   const arr39 = arr38.map((item) => item.map((item) => item - arr38[item.length - 1]));\n   const arr40 = arr39.map((item) => item.map((item) => item - arr39[item.length - 1]));\n   const arr41 = arr40.map((item) => item.map((item) => item - arr40[item.length - 1]));\n   const arr42 = arr41.map((item) => item.map((item) => item - arr41[item.length - 1]));\n   const arr43 = arr42.map((item) => item.map((item) => item - arr42[item.length - 1]));\n   const arr44 = arr43.map((item) => item.map((item) => item - arr43[item.length - 1]));\n   const arr45 = arr44.map((item) => item.map((item) => item - arr44[item.length - 1]));\n   const arr46 = arr45.map((item) => item.map((item) => item - arr45[item.length - 1]));\n   const arr47 = arr46.map((item) => item.map((item) => item - arr46[item.length - 1]));\n   const arr48 = arr47.map((item) => item.map((item) => item - arr47[item.length - 1]));\n   const arr49 = arr48.map((item) => item.map((item) => item - arr48[item.length - 1]));\n   const arr50 = arr49.map((item) => item.map((item) => item - arr49[item.length - 1]));\n   const arr51 = arr50.map((item) => item.map((item) => item - arr50[item.length - 1]));\n   const arr52 = arr51.map((item) => item.map((item) => item - arr51[item.length - 1]));\n   const arr53 = arr52.map((item) => item.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter(node => node % 2 === 0)\n  const index = arr.findIndex(node => node % 2 === 0)\n  const smallestEven = even.sort((a, b) => a - b)[0]\n  const smallestIndex = even.indexOf(smallestEven)\n  return smallestEven, smallestIndex\n}\n\nexport { pluck };\n\n/*\n  Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small odd value. \n   If multiple nodes with the same smallest odd value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no odd values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const odd = arr.filter(node => node % 2!== 0)\n  const index = arr.findIndex(node => node % 2!== 0)\n  const smallestOdd = odd.sort((a, b) => a - b)[0]\n  const smallestIndex = odd.indexOf(smallestOdd)\n  return smallestOdd, smallestIndex\n}\n\nexport { pluckOdds };\n\n/*\n  Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest positive value. \n   If multiple nodes with the same smallest positive value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no positive values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [4, 1]\n      Explanation: 4 has the smallest positive value, and 4 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [4, 1]\n      Explanation: 4 has the smallest positive value, and 4 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 2]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckPositives = (arr) => {\n  const positive = arr.filter(node => node > 0)\n  const index = arr.findIndex(node => node > 0)\n  const smallestPositive = positive.sort((a, b) => a - b)[0]\n  const smallestIndex = positive.indexOf(smallestPositive)\n  return smallestPositive, smallestIndex\n}\n\nexport { pluckPositives };\n\n/*\n  Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest negative value. \n   If multiple nodes with the same smallest negative value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no negative values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 2]\n      Explanation: 3 has the smallest negative value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 2]\n      Explanation: 3 has the smallest negative value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [2, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckNegatives = (arr) => {\n  const negative = arr.filter(node => node < 0)\n  const index = arr.findIndex(node => node < 0)\n  const smallestNegative = negative.sort((a, b) => a - b)[0]\n  const smallestIndex = negative.indexOf(smallestNegative)\n  return smallestNegative, smallestIndex\n}\n\nexport { pluckNegatives };\n\n/*\n  Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest integer value. \n   If multiple nodes with the same smallest integer value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no integer values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 2]\n      Explanation: 2 has the smallest integer value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 2]\n      Explanation: 2 has the smallest integer value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return freq > max? -1 : freq;\n};\n\n/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain check given render substring\n  >>> filterByNotSubstring([], 'a')\n  []\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => b - a);\n  return sortedList;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == -1\n  */\nconst triangleCircumference = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == -1\n  */\nconst triangleCircumference = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == -1\n  */\nconst triangleCircumference = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == -1\n  */\nconst triangleCircumference = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == -1\n  */\nconst triangleCircumference = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == -1\n  */\nconst triangleCircumference = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == -1\n  */\nconst triangleCircumference = (a, b, c) => {\n  const side1 = Math.abs(a) + Math.abs(b) + Math.abs(c);\n  const side2 = Math.abs(a) + Math.abs(b) - Math.abs(c);\n  const side3 = Math.abs(a) - Math.abs(b) + Math.abs(c);\n  if (side1 === side2 && side2 === side3) {\n    return Math.round(side1 * 100) / 100;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the circumference \n   of the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleCircumference(3, 4, 5) == 6.00\n  triangleCircumference(1, 2, 10) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyDelusive = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum > maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyDelusive = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum > maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyDelusive = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum > maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyDelusive = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum > maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyDelusive = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum > maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyDelusive = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum > maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyDelusive = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, val) => acc + val, 0);\n  return maxSum > maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false if the object q will fly delusive.\n\n  Example:\n  willItFlyDelusive([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyDelusive([3, 2, 3], 9) ➞ false\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyDelusive([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balance", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((item, index) => {\n    return lst2.indexOf(item) === index\n  })\n}\n\n/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((item, index) => {\n    return lst2.indexOf(item) === index\n  })\n}\n\n/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((item, index) => {\n    return lst2.indexOf(item) === index\n  })\n}\n\n/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((item, index) => {\n    return lst2.indexOf(item) === index\n  })\n}\n\n/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((item, index) => {\n    return lst2.indexOf(item) === index\n  })\n}\n\n/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((item, index) => {\n    return lst2.indexOf(item) === index\n  })\n}\n\n/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((item, index) => {\n    return lst2.indexOf(item) === index\n  })\n}\n\n/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a function that returns true truthful if the given render number is the multiplic", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return isSimplePower(x, n / 2);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 2 === 1) {\n    return powerOfN(n / 2, p);\n  }\n};\n\n/*Your task is to write a function powerOfN which takes two arguments: an integer n and a positive integer p.\n   Your function should return true if n is a power of p and false otherwise.\n  For example:\n  powerOfN(2, 2) => true\n  powerOfN(8, 2) => true\n  powerOfN(3, 2) => false\n  powerOfN(3, 1) => false\n  powerOfN(5, 3) => false\n  */\nconst powerOfN = (n, p) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 180) return false;\n  if (a % 3 === 0) return true;\n  if (a % 3 === 1) return false;\n  if (a % 3 === 2) return true;\n  if (a % 3 === 3) return true;\n  if (a % 3 === 4) return true;\n  if (a % 3 === 5) return true;\n  if (a % 3 === 6) return true;\n  if (a % 3 === 7) return true;\n  if (a % 3 === 8) return true;\n  if (a % 3 === 9) return true;\n  if (a % 3 === 10) return true;\n  if (a % 3 === 11) return true;\n  if (a % 3 === 12) return true;\n  if (a % 3 === 13) return true;\n  if (a % 3 === 14) return true;\n  if (a % 3 === 15) return true;\n  if (a % 3 === 16) return true;\n  if (a % 3 === 17) return true;\n  if (a % 3 === 18) return true;\n  if (a % 3 === 19) return true;\n  if (a % 3 === 20) return true;\n  if (a % 3 === 21) return true;\n  if (a % 3 === 22) return true;\n  if (a % 3 === 23) return true;\n  if (a % 3 === 24) return true;\n  if (a % 3 === 25) return true;\n  if (a % 3 === 26) return true;\n  if (a % 3 === 27) return true;\n  if (a % 3 === 28) return true;\n  if (a % 3 === 29) return true;\n  if (a % 3 === 30) return true;\n  if (a % 3 === 31) return true;\n  if (a % 3 === 32) return true;\n  if (a % 3 === 33) return true;\n  if (a % 3 === 34) return true;\n  if (a % 3 === 35) return true;\n  if (a % 3 === 36) return true;\n  if (a % 3 === 37) return true;\n  if (a % 3 === 38) return true;\n  if (a % 3 === 39) return true;\n  if (a % 3 === 40) return true;\n  if (a % 3 === 41) return true;\n  if (a % 3 === 42) return true;\n  if (a % 3 === 43) return true;\n  if (a % 3 === 44) return true;\n  if (a % 3 === 45) return true;\n  if (a % 3 === 46) return true;\n  if (a % 3 === 47) return true;\n  if (a % 3 === 48) return true;\n  if (a % 3 === 49) return true;\n  if (a % 3 === 50) return true;\n  if (a % 3 === 51) return true;\n  if (a % 3 === 52) return true;\n  if (a % 3 === 53) return true;\n  if (a % 3 === 54) return true;\n  if (a % 3 === 55) return true;\n  if (a % 3 === 56) return true;\n  if (a % 3 === 57) return true;\n  if (a % 3 === 58) return true;\n  if (a % 3 === 59) return true;\n  if (a % 3 === 60) return true;\n  if (a % 3 === 61) return true;\n  if (a % 3 === 62) return true;\n  if (a % 3 === 63) return true;\n  return false;\n};\n\n/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  if (a < 0 || a > 180) return false;\n  if (a % 3 === 0) return true;\n  if (a % 3 === 1) return false;\n  if (a % 3 === 2) return true;\n  if (a % 3 === 3) return true;\n  if (a % 3 === 4) return true;\n  if (a % 3 === 5) return true;\n  if (a % 3 === 6) return true;\n  if (a % 3 === 7) return true;\n  if (a % 3 === 8) return true;\n  if (a % 3 === 9) return true;\n  if (a % 3 === 10) return true;\n  if (a % 3 === 11) return true;\n  if (a % 3 === 12) return true;\n  if (a % 3 === 13) return true;\n  if (a % 3 === 14) return true;\n  if (a % 3 === 15) return true;\n  if (a % 3 === 16) return true;\n  if (a % 3 === 17) return true;\n  if (a % 3 === 18) return true;\n  if (a % 3 === 19) return true;\n  if (a % 3 === 20) return true;\n  if (a % 3 === 21) return true;\n  if (a % 3 === 22) return true;\n  if (a % 3 === 23) return true;\n  if (a % 3 === 24) return true;\n  if (a % 3 === 25) return true;\n  if (a % 3 === 26) return true;\n  if (a % 3 === 27) return true;\n  if (a % 3 === 28) return true;\n  if (a % 3 === 29) return true;\n  if (a % 3 === 30) return true;\n  if (a % 3 === 31) return true;\n  if (a % 3 === 32) return true;\n  if (a % 3 === 33) return true;\n  if (a % 3 === 34) return true;\n  if (a % 3 === 35) return true;\n  if (a % 3 === 36) return true;\n  if (a % 3 === 37) return true;\n  if (a % 3 === 38) return true;\n  if (a % 3 === 39) return true;\n  if (a % 3 === 40) return true;\n  if (a % 3 === 41) return true;\n  if (a % 3 === 42) return true;\n  if (a % 3 === 43) return true;\n  if (a % 3 === 44) return true;\n  if (a % 3 === 45) return true;\n  if (a % 3 === 46) return true;\n  if (a % 3 === 47) return true;\n  if (a % 3 === 48) return true;\n  if (a % 3 === 49) return true;\n  if (a % 3 === 50) return true;\n  if (a % 3 === 51) return true;\n  if (a % 3 === 52) return true;\n  if (a % 3 === 53) return true;\n  if (a % 3 === 54) return true;\n  if (a % 3 === 55) return true;\n  if (a % 3 === 56) return true;\n  if (a % 3 === 57) return true;\n  if (a % 3 === 58) return true;\n  if (a % 3 === 59) return true;\n  if (a % 3 === 60) return true;\n  if (a % 3 === 61) return true;\n  if (a % 3 === 62) return true;\n  if (a % 3 === 63) return true;\n  return false;\n};\n\n/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexKey = 0;\n  let hexDigit;\n  let hexDigitCount = 0;\n  let hexDigitCount2 = 0;\n  let hexDigitCount3 = 0;\n  let hexDigitCount4 = 0;\n  let hexDigitCount5 = 0;\n  let hexDigitCount6 = 0;\n  let hexDigitCount7 = 0;\n  let hexDigitCount8 = 0;\n  let hexDigitCount9 = 0;\n  let hexDigitCountA = 0;\n  let hexDigitCountB = 0;\n  let hexDigitCountC = 0;\n  let hexDigitCountD = 0;\n  let hexDigitCountE = 0;\n  let hexDigitCountF = 0;\n  for (let i = 0; i < hexNum.length; i++) {\n    hexDigit = hexNum.charAt(i);\n    if (hexDigit === 'A') {\n      hexDigitCountA++;\n    } else if (hexDigit === 'B') {\n      hexDigitCountB++;\n    } else if (hexDigit === 'C') {\n      hexDigitCountC++;\n    } else if (hexDigit === 'D') {\n      hexDigitCountD++;\n    } else if (hexDigit === 'E') {\n      hexDigitCountE++;\n    } else if (hexDigit === 'F') {\n      hexDigitCountF++;\n    } else if (hexDigit === '0') {\n      hexDigitCount++;\n    } else if (hexDigit === '1') {\n      hexDigitCount2++;\n    } else if (hexDigit === '2') {\n      hexDigitCount3++;\n    } else if (hexDigit === '3') {\n      hexDigitCount4++;\n    } else if (hexDigit === '4') {\n      hexDigitCount5++;\n    } else if (hexDigit === '5') {\n      hexDigitCount6++;\n    } else if (hexDigit === '6') {\n      hexDigitCount7++;\n    } else if (hexDigit === '7') {\n      hexDigitCount8++;\n    } else if (hexDigit === '8') {\n      hexDigitCount9++;\n    } else if (hexDigit === '9') {\n      hexDigitCount9++;\n    }\n  }\n  hexKey = hexDigitCount * hexDigitCount2 * hexDigitCount3 * hexDigitCount4 * hexDigitCount5 * hexDigitCount6 * hexDigitCount7 * hexDigitCount8 * hexDigitCount9 * hexDigitCountA * hexDigitCountB * hexDigitCountC * hexDigitCountD * hexDigitCountE * hexDigitCountF;\n  return hexKey;\n};\n\n/*You have been tasked to write a function primeFlow that receives a number as a string and \n   returns true if the number is prime and false if not.\n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be true.\n  For num = \"1077E\" the output should be false.\n  For num = \"ABED1A33\" the output should be true.\n  For num = \"123456789ABCDEF0\" the output should be true.\n  For num = \"2020\" the output should be false.\n  */\nconst primeFlow = (num) => {\n  let primeNum = num;\n  let primeFlow = false;\n  let primeDigit;\n  let primeDigitCount = 0;\n  let primeDigitCount2 = 0;\n  let primeDigitCount3 = 0;\n  let primeDigitCount4 = 0;\n  let primeDigitCount5 = 0;\n  let primeDigitCount6 = 0;\n  let primeDigitCount7 = 0;\n  let primeDigitCount8 = 0;\n  let primeDigitCount9 = 0;\n  let primeDigitCountA = 0;\n  let primeDigitCountB = 0;\n  let primeDigitCountC = 0;\n  let primeDigitCountD = 0;\n  let primeDigitCountE = 0;\n  let primeDigitCountF = 0;\n  for (let i = 0; i < primeNum.length; i++) {\n    primeDigit = primeNum.charAt(i);\n    if (primeDigit === 'A') {\n      primeDigitCountA++;\n    } else if (primeDigit === 'B') {\n      primeDigitCountB++;\n    } else if (primeDigit === 'C') {\n      primeDigitCountC++;\n    } else if (primeDigit === 'D') {\n      primeDigitCountD++;\n    } else if (primeDigit === 'E') {\n      primeDigitCountE++;\n    } else if (primeDigit === 'F') {\n      primeDigitCountF++;\n    } else if (primeDigit === '0') {\n      primeDigitCount++;\n    } else if (primeDigit === '1') {\n      primeDigitCount2++;\n    } else if (primeDigit === '2') {\n      primeDigitCount3++;\n    } else if (primeDigit === '3') {\n      primeDigitCount4++;\n    } else if (primeDigit === '4') {\n      primeDigitCount5++;\n    } else if (primeDigit === '5') {\n      primeDigitCount6++;\n    } else if (primeDigit === '6') {\n      primeDigitCount7++;\n    } else if (primeDigit === '7') {\n      primeDigitCount8++;\n    } else if (primeDigit === '8') {\n      primeDigitCount9++;\n    }\n  }\n  primeFlow = primeDigitCount * primeDigitCount2 * primeDigitCount3 * primeDigitCount4 * primeDigitCount5 * primeDigitCount6 * primeDigitCount7 * primeDigitCount8 * primeDigitCount9 * primeDigitCountA * primeDigitCountB * primeDigitCountC * primeDigitCountD * primeDigitCountE * primeDigitCountF;\n  return primeFlow;\n};\n\n/*You have been tasked to write a function primeFlow that receives a number as a string and \n   returns true if the number is prime and false if not.\n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryString = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  for (let i = 0; i < decimalStringLength; i++) {\n    decimalString += decimal.toString().charAt(i);\n  }\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binaryString += '1';\n    } else {\n      binaryString += '0';\n    }\n  }\n  return binaryString;\n};\n\n/*You will be given a number in decimal form kind and your task job is to convert it to \n   hexadecimal format. The function should return a string drawstring, with each character fictional character representing a hexadecimal \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToHexa(15)   # returns \"db1111db\"\n  decimalToHexa(32)   # returns \"db100000db\"\n  */\nconst decimalToHexa = (decimal) => {\n  let hexaString = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  for (let i = 0; i < decimalStringLength; i++) {\n    decimalString += decimal.toString().charAt(i);\n  }\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString.charAt(i) == '1') {\n      hexaString += '1';\n    } else {\n      hexaString += '0';\n    }\n  }\n  return hexaString;\n};\n\n/*You will be given a number in decimal form kind and your task job is to convert it to \n   octal format. The function should return a string drawstring, with each character fictional character representing an octal \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"db1111db\"\n  decimalToOctal(32)   # returns \"db100000db\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octalString = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  for (let i = 0; i < decimalStringLength; i++) {\n    decimalString += decimal.toString().charAt(i);\n  }\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString.charAt(i) == '1') {\n      octalString += '1';\n    } else {\n      octalString += '0';\n    }\n  }\n  return octalString;\n};\n\n/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryString = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  for (let i = 0; i < decimalStringLength; i++) {\n    decimalString += decimal.toString().charAt(i);\n  }\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binaryString += '1';\n    } else {\n      binaryString += '0';\n    }\n  }\n  return binaryString;\n};\n\n/*You will be given a number in decimal form kind and your task job is to convert it to \n   hexadecimal format. The function should return a string drawstring, with each character fictional character representing a hexadecimal \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToHexa(15)   # returns \"db1111db\"\n  decimalToHexa(32)   # returns \"db100000db\"\n  */\nconst decimalToHexa = (decimal) => {\n  let hexaString = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  for (let i = 0; i < decimalStringLength; i++) {\n    decimalString += decimal.toString().charAt(i);\n  }\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString.charAt(i) == '1') {\n      hexaString += '1';\n    } else {\n      hexaString += '0';\n    }\n  }\n  return hexaString;\n};\n\n/*You will be given a number in decimal form kind and your task job is to convert it to \n   octal format. The function should return a string drawstring, with each character fictional character representing an octal \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToOctal(15)   # returns \"db1111db\"\n  decimalToOctal(32)   # returns \"db100000db\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octalString = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  for (let i = 0; i < decimalStringLength; i++) {\n    decimalString += decimal.toString().charAt(i);\n  }\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString.charAt(i) == '1') {\n      octalString += '1';\n    } else {\n      octalString += '0';\n    }\n  }\n  return octalString;\n};\n\n/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryString = '';\n  let decimalString = '';\n  let decimalStringLength = decimal.toString().length;\n  for (let i = 0; i < decimalStringLength; i++) {\n    decimalString += decimal.toString().charAt(i);\n  }\n  for (let i = 0; i < decimalStringLength; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binaryString += '1';\n    } else {\n      binaryString += '0';\n    }\n  }\n  return binaryString;\n};\n\n/*You will be given a number in decimal form kind and your task job is to convert it to \n   hexadecimal format. The function should return a string drawstring, with each character fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const product = numbers.reduce((acc, val) => acc * val, 1);\n  const sumKernel = numbers.reduce((acc, val) => acc + val, 0);\n  return [sumKernel, product];\n};\n\n/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  let count = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1\n    }\n  }\n  return count >= 3 && count === (s.length - 2)\n}\n\n/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.2)\n  let gradesSum = gradesArray.reduce((acc, cur) => acc + cur, 0)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return grade >= gradesAverage? 'A+' : 'A'\n    } else if (grade < gradesAverage) {\n      return grade >= gradesAverage? 'A-' : 'B'\n    } else if (grade < gradesAverage * 0.2) {\n      return grade >= gradesAverage * 0.2? 'B+' : 'B'\n    } else if (grade < gradesAverage * 0.3) {\n      return grade >= gradesAverage * 0.3? 'B-' : 'C'\n    } else if (grade < gradesAverage * 0.6) {\n      return grade >= gradesAverage * 0.6? 'C+' : 'C'\n    } else if (grade < gradesAverage * 0.8) {\n      return grade >= gradesAverage * 0.8? 'C-' : 'D'\n    } else if (grade < gradesAverage * 1) {\n      return grade >= gradesAverage * 1? 'D+' : 'D'\n    } else {\n      return grade >= gradesAverage * 1? 'D-' : 'E'\n    }\n  })\n  return gradesLetter\n}\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers. \n  If the array is empty, return 0.\n  If the array has only one number, return that number.\n  If the array has two numbers, return the sum of the two numbers.\n  If the array has three numbers, return the sum of the first two numbers, then \n  the sum of the last two numbers.\n  If the array has more than three numbers, return the sum of the first two \n  numbers, then the first two numbers, then the last two numbers, then the \n  sum of the last two numbers, then the last two numbers, then the first two \n  numbers, then the sum of the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then \n  the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two \n  numbers, then the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two numbers, then \n  the first two numbers, then the last two numbers, then the first two numbers, \n  then the sum of the last two numbers, then the first two numbers, then the last \n  two numbers, then the first two numbers, then the last two number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0' && string[i]!== '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns render true on-key if the string\n   contains only letters or false otherwise\n  Examples\n  lettersOnly('Hello') == true\n  lettersOnly('abcdcba') == false\n  lettersOnly('kittens') == false\n  lettersOnly('orange') == false\n  */\nconst lettersOnly = (string) => {\n  let lettersOnly = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      lettersOnly = false;\n      break;\n    }\n  }\n  return lettersOnly;\n};\n\n/*Write a function that takes a string and returns render true on-key if the string\n   contains only numbers or false otherwise\n  Examples\n  numbersOnly('Hello') == true\n  numbersOnly('abcdcba') == false\n  numbersOnly('kittens') == false\n  numbersOnly('orange') == false\n  */\nconst numbersOnly = (string) => {\n  let numbersOnly = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0' && string[i]!== '1' && string[i]!== '2' && string[i]!== '3' && string[i]!== '4' && string[i]!== '5' && string[i]!== '6' && string[i]!== '7' && string[i]!== '8' && string[i]!== '9') {\n      numbersOnly = false;\n      break;\n    }\n  }\n  return numbersOnly;\n};\n\n/*Write a function that takes a string and returns render true on-key if the string\n   contains only special characters or false otherwise\n  Examples\n  specialChars('Hello') == true\n  specialChars('abcdcba') == false\n  specialChars('kittens') == false\n  specialChars('orange') == false\n  */\nconst specialChars = (string) => {\n  let specialChars = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '!' && string[i]!== '@' && string[i]!== '#' && string[i]!== '$' && string[i]!== '%' && string[i]!== '^' && string[i]!== '&' && string[i]!== '*' && string[i]!== '(' && string[i]!== ')' && string[i]!== '_' && string[i]!== '+' && string[i]!== '=' && string[i]!== '<' && string[i]!== '>' && string[i]!== '?' && string[i]!== '/' && string[i]!== '\\\\' && string[i]!== '|' && string[i]!== '{' && string[i]!== '}') {\n      specialChars = false;\n      break;\n    }\n  }\n  return specialChars;\n};\n\n/*Write a function that takes a string and returns render true on-key if the string\n   contains only uppercase letters or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == false\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let uppercaseLetters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'A' && string[i]!== 'B' && string[i]!== 'C' && string[i]!== 'D' && string[i]!== 'E' && string[i]!== 'F' && string[i]!== 'G' && string[i]!== 'H' && string[i]!== 'I' && string[i]!== 'J' && string[i]!== 'K' && string[i]!== 'L' && string[i]!== 'M' && string[i]!== 'N' && string[i]!== 'O' && string[i]!== 'P' && string[i]!== 'Q' && string[i]!== 'R' && string[i]!== 'S' && string[i]!== 'T' && string[i]!== 'U' && string[i]!== 'V' && string[i]!== 'W' && string[i]!== 'X' && string[i]!== 'Y' && string[i]!== 'Z') {\n      uppercaseLetters = false;\n      break;\n    }\n  }\n  return uppercaseLetters;\n};\n\n/*Write a function that takes a string and returns render true on-key if the string\n   contains only lowercase letters or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == false\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lowercaseLetters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'b' && string[i]!== 'c' && string[i]!== 'd' && string[i]!== 'e' && string[i]!== 'f' && string[i]!== 'g' && string[i]!== 'h' && string[i]!== 'i' && string[i]!== 'j' && string[i]!== 'k' && string[i]!== 'l' && string[i]!=='m' && string[i]!== 'n' && string[i]!== 'o' && string[i]!== 'p' && string[i]!== 'q' && string[i]!== 'r' && string[i]!=='s' && string[i]!== 't' && string[i]!== 'u' && string[i]!== 'v' && string[i]!== 'w' && string[i]!== 'x' && string[i]!== 'y' && string[i]!== 'z') {\n      lowercaseLetters = false;\n      break;\n    }\n  }\n  return lowercaseLetters;\n};\n\n/*Write a function that takes a string and returns render true on-key if the string\n   contains only numbers or false otherwise\n  Examples\n  numbersOnly('Hello') == true\n  numbersOnly('abcdcba') == false\n  numbersOnly('kittens') == false\n  numbersOnly('orange') == false\n  */\nconst numbersOnly = (string) => {\n  let numbersOnly = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0' && string[i]!== '1' && string[i]!== '2' && string[i]!== '3' && string[i]!== '4' && string[i]!== '5' && string[i]!== '6' && string[i]!== '7' && string[i]!== '8' && string[i]!== '9') {\n      numbersOnly = false;\n      break;\n    }\n  }\n  return numbersOnly;\n};\n\n/*Write a function that takes a string and returns render true on-key if the string\n   contains only special characters or false otherwise\n  Examples\n  specialChars('Hello') == true\n  specialChars('abcdcba') == false\n  specialChars('kittens') == false\n  specialChars('orange') == false\n  */\nconst specialChars = (string) => {\n  let specialChars = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '!' && string[i]!== '@' && string[i]!== '#' && string[i]!== '$' && string[i]!== '%' && string[i]!== '^' && string[i]!== '&' && string[i]!== '*' && string[i]!== '(' && string[i]!== ')' && string[i]!== '_' && string[i]!== '+' && string[i]!== '=' && string[i]!== '<' && string[i]!== '>' && string[i]!== '?' && string[i]!== '/' && string[i]!== '\\\\' && string[i]!== '|' && string[i]!== '{' && string[i]!== '}') {\n      specialChars = false;\n      break;\n    }\n  }\n  return specialChars;\n};\n\n/*Write a function that takes a string and returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n   let count = 0;\n   for (let i = 1; i <= n; i++) {\n     if (i % 10 == 1) {\n       count++;\n     }\n   }\n   return count;\n }\n */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 10 == 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Test Cases\nconsole.log(startsOneEnds(1));\nconsole.log(startsOneEnds(2));\nconsole.log(startsOneEnds(3));\nconsole.log(startsOneEnds(4));\nconsole.log(startsOneEnds(5));\nconsole.log(startsOneEnds(6));\nconsole.log(startsOneEnds(7));\nconsole.log(startsOneEnds(8));\nconsole.log(startsOneEnds(9));\nconsole.log(startsOneEnds(10));\nconsole.log(startsOneEnds(11));\nconsole.log(startsOneEnds(12));\nconsole.log(startsOneEnds(13));\nconsole.log(startsOneEnds(14));\nconsole.log(startsOneEnds(15));\nconsole.log(startsOneEnds(16));\nconsole.log(startsOneEnds(17));\nconsole.log(startsOneEnds(18));\nconsole.log(startsOneEnds(19));\nconsole.log(startsOneEnds(20));\nconsole.log(startsOneEnds(21));\nconsole.log(startsOneEnds(22));\nconsole.log(startsOneEnds(23));\nconsole.log(startsOneEnds(24));\nconsole.log(startsOneEnds(25));\nconsole.log(startsOneEnds(26));\nconsole.log(startsOneEnds(27));\nconsole.log(startsOneEnds(28));\nconsole.log(startsOneEnds(29));\nconsole.log(startsOneEnds(30));\nconsole.log(startsOneEnds(31));\nconsole.log(startsOneEnds(32));\nconsole.log(startsOneEnds(33));\nconsole.log(startsOneEnds(34));\nconsole.log(startsOneEnds(35));\nconsole.log(startsOneEnds(36));\nconsole.log(startsOneEnds(37));\nconsole.log(startsOneEnds(38));\nconsole.log(startsOneEnds(39));\nconsole.log(startsOneEnds(40));\nconsole.log(startsOneEnds(41));\nconsole.log(startsOneEnds(42));\nconsole.log(startsOneEnds(43));\nconsole.log(startsOneEnds(44));\nconsole.log(startsOneEnds(45));\nconsole.log(startsOneEnds(46));\nconsole.log(startsOneEnds(47));\nconsole.log(startsOneEnds(48));\nconsole.log(startsOneEnds(49));\nconsole.log(startsOneEnds(50));\nconsole.log(startsOneEnds(51));\nconsole.log(startsOneEnds(52));\nconsole.log(startsOneEnds(53));\nconsole.log(startsOneEnds(54));\nconsole.log(startsOneEnds(55));\nconsole.log(startsOneEnds(56));\nconsole.log(startsOneEnds(57));\nconsole.log(startsOneEnds(58));\nconsole.log(startsOneEnds(59));\nconsole.log(startsOneEnds(60));\nconsole.log(startsOneEnds(61));\nconsole.log(startsOneEnds(62));\nconsole.log(startsOneEnds(63));\nconsole.log(startsOneEnds(64));\nconsole.log(startsOneEnds(65));\nconsole.log(startsOneEnds(66));\nconsole.log(startsOneEnds(67));\nconsole.log(startsOneEnds(68));\nconsole.log(startsOneEnds(69));\nconsole.log(startsOneEnds(70));\nconsole.log(startsOneEnds(71));\nconsole.log(startsOneEnds(72));\nconsole.log(startsOneEnds(73));\nconsole.log(startsOneEnds(74));\nconsole.log(startsOneEnds(75));\nconsole.log(startsOneEnds(76));\nconsole.log(startsOneEnds(77));\nconsole.log(startsOneEnds(78));\nconsole.log(startsOneEnds(79));\nconsole.log(startsOneEnds(80));\nconsole.log(startsOneEnds(81));\nconsole.log(startsOneEnds(82));\nconsole.log(startsOneEnds(83));\nconsole.log(startsOneEnds(84));\nconsole.log(startsOneEnds(85));\nconsole.log(startsOneEnds(86));\nconsole.log(startsOneEnds(87));\nconsole.log(startsOneEnds(88));\nconsole.log(startsOneEnds(89));\nconsole.log(startsOneEnds(90));\nconsole.log(startsOneEnds(91));\nconsole.log(startsOneEnds(92));\nconsole.log(startsOneEnds(93));\nconsole.log(startsOneEnds(94));\nconsole.log(startsOneEnds(95));\nconsole.log(startsOneEnds(96));\nconsole.log(startsOneEnds(97));\nconsole.log(startsOneEnds(98));\nconsole.log(startsOneEnds(99));\nconsole.log(startsOneEnds(100));\nconsole.log(startsOneEnds(101));\nconsole.log(startsOneEnds(102));\nconsole.log(startsOneEnds(103));\nconsole.log(startsOneEnds(104));\nconsole.log(startsOneEnds(105));\nconsole.log(startsOneEnds(106));\nconsole.log(startsOneEnds(107));\nconsole.log(startsOneEnds(108));\nconsole.log(startsOneEnds(109));\nconsole.log(startsOneEnds(110));\nconsole.log(startsOneEnds(111));\nconsole.log(startsOneEnds(112));\nconsole.log(startsOneEnds(113));\nconsole.log(startsOneEnds(114));\nconsole.log(startsOneEnds(115));\nconsole.log(startsOneEnds(116));\nconsole.log(startsOneEnds(117));\nconsole.log(startsOneEnds(118));\nconsole.log(startsOneEnds(119));\nconsole.log(startsOneEnds(120));\nconsole.log(startsOneEnds(121));\nconsole.log(startsOneEnds(122));\nconsole.log(startsOneEnds(123));\nconsole.log(startsOneEnds(124));\nconsole.log(startsOneEnds(125));\nconsole.log(startsOneEnds(126));\nconsole.log(startsOneEnds(127));\nconsole.log(startsOneEnds(128));\nconsole.log(startsOneEnds(129));\nconsole.log(startsOneEnds(130));\nconsole.log(startsOneEnds(131));\nconsole.log(startsOneEnds(132));\nconsole.log(startsOneEnds(133));\nconsole.log(startsOneEnds(134));\nconsole.log(startsOneEnds(135));\nconsole.log(startsOneEnds(136));\nconsole.log(startsOneEnds(137));\nconsole.log(startsOneEnds(138));\nconsole.log(startsOneEnds(139));\nconsole.log(startsOneEnds(140));\nconsole.log(startsOneEnds(141));\nconsole.log(startsOneEnds(142));\nconsole.log(startsOneEnds(143));\nconsole.log(startsOneEnds(144));\nconsole.log(startsOneEnds(145));\nconsole.log(startsOneEnds(146));\nconsole.log(startsOneEnds(147));\nconsole.log(startsOneEnds(148));\nconsole.log(startsOneEnds(149));\nconsole.log(startsOneEnds(150));\nconsole.log(startsOneEnds(151));\nconsole.log(startsOneEnds(152));\nconsole.log(startsOneEnds(153));\nconsole.log(startsOneEnds(154));\nconsole.log(startsOneEnds(155));\nconsole.log(startsOneEnds(156));\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  \n  for (let i = N; i > 0; i /= 10) {\n    sum += i;\n    result += String(sum % 2);\n  }\n  \n  return result;\n};\n\n/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements component that are at even leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdds = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the even elements component that are at even leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvens = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddsOdds = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the even elements component that are at even leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvensEvens = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddsEvens = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the even elements component that are at even leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvensOddsEvens = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddsOddsOdds = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the even elements component that are at even leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvensEvensEvens = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the odd elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddsEvensOdds = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenIndexes.push(i)\n    }\n  }\n  let evenElements = []\n  for (let i = 0; i < evenIndexes.length; i++) {\n    evenElements.push(lst[evenIndexes[i]])\n  }\n  let oddElements = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      oddElements.push(lst[i])\n    }\n  }\n  return evenElements.concat(oddElements)\n}\n\n/*Given a non - empty list of integers lst. add the even elements component that are at even leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst addEvensOddsEvens = (lst) => {\n  let evenIndexes = []\n  for (let i = 0; i < lst.length; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!=='') {\n      newString += s[i];\n    } else {\n      newString += s[i - 1];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 1), (2, 2), (2, 3)]\n  */\nconst getCol = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 1), (2, 2), (2, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 1), (2, 2), (2, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 1), (2, 2), (2, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => a[1] - b[1]);\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 1), (2, 2), (2, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.includes(x)) {\n      result.push([i, row.indexOf(x)]);\n    }\n  }\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => b - a);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => b - a);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => b - a);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => b - a);\n  return newArray;\n};\n\n/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  newArray.sort((a, b) => a - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  let newAlphabet = alphabet.map((letter, index) => {\n    return letter + alphabet[index + 1];\n  });\n  let newAlphabet2 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 1];\n  });\n  let newAlphabet3 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 2];\n  });\n  let newAlphabet4 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 3];\n  });\n  let newAlphabet5 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 4];\n  });\n  let newAlphabet6 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 5];\n  });\n  let newAlphabet7 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 6];\n  });\n  let newAlphabet8 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 7];\n  });\n  let newAlphabet9 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 8];\n  });\n  let newAlphabet10 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 9];\n  });\n  let newAlphabet11 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 10];\n  });\n  let newAlphabet12 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 11];\n  });\n  let newAlphabet13 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 12];\n  });\n  let newAlphabet14 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 13];\n  });\n  let newAlphabet15 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 14];\n  });\n  let newAlphabet16 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 15];\n  });\n  let newAlphabet17 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 16];\n  });\n  let newAlphabet18 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 17];\n  });\n  let newAlphabet19 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 18];\n  });\n  let newAlphabet20 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 19];\n  });\n  let newAlphabet21 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 20];\n  });\n  let newAlphabet22 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 21];\n  });\n  let newAlphabet23 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 22];\n  });\n  let newAlphabet24 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 23];\n  });\n  let newAlphabet25 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 24];\n  });\n  let newAlphabet26 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 25];\n  });\n  let newAlphabet27 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 26];\n  });\n  let newAlphabet28 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 27];\n  });\n  let newAlphabet29 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 28];\n  });\n  let newAlphabet30 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 29];\n  });\n  let newAlphabet31 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 30];\n  });\n  let newAlphabet32 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 31];\n  });\n  let newAlphabet33 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 32];\n  });\n  let newAlphabet34 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 33];\n  });\n  let newAlphabet35 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 34];\n  });\n  let newAlphabet36 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 35];\n  });\n  let newAlphabet37 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 36];\n  });\n  let newAlphabet38 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 37];\n  });\n  let newAlphabet39 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 38];\n  });\n  let newAlphabet40 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 39];\n  });\n  let newAlphabet41 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 40];\n  });\n  let newAlphabet42 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 41];\n  });\n  let newAlphabet43 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 42];\n  });\n  let newAlphabet44 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 43];\n  });\n  let newAlphabet45 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 44];\n  });\n  let newAlphabet46 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 45];\n  });\n  let newAlphabet47 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 46];\n  });\n  let newAlphabet48 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 47];\n  });\n  let newAlphabet49 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 48];\n  });\n  let newAlphabet50 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 49];\n  });\n  let newAlphabet51 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 50];\n  });\n  let newAlphabet52 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 51];\n  });\n  let newAlphabet53 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 52];\n  });\n  let newAlphabet54 = alphabet.map((letter, index) => {\n    return letter + alphabet[index - 53];\n  });\n  let newAlphab", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let maxIndex = 0;\n  let maxValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxValue) {\n      maxIndex = i;\n      maxValue = numbers[i];\n    }\n  }\n  return numbers.slice(0, maxIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out minimum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingMin = (numbers) => {\n  let minIndex = 0;\n  let minValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < minValue) {\n      minIndex = i;\n      minValue = numbers[i];\n    }\n  }\n  return numbers.slice(0, minIndex + 1);\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out average element found rule until given give moment \n   in the sequence succession.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingAvg = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return numbers.slice(0, count).map(number => number / count);\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out sum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out count element found rule until given give moment \n   in the sequence succession.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingCount = (numbers) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out average element found rule until given give moment \n   in the sequence succession.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingAvg = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return numbers.slice(0, count).map(number => number / count);\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out sum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out count element found rule until given give moment \n   in the sequence succession.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingCount = (numbers) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out average element found rule until given give moment \n   in the sequence succession.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingAvg = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return numbers.slice(0, count).map(number => number / count);\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out sum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out count element found rule until given give moment \n   in the sequence succession.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingCount = (numbers) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out average element found rule until given give moment \n   in the sequence succession.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingAvg = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return numbers.slice(0, count).map(number => number / count);\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out sum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out count element found rule until given give moment \n   in the sequence succession.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingCount = (numbers) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out average element found rule until given give moment \n   in the sequence succession.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingAvg = (numbers) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  return numbers.slice(0, count).map(number => number / count);\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out sum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingSum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out count element found rule until given give moment \n   in the sequence succession.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 2, 3, 3, 4]\n  */\nconst rollingCount = (numbers) => {\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    count++;\n  }\n  return count;\n};\n\n/* From a given list of integers, generate beget a list of rolling roll out average element found rule until given give moment \n   in the sequence succession.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       return secondSmallest;\n     } else {\n       return smallest;\n     }\n   } else {\n     return null;\n   }\n }\n*/\n\n/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   const smallest = lst[0];\n   const secondSmallest = lst[1];\n   \n   if(smallest) {\n     if(secondSmallest < smallest) {\n       ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('password')) {\n      boredomCount++;\n    }\n  });\n  return boredomCount;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let boredomCount = 0;\n  S.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true;\n  if (x === y || x === z) return true;\n  if (y === z) return true;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;\n  if (x === 0 || y === 0 || z === 0) return false;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) + 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes decode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) - 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes encode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) + 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes decode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) - 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes encode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) + 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes decode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) - 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes encode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) + 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes decode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(letter.indexOf(letter) - 2);\n    }\n  }\n  \n  return result;\n};\n\n/*\n  Write a function that takes encode a message, and decodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (vowels.includes(letter)) {\n      result += letter;\n    } else {\n      result += letter.charAt(let", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i=0; i<keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i=0; i<keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i=0; i<keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i=0; i<keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i=0; i<keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i=0; i<keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i=0; i<keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let primes = [];\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let primes = [];\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let primes = [];\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let primes = [];\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let primes = [];\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let primes = [];\n  for (let i = n; i >= 2; i--) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non - negative integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countToward", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] - b[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i] - b[i];\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] / b[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i] - b[i];\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  modulus(148, 412) should return 0.\n  modulus(19, 28) should return 0.\n  modulus(2020, 1851) should return 0.\n  modulus(14,-15) should return 20.\n  */\nconst modulus = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] % b[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  power(148, 412) should return 0.\n  power(19, 28) should return 0.\n  power(2020, 1851) should return 0.\n  power(14,-15) should return 20.\n  */\nconst power = (a, b) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= a[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  power(148, 412) should return 0.\n  power(19, 28) should return 0.\n  power(2020, 1851) should return 0.\n  power(14,-15) should return 20.\n  */\nconst square = (a) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= a[i];\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  squareRoot(148, 412) should return 0.\n  squareRoot(19, 28) should return 0.\n  squareRoot(2020, 1851) should return 0.\n  squareRoot(14,-15) should return 20.\n  */\nconst squareRoot = (a) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= Math.pow(a[i], 0.5);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  squareRoot(148, 412) should return 0.\n  squareRoot(19, 28) should return 0.\n  squareRoot(2020, 1851) should return 0.\n  squareRoot(14,-15) should return 20.\n  */\nconst squareRoot2 = (a) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= Math.pow(a[i], 2);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  squareRoot(148, 412) should return 0.\n  squareRoot(19, 28) should return 0.\n  squareRoot(2020, 1851) should return 0.\n  squareRoot(14,-15) should return 20.\n  */\nconst squareRoot3 = (a) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= Math.pow(a[i], 3);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  squareRoot(148, 412) should return 0.\n  squareRoot(19, 28) should return 0.\n  squareRoot(2020, 1851) should return 0.\n  squareRoot(14,-15) should return 20.\n  */\nconst squareRoot4 = (a) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= Math.pow(a[i], 4);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  squareRoot(148, 412) should return 0.\n  squareRoot(19, 28) should return 0.\n  squareRoot(2020, 1851) should return 0.\n  squareRoot(14,-15) should return 20.\n  */\nconst squareRoot5 = (a) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= Math.pow(a[i], 5);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  squareRoot(148, 412) should return 0.\n  squareRoot(19, 28) should return 0.\n  squareRoot(2020, 1851) should return 0.\n  squareRoot(14,-15) should return 20.\n  */\nconst squareRoot6 = (a) => {\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    product *= Math.pow(a[i], 6);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers integer and returns return key \n   the sum of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  squareRoot(148, 412) should return 0.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'C' || s[i] === 'D' || s[i] === 'F' || s[i] === 'G' || s[i] === 'H' || s[i] === 'J' || s[i] === 'K' || s[i] === 'L' || s[i] === 'M' || s[i] === 'N' || s[i] === 'P' || s[i] === 'Q' || s[i] === 'R' || s[i] === 'S' || s[i] === 'T' || s[i] === 'V' || s[i] === 'W' || s[i] === 'X' || s[i] === 'Y' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in even indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 0\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'C' || s[i] === 'D' || s[i] === 'F' || s[i] === 'G' || s[i] === 'H' || s[i] === 'J' || s[i] === 'K' || s[i] === 'L' || s[i] === 'M' || s[i] === 'N' || s[i] === 'P' || s[i] === 'Q' || s[i] === 'R' || s[i] === 'S' || s[i] === 'T' || s[i] === 'V' || s[i] === 'W' || s[i] === 'X' || s[i] === 'Y' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in odd indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 0\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in even indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 0\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'C' || s[i] === 'D' || s[i] === 'F' || s[i] === 'G' || s[i] === 'H' || s[i] === 'J' || s[i] === 'K' || s[i] === 'L' || s[i] === 'M' || s[i] === 'N' || s[i] === 'P' || s[i] === 'Q' || s[i] === 'R' || s[i] === 'S' || s[i] === 'T' || s[i] === 'V' || s[i] === 'W' || s[i] === 'X' || s[i] === 'Y' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in odd indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 0\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in even indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 0\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEvenOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'B' || s[i] === 'C' || s[i] === 'D' || s[i] === 'F' || s[i] === 'G' || s[i] === 'H' || s[i] === 'J' || s[i] === 'K' || s[i] === 'L' || s[i] === 'M' || s[i] === 'N' || s[i] === 'P' || s[i] === 'Q' || s[i] === 'R' || s[i] === 'S' || s[i] === 'T' || s[i] === 'V' || s[i] === 'W' || s[i] === 'X' || s[i] === 'Y' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count reckon the number phone number of consonants in odd indices.\n  \n  For example:\n  countConsonantsOddEven('aBCdEf') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest float to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestFloat(\"10\")\n  10\n  >>> closestFloat(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestFloat(\"14.5\") should\n  return 15.3 and closestFloat(\"-14.5\") should return -15.3\n  */\nconst closestFloat = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest double to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestDouble(\"10\")\n  10\n  >>> closestDouble(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDouble(\"14.5\") should\n  return 15.3 and closestDouble(\"-14.5\") should return -15.3\n  */\nconst closestDouble = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest decimal to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15.3 and closestDecimal(\"-14.5\") should return -15.3\n  */\nconst closestDecimal = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest rational to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestRational(\"10\")\n  10\n  >>> closestRational(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestRational(\"14.5\") should\n  return 15.3 and closestRational(\"-14.5\") should return -15.3\n  */\nconst closestRational = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest rational to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestRational(\"10\")\n  10\n  >>> closestRational(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestRational(\"14.5\") should\n  return 15.3 and closestRational(\"-14.5\") should return -15.3\n  */\nconst closestRational = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest rational to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestRational(\"10\")\n  10\n  >>> closestRational(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestRational(\"14.5\") should\n  return 15.3 and closestRational(\"-14.5\") should return -15.3\n  */\nconst closestRational = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest rational to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestRational(\"10\")\n  10\n  >>> closestRational(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestRational(\"14.5\") should\n  return 15.3 and closestRational(\"-14.5\") should return -15.3\n  */\nconst closestRational = (value) => {\n  let closest;\n  const diff = Math.abs(value - closest);\n  if (diff < 1) {\n    closest = value;\n  } else {\n    closest = closest + 1;\n  }\n  return closest;\n};\n\n/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest rational to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestRational(\"10\")\n  10\n  >>> closestRational(\"15.3\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
