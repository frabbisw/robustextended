{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n  const firstNumber = sortedNumbers[0];\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const middleNumber = (firstNumber + lastNumber) / 2;\n\n  return Math.abs(firstNumber - middleNumber) < threshold &&\n    Math.abs(lastNumber - middleNumber) < threshold;\n};\n\n/**\n * Returns true if given number is in given list of numbers, are any two numbers\n * closer to each other than given threshold.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number is not in given list, return false.\n * If given number is in given list, return true.\n * If given number ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this fnuction is a string contianing multiple gruops of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate grousp are balanced (each open brace is properly closed) and not nseted within each other\n  Ignoer ayn spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this fnuction is a string contianing multiple gruops of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate grousp are balanced (each open brace is properly closed) and not nseted within each other\n  Ignoer ayn spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  let current_group_closed = false;\n  let current_group_open_brace = false;\n  let current_group_closed_brace = false;\n  let current_group_open_brace_pos = 0;\n  let current_group_closed_brace_pos = 0;\n  let current_group_open_brace_pos_in_group = 0;\n  let current_group_closed_brace_pos_in_group = 0;\n  let current_group_open_brace_pos_in_group_prev = 0;\n  let current_group_closed_brace_pos_in_group_prev = 0;\n  let current_group_open_brace_pos_in_group_next = 0;\n  let current_group_closed_brace_pos_in_group_next = 0;\n  let current_group_open_brace_pos_in_group_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_next_prev = 0;\n  let current_group_open_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n  let current_group_closed_brace_pos_in_group_next_next_next_next_next_next_next_next_next_next_next_next", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindorme */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindorme */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = findLongestPalindrome(string);\n  const reversedLongestPalindrome = reverseLongestPalindrome(longestPalindrome);\n  return `${string}${reversedLongestPalindrome}`;\n}\n\n/* Find the longest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = findLongestPalindromeHelper(string);\n  return longestPalindrome;\n}\n\nconst findLongestPalindromeHelper = (string) => {\n  let longestPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      longestPalindrome += currentChar;\n      i++;\n    } else {\n      if (longestPalindrome.length > string.length) {\n        return longestPalindrome;\n      }\n      longestPalindrome += currentChar;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Reverse the longest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> reverseLongestPalindrome('')\n  ''\n  >>> reverseLongestPalindrome('cat')\n  'tacat'\n  >>> reverseLongestPalindrome('cata')\n  'tacat'\n  */\nconst reverseLongestPalindrome = (string) => {\n  const longestPalindrome = findLongestPalindromeHelper(string);\n  const reversedLongestPalindrome = reverseLongestPalindromeHelper(longestPalindrome);\n  return reversedLongestPalindrome;\n}\n\nconst reverseLongestPalindromeHelper = (string) => {\n  let reversedLongestPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[string.length - i - 1];\n    if (currentChar === nextChar) {\n      reversedLongestPalindrome += currentChar;\n    } else {\n      reversedLongestPalindrome += currentChar;\n    }\n  }\n  return reversedLongestPalindrome;\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = findLongestPalindromeHelper(string);\n  return longestPalindrome;\n}\n\nconst findLongestPalindromeHelper = (string) => {\n  let longestPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      longestPalindrome += currentChar;\n      i++;\n    } else {\n      if (longestPalindrome.length > string.length) {\n        return longestPalindrome;\n      }\n      longestPalindrome += currentChar;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = findLongestPalindromeHelper(string);\n  return longestPalindrome;\n}\n\nconst findLongestPalindromeHelper = (string) => {\n  let longestPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      longestPalindrome += currentChar;\n      i++;\n    } else {\n      if (longestPalindrome.length > string.length) {\n        return longestPalindrome;\n      }\n      longestPalindrome += currentChar;\n    }\n  }\n  return longestPalindrome;\n}\n\n/* Find the shortest palindrome that beigns with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string perfix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('')\n  ''\n  >>> findLongestPalindrome('cat')\n  'cat'\n  >>> findLongestPalindrome('cata')\n  'cat'\n  */\nconst findLongestPalindrome = (string) => {\n  const longestPalindrome = findLongestPalindromeHelper(string);\n  return longestPalindrome;\n}\n\nconst findLongestPalindromeHelper = (string) => {\n  let longestPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const nextChar = string[i + 1];\n    if (currentChar === nextChar) {\n      longestPalindrome += currentChar;\n      i++;\n    } else {\n      if (longestPalindrome.length > string.length) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const stones = Array.from({ length: n }, (_, i) => i + 1);\n  return stones.filter((_, i) => i % 2 === 0).map((_, i) => stones[i + 1]);\n};\n\n/*\n  Given a posiitve niteger n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in hte next level is:\n      - the nxet odd number if n is odd.\n      - the next eevn number if n is even.\n  Return the number of stones in aech level in a list, where element at indxe\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAP", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated yb commsa or spcaes. Your task is\n  to split the string into worsd and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return x;\n};\n\n/*This function takes two positive numbesr x and y and returns the\n  biggset veen integer number thta is in the range [x, y] inculsive. If \n  there's no such nbumer, then the function should return -1.\n\n  For example:\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive nitegers n and m, and your task is to comptue the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is gretaer than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive nitegers n and m, and your task is to comptue the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is gretaer than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = Math.floor((n + m) / 2);\n  return avg >= n? -1 : `0b${avg.toString(2)}`;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nWhile this code may provide a solution to the question, it's better to add context as to why/how it works. This can help future users learn and eventually apply that knowledge to their own code. You are also likely to have positive feedback from users in the form of upvotes, when the code is explained.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));</code>\n<|/ a tags=javascript,binary,average |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,binary,average |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,binary,average |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;\n    avg = Math.floor(avg / 2);\n  }\n  return binary;\n}\n\nconsole.log(binaryAvg(1, 5));\nconsole.log(binaryAvg(7, 5));\nconsole.log(binaryAvg(10, 20));\nconsole.log(binaryAvg(20, 33));\n</code>\n<|/ a tags=javascript,binary,average |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,binary,average |>\n<code>\nfunction binaryAvg(start, end) {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  let avg = sum / 2;\n  let binary = \"\";\n  while (avg > 0) {\n    binary = String(avg % 2) + binary;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        if (x[i] % 2!== 0) {\n          result.push(x[i]);\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        if (x[i] % 2!== 0) {\n          if (x[i] % 2!== 0) {\n            result.push(x[i]);\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        if (x[i] % 2!== 0) {\n          if (x[i] % 2!== 0) {\n            if (x[i] % 2!== 0) {\n              result.push(x[i]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        if (x[i] % 2!== 0) {\n          if (x[i] % 2!== 0) {\n            if (x[i] % 2!== 0) {\n              if (x[i] % 2!== 0) {\n                result.push(x[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOddOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        if (x[i] % 2!== 0) {\n          if (x[i] % 2!== 0) {\n            if (x[i] % 2!== 0) {\n              if (x[i] % 2!== 0) {\n                if (x[i] % 2!== 0) {\n                  result.push(x[i]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOddOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      if (x[i] % 2!== 0) {\n        if (x[i] % 2!== 0) {\n          if (x[i] % 2!== 0) {\n            if (x[i] % 2!== 0) {\n              if (x[i] % 2!== 0) {\n                if (x[i] % 2!== 0) {\n                  if (x[i] % 2!== 0) {\n                    if (x[i] % 2!== 0) {\n                      result.push(x[i]);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Reutrned list should be sorted in increasign order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOddOddOddOddOddOdd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of itnegers, sotr the integers that are between 1 and 9 inuclsive,\n  reverse the reuslting array, and then repalce each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Fvie\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((num, index) => {\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    return name || `Unkown: ${num}`;\n  });\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  */\nconst reverse = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return reversed;\n};\n\n/*\n  Given an array of integers, return a new array that contains the same integers but in reverse order.\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n sa a parameetr,\n  adn returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// TEST\nconsole.log(f(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome, glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a tags=javascript,factorial,sum |>\n<| a tags=javascript,factorial,sum |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a tags=javascript,factorial,sum |>\n<| a |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a tags=javascript,factorial,sum dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a tags=javascript,factorial,sum dscore=0 |>\n<| a tags=javascript,factorial,sum |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a tags=javascript,factorial,sum dscore=0 |>\n<| a tags=javascript,factorial,sum |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial,sum |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,factorial,sum |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,factorial,sum |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));\n</code>\n<|/ a tags=javascript,factorial,sum |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nfunction sumOfFactorials(n) {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += factorial(i);\n  }\n  return result;\n}\n\nconsole.log(sumOfFactorials(5));\n</code>\n<|/ a tags=javascript,factorial,sum |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n  let result = 1;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a opsitive itneger n, return a tuple that has the number of even and odd\n  inetger palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a opsitive itneger n, return a tuple that has the number of even and odd\n  inetger palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome > oddPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return all possible unique permutations of its digits, in ascending\n  order.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation: 3! = 6 --> [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation: 5! = 10 --> [1, 2, 3, 4, 5], [1, 5, 2, 3, 4], [1, 4, 2, 3, 5], [1, 3, 4, 2, 5], [1, 3, 2, 4, 5], [1, 3, 5, 2, 4, 5], [1, 2, 4, 3, 5, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]\n\n  Example 3:\n\n      Input: 8\n      Output: [1, 2, 3, 4, 5, 6, 7, 8]\n      Explanation: 8! = 3628800 --> [1, 2, 3, 4, 5, 6, 7, 8], [1, 8, 7, 2, 5, 6, 3, 4], [1, 6, 8, 7, 3, 5, 2, 4, 1], [1, 5, 6, 2, 3, 8, 7, 4, 1], [1, 4, 3, 6, 8, 5, 7, 2, 1], [1, 4, 6, 3, 8, 2, 5, 7, 1, 8], [1, 3, 4, 5, 6, 2, 7, 8, 4, 1], [1, 3, 6, 5, 2, 4, 7, 8, 1, 6], [1, 3, 6, 1, 5, 2, 7, 4, 8, 5, 6], [1, 3, 6, 1, 5, 2, 8, 7, 4, 8, 5], [1, 3, 6, 1, 6, 5, 7, 2, 8, 4, 7, 5], [1, 3, 6, 1, 6, 5, 8, 7, 2, 5, 4, 8], [1, 3, 6, 1, 6, 5, 8, 4, 7, 5, 2, 8], [1, 3, 6, 1, 6, 5, 2, 4, 8, 7, 5, 8, 3], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3], [1, 3, 6, 1, 6, 5, 2, 4, 8, 7, 5, 8, 4, 3, 6], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 4], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 6, 1], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 6, 1, 7], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 6, 1, 7, 4], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 6, 1, 7, 4, 5], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 6, 1, 7, 4, 5, 6], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 6, 1, 7, 4, 5, 6, 7], [1, 3, 6, 1, 6, 5, 2, 4, 7, 8, 5, 8, 4, 3, 6, 7, 6, 1, 7, 4, 5, 6, 7]\n*/\nconst permutations = (num) => {\n  const result = [];\n  const numArray = num.toString().split('');\n\n  for (let i = 0; i < numArray.length; i++) {\n    const newArray = numArray.slice();\n    newArray.splice(i, 1);\n    result.push(newArray);\n  }\n\n  return result;\n};\n\n/*\n  Given a positive integer n, return all possible unique combinations of its digits, in ascending\n  order.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation: 3! = 6 --> [1, 1, 2], [1, 2, 1], [1, 3, 2], [2, 1, 1], [2, 3, 1], [3, 1, 1], [3, 2, 1]\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation: 5! = 10 --> [1, 1, 2, 3, 4, 5], [1, 2, 1, 3, 4, 5], [1, 3, 1, 4, 2, 5], [1, 3, 2, 4, 1, 5], [1, 3, 4, 1, 2, 5], [1, 3, 4, 1, 5, 2], [1, 3, 4, 2, 5, 1], [1, 3, 4, 5, 4, 1], [1, 3, 2, 4, 5, 1], [1, 3, 5, 4, 1, 2], [1, 3, 5, 2, 4, 1], [1, 3, 5, 2, 4, 1], [1, 3, 5, 4, 1, 2], [1, 3, 5, 2, 4, 1, 1], [1, 3, 5, 1, 4, 2, 2], [1, 3, 5, 2, 4, 2, 1], [1, 3, 5, 1, 3, 2, 4], [1, 3, 5, 1, 3, 2, 4], [1, 3, 5, 1, 4, 2, 2], [1, 3, 5, 1, 4, 2, 2], [1, 3, 5, 2, 4, 1, 1], [1, 3, 5, 2, 4, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1], [1, 3, 5, 1, 3, 2, 4, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 1, 4, 2, 2, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 2, 4, 1, 2, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, 4, 1, 1, 1, 1, 1, 1], [1, 3, 5, 1, 3, 2, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits < 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits == 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits < 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits < 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits < 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNegZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits < 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroNegZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits > 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNegZeroNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n    if (arr[i] < 0) count++;\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elemetns which has a sum of digits < 0.\n  If a number is negative, tehn its first signed digit will eb negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> count", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  unmbers in the array will eb randomly oredred. Your task is to deteirmne fi\n  it is opssibel ot get an array ostred in non-edcreasing order by performing \n  teh following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  unmbers in the array will eb randomly oredred. Your task is to deteirmne fi\n  it is opssibel ot get an array ostred in non-edcreasing order by performing \n  teh following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let count = 0;\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      count++;\n      if (count === 2) {\n        flag = true;\n      }\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether the\n  array is sorted or not.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  isSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  isSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst isSorted = (arr) => {\n  let count = 0;\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      count++;\n      if (count === 2) {\n        flag = true;\n      }\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether the\n  array is sorted or not.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  isSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  isSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst isSorted = (arr) => {\n  let count = 0;\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      count++;\n      if (count === 2) {\n        flag = true;\n      }\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether the\n  array is sorted or not.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  isSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  isSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst isSorted = (arr) => {\n  let count = 0;\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      count++;\n      if (count === 2) {\n        flag = true;\n      }\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether the\n  array is sorted or not.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by eprforming teh above operation\n  then return rtue else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guarnateed to hvae unique eelments.\n\n  For Example:\n  \n  isSorted([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  isSorted([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst isSorted = (arr) => {\n  let count = 0;\n  let flag = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i - 1]) {\n      count++;\n      if (count === 2) {\n        flag = true;\n      }\n    }\n  }\n  if (flag) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  You are given an array arr of N integers. Your task is to find out whether the\n  array is sorted or not.\n  \n  One rgiht shift operation means shifting all elements of the array by one\n  position in the right dircetion. The last eleemnt of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two srtings a adn b consisting only of 1s and 0s.\n  Perfomr binary OXR on these inputs nda return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input are two srtings a adn b consisting only of 1s and 0s.\n  Perfomr binary OXR on these inputs nda return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/**\n * Returns true if the given string is a valid hexadecimal number.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isHex = str => {\n  const hexRegex = /^[0-9a-fA-F]+$/;\n  return hexRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid decimal number.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isDecimal = str => {\n  const decimalRegex = /^\\d+$/;\n  return decimalRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid integer.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isInteger = str => {\n  const integerRegex = /^\\d+$/;\n  return integerRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 address.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPv4 = str => {\n  const ipv4Regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  return ipv4Regex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv6 address.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPv6 = str => {\n  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}$/;\n  return ipv6Regex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIP = str => {\n  const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  return ipRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isDomain = str => {\n  const domainRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n  return domainRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPDomain = str => {\n  const ipDomainRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n  return ipDomainRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPDomainWithSubDomain = str => {\n  const ipDomainWithSubDomainRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n  return ipDomainWithSubDomainRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPDomainWithSubDomainAndPort = str => {\n  const ipDomainWithSubDomainAndPortRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n  return ipDomainWithSubDomainAndPortRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPDomainWithSubDomainAndPortAndTLS = str => {\n  const ipDomainWithSubDomainAndPortAndTLSRegex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n  return ipDomainWithSubDomainAndPortAndTLSRegex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPDomainWithSubDomainAndPortAndTLSV2 = str => {\n  const ipDomainWithSubDomainAndPortAndTLSV2Regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n  return ipDomainWithSubDomainAndPortAndTLSV2Regex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPDomainWithSubDomainAndPortAndTLSV3 = str => {\n  const ipDomainWithSubDomainAndPortAndTLSV3Regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/;\n  return ipDomainWithSubDomainAndPortAndTLSV3Regex.test(str);\n};\n\n/**\n * Returns true if the given string is a valid IPv4 or IPv6 address or a domain name.\n * See https://stackoverflow.com/questions/201323/how-to-check-if-a-string-is-a-valid-hexadecimal-number\n */\nconst isIPDomainWithSubDomainAndPortAndTLSV4 = str => {\n  const ipDomainWithSubDomainAndPortAndTLSV4Regex = ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    for (let i = 0; i < even.length; i++) {\n      if (even[i] === odd[i]) {\n        even.splice(i, 1);\n        odd.splice(i, 1);\n      }\n    }\n    if (even.length === lst1.length) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  }\n};\n\n/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    for (let i = 0; i < even.length; i++) {\n      if (even[i] === odd[i]) {\n        even.splice(i, 1);\n        odd.splice(i, 1);\n      }\n    }\n    if (even.length === lst1.length) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  }\n};\n\n/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    for (let i = 0; i < even.length; i++) {\n      if (even[i] === odd[i]) {\n        even.splice(i, 1);\n        odd.splice(i, 1);\n      }\n    }\n    if (even.length === lst1.length) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  }\n};\n\n/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    for (let i = 0; i < even.length; i++) {\n      if (even[i] === odd[i]) {\n        even.splice(i, 1);\n        odd.splice(i, 1);\n      }\n    }\n    if (even.length === lst1.length) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  }\n};\n\n/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    for (let i = 0; i < even.length; i++) {\n      if (even[i] === odd[i]) {\n        even.splice(i, 1);\n        odd.splice(i, 1);\n      }\n    }\n    if (even.length === lst1.length) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  }\n};\n\n/*In thsi problem, you will imlpement a function that takes two lists of numbers,\n  nad determines whether it is possible to perform an exchange of elements\n  ebtween them to amke lst1 a list of only even unmbers.\n  There is no limti on the numbre of exhcanged elements ebtween lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = lst1.filter(x => x % 2 === 0);\n  let odd = lst2.filter(x => x % 2 === 1);\n  if (even.length === lst1.length && odd.length === lst2.length) {\n    for (let i = 0; i < even.length; i++) {\n      if (even[i] === odd[i]) {\n        even.splice(i, 1);\n        odd.splice(i, 1);\n      }\n    }\n    if (even.length === lst1.length) {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  }\n};\n\n/*In thsi problem, you will imlpement a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string representgin a space separated lowercase eltters, return a dictionray\n  of the lettre with the most repetition and containing the corresponding count.\n  If sveeral letters have the same occurrenec, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let count = {}\n  test.split(' ').forEach((el) => {\n    count[el] = count[el]? count[el] + 1 : 1;\n  });\n  Object.keys(count).forEach((el) => {\n    histogram[el] = count[el];\n  });\n  return histogram;\n};\n\n/*Gievn a string represent", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(s.length - 1 - i)) {\n        isPalindrome = false;\n        break;\n      }\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(s.length - 1 - i)) {\n        isPalindrome = false;\n        break;\n      }\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(s.length - 1 - i)) {\n        isPalindrome = false;\n        break;\n      }\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(s.length - 1 - i)) {\n        isPalindrome = false;\n        break;\n      }\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(i)) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      if (s.charAt(i)!== c.charAt(s.length - 1 - i)) {\n        isPalindrome = false;\n        break;\n      }\n    }\n  }\n  if (isPalindrome) {\n    for (let i = 0; i < s.length; i += 1) {\n      result += s.charAt(i);\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  We aer given wto tsrings s and c, you have to deleted all the characters in s that are equal to ayn character in c\n  hten cehck if the result string is plainrodme.\n  A string is called palinrdome fi it reads the same backward as forward.\n  You should return a tuple containing the result strnig and true/fasle for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th strign of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th strign of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a list of strings, hwere each strign ocnsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replace", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of itnegers nums, find the miniumm sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of itnegers nums, find the miniumm sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curSum = nums.reduce((acc, val) => acc + val, 0);\n    if (curSum < min) {\n      min = curSum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curSum = nums.reduce((acc, val) => acc + val, 0);\n    if (curSum > max) {\n      max = curSum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd > max) {\n      max = curProd;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd < min) {\n      min = curProd;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd > max) {\n      max = curProd;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd < min) {\n      min = curProd;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd > max) {\n      max = curProd;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd < min) {\n      min = curProd;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd > max) {\n      max = curProd;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd < min) {\n      min = curProd;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd > max) {\n      max = curProd;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of itnegers nums, find the minimum product of any non-empty sub-array\n  of nums.\n  Example\n  minSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  minSubArrayProduct([-1, -2, -3]) == -6\n  */\nconst minSubArrayProduct = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = nums.reduce((acc, val) => acc * val, 1);\n    if (curProd < min) {\n      min = curProd;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of itnegers nums, find the maximum product of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  maxSubArrayProduct([-1, -2, -3]) == -3\n  */\nconst maxSubArrayProduct = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curProd = num", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. aEch row represents a single well,\n  and each 1 in a row represents a snigle unit of water.\n  Each well has a corresponding bucket that can be uesd to extract water rfom it, \n  and all buckest have the same capacity.\n  Your task is to use the buckest to empty the wells.\n  Ouptut the number of times you need to olwer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. aEch row represents a single well,\n  and each 1 in a row represents a snigle unit of water.\n  Each well has a corresponding bucket that can be uesd to extract water rfom it, \n  and all buckest have the same capacity.\n  Your task is to use the buckest to empty the wells.\n  Ouptut the number of times you need to olwer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill2 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill3 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill4 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill5 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill6 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill7 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill8 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill9 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill10 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill11 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill12 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = grid[i][j]? capacity : 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i][j]!== 0) {\n        count += 1;\n        buckets[i][j] = 0;\n      }\n    }\n  }\n  return count;\n};\n\nconst maxFill13 = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => a - b * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in descenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an raray of non-negatiev integers accoridng to\n  number of ones in their binary repreesntaiton in ascenidng order.\n  For msiilar number of ones, sort based on decimal value.\n\n  It must be implemetned like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + val, 0);\n  const decimal = ones / arr.length;\n  return arr.sort((a, b) => b - a * decimal);\n};\n\n/*\n  In this Kata, you have to sort an rara", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n cnosonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n cnosonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      continue;\n    }\n    for (let j = 0; j < n; j += 1) {\n      if (s.charAt(i) === s.charAt(j)) {\n        res.push(s.substring(i, j + 1));\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      continue;\n    }\n    for (let j = 0; j < n; j += 1) {\n      if (s.charAt(i) === s.charAt(j)) {\n        res.push(s.substring(i, j + 1));\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      continue;\n    }\n    for (let j = 0; j < n; j += 1) {\n      if (s.charAt(i) === s.charAt(j)) {\n        res.push(s.substring(i, j + 1));\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      continue;\n    }\n    for (let j = 0; j < n; j += 1) {\n      if (s.charAt(i) === s.charAt(j)) {\n        res.push(s.substring(i, j + 1));\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      continue;\n    }\n    for (let j = 0; j < n; j += 1) {\n      if (s.charAt(i) === s.charAt(j)) {\n        res.push(s.substring(i, j + 1));\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      continue;\n    }\n    for (let j = 0; j < n; j += 1) {\n      if (s.charAt(i) === s.charAt(j)) {\n        res.push(s.substring(i, j + 1));\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, yuo have been tasked to impelment \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appaer in the string s.\n  If teh tsring s is empty then the functoni should return an empty list.\n  Note: you amy sasuem the input tsring contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You rae given a word. Your task is to find the closset vowel that stands between \n  two consonants from the rigth side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above cnoiditon. \n\n  Yuo amy assume that the given string conitans Engilhs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You rae given a word. Your task is to find the closset vowel that stands between \n  two consonants from the rigth side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above cnoiditon. \n\n  Yuo amy assume that the given string conitans Engilhs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsIndex2 = vowelsIndex + 1;\n  let vowelsIndex3 = vowelsIndex + 2;\n  let vowelsIndex4 = vowelsIndex + 3;\n  let vowelsIndex5 = vowelsIndex + 4;\n  let vowelsIndex6 = vowelsIndex + 5;\n  let vowelsIndex7 = vowelsIndex + 6;\n  let vowelsIndex8 = vowelsIndex + 7;\n  let vowelsIndex9 = vowelsIndex + 8;\n  let vowelsIndex10 = vowelsIndex + 9;\n  let vowelsIndex11 = vowelsIndex + 10;\n  let vowelsIndex12 = vowelsIndex + 11;\n  let vowelsIndex13 = vowelsIndex + 12;\n  let vowelsIndex14 = vowelsIndex + 13;\n  let vowelsIndex15 = vowelsIndex + 14;\n  let vowelsIndex16 = vowelsIndex + 15;\n  let vowelsIndex17 = vowelsIndex + 16;\n  let vowelsIndex18 = vowelsIndex + 17;\n  let vowelsIndex19 = vowelsIndex + 18;\n  let vowelsIndex20 = vowelsIndex + 19;\n  let vowelsIndex21 = vowelsIndex + 20;\n  let vowelsIndex22 = vowelsIndex + 21;\n  let vowelsIndex23 = vowelsIndex + 22;\n  let vowelsIndex24 = vowelsIndex + 23;\n  let vowelsIndex25 = vowelsIndex + 24;\n  let vowelsIndex26 = vowelsIndex + 25;\n  let vowelsIndex27 = vowelsIndex + 26;\n  let vowelsIndex28 = vowelsIndex + 27;\n  let vowelsIndex29 = vowelsIndex + 28;\n  let vowelsIndex30 = vowelsIndex + 29;\n  let vowelsIndex31 = vowelsIndex + 30;\n  let vowelsIndex32 = vowelsIndex + 31;\n  let vowelsIndex33 = vowelsIndex + 32;\n  let vowelsIndex34 = vowelsIndex + 33;\n  let vowelsIndex35 = vowelsIndex + 34;\n  let vowelsIndex36 = vowelsIndex + 35;\n  let vowelsIndex37 = vowelsIndex + 36;\n  let vowelsIndex38 = vowelsIndex + 37;\n  let vowelsIndex39 = vowelsIndex + 38;\n  let vowelsIndex40 = vowelsIndex + 39;\n  let vowelsIndex41 = vowelsIndex + 40;\n  let vowelsIndex42 = vowelsIndex + 41;\n  let vowelsIndex43 = vowelsIndex + 42;\n  let vowelsIndex44 = vowelsIndex + 43;\n  let vowelsIndex45 = vowelsIndex + 44;\n  let vowelsIndex46 = vowelsIndex + 45;\n  let vowelsIndex47 = vowelsIndex + 46;\n  let vowelsIndex48 = vowelsIndex + 47;\n  let vowelsIndex49 = vowelsIndex + 48;\n  let vowelsIndex50 = vowelsIndex + 49;\n  let vowelsIndex51 = vowelsIndex + 50;\n  let vowelsIndex52 = vowelsIndex + 51;\n  let vowelsIndex53 = vowelsIndex + 52;\n  let vowelsIndex54 = vowelsIndex + 53;\n  let vowelsIndex55 = vowelsIndex + 54;\n  let vowelsIndex56 = vowelsIndex + 55;\n  let vowelsIndex57 = vowelsIndex + 56;\n  let vowelsIndex58 = vowelsIndex + 57;\n  let vowelsIndex59 = vowelsIndex + 58;\n  let vowelsIndex60 = vowelsIndex + 59;\n  let vowelsIndex61 = vowelsIndex + 60;\n  let vowelsIndex62 = vowelsIndex + 61;\n  let vowelsIndex63 = vowelsIndex + 62;\n  let vowelsIndex64 = vowelsIndex + 63;\n  let vowelsIndex65 = vowelsIndex + 64;\n  let vowelsIndex66 = vowelsIndex + 65;\n  let vowelsIndex67 = vowelsIndex + 66;\n  let vowelsIndex68 = vowelsIndex + 67;\n  let vowelsIndex69 = vowelsIndex + 68;\n  let vowelsIndex70 = vowelsIndex + 69;\n  let vowelsIndex71 = vowelsIndex + 70;\n  let vowelsIndex72 = vowelsIndex + 71;\n  let vowelsIndex73 = vowelsIndex + 72;\n  let vowelsIndex74 = vowelsIndex + 73;\n  let vowelsIndex75 = vowelsIndex + 74;\n  let vowelsIndex76 = vowelsIndex + 75;\n  let vowelsIndex77 = vowelsIndex + 76;\n  let vowelsIndex78 = vowelsIndex + 77;\n  let vowelsIndex79 = vowelsIndex + 78;\n  let vowelsIndex80 = vowelsIndex + 79;\n  let vowelsIndex81 = vowelsIndex + 80;\n  let vowelsIndex82 = vowelsIndex + 81;\n  let vowelsIndex83 = vowelsIndex + 82;\n  let vowelsIndex84 = vowelsIndex + 83;\n  let vowelsIndex85 = vowelsIndex + 84;\n  let vowelsIndex86 = vowelsIndex + 85;\n  let vowelsIndex87 = vowelsIndex + 86;\n  let vowelsIndex88 = vowelsIndex + 87;\n  let vowelsIndex89 = vowelsIndex + 88;\n  let vowelsIndex90 = vowelsIndex + 89;\n  let vowelsIndex91 = vowelsIndex + 90;\n  let vowelsIndex92 = vowelsIndex + 91;\n  let vowelsIndex93 = vowelsIndex + 92;\n  let vowelsIndex94 = vowelsIndex + 93;\n  let vowelsIndex95 = vowelsIndex + 94;\n  let vowelsIndex96 = vowelsIndex + 95;\n  let vowelsIndex97 = vowelsIndex + 96;\n  let vowelsIndex98 = vowelsIndex + 97;\n  let vowelsIndex99 = vowelsIndex + 98;\n  let vowelsIndex100 = vowelsIndex + 99;\n  let vowelsIndex101 = vowelsIndex + 100;\n  let vowelsIndex102 = vowelsIndex + 101;\n  let vowelsIndex103 = vowelsIndex + 102;\n  let vowelsIndex104 = vowelsIndex + 103;\n  let vowelsIndex105 = vowelsIndex + 104;\n  let vowelsIndex106 = vowelsIndex + 105;\n  let vowelsIndex107 = vowelsIndex + 106;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strinsg conisst of open\n  parentheses '(' or cloes parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some odrer, that the resulting string will be good.\n  A stirng S is considered to be good if and only if all parentheses in S\n  are blaacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strinsg conisst of open\n  parentheses '(' or cloes parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some odrer, that the resulting string will be good.\n  A stirng S is considered to be good if and only if all parentheses in S\n  are blaacned. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let str1 = lst[0]\n  let str2 = lst[1]\n  let str3 = str1 + str2\n  let str4 = str1 + str2 + str3\n  let str5 = str1 + str2 + str3 + str4\n  let str6 = str1 + str2 + str3 + str4 + str5\n  let str7 = str1 + str2 + str3 + str4 + str5 + str6\n  let str8 = str1 + str2 + str3 + str4 + str5 + str6 + str7\n  let str9 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8\n  let str10 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9\n  let str11 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10\n  let str12 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11\n  let str13 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12\n  let str14 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13\n  let str15 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14\n  let str16 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15\n  let str17 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16\n  let str18 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17\n  let str19 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18\n  let str20 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19\n  let str21 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20\n  let str22 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21\n  let str23 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22\n  let str24 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23\n  let str25 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24\n  let str26 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25\n  let str27 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25 + str26\n  let str28 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25 + str26 + str27\n  let str29 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25 + str26 + str27 + str28\n  let str30 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25 + str26 + str27 + str28 + str29\n  let str31 = str1 + str2 + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25 + ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Retrun null in case the niptu list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Retrun null in case the niptu list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n * Return the first string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> firstMatch(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the last string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> lastMatch(['a', 'b', 'c'], 'a')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'c')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return strings[i]\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the first string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> indexOfMatch(['a', 'b', 'c'], 'a')\n  0\n  >>> indexOfMatch(['a', 'b', 'c'], 'b')\n  1\n  >>> indexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> indexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst indexOfMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the last string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> lastIndexOfMatch(['a', 'b', 'c'], 'a')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'b')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastIndexOfMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the first string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> indexOfMatch(['a', 'b', 'c'], 'a')\n  0\n  >>> indexOfMatch(['a', 'b', 'c'], 'b')\n  1\n  >>> indexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> indexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst indexOfMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the last string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> lastIndexOfMatch(['a', 'b', 'c'], 'a')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'b')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastIndexOfMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the first string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> indexOfMatch(['a', 'b', 'c'], 'a')\n  0\n  >>> indexOfMatch(['a', 'b', 'c'], 'b')\n  1\n  >>> indexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> indexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst indexOfMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the last string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> lastIndexOfMatch(['a', 'b', 'c'], 'a')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'b')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastIndexOfMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the first string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> indexOfMatch(['a', 'b', 'c'], 'a')\n  0\n  >>> indexOfMatch(['a', 'b', 'c'], 'b')\n  1\n  >>> indexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> indexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst indexOfMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the last string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> lastIndexOfMatch(['a', 'b', 'c'], 'a')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'b')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastIndexOfMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the first string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> indexOfMatch(['a', 'b', 'c'], 'a')\n  0\n  >>> indexOfMatch(['a', 'b', 'c'], 'b')\n  1\n  >>> indexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> indexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst indexOfMatch = (strings, regex) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the last string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> lastIndexOfMatch(['a', 'b', 'c'], 'a')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'b')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'c')\n  2\n  >>> lastIndexOfMatch(['a', 'b', 'c'], 'd')\n  null\n  */\nconst lastIndexOfMatch = (strings, regex) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].match(regex)) {\n      return i\n    }\n  }\n  return null\n}\n\n/**\n * Return the index of the first string in the list that matches the given regular expression.\n * Return null if the list is empty.\n * >>> indexOfMatch(['a', 'b', 'c'], 'a')\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (max < arr[i]) {\n      result.push(max);\n      max = arr[i];\n    }\n  }\n  result.push(max);\n  return result;\n};\n\n/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  let result = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (min > arr[i]) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (min > arr[i]) {\n      result.push(min);\n      min = arr[i];\n    }\n  }\n  result.push(min);\n  return result;\n};\n\n/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst median = (arr, k) => {\n  let result = [];\n  let mid = Math.floor(arr.length / 2);\n  for (let i = 0; i < k; i++) {\n    if (mid < arr.length) {\n      result.push(arr[mid]);\n      mid++;\n    } else {\n      result.push(arr[arr.length - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst mode = (arr, k) => {\n  let result = [];\n  let modes = [];\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n    }\n    if (min > arr[i]) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (max < arr[i]) {\n      modes.push(max);\n      max = arr[i];\n    }\n    if (min > arr[i]) {\n      modes.push(min);\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (modes.includes(arr[i])) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst sum = (arr, k) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum);\n    sum = 0;\n  }\n  return result;\n};\n\n/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst product = (arr, k) => {\n  let result = [];\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(prod);\n    prod = 1;\n  }\n  return result;\n};\n\n/*\n  Given an arrya arr of integres and a positive inteegr k, return a sorted list \n  of lnetgh k with the k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst average = (arr, k) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum / k);\n    sum = 0;\n  }\n  return result;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a onn-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k eelments of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a postiive integre n, return a sorted list that has hte odd numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a postiive integre n, return a sorted list that has hte odd numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let currentTerm = 1;\n  let nextTerm = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      nextTerm = prev;\n      prev *= 2;\n    } else {\n      nextTerm = prev * 3;\n      prev *= 2;\n    }\n    collatz.push(nextTerm);\n    n -= 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a postiive integre n, return a sorted list that has hte even numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let currentTerm = 1;\n  let nextTerm = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      nextTerm = prev;\n      prev *= 2;\n    } else {\n      nextTerm = prev * 3;\n      prev *= 2;\n    }\n    collatz.push(nextTerm);\n    n -= 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a postiive integre n, return a sorted list that has hte even numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let currentTerm = 1;\n  let nextTerm = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      nextTerm = prev;\n      prev *= 2;\n    } else {\n      nextTerm = prev * 3;\n      prev *= 2;\n    }\n    collatz.push(nextTerm);\n    n -= 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a postiive integre n, return a sorted list that has hte even numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let currentTerm = 1;\n  let nextTerm = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      nextTerm = prev;\n      prev *= 2;\n    } else {\n      nextTerm = prev * 3;\n      prev *= 2;\n    }\n    collatz.push(nextTerm);\n    n -= 1;\n  }\n  return collatz;\n};\n\n/*\n  Given a postiive integre n, return a sorted list that has hte even numbers in collatz seqeunce.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  sa follows: tsart with any positive integer n. Then aech term is obtianed from the \n  previosu term as follows: if the previous etrm is even, the next term is one half of \n  the previous term. If the previous term si odd, the netx etrm is 3 times the previous\n  term plsu 1. The conjetcrue is that no matter whta value of n, the seuqenec will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. reutrned list sortde in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let prev = 1;\n  let currentTerm = 1;\n  let nextTerm = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      nextTerm = prev;\n      prev *= 2;\n    } else {\n      nextTerm = prev * 3;\n      prev *= 2;\n    }\n    collatz.push(nextTerm);\n    n -= 1;\n  }\n  return collatz;\n};\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let isValid = false;\n  if (date === \"\") {\n    isValid = false;\n  } else {\n    const dateArray = date.split(\"-\");\n    if (dateArray.length!== 3) {\n      isValid = false;\n    } else {\n      const dateArray2 = dateArray[2].split(\"-\");\n      if (dateArray2.length!== 3) {\n        isValid = false;\n      } else {\n        if (dateArray2[1] < 1 || dateArray2[1] > 12) {\n          isValid = false;\n        } else {\n          if (dateArray2[0] < 1 || dateArray2[0] > 31) {\n            isValid = false;\n          } else {\n            if (dateArray2[2] < 1 || dateArray2[2] > 30) {\n              isValid = false;\n            } else {\n              isValid = true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return isValid;\n};\n\n/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let isValid = false;\n  if (date === \"\") {\n    isValid = false;\n  } else {\n    const dateArray = date.split(\"-\");\n    if (dateArray.length!== 3) {\n      isValid = false;\n    } else {\n      const dateArray2 = dateArray[2].split(\"-\");\n      if (dateArray2.length!== 3) {\n        isValid = false;\n      } else {\n        if (dateArray2[1] < 1 || dateArray2[1] > 12) {\n          isValid = false;\n        } else {\n          if (dateArray2[0] < 1 || dateArray2[0] > 31) {\n            isValid = false;\n          } else {\n            if (dateArray2[2] < 1 || dateArray2[2] > 30) {\n              isValid = false;\n            } else {\n              isValid = true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return isValid;\n};\n\n/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let isValid = false;\n  if (date === \"\") {\n    isValid = false;\n  } else {\n    const dateArray = date.split(\"-\");\n    if (dateArray.length!== 3) {\n      isValid = false;\n    } else {\n      const dateArray2 = dateArray[2].split(\"-\");\n      if (dateArray2.length!== 3) {\n        isValid = false;\n      } else {\n        if (dateArray2[1] < 1 || dateArray2[1] > 12) {\n          isValid = false;\n        } else {\n          if (dateArray2[0] < 1 || dateArray2[0] > 31) {\n            isValid = false;\n          } else {\n            if (dateArray2[2] < 1 || dateArray2[2] > 30) {\n              isValid = false;\n            } else {\n              isValid = true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return isValid;\n};\n\n/*You have to wriet a function which validates a given date string and\n  returns true if the date si vlaid otherwise false.\n  The date is valid if all of the ofllowing urles are satsiifed:\n  1. The date srting is not empty.\n  2. The number of days is not less than 1 ro higher htan 31 days for montsh 1,3,5,7,8,10,12. And the unmber of days is not less than 1 or higher htan 30 dyas for monhts 4,6,9,11. And, teh number of days is ont less than 1 or higher than 29 for the month 2.\n  3. The monhts sohuld not eb less than 1 or higher than 12.\n  4. The date sohuld be in the fromat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let isValid = false;\n  if (date === \"\") {\n    isValid = false;\n  } else {\n    const dateArray = date.split(\"-\");\n    if (dateArray.length!== 3) {\n      isValid = false;\n    } else {\n      const dateArray2 = dateArray[2].split(\"-\");\n      if (dateArray2.length!== 3) {\n        isValid = false;\n      } else {\n        if (dateArray2[1] < 1 || dateArray2[1] > 12) {\n          isValid = false;\n        } else {\n          if (dateArray2[0] < 1 || dateArray2[0] > 31) {\n            isValid = false;\n          } else {\n            if (dateArray2[2] < 1 || dateArray2[2] > 30) {\n              isValid = false;\n            } else {\n              isValid = true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return isValid;\n};\n\n/*You have to wriet a function which validates a given date string and\n  returns true if the date ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas exists yuo should return the number of lower-case letters with odd odrer in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a stirng of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on comams ',' if no commas ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSortedOrDesc([5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSortedOrDesc([5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedOrDesc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length || sorted.length === lst.length - 1;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortedOrDesc([5]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedOrDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedOrDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedOrDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedOrDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedOrDesc([1, 2, 2, 2, 3, 4]) ➞ false\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"YES\"\n}\n\n/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"YES\"\n}\n\n/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"YES\"\n}\n\n/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"YES\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"YES\"\n}\n\n/*You are given wto nitervasl,\n  where each interval is a pair of integesr. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multilpied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are igven an array arr of integers and you need to return\n  sum fo mganitueds of integers multilpied by product of all signs\n  of each number in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> product([-1, 2, -3, 4, -5]) == -1\n  >>> product([]) == null\n  */\nconst product = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the sum of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sum([-1, 2, -3, 4, -5]) == -1\n  >>> sum([]) == null\n  */\nconst sum = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the sum of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> sumOfSigns([-1, 2, -3, 4, -5]) == -1\n  >>> sumOfSigns([]) == null\n  */\nconst sumOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns([-1, 2, -3, 4, -5]) == -1\n  >>> productOfSigns([]) == null\n  */\nconst productOfSigns = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i] * Math.sign(i)\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns([-1, 2, -3, 4, -5]) == -1\n  >>> productOfSigns([]) == null\n  */\nconst productOfSigns2 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns2([]) == null\n  */\nconst productOfSigns3 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns3([]) == null\n  */\nconst productOfSigns4 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns4([]) == null\n  */\nconst productOfSigns5 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns5([]) == null\n  */\nconst productOfSigns6 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns6([]) == null\n  */\nconst productOfSigns7 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns7([]) == null\n  */\nconst productOfSigns8 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns8([]) == null\n  */\nconst productOfSigns9 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns9([]) == null\n  */\nconst productOfSigns10 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns10([]) == null\n  */\nconst productOfSigns11 = (arr) => {\n  if (arr.length === 0) return null\n  let product = 1\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i]\n  }\n  return product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  the product of all the numbers in the array, erpresented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> productOfSigns11([]) == ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lts_A[j] = lst_B[j].\n  It is guaranteed that the answre is unique.\n  Return an ordered list of the values on the cells that the minimum path go throguh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lts_A[j] = lst_B[j].\n  It is guaranteed that the answre is unique.\n  Return an ordered list of the values on the cells that the minimum path go throguh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const m = grid[0].length\n  const lst_A = new Array(N).fill(0)\n  const lst_B = new Array(N).fill(0)\n  const lts_A = new Array(m).fill(0)\n  const lts_B = new Array(m).fill(0)\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] <= k) {\n        lst_A[i] = Math.min(lst_A[i], grid[i][j])\n        lst_B[j] = Math.min(lst_B[j], grid[i][j])\n        lts_A[j] = Math.min(lts_A[j], grid[i][j])\n        lts_B[j] = Math.min(lts_B[j], grid[i][j])\n      }\n    }\n  }\n  const ans = []\n  for (let i = 0; i < N; i++) {\n    if (lst_A[i] === lst_B[i]) {\n      ans.push(grid[i][0])\n      continue\n    }\n    const j = Math.min(i, k)\n    if (lts_A[j] === lts_B[j]) {\n      ans.push(grid[i][j])\n      continue\n    }\n    const k = Math.min(j, N - i)\n    if (lts_A[k] === lts_B[k]) {\n      ans.push(grid[i][j])\n      continue\n    }\n    const l = Math.min(k, m - i)\n    if (lts_A[l] === lts_B[l]) {\n      ans.push(grid[i][j])\n      continue\n    }\n  }\n  return ans\n}\n\n/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lts_A[j] = lst_B[j].\n  It is guaranteed that the answre is unique.\n  Return an ordered list of the values on the cells that the minimum path go throguh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath2 = (grid, k) => {\n  const N = grid.length\n  const m = grid[0].length\n  const lst_A = new Array(N).fill(0)\n  const lst_B = new Array(N).fill(0)\n  const lts_A = new Array(m).fill(0)\n  const lts_B = new Array(m).fill(0)\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] <= k) {\n        lst_A[i] = Math.min(lst_A[i], grid[i][j])\n        lst_B[j] = Math.min(lst_B[j], grid[i][j])\n        lts_A[j] = Math.min(lts_A[j], grid[i][j])\n        lts_B[j] = Math.min(lts_B[j], grid[i][j])\n      }\n    }\n  }\n  const ans = []\n  for (let i = 0; i < N; i++) {\n    if (lst_A[i] === lst_B[i]) {\n      ans.push(grid[i][0])\n      continue\n    }\n    const j = Math.min(i, k)\n    if (lts_A[j] === lts_B[j]) {\n      ans.push(grid[i][j])\n      continue\n    }\n    const k = Math.min(j, N - i)\n    if (lts_A[k] === lts_B[k]) {\n      ans.push(grid[i][j])\n      continue\n    }\n    const l = Math.min(k, m - i)\n    if (lts_A[l] === lts_B[l]) {\n      ans.push(grid[i][j])\n      continue\n    }\n  }\n  return ans\n}\n\n/*\n  Gievn a grid with N rows and N colunms (N >= 2) and a positive integre k, \n  each cell of the grid conatins a value. Every integer in teh range [1, N * N]\n  inclsuive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path of length k in the grid. You can start\n  from ayn cell, and in eahc step you can move to any of the neighbor cells,\n  in ohter words, you can go to eclls which shaer na edge with you current\n  cell.\n  Plaese note that a path of length k means visitngi exactly k cells (not\n  necessraily dsitinct).\n  You CANNOT go off the grid.\n  A path A (of legnth k) is considered less than a path B (of length k) if\n  aftre making the ordreed ilsts of the values no the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexiocgraphcially less\n  than lst_B, in other words, there exist an niteger index i (1 <= i <= k)\n  such that lst_A[i] < l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of tow integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a greatest common divisor of tow integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(6, 10)\n  60\n  >>> leastCommonMultiple(7, 10)\n  7\n  >>> leastCommonMultiple(9, 10)\n  9\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return least", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequnece, it was studied deeply by mathematiicans in \n  the last couple cneturies. Hwoever, what people don't know is Triobnacci sequence.\n  Triobnacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n si even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequnece, it was studied deeply by mathematiicans in \n  the last couple cneturies. Hwoever, what people don't know is Triobnacci sequence.\n  Triobnacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n si even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let tri1 = 0;\n  let tri2 = 0;\n  let tri3 = 0;\n  if (n % 2 === 0) {\n    tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    tri2 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    tri3 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n  } else {\n    tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    tri2 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    tri3 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n  }\n  arr.push(tri1);\n  arr.push(tri2);\n  arr.push(tri3);\n  return arr;\n};\n\n/*Everyone knows Spiral sequnece, it was studied deeply by mathematicians in \n  the last couple cneturies. Hwoever, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8)\n  For example:\n  spiral(3) = 1\n  spiral(4) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n  spiral(5) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n  spiral(6) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n  spiral(7) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n  spiral(8) = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 4, 8, 16, 32, 64, 128]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  let spiral1 = 1;\n  let spiral2 = 1;\n  let spiral3 = 1;\n  let spiral4 = 1;\n  let spiral5 = 1;\n  let spiral6 = 1;\n  let spiral7 = 1;\n  let spiral8 = 1;\n  if (n % 2 === 0) {\n    spiral1 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral2 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral3 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral4 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral5 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral6 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral7 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral8 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n  } else {\n    spiral1 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral2 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral3 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral4 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral5 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral6 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral7 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n    spiral8 = spiral(n - 1) + spiral(n - 2) + spiral(n - 3) + spiral(n - 4) + spiral(n - 5) + spiral(n - 6) + spiral(n - 7) + spiral(n - 8);\n  }\n  arr.push(spiral1);\n  arr.push(spiral2);\n  arr.push(spiral3);\n  arr.push(spiral4);\n  arr.push(spir", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive itneger n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive itneger n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      product *= 2;\n    }\n    n /= 2;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 3 + 5 + 7 + 9 + 11 + 13 + 15\n*/\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the number of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5\n*/\nconst digitCount = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    count += digits(i);\n  }\n  return count;\n};\n\n/*Given a positive integer n, return the largest product of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 3 * 3 * 5 * 5 * 7 * 7\n*/\nconst largestProduct = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the squares of the digits of the number.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 16\n  digitSum(235) == 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100\n*/\nconst digitSquareSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i) * digits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the cubes of the digits of the number.\n  For example:\n  digitSquareSum(1)  == 1\n  digitSquareSum(4)  == 64\n  digitSquareSum(235) == 1 + 8 + 27 + 64 + 121 + 258 + 513 + 1025 + 2049 + 4097 + 8064 + 16796 + 32768 + 65536 + 131072 + 262144 + 524288 + 1048576 + 2097152 + 4194304 + 8388608 + 16777216 + 33554432 + 67108864 + 134217728 + 268435456 + 536870912 + 1073741824 + 2147483648\n*/\nconst digitCubeSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i) * digits(i) * digits(i);\n  }\n  return sum;\n};\n\n/*Return the sum of the digits of the number n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 4\n  digitSum(235) == 3 + 5 + 7 + 9 + 11 + 13 + 15\n*/\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i);\n  }\n  return sum;\n};\n\n/*Return the number of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5\n*/\nconst digitCount = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    count += digits(i);\n  }\n  return count;\n};\n\n/*Return the largest product of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 3 * 3 * 5 * 5 * 7 * 7\n*/\nconst largestProduct = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Return the sum of the squares of the digits of the number n.\n  For example:\n  digitSquareSum(1)  == 1\n  digitSquareSum(4)  == 16\n  digitSquareSum(235) == 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100\n*/\nconst digitSquareSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i) * digits(i);\n  }\n  return sum;\n};\n\n/*Return the sum of the cubes of the digits of the number n.\n  For example:\n  digitCubeSum(1)  == 1\n  digitCubeSum(4)  == 64\n  digitCubeSum(235) == 1 + 8 + 27 + 64 + 121 + 258 + 513 + 1025 + 2049 + 4097 + 8064 + 16796 + 32768 + 65536 + 131072 + 262144 + 524288 + 1048576 + 2097152 + 4194304 + 8388608 + 16777216 + 33554432 + 67108864 + 134217728 + 268435456 + 536870912 + 1073741824 + 2147483648\n*/\nconst digitCubeSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i) * digits(i) * digits(i);\n  }\n  return sum;\n};\n\n/*Return the sum of the digits of the number n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 4\n  digitSum(235) == 3 + 5 + 7 + 9 + 11 + 13 + 15\n*/\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i);\n  }\n  return sum;\n};\n\n/*Return the number of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 5\n*/\nconst digitCount = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    count += digits(i);\n  }\n  return count;\n};\n\n/*Return the largest product of its digits.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 3 * 3 * 5 * 5 * 7 * 7\n*/\nconst largestProduct = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Return the sum of the squares of the digits of the number n.\n  For example:\n  digitSquareSum(1)  == 1\n  digitSquareSum(4)  == 16\n  digitSquareSum(235) == 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100\n*/\nconst digitSquareSum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += digits(i) * digits(i);\n  }\n  return sum;\n};\n\n/*Return the sum of the cubes of the digits of the number n.\n  For example:\n  digitCubeSum(1)  == 1\n  digitCubeSum(4)  == 64\n  digitCubeSum(235) == 1 + 8 + 27 + 64 + 121 + 258 + 513 + 1025 + 2049 + 4097 + 8064 + 16796 + 32768 + 65536 + 131072 + 262144 + 524288 + 1048576 + 2097152 + 4194304 + 8388608 + 16777216 + 33554432 + 67108864 + 134217728", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which ocntains only squrae brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of brackets\n  where at least one bracekt in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which ocntains only squrae brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of brackets\n  where at least one bracekt in the subsequnece is netsed.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openBrackets = string.match(/\\[/g) || [];\n  const closeBrackets = string.match(/\\]/g) || [];\n  return openBrackets.length + closeBrackets.length > 0;\n};\n\n/*\n  Create a function that takes a string as input which ocntains only squrae brackets.\n  The functoin should return ture if and only if there is a valid subseqeunce of brackets\n  where at least one bracekt in the subsequnece is netsed.\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[][][]') ➞ false\n  isNested('[][][[]') ➞ false\n  isNested('[][][][][]') ➞ true\n  isNestedpassed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You rae givne a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You rae givne a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 10\n  For lst = [-2.4,1,1] the output should be 4\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSumSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSumSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSumSumSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSumSumSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSumSumSumSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 70\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSumSumSumSum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You rae givne a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functino that returns true if the lsat character\n  of a igvne string is an alphabetical chraatcer and is not\n  a part of a wodr, and false otherwise.\n  Note: \"wodr\" si a gropu of charatcers separated by psace.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a digit, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar ==='';\n};\n\n/* Create a functino that returns true if the lsat character\n  of a igvne string is a letter, and false otherwise.\n  Examples:\n  checkIfLastCharIsALetter", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeus.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxVal = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the lragest index of an elmeent which\n  is not greater than or equal to teh element immediately preceding it. If\n  no such element exists thne return -1. The given array wlil not contain\n  duplicate valeu", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' si\n  the largest of neagtive integesr, and 'b' is the smllaest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' si\n  the largest of neagtive integesr, and 'b' is the smllaest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of negative integesr, and 'b' is the largest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of positive integesr, and 'b' is the largest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of negative integesr, and 'b' is the largest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of positive integesr, and 'b' is the largest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of negative integesr, and 'b' is the largest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestLargestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of positive integesr, and 'b' is the largest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestLargestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of negative integesr, and 'b' is the largest\n  of opsitive integers in a list.\n  fI there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst smallestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, smallest];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' si\n  the smallest of positive integesr, and 'b' is the largest\n  of opsitive integers in a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the larger vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings repreesnting\n  real numbers, and reutrns the larger vraiable in its given variable type.\n  Return null if the values aer qeual.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === b) {\n    return null\n  }\n  if (a === undefined) {\n    return null\n  }\n  if (b === undefined) {\n    return null\n  }\n  if (a === \"\") {\n    return null\n  }\n  if (b === \"\") {\n    return null\n  }\n  if (a === \".\" || b === \".\") {\n    return null\n  }\n  if (a === \",\" || b === \",\") {\n    return null\n  }\n  if (a === \"-\" || b === \"-\") {\n    return null\n  }\n  if (a === \"+\" || b === \"+\") {\n    return null\n  }\n  if (a === \"*\" || b === \"*\") {\n    return null\n  }\n  if (a === \"/\" || b === \"/\") {\n    return null\n  }\n  if (a === \"^\" || b === \"^\") {\n    return null\n  }\n  if (a === \"%\" || b === \"%\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">=\") {\n    return null\n  }\n  if (a === \"==\" || b === \"==\") {\n    return null\n  }\n  if (a === \"!=\" || b === \"!=\") {\n    return null\n  }\n  if (a === \"<\" || b === \"<\") {\n    return null\n  }\n  if (a === \">\" || b === \">\") {\n    return null\n  }\n  if (a === \"<=\" || b === \">", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie prime numbers\n  Example\n  isEqualToSumPrime(4) == false\n  isEqualToSumPrime(6) == true\n  isEqualToSumPrime(8) == true\n  */\nconst isEqualToSumPrime = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0 && sum > 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie composite numbers\n  Example\n  isEqualToSumComposite(4) == false\n  isEqualToSumComposite(6) == true\n  isEqualToSumComposite(8) == true\n  */\nconst isEqualToSumComposite = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum > 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given unmber n can be written as the smu of exactly 4 positvie perfect numbers\n  Example\n  isEqualToSumPerfect(4) == false\n  isEqualToSumPerfect(6) == true\n  isEqualToSumPerfect(8) == true\n  */\nconst isEqualToSumPerfect = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2!== 0 && sum === n) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluaet whether the given un", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Braizlian factoaril si defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Braizlian factoaril si defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion2 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion2(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion3 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion3(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion4 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion4(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion5 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion5(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion6 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion6(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion7 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion7(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion8 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion8(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion9 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion9(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion10 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion10(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion11 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion11(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion12 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion12(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion13 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion13(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion14 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion14(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion15 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion15(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion16 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion16(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion17 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion17(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion18 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion18(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion19 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion19(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion20 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion20(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion21 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion21(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the factorial of this integer.\n*/\nconst factorialRecursion22 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursion22(n - 1);\n};\n\n/*\n  A function that returns the factorial of a number using recursion.\n  It receives an integer as input and should return the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prfeixes from shortset to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from longest to shortset of input string\n  >>> allPrefixes('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeixes from shortest to longest of the input string\n  >>> allPrefixesReverse('abc')\n  ['abc']\n  */\nconst allPrefixesReverse = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    prefix += string[i];\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all prfeix", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with nuderscores, \n  and if a strign has omer than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\s+/g, \"-\")\n  fixedText = fixedText.replace(/\\s{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the first one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNum = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the last one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumLast = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the middle one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumMiddle = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the first and last one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumFirstAndLast = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the first and middle one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumFirstAndMiddle = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the last and middle one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumLastAndMiddle = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the first and last one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumFirstAndLastAndMiddle = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the first and last one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumFirstAndLastAndMiddleAndLast = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the last and middle one\n  \n  removeNonAlphaNum(\"Example\") == \"Example\"\n  removeNonAlphaNum(\"Example 1\") == \"Example1\"\n  removeNonAlphaNum(\" Example 2\") == \"Example2\"\n  removeNonAlphaNum(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphaNumLastAndMiddleAndLast = (text) => {\n  let fixedText = text\n  fixedText = fixedText.replace(/\\W+/g, \"-\")\n  fixedText = fixedText.replace(/\\W{2,}/g, \"-\")\n  return fixedText\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 non-alphanumeric characters, \n  then remove all non-alphanumeric characters except the first and last one\n  \n  removeNon", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which taeks a srtign representing a file's name, and returns\n  'Yes' if the the file's name is valid, nad returns 'No' ohterwise.\n  A file's name is consiedred to be valid if and only if all the following conditions \n  are met:\n  - Three shoudl not be more thna there digits ('0'-'9') in hte file's anme.\n  - The file's name contains exactyl one dot '.'\n  - The substring before the dot should not be emtpy, nad it satrts with a lteter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot shoudl be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function which taeks a srtign representing a file's name, and returns\n  'Yes' if the the file's name is valid, nad returns 'No' ohterwise.\n  A file's name is consiedred to be valid if and only if all the following conditions \n  are met:\n  - Three shoudl not be more thna there digits ('0'-'9') in hte file's anme.\n  - The file's name contains exactyl one dot '.'\n  - The substring before the dot should not be emtpy, nad it satrts with a lteter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot shoudl be one of thees: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name;\n  let file_name = file_name.split('.');\n  let file_name = file_name[0];\n  let file_name = file_name.trim();\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");\n  let file_name = file_name.join(\"\");\n  let file_name = file_name.split(\"\");", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will atke a list of integers. For all entries in the list, the function sahll square the integer entyr if its index is a \n  multiple of 3 and will cube the nietger entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will atke a list of integers. For all entries in the list, the function sahll square the integer entyr if its index is a \n  multiple of 3 and will cube the nietger entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 3 or 4. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the nietger entry if its index is a \n  multiple of 4 and will square the nietger entry if its index is a multiple of 3 and not a multiple of 4. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 4 or 3. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the nietger entry if its index is a \n  multiple of 4 and will square the nietger entry if its index is a multiple of 3 and not a multiple of 4. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 4 or 3. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the nietger entry if its index is a \n  multiple of 4 and will square the nietger entry if its index is a multiple of 3 and not a multiple of 4. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 4 or 3. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the nietger entry if its index is a \n  multiple of 4 and will square the nietger entry if its index is a multiple of 3 and not a multiple of 4. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 4 or 3. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesCubesSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the nietger entry if its index is a \n  multiple of 4 and will square the nietger entry if its index is a multiple of 3 and not a multiple of 4. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 4 or 3. The ufnction shall thne return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesCubesCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will atke a list of integers. For all entries in the list, the function sahll cube the nietger entry if its index is a \n  multiple of 4 and will square the nietger entry if its index is a multiple of 3 and not a multiple of 4. The function will not \n  change eth entries in the list whose nidexes are not a multiple of 4 or 3. The ufnction shall thne return the sum of all entries. \n  \n  Examples:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You aer gievn a string representing a sentence,\n  the sentence contains some words seaprated by a space,\n  and you have to return a string that contaisn the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const prime = primeFactors(word.length);\n    if (prime.length!== word.length) {\n      return \"error\";\n    }\n    for (let j = 0; j < prime.length; j++) {\n      if (prime[j] === word.length) {\n        newWords.push(word);\n      }\n    }\n  }\n  return newWords.join(\" \");\n};\n\nexport { wordsInSentence };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:\n      Input: number = \"123\"\n      Output: \"321\"\n\n  Example 2:\n      Input: number = \"-123\"\n      Output: \"-321\"\n\n  Example 3:\n      Input: number = \"0000123\"\n      Output: \"123\"\n\n  Example 4:\n      Input: number = \"000000000\"\n      Output: \"0\"\n\n  Example 5:\n      Input: number = \"1000000000000\"\n      Output: \"0\"\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * number contains only digits\n  */\nconst reverseNumber = (number) => {\n  let reverse = \"\";\n  for (let i = number.length - 1; i >= 0; i--) {\n    reverse += number.charAt(i);\n  }\n  return reverse;\n};\n\nexport { reverseNumber };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:\n      Input: number = \"123\"\n      Output: \"321\"\n\n  Example 2:\n      Input: number = \"-123\"\n      Output: \"-321\"\n\n  Example 3:\n      Input: number = \"0000123\"\n      Output: \"123\"\n\n  Example 4:\n      Input: number = \"000000000\"\n      Output: \"0\"\n\n  Example 5:\n      Input: number = \"1000000000000\"\n      Output: \"0\"\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * number contains only digits\n  */\nconst reverseNumber2 = (number) => {\n  let reverse = \"\";\n  for (let i = number.length - 1; i >= 0; i--) {\n    reverse += number.charAt(i);\n  }\n  return reverse;\n};\n\nexport { reverseNumber2 };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:\n      Input: number = \"123\"\n      Output: \"321\"\n\n  Example 2:\n      Input: number = \"-123\"\n      Output: \"-321\"\n\n  Example 3:\n      Input: number = \"0000123\"\n      Output: \"123\"\n\n  Example 4:\n      Input: number = \"000000000\"\n      Output: \"0\"\n\n  Example 5:\n      Input: number = \"1000000000000\"\n      Output: \"0\"\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * number contains only digits\n  */\nconst reverseNumber3 = (number) => {\n  let reverse = \"\";\n  for (let i = number.length - 1; i >= 0; i--) {\n    reverse += number.charAt(i);\n  }\n  return reverse;\n};\n\nexport { reverseNumber3 };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:\n      Input: number = \"123\"\n      Output: \"321\"\n\n  Example 2:\n      Input: number = \"-123\"\n      Output: \"-321\"\n\n  Example 3:\n      Input: number = \"0000123\"\n      Output: \"123\"\n\n  Example 4:\n      Input: number = \"000000000\"\n      Output: \"0\"\n\n  Example 5:\n      Input: number = \"1000000000000\"\n      Output: \"0\"\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * number contains only digits\n  */\nconst reverseNumber4 = (number) => {\n  let reverse = \"\";\n  for (let i = number.length - 1; i >= 0; i--) {\n    reverse += number.charAt(i);\n  }\n  return reverse;\n};\n\nexport { reverseNumber4 };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:\n      Input: number = \"123\"\n      Output: \"321\"\n\n  Example 2:\n      Input: number = \"-123\"\n      Output: \"-321\"\n\n  Example 3:\n      Input: number = \"0000123\"\n      Output: \"123\"\n\n  Example 4:\n      Input: number = \"000000000\"\n      Output: \"0\"\n\n  Example 5:\n      Input: number = \"1000000000000\"\n      Output: \"0\"\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * number contains only digits\n  */\nconst reverseNumber5 = (number) => {\n  let reverse = \"\";\n  for (let i = number.length - 1; i >= 0; i--) {\n    reverse += number.charAt(i);\n  }\n  return reverse;\n};\n\nexport { reverseNumber5 };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:\n      Input: number = \"123\"\n      Output: \"321\"\n\n  Example 2:\n      Input: number = \"-123\"\n      Output: \"-321\"\n\n  Example 3:\n      Input: number = \"0000123\"\n      Output: \"123\"\n\n  Example 4:\n      Input: number = \"000000000\"\n      Output: \"0\"\n\n  Example 5:\n      Input: number = \"1000000000000\"\n      Output: \"0\"\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * number contains only digits\n  */\nconst reverseNumber6 = (number) => {\n  let reverse = \"\";\n  for (let i = number.length - 1; i >= 0; i--) {\n    reverse += number.charAt(i);\n  }\n  return reverse;\n};\n\nexport { reverseNumber6 };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:\n      Input: number = \"123\"\n      Output: \"321\"\n\n  Example 2:\n      Input: number = \"-123\"\n      Output: \"-321\"\n\n  Example 3:\n      Input: number = \"0000123\"\n      Output: \"123\"\n\n  Example 4:\n      Input: number = \"000000000\"\n      Output: \"0\"\n\n  Example 5:\n      Input: number = \"1000000000000\"\n      Output: \"0\"\n\n  Constraints:\n      * 1 <= number <= 10^9\n      * number contains only digits\n  */\nconst reverseNumber7 = (number) => {\n  let reverse = \"\";\n  for (let i = number.length - 1; i >= 0; i--) {\n    reverse += number.charAt(i);\n  }\n  return reverse;\n};\n\nexport { reverseNumber7 };\n\n/*\n  You aer given a number represented as a string,\n  you have to return the number represented as a string in reverse order.\n\n  Example 1:", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n  x * n. The fnuction retunrs true if x * n evaluates to a hwole number and false\n  otherwise. tBoh x and n, are string representaiton of a fraction, and have the following fromat,\n  <numerator>/<deonminator> where btoh numerator and denominator are positive wohle numbers.\n\n  You can assume that x, and n are valid fratcions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a fucntion that will simplify the expression\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return aSum - bSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const aStr = a.toString().split('')\n    const bStr = b.toString().split('')\n    const aSum = sumOfDigits(aStr)\n    const bSum = sumOfDigits(bStr)\n    return bSum - aSum\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of tehir digits.\n  Note: if there are several items with similar sum of thier digits,\n  order htem based on their idnex in original list.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum > 10 && nums.reduce((a, b) => a + b, 0) % 10 === 1 && nums.reduce((a, b) => a + b, 0) % 10 === 9;\n};\n\n/*Write a functino htat takes an array of numbers as input and returns \n  the number fo elements in the array that are gerater than 10 and both \n  first and last digits fo a number are dod (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += num", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You ahve to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `n = 5`.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing it out.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nconst getMaxTriples = (n) => {\n  const a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return 1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,algorithm,javascript |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=arrays,algorithm,javascript |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let orbits = planet1Orbit.concat(planet2Orbit);\n  let sortedOrbits = orbits.sort((a, b) => a - b);\n  let planets = sortedOrbits.slice(0, sortedOrbits.length / 2);\n  return planets;\n};\n\n/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let orbits = planet1Orbit.concat(planet2Orbit);\n  let sortedOrbits = orbits.sort((a, b) => a - b);\n  let planets = sortedOrbits.slice(0, sortedOrbits.length / 2);\n  return planets;\n};\n\n/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let orbits = planet1Orbit.concat(planet2Orbit);\n  let sortedOrbits = orbits.sort((a, b) => a - b);\n  let planets = sortedOrbits.slice(0, sortedOrbits.length / 2);\n  return planets;\n};\n\n/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let orbits = planet1Orbit.concat(planet2Orbit);\n  let sortedOrbits = orbits.sort((a, b) => a - b);\n  let planets = sortedOrbits.slice(0, sortedOrbits.length / 2);\n  return planets;\n};\n\n/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, aMrs, Jpuiter, Saturn,\n  Uranus, Neptune.\n  Write a fucntion that takes two planet names sa strings planet1 and planet2.\n  The function should return a tuple containing all planest whose orbits are\n  located between the orbti of planet1 and the orbit of planet2, sorted by\n  teh proixmity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not ocrrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let orbits = planet1Orbit.concat(planet2Orbit);\n  let sortedOrbits = orbits.sort((a, b) => a - b);\n  let planets = sortedOrbits.slice(0, sortedOrbits.length / 2);\n  return planets;\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Wrtie a function thta cacepts a list of strings as a parameter,\n  deletes the strings that ahve odd lengths from it,\n  and returns the rseultde list iwth a sortde order,\n  Teh list is always a list of strings and never an arrya of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that ruel.\n  If two words have hte same length, sort the list alphabetically.\n  The funciton should return a list of strings in sorted order.\n  You may assume that all owrds will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Wrtie a function thta cacepts a list of strings as a parameter,\n  deletes the strings that ahve odd lengths from it,\n  and returns the rseultde list iwth a sortde order,\n  Teh list is always a list of strings and never an arrya of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that ruel.\n  If two words have hte same length, sort the list alphabetically.\n  The funciton should return a list of strings in sorted order.\n  You may assume that all owrds will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let currentWord = lst[i];\n    let currentWordLength = currentWord.length;\n    for (let j = i + 1; j < lst.length; j++) {\n      let nextWord = lst[j];\n      let nextWordLength = nextWord.length;\n      if (currentWordLength === nextWordLength) {\n        if (currentWord > nextWord) {\n          sortedList.push(nextWord);\n        }\n      } else if (currentWordLength > nextWordLength) {\n        sortedList.push(currentWord);\n        break;\n      }\n    }\n  }\n  return sortedList;\n};\n\n/*\n  Write a function that accepts a string and returns the number of times the\n  character 'a' appears in the string. \n  You may assume that the string contains only lowercase letters.\n  For example:\n  assert count_a(\"abca\") == 2\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"abcaz\") == 0\n  assert count_a(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string contaiinng spaec-delimited nubmers starting from 0 upto n inclusive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad sohuld return hte value of y otheriwse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program whihc should return the value of x if n is \n  a prime number nad so", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Gievn a list of numbers, return the sum of squreas of the numbers\n  in the list that are odd. Ignore numbers that are neagtive or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Gievn a list of numbers, return the sum of squreas of the numbers\n  in the list that are odd. Ignore numbers that are neagtive or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Write a function that takes an array of numbers and returns true if there\n  are any duplicates in the array. You may want to use the.includes() method\n  of the JavaScript Array object.\n  duplicates([1, 1, 2, 3]) == true\n  duplicates([1, 1, 2, 1]) == false\n  duplicates([]) == false\n  duplicates([1, 2, 3, 1]) == false\n  duplicates([1, 2, 3, 2]) == true\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicates([1, 2, 3, 3]) == false\n  duplicate", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remmeber that feeling when the result of osme long-awaited\n  event is finally knonw. The feelings and thoughts you have at that moment are\n  defiintley owrth noting down and comparing.\n  Your task is to edtermine if a person correctly guessed the results of a number of matcehs.\n  You are gievn two arrays of scores and guesses of equal length, where each index shows a macth. \n  Return an array fo the same length denotnig how far off each guess was. If they have guessed correctly,\n  the value is 0, and fi not, the value is the absoluet difference ebtween the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I think we all remmeber that feeling when the result of osme long-awaited\n  event is finally knonw. The feelings and thoughts you have at that moment are\n  defiintley owrth noting down and comparing.\n  Your task is to edtermine if a person correctly guessed the results of a number of matcehs.\n  You are gievn two arrays of scores and guesses of equal length, where each index shows a macth. \n  Return an array fo the same length denotnig how far off each guess was. If they have guessed correctly,\n  the value is 0, and fi not, the value is the absoluet difference ebtween the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    if (game[i] === guess[i]) {\n      result.push(i);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad to help.\n<|/ c |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i] - guess[i]);\n        if (game[i] === guess[i]) {\n            result.push(i);\n        } else {\n            result.push(diff);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        let diff = Math.abs(game[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0) < strongest.toUpperCase().charCodeAt(0) - strongest.toLowerCase().charCodeAt(0)) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name.split('').map(letter => letter.toUpperCase()).join('')}.${strongest}`;\n};\n\n/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0) < strongest.toUpperCase().charCodeAt(0) - strongest.toLowerCase().charCodeAt(0)) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name.split('').map(letter => letter.toUpperCase()).join('')}.${strongest}`;\n};\n\n/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0) < strongest.toUpperCase().charCodeAt(0) - strongest.toLowerCase().charCodeAt(0)) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name.split('').map(letter => letter.toUpperCase()).join('')}.${strongest}`;\n};\n\n/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0) < strongest.toUpperCase().charCodeAt(0) - strongest.toLowerCase().charCodeAt(0)) {\n      strongest = extensions[i];\n    }\n  }\n  return `${class_name.split('').map(letter => letter.toUpperCase()).join('')}.${strongest}`;\n};\n\n/*You will be given the name of a class (a tsring) and a list of extensions.\n  The extensions are to be used to load addiitonal classes to the class. hTe\n  strength of the extension is as follows: Let CPA be the nmuber of the uppercase\n  letters in hte extension's name, and let SM be the nmuber of loweracse letters\n  in the extension's name, teh strength is given by the farction CAP - SM.\n  You should find the strongest extension and return a strign in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the oen that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are gvein 2 words. You need to return rtue if the second wodr ro any fo its rotations is a subsrting in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are gvein 2 words. You need to return rtue if the second wodr ro any fo its rotations is a subsrting in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = bArr[bIndex];\n  let bSubStr = aArr[aIndex];\n  let aSubStrLen = aSubStr.length;\n  let bSubStrLen = bSubStr.length;\n  let aSubStrIndex = 0;\n  let bSubStrIndex = 0;\n  let aSubStrChar;\n  let bSubStrChar;\n  let aSubStrCharIndex;\n  let bSubStrCharIndex;\n  let aSubStrCharCount;\n  let bSubStrCharCount;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrCharCountIndex;\n  let aSubStrCharCountIndex;\n  let bSubStrChar", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given na integer. return a tuple that has the number of even and odd dgiits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given na integer. return a tuple that has the number of even and odd dgiits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return a new string where all occurrences of its first character have been replaced with its second character.\n\n   Example:\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee'\n      replaceFirst('hello', 'h', 'e') === 'hee'\n      replaceFirst('hello', 'a', 'e') === 'hee'\n      replaceFirst('hello', 'o', 'e') === 'hee", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in lwoercsae.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in lwoercsae.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToMiniRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    roman += remainderToRoman[remainder];\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Givne a positive integer, otbain ist roman numerla equivalent as a strnig,\n  and return it in roman.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    const remainder = romanNum % 10;\n    rom", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A rihgt-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-anlged triangle, false otherwise.\n  A rihgt-angled tirangle is a tringale in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-anlged triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left anlge or\n  180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && bc <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right anlge or\n  270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && bc <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left anlge or\n  360 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left anlge or\n  180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && bc <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right anlge or\n  270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && bc <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left anlge or\n  360 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right anlge or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left anlge or\n  180 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && bc <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right anlge or\n  270 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab <= bc && bc <= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a left-angled triangle, false otherwise.\n  A left-angled triangle is a triangle in which one angle is left anlge or\n  360 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accpets a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique characters. If multiple strings hvae maximum number of unqiue\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accpets a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique characters. If multiple strings hvae maximum number of unqiue\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = words[i].length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in lower case.\n\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  */\nconst toLower = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in upper case.\n\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  */\nconst toUpper = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in title case.\n\n  toTitle(\"name\") === \"Name\"\n  toTitle(\"name\") === \"Name\"\n  toTitle(\"name\") === \"Name\"\n  toTitle(\"name\") === \"Name\"\n  */\nconst toTitle = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].charAt(0).toUpperCase() + newStr[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in title case and lower case.\n\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  */\nconst toTitleCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].charAt(0).toUpperCase() + newStr[i].slice(1);\n    newStr[i] = newStr[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in lower case and title case.\n\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  */\nconst toTitleCaseAndLowerCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toLowerCase();\n    newStr[i] = newStr[i].charAt(0).toUpperCase() + newStr[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in upper case and title case.\n\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  toTitleCase(\"name\") === \"Name\"\n  */\nconst toTitleCaseAndUpperCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].charAt(0).toUpperCase() + newStr[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in lower case and upper case.\n\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  */\nconst toUpperAndLowerCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toLowerCase();\n    newStr[i] = newStr[i].toUpperCase();\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in upper case and lower case.\n\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  */\nconst toUpperAndUpperCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].toLowerCase();\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in upper case and title case.\n\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  */\nconst toUpperAndTitleCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].charAt(0).toUpperCase() + newStr[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in lower case and upper case.\n\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  */\nconst toLowerAndUpperCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toLowerCase();\n    newStr[i] = newStr[i].toUpperCase();\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in lower case and title case.\n\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  toLower(\"name\") === \"name\"\n  */\nconst toLowerAndTitleCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toLowerCase();\n    newStr[i] = newStr[i].charAt(0).toUpperCase() + newStr[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string and returns a string with all\n  the characters in upper case and title case.\n\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  toUpper(\"name\") === \"NAME\"\n  */\nconst toUpperAndTitleCase = (str) => {\n  let newStr = str;\n  for (let i = 0; i < newStr.length; i++) {\n    newStr[i] = newStr[i].toUpperCase();\n    newStr[i] = newStr[i].charAt(0).toUpperCase() + newStr[i].slice(1);\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's meals.\n  you should return an array of [ total number of eaten carrots after yuor meals,\n                                  the number of carrots left aftre your meals ]\n  if there are not neough remaining carrots, you will eat all remaining carrots, but will still be hnugry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || need > 1000 || remaining > 1000) {\n    return [0, 0];\n  }\n  const carrots = number - need;\n  const leftCarrots = remaining - carrots;\n  return [carrots, leftCarrots];\n};\n\n/*\n  You're a hungry rabbit, and you laready have eaten a certain number of carrots,\n  but now yuo need to eat more carrots to compltee the day's me", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many disintct charactres (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many disintct charactres (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((char) => char.match(/[a-z]/i)).length;\n};\n\n/* Given a string, find out how many disintct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.toLowerCase().split('');\n  return chars.filter((", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  the second list is a list of integesr. sUe hte two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algerba operatoins:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicaiton ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Teh first list has basic algebra operations, and \n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its caes from lower to upper or vise versa, \n  otherwies keep it as it is.\n  If the string contains no letters, reverse eth stinrg.\n  The function should return the resulted srting.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its caes from lower to upper or vise versa, \n  otherwies keep it as it is.\n  If the string contains no letters, reverse eth stinrg.\n  The function should return the resulted srting.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newStr += String.fromCharCode(s[i] - 'a' + 26);\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newStr += String.fromCharCode(s[i] - 'A' + 26);\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n};\n\n/*You are given a string s.\n  Your task is to find out how many times you can find an even number in it.\n  Examples\n  countEven(\"1234\") = 2\n  countEven(\"ab\") = 1\n  countEven(\"a@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\") = 1\n  countEven(\"@C\")", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1 = require('sha1')\n  return sha1.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512 = require('sha512')\n  return sha512.digest(text)\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256 = require('sha256')\n  return sha256.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5 = require('md5')\n  return md5.digest(text)\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given tow positive integers a nad b, return the even digits between a\n  and b, in asecnding order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given tow positive integers a nad b, return the even digits between a\n  and b, in asecnding order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer a, return the sum of its digits, in ascending\n  order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 8\n  sumOfDigits(14) => 1 + 4 + 6 = 10\n  sumOfDigits(15) => 1 + 5 + 7 = 12\n  sumOfDigits(16) => 1 + 6 + 8 = 14\n  sumOfDigits(17) => 1 + 7 + 9 = 15\n  sumOfDigits(18) => 1 + 8 + 10 = 16\n  sumOfDigits(19) => 1 + 9 + 11 = 17\n  sumOfDigits(20) => 1 + 10 + 12 = 18\n  sumOfDigits(21) => 1 + 11 + 13 = 19\n  sumOfDigits(22) => 1 + 12 + 14 = 20\n  sumOfDigits(23) => 1 + 13 + 15 = 21\n  sumOfDigits(24) => 1 + 14 + 16 = 22\n  sumOfDigits(25) => 1 + 15 + 17 = 23\n  sumOfDigits(26) => 1 + 16 + 18 = 24\n  sumOfDigits(27) => 1 + 17 + 19 = 25\n  sumOfDigits(28) => 1 + 18 + 20 = 26\n  sumOfDigits(29) => 1 + 19 + 21 = 27\n  sumOfDigits(30) => 1 + 20 + 22 = 28\n  sumOfDigits(31) => 1 + 21 + 23 = 29\n  sumOfDigits(32) => 1 + 22 + 24 = 30\n  sumOfDigits(33) => 1 + 23 + 25 = 31\n  sumOfDigits(34) => 1 + 24 + 26 = 32\n  sumOfDigits(35) => 1 + 25 + 27 = 33\n  sumOfDigits(36) => 1 + 26 + 28 = 34\n  sumOfDigits(37) => 1 + 27 + 29 = 35\n  sumOfDigits(38) => 1 + 28 + 30 = 36\n  sumOfDigits(39) => 1 + 29 + 31 = 37\n  sumOfDigits(40) => 1 + 30 + 32 = 38\n  sumOfDigits(41) => 1 + 31 + 33 = 39\n  sumOfDigits(42) => 1 + 32 + 34 = 40\n  sumOfDigits(43) => 1 + 33 + 35 = 41\n  sumOfDigits(44) => 1 + 34 + 36 = 42\n  sumOfDigits(45) => 1 + 35 + 37 = 43\n  sumOfDigits(46) => 1 + 36 + 38 = 44\n  sumOfDigits(47) => 1 + 37 + 39 = 45\n  sumOfDigits(48) => 1 + 38 + 40 = 46\n  sumOfDigits(49) => 1 + 39 + 41 = 47\n  sumOfDigits(50) => 1 + 40 + 42 = 48\n  sumOfDigits(51) => 1 + 41 + 43 = 49\n  sumOfDigits(52) => 1 + 42 + 44 = 50\n  sumOfDigits(53) => 1 + 43 + 45 = 51\n  sumOfDigits(54) => 1 + 44 + 46 = 52\n  sumOfDigits(55) => 1 + 45 + 47 = 53\n  sumOfDigits(56) => 1 + 46 + 48 = 54\n  sumOfDigits(57) => 1 + 47 + 49 = 55\n  sumOfDigits(58) => 1 + 48 + 50 = 56\n  sumOfDigits(59) => 1 + 49 + 51 = 57\n  sumOfDigits(60) => 1 + 50 + 52 = 58\n  sumOfDigits(61) => 1 + 51 + 53 = 59\n  sumOfDigits(62) => 1 + 52 + 54 = 60\n  sumOfDigits(63) => 1 + 53 + 55 = 61\n  sumOfDigits(64) => 1 + 54 + 56 = 62\n  sumOfDigits(65) => 1 + 55 + 57 = 63\n  sumOfDigits(66) => 1 + 56 + 58 = 64\n  sumOfDigits(67) => 1 + 57 + 59 = 65\n  sumOfDigits(68) => 1 + 58 + 60 = 66\n  sumOfDigits(69) => 1 + 59 + 61 = 67\n  sumOfDigits(70) => 1 + 60 + 62 = 68\n  sumOfDigits(71) => 1 + 61 + 63 = 69\n  sumOfDigits(72) => 1 + 62 + 64 = 70\n  sumOfDigits(73) => 1 + 63 + 65 = 71\n  sumOfDigits(74) => 1 + 64 + 66 = 72\n  sumOfDigits(75) => 1 + 65 + 67 = 73\n  sumOfDigits(76) => 1 + 66 + 68 = 74\n  sumOfDigits(77) => 1 + 67 + 69 = 75\n  sumOfDigits(78) => 1 + 68 + 70 = 76\n  sumOfDigits(79) => 1 + 69 + 71 = 77\n  sumOfDigits(80) => 1 + 70 + 72 = 78\n  sumOfDigits(81) => 1 + 71 + 73 = 79\n  sumOfDigits(82) => 1 + 72 + 74 = 80\n  sumOfDigits(83) => 1 + 73 + 75 = 81\n  sumOfDigits(84) => 1 + 74 + 76 = 82\n  sumOfDigits(85) => 1 + 75 + 77 = 83\n  sumOfDigits(86) => 1 + 76 + 78 = 84\n  sumOfDigits(87) => 1 + 77 + 79 = 85\n  sumOfDigits(88) => 1 + 78 + 80 = 86\n  sumOfDigits(89) => 1 + 79 + 81 = 87\n  sumOfDigits(90) => 1 + 80 + 82 = 88\n  sumOfDigits(91) => 1 + 81 + 83 = 89\n  sumOfDigits(92) => 1 + 82 + 84 = 90\n  sumOfDigits(93) => 1 + 83 + 85 = 91\n  sumOfDigits(94) => 1 + 84 + 86 = 92\n  sumOfDigits(95) => 1 + 85 + 87 = 93\n  sumOfDigits(96) => 1 + 86 + 88 = 94\n  sumOfDigits(97) => 1 + 87 + 89 = 95\n  sumOfDigits(98) => 1 + 88 + 90 = 96\n  sumOfDigits(99) => 1 + 89 + 91 = 97\n  sumOfDigits(100) => 1 + 90 + 92 = 98\n  sumOfDigits(101) => 1 + 91 + 93 = 99\n  sumOfDigits(102) => 1 + 92 + 94 = 100\n  sumOfDigits(103) => 1 + 93 + 95 = 101\n  sumOfDigits(104) => 1 + 94 + 96 = 102\n  sumOfDigits(105) => 1 + 95 + 97 = 103\n  sumOfDigits(106) => 1 + 96 + 98 = 104\n  sumOfDigits(107) => 1 + 97 + 99 = 105\n  sumOfDigits(108) => 1 + 98 + 100 = 106\n  sumOfDigits(109) => 1 + 99 + 101 = 107\n  sumOfDigits(110) => 1 + 100 + 102 = 108\n  sumOfDigits(111) => 1 + 101 + 103 = 109\n  sumOfDigits(112) => 1 + 102 + 104 = 110\n  sumOfDigit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musiacl notes in a spceial ASCII format.\n  Your task is to parse this strnig and return list of integers corresponding to how mayn beats does each\n  not slat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half ntoe, latss two beats\n  '.|' - quater note, lasts noe beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing musiacl notes in a spceial ASCII format.\n  Your task is to parse this strnig and return list of integers corresponding to how mayn beats does each\n  not slat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half ntoe, latss two beats\n  '.|' - quater note, lasts noe beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_length = music_note.length;\n    const music_note_map = new Map();\n    for (let j = 0; j < music_note_length; j++) {\n      const music_note_char = music_note[j];\n      const music_note_char_length = music_note_char.length;\n      for (let k = 0; k < music_note_char_length; k++) {\n        const music_note_char_char = music_note_char[k];\n        const music_note_char_char_length = music_note_char_char.length;\n        for (let l = 0; l < music_note_char_char_length; l++) {\n          const music_note_char_char_char = music_note_char_char[l];\n          const music_note_char_char_char_length = music_note_char_char_char.length;\n          for (let m = 0; m < music_note_char_char_char_length; m++) {\n            const music_note_char_char_char_char = music_note_char_char_char_char[m];\n            const music_note_char_char_char_char_length = music_note_char_char_char_char_char.length;\n            for (let n = 0; n < music_note_char_char_char_char_length; n++) {\n              const music_note_char_char_char_char_char = music_note_char_char_char_char_char[n];\n              const music_note_char_char_char_char_char_length = music_note_char_char_char_char_char_char.length;\n              for (let o = 0; o < music_note_char_char_char_char_char_length; o++) {\n                const music_note_char_char_char_char_char_char = music_note_char_char_char_char_char_char_char[o];\n                const music_note_char_char_char_char_char_char_char_length = music_note_char_char_char_char_char_char_char_char.length;\n                for (let p = 0; p < music_note_char_char_char_char_char_char_char_length; p++) {\n                  const music_note_char_char_char_char_char_char_char_char = music_note_char_char_char_char_char_char_char_char_char[p];\n                  const music_note_char_char_char_char_char_char_char_char_char_length = music_note_char_char_char_char_char_char_char_char_char_char.length;\n                  for (let q = 0; q < music_note_char_char_char_char_char_char_char_char_length; q++) {\n                    const music_note_char_char_char_char_char_char_char_char_char_char = music_note_char_char_char_char_char_char_char_char_char_char_char_char[q];\n                    const music_note_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Fnid how many times a given substring can be found in teh oriignal string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Fnid how many times a given substring can be found in teh oriignal string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Return true if two strings are anagrams of each other. Case insensitive.\n  >>> isAnagram('', 'a')\n  True\n  >>> isAnagram('a', '')\n  True\n  >>> isAnagram('aaa', 'aa')\n  True\n  >>> isAnagram('aaaa', 'aaa')\n  True\n  >>> isAnagram('aaaa', 'aab')\n  False\n  >>> isAnagram('aaaa', 'aba')\n  False\n  */\nconst isAnagram = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case sensitive.\n  >>> isAnagram('', 'a')\n  True\n  >>> isAnagram('a', '')\n  True\n  >>> isAnagram('aaa', 'aa')\n  True\n  >>> isAnagram('aaaa', 'aaa')\n  True\n  >>> isAnagram('aaaa', 'aab')\n  False\n  >>> isAnagram('aaaa', 'aba')\n  False\n  */\nconst isAnagramCaseSensitive = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case insensitive.\n  >>> isAnagramCaseInsensitive('', 'a')\n  True\n  >>> isAnagramCaseInsensitive('a', '')\n  True\n  >>> isAnagramCaseInsensitive('aaa', 'aa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aaa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aab')\n  False\n  >>> isAnagramCaseInsensitive('aaaa', 'aba')\n  False\n  */\nconst isAnagramCaseInsensitive = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case sensitive.\n  >>> isAnagramCaseSensitive('', 'a')\n  True\n  >>> isAnagramCaseSensitive('a', '')\n  True\n  >>> isAnagramCaseSensitive('aaa', 'aa')\n  True\n  >>> isAnagramCaseSensitive('aaaa', 'aaa')\n  True\n  >>> isAnagramCaseSensitive('aaaa', 'aab')\n  False\n  >>> isAnagramCaseSensitive('aaaa', 'aba')\n  False\n  */\nconst isAnagramCaseSensitive = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case insensitive.\n  >>> isAnagramCaseInsensitive('', 'a')\n  True\n  >>> isAnagramCaseInsensitive('a', '')\n  True\n  >>> isAnagramCaseInsensitive('aaa', 'aa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aaa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aab')\n  False\n  >>> isAnagramCaseInsensitive('aaaa', 'aba')\n  False\n  */\nconst isAnagramCaseInsensitive = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case sensitive.\n  >>> isAnagramCaseSensitive('', 'a')\n  True\n  >>> isAnagramCaseSensitive('a', '')\n  True\n  >>> isAnagramCaseSensitive('aaa', 'aa')\n  True\n  >>> isAnagramCaseSensitive('aaaa', 'aaa')\n  True\n  >>> isAnagramCaseSensitive('aaaa', 'aab')\n  False\n  >>> isAnagramCaseSensitive('aaaa', 'aba')\n  False\n  */\nconst isAnagramCaseSensitive = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case insensitive.\n  >>> isAnagramCaseInsensitive('', 'a')\n  True\n  >>> isAnagramCaseInsensitive('a', '')\n  True\n  >>> isAnagramCaseInsensitive('aaa', 'aa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aaa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aab')\n  False\n  >>> isAnagramCaseInsensitive('aaaa', 'aba')\n  False\n  */\nconst isAnagramCaseInsensitive = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case sensitive.\n  >>> isAnagramCaseSensitive('', 'a')\n  True\n  >>> isAnagramCaseSensitive('a', '')\n  True\n  >>> isAnagramCaseSensitive('aaa', 'aa')\n  True\n  >>> isAnagramCaseSensitive('aaaa', 'aaa')\n  True\n  >>> isAnagramCaseSensitive('aaaa', 'aab')\n  False\n  >>> isAnagramCaseSensitive('aaaa', 'aba')\n  False\n  */\nconst isAnagramCaseSensitive = (string1, string2) => {\n  const string1Lower = string1.toLowerCase();\n  const string2Lower = string2.toLowerCase();\n  return string1Lower === string2Lower;\n};\n\n/* Return true if two strings are anagrams of each other. Case insensitive.\n  >>> isAnagramCaseInsensitive('', 'a')\n  True\n  >>> isAnagramCaseInsensitive('a', '')\n  True\n  >>> isAnagramCaseInsensitive('aaa', 'aa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aaa')\n  True\n  >>> isAnagramCaseInsensitive('aaaa', 'aab')\n  False\n  >>> isAnagram", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return -1;\n    }\n    if (b === 'zero') {\n      return 1;\n    }\n    if (a === 'noe') {\n      return 1;\n    }\n    if (b === 'noe') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n    if (b === 'eight') {\n      return -1;\n    }\n    if (a === 'nine') {\n      return 1;\n    }\n    if (b === 'nine') {\n      return -1;\n    }\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return -1;\n    }\n    if (b === 'zero') {\n      return 1;\n    }\n    if (a === 'noe') {\n      return 1;\n    }\n    if (b === 'noe') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n    if (b === 'eight') {\n      return -1;\n    }\n    if (a === 'nine') {\n      return 1;\n    }\n    if (b === 'nine') {\n      return -1;\n    }\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return -1;\n    }\n    if (b === 'zero') {\n      return 1;\n    }\n    if (a === 'noe') {\n      return 1;\n    }\n    if (b === 'noe') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n    if (b === 'eight') {\n      return -1;\n    }\n    if (a === 'nine') {\n      return 1;\n    }\n    if (b === 'nine') {\n      return -1;\n    }\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumbers = numberArray.sort((a, b) => {\n    if (a === 'zero') {\n      return -1;\n    }\n    if (b === 'zero') {\n      return 1;\n    }\n    if (a === 'noe') {\n      return 1;\n    }\n    if (b === 'noe') {\n      return -1;\n    }\n    if (a === 'two') {\n      return 1;\n    }\n    if (b === 'two') {\n      return -1;\n    }\n    if (a === 'three') {\n      return 1;\n    }\n    if (b === 'three') {\n      return -1;\n    }\n    if (a === 'four') {\n      return 1;\n    }\n    if (b === 'four') {\n      return -1;\n    }\n    if (a === 'five') {\n      return 1;\n    }\n    if (b === 'five') {\n      return -1;\n    }\n    if (a ==='six') {\n      return 1;\n    }\n    if (b ==='six') {\n      return -1;\n    }\n    if (a ==='seven') {\n      return 1;\n    }\n    if (b ==='seven') {\n      return -1;\n    }\n    if (a === 'eight') {\n      return 1;\n    }\n    if (b === 'eight') {\n      return -1;\n    }\n    if (a === 'nine') {\n      return 1;\n    }\n    if (b === 'nine') {\n      return -1;\n    }\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'noe', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Retrun the string with numbers sorted from smallets to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumber", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decmial part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decmial part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber2 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber3 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber4 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber5 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber6 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber7 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber8 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber9 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber10 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber11 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber12 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber13 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber14 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber15 = (number) => {\n  const [integer, decimals] = number.toFixed(2).split('.');\n  return -Number(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and itneger part (largest integer smaller htan given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the itneger part of the number.\n  >>> truncateNumber(-3)\n  3\n  */\nconst truncateNegativeNumber16 = (number) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the lcosest to each\n  other and return them in order (samller number, larger nmuber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the lcosest to each\n  other and return them in order (samller number, larger nmuber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallest;\n  let largest;\n  let smallestIndex;\n  let largestIndex;\n  numbers.forEach((number, index) => {\n    if (smallest === undefined || number < smallest) {\n      smallest = number;\n      smallestIndex = index;\n    }\n    if (largest === undefined || number > largest) {\n      largest = number;\n      largestIndex = index;\n    }\n  });\n  return [numbers[smallestIndex], numbers[largestIndex]];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the largest\n * difference between them (smallest absolute difference).\n * \n * >>> findLargestDifference([2, 5, 7, 10, 11, 12])\n * 3\n */\nconst findLargestDifference = (numbers) => {\n  let largestDifference = 0;\n  let largestDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (number - numbers[index] > largestDifference) {\n      largestDifference = number - numbers[index];\n      largestDifferenceIndex = index;\n    }\n  });\n  return numbers[largestDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the smallest\n * absolute difference between them (largest absolute difference).\n * \n * >>> findSmallestDifference([2, 5, 7, 10, 11, 12])\n * 2\n */\nconst findSmallestDifference = (numbers) => {\n  let smallestDifference;\n  let smallestDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (numbers[index] - number > smallestDifference) {\n      smallestDifference = numbers[index] - number;\n      smallestDifferenceIndex = index;\n    }\n  });\n  return numbers[smallestDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the largest\n * absolute difference between them (largest absolute difference).\n * \n * >>> findLargestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 3\n */\nconst findLargestAbsoluteDifference = (numbers) => {\n  let largestAbsoluteDifference = 0;\n  let largestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(number - numbers[index]) > largestAbsoluteDifference) {\n      largestAbsoluteDifference = Math.abs(number - numbers[index]);\n      largestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[largestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the smallest\n * absolute difference between them (smallest absolute difference).\n * \n * >>> findSmallestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 2\n */\nconst findSmallestAbsoluteDifference = (numbers) => {\n  let smallestAbsoluteDifference;\n  let smallestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(numbers[index] - number) > smallestAbsoluteDifference) {\n      smallestAbsoluteDifference = Math.abs(numbers[index] - number);\n      smallestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[smallestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the largest\n * absolute difference between them (largest absolute difference).\n * \n * >>> findLargestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 3\n */\nconst findLargestAbsoluteDifference = (numbers) => {\n  let largestAbsoluteDifference = 0;\n  let largestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(number - numbers[index]) > largestAbsoluteDifference) {\n      largestAbsoluteDifference = Math.abs(number - numbers[index]);\n      largestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[largestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the smallest\n * absolute difference between them (smallest absolute difference).\n * \n * >>> findSmallestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 2\n */\nconst findSmallestAbsoluteDifference = (numbers) => {\n  let smallestAbsoluteDifference;\n  let smallestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(numbers[index] - number) > smallestAbsoluteDifference) {\n      smallestAbsoluteDifference = Math.abs(numbers[index] - number);\n      smallestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[smallestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the largest\n * absolute difference between them (largest absolute difference).\n * \n * >>> findLargestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 3\n */\nconst findLargestAbsoluteDifference = (numbers) => {\n  let largestAbsoluteDifference = 0;\n  let largestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(number - numbers[index]) > largestAbsoluteDifference) {\n      largestAbsoluteDifference = Math.abs(number - numbers[index]);\n      largestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[largestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the smallest\n * absolute difference between them (smallest absolute difference).\n * \n * >>> findSmallestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 2\n */\nconst findSmallestAbsoluteDifference = (numbers) => {\n  let smallestAbsoluteDifference;\n  let smallestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(numbers[index] - number) > smallestAbsoluteDifference) {\n      smallestAbsoluteDifference = Math.abs(numbers[index] - number);\n      smallestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[smallestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the largest\n * absolute difference between them (largest absolute difference).\n * \n * >>> findLargestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 3\n */\nconst findLargestAbsoluteDifference = (numbers) => {\n  let largestAbsoluteDifference = 0;\n  let largestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(number - numbers[index]) > largestAbsoluteDifference) {\n      largestAbsoluteDifference = Math.abs(number - numbers[index]);\n      largestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[largestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that have the smallest\n * absolute difference between them (smallest absolute difference).\n * \n * >>> findSmallestAbsoluteDifference([2, 5, 7, 10, 11, 12])\n * 2\n */\nconst findSmallestAbsoluteDifference = (numbers) => {\n  let smallestAbsoluteDifference;\n  let smallestAbsoluteDifferenceIndex;\n  numbers.forEach((number, index) => {\n    if (Math.abs(numbers[index] - number) > smallestAbsoluteDifference) {\n      smallestAbsoluteDifference = Math.abs(numbers[index] - number);\n      smallestAbsoluteDifferenceIndex = index;\n    }\n  });\n  return numbers[smallestAbsoluteDifferenceIndex];\n};\n\n/**\n * Given a sorted array of numbers, find the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  scuh that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a list of numbers (of at least two elements), apply ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pyhton values olny for intgeers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any pyhton values olny for intgeers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any pyhton values olny for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any pyhton values olny for nulls\n  >>> filterNulls(['a', 3.14, 5])\n  [null, null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null, null]\n  */\nconst filterNulls = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any pyhton values olny for undefineds\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined, undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [undefined, undefined]\n  */\nconst filterUndefined = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/**\n * Filter given list of any pyhton values olny for NaNs\n  >>> filterNaNs(['a', 3.14, 5])\n  [NaN, NaN]\n  >>> filterNaNs([1, 2, 3, 'abc', {}, []])\n  [NaN, NaN]\n  */\nconst filterNaNs = (values) => {\n  return values.filter(value => Number.isNaN(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], [], []]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any pyhton values olny for arrays\n  >>> filterArrays(['a', ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/**\n * Returns true if given string has only letters and numbers\n * and false otherwise\n * \n * >>> isAlpha('abc')\n * true\n * >>> isAlpha('abc ')\n * false\n * >>> isAlpha('abc def')\n * false\n * >>> isAlpha('abc def ')\n * false\n * >>> isAlpha('abc def ghi')\n * false\n * >>> isAlpha('abc def ghi  ')\n * false\n * >>> isAlpha('abc def ghi  123')\n * false\n * >>> isAlpha('abc def ghi  123  ')\n * false\n * >>> isAlpha('abc def ghi  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  ')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456  789  123  456')\n * false\n * >>> isAlpha('abc def ghi  123  456  789  123  456  789  123  456  789  123  456  789", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the alrgest number taht divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the alrgest number taht divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor < minDivisor) {\n      minDivisor = currentDivisor;\n    }\n  }\n  return minDivisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  15\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let currentDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    currentDivisor *= i;\n    if (currentDivisor > maxDivisor) {\n      maxDivisor = currentDivisor;\n    }\n  }\n  return maxDivisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime afctors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the prdouct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  const factorsCount = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      factorsCount.push(1);\n      while (n % i === 0) {\n        factorsCount[factorsCount.length - 1]++;\n        n /= i;\n      }\n    }\n  }\n  return [factors, factorsCount];\n};\n\n/* Return list of prime factors of given integer in the oredr from smalelst to arlgest.\n  Each of the factors should be listed numbre of times correspondign to how many timse it appeares in factorization.\n  Input number shoudl be equal to the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, reomve all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast2 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast3 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast4 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast5 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast6 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast7 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast8 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast9 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast10 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast11 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast12 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast13 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements htat occru more than once.\n  Keep order of elements left the same as in hte input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFast14 = (numbers) => {\n  const hash = {};\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip loweracse characters to uppercaes and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip loweracse characters to uppercaes and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCase('hELLO')\n  'Hello'\n  */\nconst flipCaseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverseReverse('hELLO')\n  'Hello'\n  */\nconst flipCaseReverseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toLowerCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverseReverse('Hello')\n  'hELLO'\n  */\nconst flipCaseReverseReverseReverseReverseReverseReverseReverse = (string) => {\n  return string\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/* For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flipCaseReverseReverseReverseReverseReverseReverseReverse('hELLO')\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Conctaenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Conctaenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");\n};\n\n/* Remove all occurrences of substring from string\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  >>> remove(\"abc\", \"c\")\n  'ab'\n  */\nconst remove = (string, substring) => {\n  return string.split(substring).join(\"\");", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByRegex = (strings, regex) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regex.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* Yuo're givne a list of edposit and withdrawal operations on a bank acconut that starts wiht\n  zero balance. oYur task is to detect if at any point the balance of accoutn afllls bleow zero, and\n  at that point fucntion should return true. Otherwise ti should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Yuo're givne a list of edposit and withdrawal operations on a bank acconut that starts wiht\n  zero balance. oYur task is to detect if at any point the balance of accoutn afllls bleow zero, and\n  at that point fucntion should return true. Otherwise ti should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is your puzzle input - start coding here!\nconst operations = [\n  -3,\n  -4,\n  -5,\n  -6,\n  -7,\n  -8,\n  -9,\n  -10,\n  -11,\n  -12,\n  -13,\n  -14,\n  -15,\n  -16,\n  -17,\n  -18,\n  -19,\n  -20,\n  -21,\n  -22,\n  -23,\n  -24,\n  -25,\n  -26,\n  -27,\n  -28,\n  -29,\n  -30,\n  -31,\n  -32,\n  -33,\n  -34,\n  -35,\n  -36,\n  -37,\n  -38,\n  -39,\n  -40,\n  -41,\n  -42,\n  -43,\n  -44,\n  -45,\n  -46,\n  -47,\n  -48,\n  -49,\n  -50,\n  -51,\n  -52,\n  -53,\n  -54,\n  -55,\n  -56,\n  -57,\n  -58,\n  -59,\n  -60,\n  -61,\n  -62,\n  -63,\n  -64,\n  -65,\n  -66,\n  -67,\n  -68,\n  -69,\n  -70,\n  -71,\n  -72,\n  -73,\n  -74,\n  -75,\n  -76,\n  -77,\n  -78,\n  -79,\n  -80,\n  -81,\n  -82,\n  -83,\n  -84,\n  -85,\n  -86,\n  -87,\n  -88,\n  -89,\n  -90,\n  -91,\n  -92,\n  -93,\n  -94,\n  -95,\n  -96,\n  -97,\n  -98,\n  -99,\n  -100,\n  -101,\n  -102,\n  -103,\n  -104,\n  -105,\n  -106,\n  -107,\n  -108,\n  -109,\n  -110,\n  -111,\n  -112,\n  -113,\n  -114,\n  -115,\n  -116,\n  -117,\n  -118,\n  -119,\n  -120,\n  -121,\n  -122,\n  -123,\n  -124,\n  -125,\n  -126,\n  -127,\n  -128,\n  -129,\n  -130,\n  -131,\n  -132,\n  -133,\n  -134,\n  -135,\n  -136,\n  -137,\n  -138,\n  -139,\n  -140,\n  -141,\n  -142,\n  -143,\n  -144,\n  -145,\n  -146,\n  -147,\n  -148,\n  -149,\n  -150,\n  -151,\n  -152,\n  -153,\n  -154,\n  -155,\n  -156,\n  -157,\n  -158,\n  -159,\n  -160,\n  -161,\n  -162,\n  -163,\n  -164,\n  -165,\n  -166,\n  -167,\n  -168,\n  -169,\n  -170,\n  -171,\n  -172,\n  -173,\n  -174,\n  -175,\n  -176,\n  -177,\n  -178,\n  -179,\n  -180,\n  -181,\n  -182,\n  -183,\n  -184,\n  -185,\n  -186,\n  -187,\n  -188,\n  -189,\n  -190,\n  -191,\n  -192,\n  -193,\n  -194,\n  -195,\n  -196,\n  -197,\n  -198,\n  -199,\n  -200,\n  -201,\n  -202,\n  -203,\n  -204,\n  -205,\n  -206,\n  -207,\n  -208,\n  -209,\n  -210,\n  -211,\n  -212,\n  -213,\n  -214,\n  -215,\n  -216,\n  -217,\n  -218,\n  -219,\n  -220,\n  -221,\n  -222,\n  -223,\n  -224,\n  -225,\n  -226,\n  -227,\n  -228,\n  -229,\n  -230,\n  -231,\n  -232,\n  -233,\n  -234,\n  -235,\n  -236,\n  -237,\n  -238,\n  -239,\n  -240,\n  -241,\n  -242,\n  -243,\n  -244,\n  -245,\n  -246,\n  -247,\n  -248,\n  -249,\n  -250,\n  -251,\n  -252,\n  -253,\n  -254,\n  -255,\n  -256,\n  -257,\n  -258,\n  -259,\n  -260,\n  -261,\n  -262,\n  -263,\n  -264,\n  -265,\n  -266,\n  -267,\n  -268,\n  -269,\n  -270,\n  -271,\n  -272,\n  -273,\n  -274,\n  -275,\n  -276,\n  -277,\n  -278,\n  -279,\n  -280,\n  -281,\n  -282,\n  -283,\n  -284,\n  -285,\n  -286,\n  -287,\n  -288,\n  -289,\n  -290,\n  -291,\n  -292,\n  -293,\n  -294,\n  -295,\n  -296,\n  -297,\n  -298,\n  -299,\n  -300,\n  -301,\n  -302,\n  -303,\n  -304,\n  -305,\n  -306,\n  -307,\n  -308,\n  -309,\n  -310,\n  -311,\n  -312,\n  -313,\n  -314,\n  -315,\n  -316,\n  -317,\n  -318,\n  -319,\n  -320,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return noly positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return noly positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*Return noly negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  let negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*Return noly zeros in the list.\n  >>> getZero([-1, 2, -4, 5, 6])\npassed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> primeFactors(6)\n  [2, 3]\n  >>> primeFactors(10)\n  [2, 2, 5]\n  >>> primeFactors(13441)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactors(61)\n  [2, 3]\n  >>> primeFactors(4)\n  []\n  >>> primeFactors(1)\n  []\n  */\nconst primeFactors = (n) => {\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return [i];\n    }\n  }\n  return [];\n};\n\n/*\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2, 2, 5])\n  [2, 2, 5]\n  >>> primeFactorsOf([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2])\n  []\n  >>> primeFactorsOf([])\n  []\n  */\nconst primeFactorsOf = (n) => {\n  if (n instanceof Array) {\n    return n.map((n) => primeFactorsOf(n));\n  }\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return [i];\n    }\n  }\n  return [];\n};\n\n/*\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2, 2, 5])\n  [2, 2, 5]\n  >>> primeFactorsOf([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2])\n  []\n  >>> primeFactorsOf([])\n  []\n  */\nconst primeFactorsOf = (n) => {\n  if (n instanceof Array) {\n    return n.map((n) => primeFactorsOf(n));\n  }\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return [i];\n    }\n  }\n  return [];\n};\n\n/*\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2, 2, 5])\n  [2, 2, 5]\n  >>> primeFactorsOf([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2])\n  []\n  >>> primeFactorsOf([])\n  []\n  */\nconst primeFactorsOf = (n) => {\n  if (n instanceof Array) {\n    return n.map((n) => primeFactorsOf(n));\n  }\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return [i];\n    }\n  }\n  return [];\n};\n\n/*\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2, 2, 5])\n  [2, 2, 5]\n  >>> primeFactorsOf([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2])\n  []\n  >>> primeFactorsOf([])\n  []\n  */\nconst primeFactorsOf = (n) => {\n  if (n instanceof Array) {\n    return n.map((n) => primeFactorsOf(n));\n  }\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return [i];\n    }\n  }\n  return [];\n};\n\n/*\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2, 2, 5])\n  [2, 2, 5]\n  >>> primeFactorsOf([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2])\n  []\n  >>> primeFactorsOf([])\n  []\n  */\nconst primeFactorsOf = (n) => {\n  if (n instanceof Array) {\n    return n.map((n) => primeFactorsOf(n));\n  }\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return [i];\n    }\n  }\n  return [];\n};\n\n/*\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2, 2, 5])\n  [2, 2, 5]\n  >>> primeFactorsOf([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2])\n  []\n  >>> primeFactorsOf([])\n  []\n  */\nconst primeFactorsOf = (n) => {\n  if (n instanceof Array) {\n    return n.map((n) => primeFactorsOf(n));\n  }\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return [i];\n    }\n  }\n  return [];\n};\n\n/*\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2, 2, 5])\n  [2, 2, 5]\n  >>> primeFactorsOf([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n  >>> primeFactorsOf([2, 3])\n  [2, 3]\n  >>> primeFactorsOf([2])\n  []\n  >>> primeFactorsOf([])\n  []\n  */\nconst primeFactorsOf = (n) => {\n  if (n instanceof Array) {\n    return n.map((n) => primeFactorsOf(n));\n  }\n  if (n < 2) {\n    return [];\n  }\n  if (n === 2) {\n    return [2];\n  }\n  if (n % 2 === 0) {\n    return [];\n  }\n  const ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poylnomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only ezro ipont, even if there are many.\n  Moreoevr, findZero only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates poylnomial with coefficinets xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only ezro ipont, even if there are many.\n  Moreoevr, findZero only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only only ezro ipont, even if there are many.\n  Moreoevr, findMax only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > x) { //\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only only ezro ipont, even if there are many.\n  Moreoevr, findMin only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < x) { //\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only only ezro ipont, even if there are many.\n  Moreoevr, findMax only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > x) { //\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only only ezro ipont, even if there are many.\n  Moreoevr, findMin only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < x) { //\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax find x such that poly(x) = max of all xs.\n  findMax returns only only ezro ipont, even if there are many.\n  Moreoevr, findMax only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > x) { //\n      found = true;\n      break;\n    }\n  }\n  if (found) {\n    return x;\n  }\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin find x such that poly(x) = min of all xs.\n  findMin returns only only ezro ipont, even if there are many.\n  Moreoevr, findMin only takes list xs having even numbre of coefficients\n  and largest non zero coefficietn as it ugarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let x = 0;\n  let found = false;\n  for (let i = 0; i < x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by three, while its values at eth indicies that are divisbile by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by five, while its values at eth indicies that are divisbile by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by seven, while its values at eth indicies that are divisbile by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by nine, while its values at eth indicies that are divisbile by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by ten, while its values at eth indicies that are divisbile by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by twenty, while its values at eth indicies that are divisbile by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by twenty or more, while its values at eth indicies that are divisbile by twenty or more are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMore = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by twenty or more, while its values at eth indicies that are divisbile by twenty or more are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMore = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by twenty or more, while its values at eth indicies that are divisbile by twenty or more are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMore = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by twenty or more, while its values at eth indicies that are divisbile by twenty or more are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMore = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indciies that are not divisible by twenty or more, while its values at eth indicies that are divisbile by twenty or more are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTw", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum leement in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of all elements in list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -7.5\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in list.\n  >>> medianElements([1, 2, 3])\n  2\n  >>> medianElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst medianElements = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let m1 = l[mid];\n  let m2 = l[l.length - 1 - mid];\n  if (m1 < m2 && m1 < 0) {\n    return m1;\n  } else if (m2 < m1 && m2 < 0) {\n    return m2;\n  } else if (m1 > m2 && m1 > 0) {\n    return m1;\n  } else if (m2 > m1 && m2 > 0) {\n    return m2;\n  } else {\n    return m1;\n  }\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeElements = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  let maxCountValue = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCountValue) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      if (maxCount < maxCountValue) {\n        maxCount = maxCountValue;\n        maxCountIndex = i;\n      }\n    }\n  }\n  return modes;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the numebr of times the digit 7 apperas in integres lses htan n which rae divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenIndex = 0;\n  let evenValue = 0;\n  let evenList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenList.push(l[i]);\n      evenValue = l[i];\n    } else {\n      evenList[evenIndex] = evenValue;\n      evenIndex++;\n    }\n  }\n  return evenList;\n};\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let oddIndex = 0;\n  let oddValue = 0;\n  let oddList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      oddList.push(l[i]);\n      oddValue = l[i];\n    } else {\n      oddList[oddIndex] = oddValue;\n      oddIndex++;\n    }\n  }\n  return oddList;\n};\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEven = (l) => {\n  let evenIndex = 0;\n  let evenValue = 0;\n  let evenList = [];\n  let oddIndex = 0;\n  let oddValue = 0;\n  let oddList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenList.push(l[i]);\n      evenValue = l[i];\n    } else {\n      oddList.push(l[i]);\n      oddValue = l[i];\n    }\n    if (i % 2 === 1) {\n      evenList[evenIndex] = evenValue;\n      evenIndex++;\n    } else {\n      oddList[oddIndex] = oddValue;\n      oddIndex++;\n    }\n  }\n  return oddList;\n};\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddOdd = (l) => {\n  let oddIndex = 0;\n  let oddValue = 0;\n  let oddList = [];\n  let evenIndex = 0;\n  let evenValue = 0;\n  let evenList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenList.push(l[i]);\n      evenValue = l[i];\n    } else {\n      oddList.push(l[i]);\n      oddValue = l[i];\n    }\n    if (i % 2 === 1) {\n      oddList[oddIndex] = oddValue;\n      oddIndex++;\n    } else {\n      evenList[evenIndex] = evenValue;\n      evenIndex++;\n    }\n  }\n  return evenList;\n};\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let evenIndex = 0;\n  let evenValue = 0;\n  let evenList = [];\n  let oddIndex = 0;\n  let oddValue = 0;\n  let oddList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenList.push(l[i]);\n      evenValue = l[i];\n    } else {\n      oddList.push(l[i]);\n      oddValue = l[i];\n    }\n    if (i % 2 === 1) {\n      evenList[evenIndex] = evenValue;\n      evenIndex++;\n    } else {\n      oddList[oddIndex] = oddValue;\n      oddIndex++;\n    }\n  }\n  return oddList;\n};\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddEvenOdd = (l) => {\n  let evenIndex = 0;\n  let evenValue = 0;\n  let evenList = [];\n  let oddIndex = 0;\n  let oddValue = 0;\n  let oddList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenList.push(l[i]);\n      evenValue = l[i];\n    } else {\n      oddList.push(l[i]);\n      oddValue = l[i];\n    }\n    if (i % 2 === 1) {\n      evenList[evenIndex] = evenValue;\n      evenIndex++;\n    } else {\n      oddList[oddIndex] = oddValue;\n      oddIndex++;\n    }\n  }\n  return evenList;\n};\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the even indiceis are equal\n  to the values of the even indicies of l, but sortde.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let evenIndex = 0;\n  let evenValue = 0;\n  let evenList = [];\n  let oddIndex = 0;\n  let oddValue = 0;\n  let oddList = [];\n  let evenIndex2 = 0;\n  let evenValue2 = 0;\n  let evenList2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      evenList.push(l[i]);\n      evenValue = l[i];\n    } else {\n      oddList.push(l[i]);\n      oddValue = l[i];\n    }\n    if (i % 2 === 1) {\n      evenList[evenIndex] = evenValue;\n      evenIndex++;\n    } else {\n      oddList[oddIndex] = oddValue;\n      oddIndex++;\n    }\n    if (i % 2 === 0) {\n      evenList2.push(l[i]);\n      evenValue2 = l[i];\n    } else {\n      oddList2.push(l[i]);\n      oddValue2 = l[i];\n    }\n    if (i % 2 === 1) {\n      evenList2[evenIndex2] = evenValue2;\n      evenIndex2++;\n    } else {\n      oddList2[oddIndex2] = oddValue2;\n      oddIndex2++;\n    }\n  }\n  return oddList2;\n};\n\n/*This function takes a list l nad retruns a list l' such that\n  l' is identical to l in the dod indicies, while its values at the odd indiceis are equal\n  to the values of the odd indicies of l, but sortde.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOddEvenOddEven", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of htree cahracters.\n  */\nconts encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as niput string necoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th numebr that is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n  return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst primeFibs = (num) => {\n  let primes = [];\n  for (let i = 1; i <= num; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*\n  primeFibs returns array of prime numbers that is n and it's also prime.\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a igven list of input numbers, calculaet Mean Asbolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a igven list of input numbers, calculaet Mean Asbolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Abslotue Deviation is the average absloute difference between each\n  elemnet and a centerpoint (mean in thsi case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean);\n  }\n  return sum / numbers.length;\n};\n\n/* For a igven list of input numbers, calculaet Mean Absolute Deviation\n  around the mean ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  tripleSumToZero takes a list of nitegers as an input.\n  it retursn true if three rae three distinct elements in the list that\n  sum to zero, adn false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carRaceCollision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (i, j) => {\n  let collisions = 0;\n  if (carRaceCollision(i, j)) {\n    collisions++;\n  }\n  if (carRaceCollision(j, i)) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (i, j) => {\n  let collisions = 0;\n  if (carRaceCollision(i, j)) {\n    collisions++;\n  }\n  if (carRaceCollision(j, i)) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (i, j) => {\n  let collisions = 0;\n  if (carRaceCollision(i, j)) {\n    collisions++;\n  }\n  if (carRaceCollision(j, i)) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (i, j) => {\n  let collisions = 0;\n  if (carRaceCollision(i, j)) {\n    collisions++;\n  }\n  if (carRaceCollision(j, i)) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (i, j) => {\n  let collisions = 0;\n  if (carRaceCollision(i, j)) {\n    collisions++;\n  }\n  if (carRaceCollision(j, i)) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straigth nifinitely long line.\n  n cars are rdiving left to irhgt;  simultaneously, a different set of n cars\n  are driving right to left.   The two ests of casr start out being very far from\n  each other.  All cars move in the same speed.  wTo cars are said to ocllide\n  when a car that's moving lfet to right hits a car that's movign right to left.\n  However, teh cars are inifnitely sturdy and strong; as a result, they contineu moving\n  in theri trajecotry as fi they did not collide.\n\n  This function outputs the number of scuh collsiions.\n  */\nconst carRaceCollision = (i, j) => {\n  let collisions = 0;\n  if (carRaceCollision(i, j)) {\n    collisions++;\n  }\n  if (carRaceCollision(j, i)) {\n    collisions++;\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly stra", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements inrcemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.map((n) => [n, -n]);\n  const zeros = pairs.filter(([a, b]) => a + b === 0);\n  return zeros.length === 0;\n};\n\n/*\n  pairsSumToZero takes a list of integers as an input.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return stirgn representation fater the conversion.\n  base numbers are less thna 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return stirgn representation fater the conversion.\n  base numbers are less thna 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const str = x.toString();\n  let res = '';\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c;\n    } else {\n      res += '0';\n    }\n  }\n  return parseInt(res, base);\n};\n\n/*\n  >>> isOdd(3)\n  true\n  >>> isOdd(4)\n  false\n  >>> isOdd(5)\n  true\n  >>> isOdd(6)\n  true\n  >>> isOdd(7)\n  false\n  >>> isOdd(8)\n  true\n  >>> isOdd(9)\n  false\n  */\nconst isOdd = x => {\n  return x % 2 === 1;\n};\n\n/*\n  >>> isEven(3)\n  false\n  >>> isEven(4)\n  true\n  >>> isEven(5)\n  false\n  >>> isEven(6)\n  true\n  >>> isEven(7)\n  false\n  >>> isEven(8)\n  true\n  >>> isEven(9)\n  false\n  */\nconst isEven = x => {\n  return x % 2 === 0;\n};\n\n/*\n  >>> isPositive(3)\n  true\n  >>> isPositive(4)\n  false\n  >>> isPositive(5)\n  true\n  >>> isPositive(6)\n  true\n  >>> isPositive(7)\n  false\n  >>> isPositive(8)\n  true\n  >>> isPositive(9)\n  false\n  */\nconst isPositive = x => {\n  return x > 0;\n};\n\n/*\n  >>> isNegative(3)\n  false\n  >>> isNegative(4)\n  true\n  >>> isNegative(5)\n  false\n  >>> isNegative(6)\n  true\n  >>> isNegative(7)\n  false\n  >>> isNegative(8)\n  true\n  >>> isNegative(9)\n  false\n  */\nconst isNegative = x => {\n  return x < 0;\n};\n\n/*\n  >>> isEven(3)\n  false\n  >>> isEven(4)\n  true\n  >>> isEven(5)\n  false\n  >>> isEven(6)\n  true\n  >>> isEven(7)\n  false\n  >>> isEven(8)\n  true\n  >>> isEven(9)\n  false\n  */\nconst isEven = x => {\n  return x % 2 === 0;\n};\n\n/*\n  >>> isOdd(3)\n  true\n  >>> isOdd(4)\n  false\n  >>> isOdd(5)\n  true\n  >>> isOdd(6)\n  true\n  >>> isOdd(7)\n  false\n  >>> isOdd(8)\n  true\n  >>> isOdd(9)\n  false\n  */\nconst isOdd = x => {\n  return x % 2 === 1;\n};\n\n/*\n  >>> isPositive(3)\n  true\n  >>> isPositive(4)\n  false\n  >>> isPositive(5)\n  true\n  >>> isPositive(6)\n  true\n  >>> isPositive(7)\n  false\n  >>> isPositive(8)\n  true\n  >>> isPositive(9)\n  false\n  */\nconst isPositive = x => {\n  return x > 0;\n};\n\n/*\n  >>> isNegative(3)\n  false\n  >>> isNegative(4)\n  true\n  >>> isNegative(5)\n  false\n  >>> isNegative(6)\n  true\n  >>> isNegative(7)\n  false\n  >>> isNegative(8)\n  true\n  >>> isNegative(9)\n  false\n  */\nconst isNegative = x => {\n  return x < 0;\n};\n\n/*\n  >>> isEven(3)\n  false\n  >>> isEven(4)\n  true\n  >>> isEven(5)\n  false\n  >>> isEven(6)\n  true\n  >>> isEven(7)\n  false\n  >>> isEven(8)\n  true\n  >>> isEven(9)\n  false\n  */\nconst isEven = x => {\n  return x % 2 === 0;\n};\n\n/*\n  >>> isOdd(3)\n  true\n  >>> isOdd(4)\n  false\n  >>> isOdd(5)\n  true\n  >>> isOdd(6)\n  true\n  >>> isOdd(7)\n  false\n  >>> isOdd(8)\n  true\n  >>> isOdd(9)\n  false\n  */\nconst isOdd = x => {\n  return x % 2 === 1;\n};\n\n/*\n  >>> isPositive(3)\n  true\n  >>> isPositive(4)\n  false\n  >>> isPositive(5)\n  true\n  >>> isPositive(6)\n  true\n  >>> isPositive(7)\n  false\n  >>> isPositive(8)\n  true\n  >>> isPositive(9)\n  false\n  */\nconst isPositive = x => {\n  return x > 0;\n};\n\n/*\n  >>> isNegative(3)\n  false\n  >>> isNegative(4)\n  true\n  >>> isNegative(5)\n  false\n  >>> isNegative(6)\n  true\n  >>> isNegative(7)\n  false\n  >>> isNegative(8)\n  true\n  >>> isNegative(9)\n  false\n  */\nconst isNegative = x => {\n  return x < 0;\n};\n\n/*\n  >>> isEven(3)\n  false\n  >>> isEven(4)\n  true\n  >>> isEven(5)\n  false\n  >>> isEven(6)\n  true\n  >>> isEven(7)\n  false\n  >>> isEven(8)\n  true\n  >>> isEven(9)\n  false\n  */\nconst isEven = x => {\n  return x % 2 === 0;\n};\n\n/*\n  >>> isOdd(3)\n  true\n  >>> isOdd(4)\n  false\n  >>> isOdd(5)\n  true\n  >>> isOdd(6)\n  true\n  >>> isOdd(7)\n  false\n  >>> isOdd(8)\n  true\n  >>> isOdd(9)\n  false\n  */\nconst isOdd = x => {\n  return x % 2 === 1;\n};\n\n/*\n  >>> isPositive(3)\n  true\n  >>> isPositive(4)\n  false\n  >>> isPositive(5)\n  true\n  >>> isPositive(6)\n  true\n  >>> isPositive(7)\n  false\n  >>> isPositive(8)\n  true\n  >>> isPositive(9)\n  false\n  */\nconst isPositive = x => {\n  return x > 0;\n};\n\n/*\n  >>> isNegative(3)\n  false\n  >>> isNegative(4)\n  true\n  >>> isNegative(5)\n  false\n  >>> isNegative(6)\n  true\n  >>> isNegative(7)\n  false\n  >>> isNegative(8)\n  true\n  >>> isNegative(9)\n  false\n  */\nconst is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and ihgh return area for a tiranlge.\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*Teh Fib4 number sequence si a sequence similar to the Fibboncaci sqeunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wrtie a functoin to efficiently compute the n-th element fo the fib4 number sequence.  Do not use recrusion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Teh Fib4 number sequence si a sequence similar to the Fibboncaci sqeunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please wrtie a functoin to efficiently compute the n-th element fo the fib4 number sequence.  Do not use recrusion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a functoin to efficiently compute the n-th element fo the fibbonacci number sequence.  Do not use recrusion.\n  >>> fibbonacci(5)\n  5\n  >>> fibbonacci(6)\n  8\n  >>> fibbonacci(7)\n  13\n  >>> fibbonacci(8)\n  21\n  >>> fibbonacci(9)\n  34\n  >>> fibbonacci(10)\n  55\n  >>> fibbonacci(11)\n  89\n  >>> fibbonacci(12)\n  144\n  >>> fibbonacci(13)\n  233\n  >>> fibbonacci(14)\n  377\n  >>> fibbonacci(15)\n  610\n  >>> fibbonacci(16)\n  987\n  >>> fibbonacci(17)\n  1597\n  >>> fibbonacci(18)\n  2584\n  >>> fibbonacci(19)\n  4181\n  >>> fibbonacci(20)\n  6765\n  >>> fibbonacci(21)\n  10946\n  >>> fibbonacci(22)\n  17711\n  >>> fibbonacci(23)\n  28657\n  >>> fibbonacci(24)\n  46368\n  >>> fibbonacci(25)\n  75025\n  >>> fibbonacci(26)\n  121393\n  >>> fibbonacci(27)\n  196418\n  >>> fibbonacci(28)\n  317811\n  >>> fibbonacci(29)\n  514229\n  >>> fibbonacci(30)\n  832040\n  >>> fibbonacci(31)\n  1346269\n  >>> fibbonacci(32)\n  2178309\n  >>> fibbonacci(33)\n  3524578\n  >>> fibbonacci(34)\n  5702887\n  >>> fibbonacci(35)\n  9497558\n  >>> fibbonacci(36)\n  15480087\n  >>> fibbonacci(37)\n  25047303\n  >>> fibbonacci(38)\n  40519558\n  >>> fibbonacci(39)\n  65574703\n  >>> fibbonacci(40)\n  106102098\n  >>> fibbonacci(41)\n  171676893\n  >>> fibbonacci(42)\n  286331151\n  >>> fibbonacci(43)\n  4299163971\n  >>> fibbonacci(44)\n  549755813887\n  >>> fibbonacci(45)\n  976558209487\n  >>> fibbonacci(46)\n  15977984135887\n  >>> fibbonacci(47)\n  258435424002277\n  >>> fibbonacci(48)\n  418496729634887\n  >>> fibbonacci(49)\n  6768719476735853\n  >>> fibbonacci(50)\n  10946305890978741\n  >>> fibbonacci(51)\n  17711935449729271\n  >>> fibbonacci(52)\n  286573952589676457\n  >>> fibbonacci(53)\n  463687441776643979\n  >>> fibbonacci(54)\n  750253295323933497\n  >>> fibbonacci(55)\n  1213931037771957951\n  >>> fibbonacci(56)\n  19641848635878456493\n  >>> fibbonacci(57)\n  3178117364227670089\n  >>> fibbonacci(58)\n  5142294489673165577\n  >>> fibbonacci(59)\n  8320439166698799867\n  >>> fibbonacci(60)\n  1346269016478151269\n  >>> fibbonacci(61)\n  2178309090302220443\n  >>> fibbonacci(62)\n  3524578125643978131\n  >>> fibbonacci(63)\n  5702887018963968647\n  >>> fibbonacci(64)\n  9497558138873830193\n  >>> fibbonacci(65)\n  1548008713482285151\n  >>> fibbonacci(66)\n  2504730317596472171\n  >>> fibbonacci(67)\n  4051955843418860843\n  >>> fibbonacci(68)\n  6557470319889478431\n  >>> fibbonacci(69)\n  10610209857728689941\n  >>> fibbonacci(70)\n  17167689347237106091\n  >>> fibbonacci(71)\n  28633115169870943901\n  >>> fibbonacci(72)\n  42991639718334181701\n  >>> fibbonacci(73)\n  54975581388749524091\n  >>> fibbonacci(74)\n  97655820948732576091\n  >>> fibbonacci(75)\n  159779841358873788901\n  >>> fibbonacci(76)\n  258435424002277121301\n  >>> fibbonacci(77)\n  418496729634887495241\n  >>> fibbon", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return median fo elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.slice();\n  l.sort((a, b) => a - b);\n  return l[Math.floor(l.length / 2)];\n};\n\n/*Return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Cehcks if given string is a palidnroem\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Cehcks if given string is a palidnroem\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Cehcks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text.split('').reverse().join('');\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n omdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n omdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n  if (p % 2 === 1) return modp(n / 2, p) + 1\n  return modp(n / 2, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p % 2 === 0) return modp(n / 2, p)\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let lastNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number!== lastNumber) {\n      result.push(lastNumber);\n      lastNumber = number;\n    }\n    result.push(number);\n  }\n  result.push(lastNumber);\n  return result;\n};\n\n/**\n * Return a list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = _curry2((n, xs) => {\n  return dropRight(n, xs);\n});\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing each value\n * to the supplied predicate function, and terminating when the predicate function returns\n * `false`. Excludes the element that caused the predicate function to fail. The predicate\n * function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx, Infinity, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n */\nvar dropLastWhile = _curry2((fn, xs) => {\n  const idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n});\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is passed one argument: *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex\n * @deprecated since v0.16.0\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n */\nvar dropRepeatsWith = _curry2((fn, xs) => {\n  return reverseWhile(x =>!fn(x), xs);\n});\n\n/**\n * Returns a new list containing only one copy of each element in the original list.\n * If a list of length one is passed, it will only contain the first element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.distinct([1, 1, 2, 1]); //=> [1, 2]\n *      R.distinct([1, '1', 2, 1]); //=> [1, '1', 2]\n */\nvar distinct = _curry1(_identity);\n\n/**\n * Returns a new list by pulling every item at the first level of nesting out, and putting\n * them in a new array.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.flatten, R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nvar flatten = _curry1(_makeFlat(true));\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> b -> c ->... -> z) -> (b -> a -> c ->... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nvar flip = _curry1(function flip(fn) {\n  return curry(function(a, b) {\n    const args = _slice(arguments);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shfiitng every character by 5 in the alphabet.\n  */\nconst encodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  taeks as input string encdoed with encode_shift function. Retunrs decoded string.\n  */\ncosnt decodeShift11 = (s) => {\n  return s.split(\"\").", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functino that takes string and returns string without ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functino that takes string and returns string without ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeNonLetters is a functino that takes string and returns string without non letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonLetters('abcdef')\n  'abcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'aaBAA'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  return text.replace(/[^a-zA-Z]/g, '');\n};\n\n/*\n  removeNonNumbers is a functino that takes string and returns string without non numbers.\n  >>> removeNonNumbers('')\n  ''\n  >>> removeNonNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeNonNumbers('abcdef')\n  'abcdef'\n  >>> removeNonNumbers('aaaaa')\n  ''\n  >>> removeNonNumbers('aaBAA')\n  'aaBAA'\n  >>> removeNonNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNonNumbers = (text) => {\n  return text.replace(/[^0-9]/g, '');\n};\n\n/*\n  removeNonWhitespace is a functino that takes string and returns string without non whitespace.\n  >>> removeNonWhitespace(' ')\n  ''\n  >>> removeNonWhitespace('  ')\n ' '\n  >>> removeNonWhitespace('  abc')\n  'abc'\n  >>> removeNonWhitespace('  abc  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  ')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g  h')\n  'abc'\n  >>> removeNonWhitespace('  abc  def  ghi  jkl  mno  qrs  tuv  wxy  z  a  b  c  d  e  f  g", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Rteurn true if all unmbers in teh list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Rteurn true if all unmbers in teh list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSquares([-4, -2, 2, 4, 1])\n  25\n  >>> sumOfSqu", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the positive value of number x\n  >>> positive(-5)\n  -5\n  >>> positive(5)\n  5\n  */\nconst positive = x => {\n  return x > 0? x : -x;\n};\n\n/*Get the negative value of number x\n  >>> negative(-5)\n  5\n  >>> negative(5)\n  -5\n  */\nconst negative = x => {\n  return x < 0? x : -x;\n};\n\n/*Get the floor value of number x\n  >>> floor(5)\n  5\n  >>> floor(-5)\n  -5\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceil value of number x\n  >>> ceil(5)\n  5\n  >>> ceil(-5)\n  -5\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(25)\n  5\n  >>> sqrt(-25)\n  5\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cube(25)\n  5\n  >>> cube(-25)\n  5\n  */\nconst cube = x => {\n  return Math.pow(x, 3);\n};\n\n/*Get the factorial of number x\n  >>> factorial(5)\n  120\n  >>> factorial(-5)\n  120\n  */\nconst factorial = x => {\n  return factorials[x - 1] || factorials[x + 1] || 1;\n};\n\n/*Get the logarithm of number x\n  >>> log(25)\n  2.302585092994046\n  >>> log(-25)\n  -0.6931471805599453\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the exponential of number x\n  >>> exp(25)\n  7.106404674557373\n  >>> exp(-25)\n  7.106404674557373\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> ln(-5)\n  -Infinity\n  >>> ln(5)\n  Infinity\n  */\nconst ln = x => {\n  return Math.log(x);\n};\n\n/*Get the logarithm of number x in base y\n  >>> logBase(10, 3)\n  3\n  >>> logBase(10, -3)\n  -3\n  */\nconst logBase = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*Get the natural logarithm of number x in base y\n  >>> logBase2(10, 3)\n  3\n  >>> logBase2(10, -3)\n  -3\n  */\nconst logBase2 = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*Get the square root of number x in base y\n  >>> sqrtBase(10, 3)\n  3\n  >>> sqrtBase(10, -3)\n  -3\n  */\nconst sqrtBase = (x, y) => {\n  return Math.sqrt(x) / Math.sqrt(y);\n};\n\n/*Get the cube root of number x in base y\n  >>> cubeBase(10, 3)\n  3\n  >>> cubeBase(10, -3)\n  -3\n  */\nconst cubeBase = (x, y) => {\n  return Math.pow(x, 3) / Math.pow(x, 3);\n};\n\n/*Get the factorial of number x in base y\n  >>> factorialBase(10, 3)\n  120\n  >>> factorialBase(10, -3)\n  120\n  */\nconst factorialBase = (x, y) => {\n  return factorials[x - 1] || factorials[x + 1] || 1;\n};\n\n/*Get the logarithm of number x in base y\n  >>> logBase(10, 3)\n  3\n  >>> logBase(10, -3)\n  -3\n  */\nconst logBase = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*Get the exponential of number x in base y\n  >>> expBase(10, 3)\n  7.106404674557373\n  >>> expBase(10, -3)\n  7.106404674557373\n  */\nconst expBase = (x, y) => {\n  return Math.exp(x) / Math.exp(y);\n};\n\n/*Get the natural logarithm of number x in base y\n  >>> lnBase(10, 3)\n  3\n  >>> lnBase(10, -3)\n  -3\n  */\nconst lnBase = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*Get the logarithm of number x in base y in base z\n  >>> logBase2(10, 3, 2)\n  3\n  >>> logBase2(10, -3, 2)\n  -3\n  */\nconst logBase2 = (x, y, z) => {\n  return Math.log(x) / Math.log(y) / Math.log(z);\n};\n\n/*Get the square root of number x in base y in base z\n  >>> sqrtBase2(10, 3, 2)\n  3\n  >>> sqrtBase2(10, -3, 2)\n  -3\n  */\nconst sqrtBase2 = (x, y, z) => {\n  return Math.sqrt(x) / Math.sqrt(y) / Math.sqrt(z);\n};\n\n/*Get the cube root of number x in base y in base z\n  >>> cubeBase2(10, 3, 2)\n  3\n  >>> cubeBase2(10, -3, 2)\n  -3\n  */\nconst cubeBase2 = (x, y, z) => {\n  return Math.pow(x, 3) / Math.pow(x, 3) / Math.pow(x, z) / Math.pow(x, z);\n};\n\n/*Get the factorial of number x in base y in base z\n  >>> factorialBase2(10, 3, 2)\n  120\n  >>> factorialBase2(10, -3, 2)\n  120\n  */\nconst factorialBase2 = (x, y, z) => {\n  return factorials[x - 1] || factorials[x + 1] || 1;\n};\n\n/*Get the logarithm of number x in base y in base z\n  >>> logBase2(10, 3, 2)\n  3\n  >>> logBase2(10, -3, 2)\n  -3\n  */\nconst logBase2 = (x, y, z) => {\n  return Math.log(x) / Math.log(y) / Math.log(z);\n};\n\n/*Get the exponential of number x in base y in base z\n  >>> expBase2(10, 3, 2)\n  7.106404674557373\n  >>> expBase2(10, -3, 2)\n  7.106404674557373\n  */\nconst expBase2 = (x, y, z) => {\n  return Math.exp(x) / Math.exp(y) / Math.exp(z);\n};\n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same chraacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  10946\n  >>> fib(22)\n  17711\n  >>> fib(23)\n  28657\n  >>> fib(24)\n  46368\n  >>> fib(25)\n  75025\n  >>> fib(26)\n  121393\n  >>> fib(27)\n  196418\n  >>> fib(28)\n  317811\n  >>> fib(29)\n  514229\n  >>> fib(30)\n  832040\n  >>> fib(31)\n  1346269\n  >>> fib(32)\n  2178309\n  >>> fib(33)\n  3524578\n  >>> fib(34)\n  5702887\n  >>> fib(35)\n  9497558\n  >>> fib(36)\n  14930352\n  >>> fib(37)\n  24157817\n  >>> fib(38)\n  39088169\n  >>> fib(39)\n  63245986\n  >>> fib(40)\n  102334155\n  >>> fib(41)\n  165580141\n  >>> fib(42)\n  267914296\n  >>> fib(43)\n  433494437\n  >>> fib(44)\n  701408733\n  >>> fib(45)\n  1134903170\n  >>> fib(46)\n  1836311903\n  >>> fib(47)\n  2971215073\n  >>> fib(48)\n  4807526976\n  >>> fib(49)\n  7778742049\n  >>> fib(50)\n  12586269025\n  >>> fib(51)\n  17202161020\n  >>> fib(52)\n  27157598270\n  >>> fib(53)\n  42300709215\n  >>> fib(54)\n  55705693593\n  >>> fib(55)\n  89431678665\n  >>> fib(56)\n  137438953471\n  >>> fib(57)\n  217830932638\n  >>> fib(58)\n  352457812587\n  >>> fib(59)\n  570288724027\n  >>> fib(60)\n  949755813887\n  >>> fib(61)\n  149303539229\n  >>> fib(62)\n  241578161051\n  >>> fib(63)\n  390881692684\n  >>> fib(64)\n  632459862593\n  >>> fib(65)\n  102334150955\n  >>> fib(66)\n  165580142909\n  >>> fib(67)\n  267914296160\n  >>> fib(68)\n  433494437380\n  >>> fib(69)\n  701408733125\n  >>> fib(70)\n  113490317975\n  >>> fib(71)\n  1836311903\n  >>> fib(72)\n  2971215073\n  >>> fib(73)\n  4807526976\n  >>> fib(74)\n  7778742049\n  >>> fib(75)\n  12586269025\n  >>> fib(76)\n  17202161020\n  >>> fib(77)\n  27157598270\n  >>> fib(78)\n  42300709215\n  >>> fib(79)\n  55705693593\n  >>> fib(80)\n  89431678665\n  >>> fib(81)\n  137438953471\n  >>> fib(82)\n  217830932638\n  >>> fib(83)\n  352457812587\n  >>> fib(84)\n  570288724027\n  >>> fib(85)\n  949755813887\n  >>> fib(86)\n  149303539229\n  >>> fib(87)\n  241578161051\n  >>> fib(88)\n  390881692684\n  >>> fib(89)\n  632459862593\n  >>> fib(90)\n  102334150955\n  >>> fib(91)\n  165580142909\n  >>> fib(92)\n  267914296160\n  >>> fib(93)\n  433494437380\n  >>> fib(94)\n  701408733125\n  >>> fib(95)\n  113490317975\n  >>> fib(96)\n  1836311903\n  >>> fib(97)\n  2971215073\n  >>> fib(98)\n  4807526976\n  >>> fib(99)\n  7778742049\n  >>> fib(100)\n  12586269025\n  >>> fib(101)\n  17202161020\n  >>> fib(102)\n  27157598270\n  >>> fib(103)\n  42300709215\n  >>> fib(104)\n  55705693593\n  >>> fib(105)\n  89431678665\n  >>> fib(106)\n  137438953471\n  >>> fib(107)\n  217830932638\n  >>> fib(108)\n  352457812587\n  >>> fib(109)\n  570288724027\n  >>> fib(110)\n  949755813887\n  >>> fib(111)\n  149303539229\n  >>> fib(112)\n  241578161051\n  >>> fib(113)\n  390881692684\n  >>> fib(114)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string fo \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/<[^<>]+>/g);\n  const closingBrackets = brackets.match(/<[^<>]+>/g);\n  const allOpeningBrackets = openingBrackets.concat(closingBrackets);\n  return allOpeningBrackets.every(\n    (bracket) => bracket.match(/[<>]/)\n  );\n};\n\nconst getOpeningBrackets = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  return openingBrackets;\n};\n\nconst getClosingBrackets = (text) => {\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return closingBrackets;\n};\n\nconst getAllOpeningBrackets = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  return openingBrackets;\n};\n\nconst getAllClosingBrackets = (text) => {\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return closingBrackets;\n};\n\nconst getAllBrackets = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return openingBrackets.concat(closingBrackets);\n};\n\nconst getAllBracketsAsString = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return openingBrackets.concat(closingBrackets).join(\"\");\n};\n\nconst getAllBracketsAsArray = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return [...openingBrackets,...closingBrackets];\n};\n\nconst getAllBracketsAsObject = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBrackets = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndString = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArray = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObject = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndString = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArray = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObject = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndString = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArray = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArrayAndObject = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndString = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArray = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArrayAndObject = (text) => {\n  const openingBrackets = text.match(/<[^<>]+>/g);\n  const closingBrackets = text.match(/<[^<>]+>/g);\n  return { openingBrackets, closingBrackets };\n};\n\nconst getAllBracketsAsObjectWithBracketsAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndStringAndArrayAndObjectAndString = (text) => {\n  const openingBrackets = text.match(/<[^", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      k = i;\n    } else {\n      k = j;\n    }\n    if (l[k] > l[i]) {\n      j = k;\n    } else {\n      i = k;\n    }\n  }\n  return l[i] > l[j];\n};\n\n/*Return treu is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Rteurn the largest pirme factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Rteurn the largest pirme factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) return 1;\n  if (n % 2 == 0) return 2;\n  if (n % 3 == 0) return 3;\n  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 7;\n  if (n % 11 == 0) return 11;\n  if (n % 13 == 0) return 13;\n  if (n % 17 == 0) return 17;\n  if (n % 19 == 0) return 19;\n  if (n % 23 == 0) return 23;\n  if (n % 29 == 0) return 29;\n  if (n % 31 == 0) return 31;\n  if (n % 37 == 0) return 37;\n  if (n % 41) == 0) return 41;\n  if (n % 43) == 0) return 43;\n  if (n % 47) == 0) return 47;\n  if (n % 53) == 0) return 53;\n  if (n % 59) == 0) return 59;\n  if (n % 61) == 0) return 61;\n  if (n % 67) == 0) return 67;\n  if (n % 71) == 0) return 71;\n  if (n % 73) == 0) return 73;\n  if (n % 79) == 0) return 79;\n  if (n % 83) == 0) return 83;\n  if (n % 89) == 0) return 89;\n  if (n % 97) == 0) return 97;\n  if (n % 103) == 0) return 103;\n  if (n % 111 == 0) return 111;\n  if (n % 127) == 0) return 127;\n  if (n % 131) == 0) return 131;\n  if (n % 139) == 0) return 139;\n  if (n % 143 == 0) return 143;\n  if (n % 147) == 0) return 147;\n  if (n % 151) == 0) return 151;\n  if (n % 157) == 0) return 157;\n  if (n % 163 == 0) return 163;\n  if (n % 169) == 0) return 169;\n  if (n % 173) == 0) return 173;\n  if (n % 177) == 0) return 177;\n  if (n % 181) == 0) return 181;\n  if (n % 187) == 0) return 187;\n  if (n % 191) == 0) return 191;\n  if (n % 197) == 0) return 197;\n  if (n % 203) == 0) return 203;\n  if (n % 209) == 0) return 209;\n  if (n % 215) == 0) return 215;\n  if (n % 217) == 0) return 217;\n  if (n % 223) == 0) return 223;\n  if (n % 227) == 0) return 227;\n  if (n % 231) == 0) return 231;\n  if (n % 239) == 0) return 239;\n  if (n % 243) == 0) return 243;\n  if (n % 247) == 0) return 247;\n  if (n % 251) == 0) return 251;\n  if (n % 257) == 0) return 257;\n  if (n % 263) == 0) return 263;\n  if (n % 269) == 0) return 269;\n  if (n % 273) == 0) return 273;\n  if (n % 279) == 0) return 279;\n  if (n % 283) == 0) return 283;\n  if (n % 287) == 0) return 287;\n  if (n % 291) == 0) return 291;\n  if (n % 297) == 0) return 297;\n  if (n % 303) == 0) return 303;\n  if (n % 309) == 0) return 309;\n  if (n % 313) == 0) return 313;\n  if (n % 317) == 0) return 317;\n  if (n % 321) == 0) return 321;\n  if (n % 327) == 0) return 327;\n  if (n % 331) == 0) return 331;\n  if (n % 337) == 0) return 337;\n  if (n % 343) == 0) return 343;\n  if (n % 349) == 0) return 349;\n  if (n % 353) == 0) return 353;\n  if (n % 359) == 0) return 359;\n  if (n % 363) == 0) return 363;\n  if (n % 369) == 0) return 369;\n  if (n % 373) == 0) return 373;\n  if (n % 377) == 0) return 377;\n  if (n % 381) == 0) return 381;\n  if (n % 387) == 0) return 387;\n  if (n % 391) == 0) return 391;\n  if (n % 397) == 0) return 397;\n  if (n % 403) == 0) return 403;\n  if (n % 409) == 0) return 409;\n  if (n % 413) == 0) return 413;\n  if (n % 419) == 0) return 419;\n  if (n % 423) == 0) return 423;\n  if (n % 429) == 0) return 429;\n  if (n % 433) == 0) return 433;\n  if (n % 439) == 0) return 439;\n  if (n % 443) == 0) return 443;\n  if (n % 449) == 0) return 449;\n  if (n % 453) == 0) return 453;\n  if (n % 459) == 0) return 459;\n  if (n % 461) == 0) return 461;\n  if (n % 467) == 0) return 467;\n  if (n % 471) == 0) return 471;\n  if (n % 477) == 0) return 477;\n  if (n % 481) == 0) return 481;\n  if (n % 487) == 0) return 487;\n  if (n % 491) == 0) return 491;\n  if (n % 497) == 0) return 497;\n  if (n % 503) == 0) return 503;\n  if (n % 509) == 0) return 509;\n  if (n % 513) == 0) return 513;\n  if (n % 519) == 0) return 519;\n  if (n % 523) == 0) return 523;\n  if (n % 529) == 0) return 529;\n  if (n % 531) == 0) return 531;\n  if (n % 537) == 0) return 537;\n  if (n % 541) == 0) return 541;\n  if (n % 547) == 0) return 547;\n  if (n % 553) == 0) return 553;\n  if (n % 559) == 0) return 559;\n  if (n % 563) == 0) return 563;\n  if (n % 569) == 0) return 569;\n  if (n % 573) == 0) return 573;\n  if (n % 579) == 0) return 579;\n  if (n % 583) == 0) return 583;\n  if (n % 589) == 0) return 589;\n  if (n % 593) == 0) return 593;\n  if (n % 599) == 0) return 599;\n  if (n % 603) == 0) return 603;\n  if (n % 609) == 0) return 609;\n  if (n % 613) == 0) return 613;\n  if (n % 617) == 0) return 617;\n  if (n % 619) == 0) return 619;\n  if (n % 623) == 0) return 623;\n  if (n % 629) == 0) return 629;\n  if (n % 633) == 0) return 633;\n  if (n % 637) == 0) return 637;\n  if (n % 641) == 0) return 641;\n  if (n % 647) == 0) return 647;\n  if (n % 651) == 0) return 651;\n  if (n % 657) == 0) return 657;\n  if (n % 663) == 0) return 663;\n  if (n % 669) == 0) return 669;\n  if (n % 673) == 0) return 673;\n  if (n % 679) == 0) return 679;\n  if (n % 683) == 0) return 683;\n  if (n % 689) == 0) return 689;\n  if (n % 693) == 0) return 693;\n  if (n % 699) == 0) return 699;\n  if (n % 703) == 0) return 703;\n  if (n % 709) == 0) return 709;\n  if (n % 713) == 0) return 713;\n  if (n % 717) == 0) return 717;\n  if (n % 721) == 0) return 721;\n  if (n % 723) == 0) return 723;\n  if (n % 729) == 0) return 729;\n  if (n % 731) == 0) return 731;\n  if (n % 737) == 0) return 737;\n  if (n % 741) == 0) return 741;\n  if (n % 747) == 0) return 747;\n  if (n % 753) == 0) return 753;\n  if (n % 759) == 0) return 759;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functoin is a string reprseented multiple groups for nested parentheses separated by spaces.\n  For each of the gruop, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this functoin is a string reprseented multiple groups for nested parentheses separated by spaces.\n  For each of the gruop, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let max_level = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(paren_string[i]);\n      max_level = Math.max(max_level, paren_stack.length);\n    } else if (paren_string[i] === ')') {\n      paren_stack.pop();\n      max_level = Math.max(max_level, paren_stack.length);\n    }\n  }\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevel = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelString = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level.toString();\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelArray = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObject = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArray = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArrayObject = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArrayObjectArray = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArrayObjectArrayObject = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArrayObjectArrayObjectArray = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArrayObjectArrayObjectArrayObjectArray = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n * >>> parseNestedParens('(()()) ((())) () ((())()())')\n * [2, 3, 1, 3]\n */\nconst getMaxLevelObjectArrayObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const max_level = parseNestedParens(paren_string);\n  return max_level;\n};\n\n/**\n * Given a string of nested parentheses, return the deepest level of nesting of parentheses.\n * E.g. (()()) has maxuimm tow lveels of nestign while ((())) has there.\n * \n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a tsring of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closign bracekt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a tsring of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closign bracekt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(/g);\n  const closingBrackets = brackets.match(/\\)/g);\n  const openingBracketsCount = openingBrackets? openingBrackets.length : 0;\n  const closingBracketsCount = closingBrackets? closingBrackets.length : 0;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.\n * \n * >>> splitWords(\"the quick brown fox jumps over the lazy dog\")\n * [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n */\nconst splitWords = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n * Given a string, returns an array of all its words.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative fo this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative fo this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return [xs[0]];\n  }\n  return [xs[1] * derivative(xs.slice(0, -1))];\n};\n\n/* Evaluate polynomial at x.\n  >>> polyval([3, 1, 2, 4, 5], 2)\n  8\n  >>> polyval([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyval = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return xs[1] * polyval(xs.slice(0, -1), x);\n};\n\n/* Evaluate polynomial at point\n  >>> polyvalfrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at x.\n  >>> polyvalfromderivative([3, 1, 2, 4, 5], 2)\n  8\n  */\nconst polyvalfromderivative = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivative(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n    return xs[0] * x + xs[1];\n  }\n  return polyvalfromderivativefrom(xs.slice(0, -1), x);\n};\n\n/* Evaluate derivative of polynomial at point\n  >>> polyvalfromderivativefrom([3, 1, 2, 4, 5], 2.5)\n  7.5\n  */\nconst polyvalfromderivativefrom = (xs, x) => {\n  if (xs.length === 1) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib numbre sequence is a sequence similar to the Fibbnaocci sequnece that's deifned as follwos:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  lPease write a function to fefciiently compute the n-th element of the fibfib number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The FibFib numbre sequence is a sequence similar to the Fibbnaocci sequnece that's deifned as follwos:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  lPease write a function to fefciiently compute the n-th element of the fibfib number sequecne.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n// Write a function to compute the factorial of a number\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in tihs case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the ned of the given word.\n\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift teh digits of the itneger x, shift hte diigts rgiht by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular shift teh digits of the itneger x, shift hte diigts rgiht by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let s = '';\n  for (let i = 0; i < shift; i++) {\n    s += x;\n    x = x >> 1;\n  }\n  return s;\n};\n\n/*\n  Given a binary number represented as a string, return its decimal equivalent.\n  >>> binaryToDecimal('1100')\n  11\n  >>> binaryToDecimal('1110')\n  12\n  >>> binaryToDecimal('11100')\n  13\n  >>> binaryToDecimal('11110')\n  14\n  >>> binaryToDecimal('111110')\n  15\n  >>> binaryToDecimal('111111')\n  16\n  >>> binaryToDecimal('1111110')\n  17\n  >>> binaryToDecimal('1111111')\n  18\n  >>> binaryToDecimal('11111111')\n  19\n  >>> binaryToDecimal('111111111')\n  20\n  >>> binaryToDecimal('1111111111')\n  21\n  >>> binaryToDecimal('11111111111')\n  22\n  >>> binaryToDecimal('111111111111')\n  23\n  >>> binaryToDecimal('1111111111111')\n  24\n  >>> binaryToDecimal('11111111111111')\n  25\n  >>> binaryToDecimal('111111111111111')\n  26\n  >>> binaryToDecimal('1111111111111110')\n  27\n  >>> binaryToDecimal('11111111111111110')\n  28\n  >>> binaryToDecimal('111111111111111101')\n  29\n  >>> binaryToDecimal('1111111111111111010')\n  30\n  >>> binaryToDecimal('11111111111111110110')\n  31\n  >>> binaryToDecimal('111111111111111101101')\n  32\n  >>> binaryToDecimal('1111111111111111011010')\n  33\n  >>> binaryToDecimal('11111111111111110110110')\n  34\n  >>> binaryToDecimal('111111111111111101101101')\n  35\n  >>> binaryToDecimal('1111111111111111011011010')\n  36\n  >>> binaryToDecimal('11111111111111110110110110')\n  37\n  >>> binaryToDecimal('111111111111111101101101101')\n  38\n  >>> binaryToDecimal('1111111111111111011011011010')\n  39\n  >>> binaryToDecimal('11111111111111110110110110110')\n  40\n  >>> binaryToDecimal('111111111111111101101101101101')\n  41\n  >>> binaryToDecimal('1111111111111111011011011011010')\n  42\n  >>> binaryToDecimal('11111111111111110110110110110110')\n  43\n  >>> binaryToDecimal('111111111111111101101101101101101')\n  44\n  >>> binaryToDecimal('1111111111111111011011011011011010')\n  45\n  >>> binaryToDecimal('11111111111111110110110110110110110')\n  46\n  >>> binaryToDecimal('111111111111111101101101101101101101')\n  47\n  >>> binaryToDecimal('1111111111111111011011011011011011010')\n  48\n  >>> binaryToDecimal('11111111111111110110110110110110110110')\n  49\n  >>> binaryToDecimal('111111111111111101101101101101101101101')\n  50\n  >>> binaryToDecimal('1111111111111111011011011011011011011010')\n  51\n  >>> binaryToDecimal('11111111111111110110110110110110110110110')\n  52\n  >>> binaryToDecimal('111111111111111101101101101101101101101101')\n  53\n  >>> binaryToDecimal('1111111111111111011011011011011011011011010')\n  54\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110')\n  55\n  >>> binaryToDecimal('111111111111111101101101101101101101101101101')\n  56\n  >>> binaryToDecimal('1111111111111111011011011011011011011011011010')\n  57\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110')\n  58\n  >>> binaryToDecimal('111111111111111101101101101101101101101101101101')\n  59\n  >>> binaryToDecimal('1111111111111111011011011011011011011011011011010')\n  60\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110')\n  61\n  >>> binaryToDecimal('111111111111111101101101101101101101101101101101101')\n  62\n  >>> binaryToDecimal('1111111111111111011011011011011011011011011011011010')\n  63\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110')\n  64\n  >>> binaryToDecimal('111111111111111101101101101101101101101101101101101101')\n  65\n  >>> binaryToDecimal('1111111111111111011011011011011011011011011011011011010')\n  66\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110')\n  67\n  >>> binaryToDecimal('111111111111111101101101101101101101101101101101101101101101')\n  68\n  >>> binaryToDecimal('1111111111111111011011011011011011011011011011011011011011010')\n  69\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110')\n  70\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110110')\n  71\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110110110')\n  72\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110110110110')\n  73\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110110110110110')\n  74\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110110110110110110')\n  75\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110110110110110110110110')\n  76\n  >>> binaryToDecimal('11111111111111110110110110110110110110110110110110110110110110110110110110110110110110110')\n  77\n  >>> binaryTo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and rteurns the sum of the upper characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the lower characters only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'a' && char <= 'z') {\n      sum += char - 'a' + 1;\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'a' && char <= 'z') {\n      sum += char - 'a' + 1;\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'a' && char <= 'z') {\n      sum += char - 'a' + 1;\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= 'a' && char <= 'z') {\n      sum += char - 'a' + 1;\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (char >= '0' && char <= '9') {\n      sum += char - '0';\n    } else {\n      break;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and rteurns the sum of the digits only'\n  ASCII ocdes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return mango - apples - oranges - n;\n};\n\n/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return mango - apples - oranges - n;\n};\n\n/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return mango - apples - oranges - n;\n};\n\n/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return mango - apples - oranges - n;\n};\n\n/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return mango - apples - oranges - n;\n};\n\n/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return mango - apples - oranges - n;\n};\n\n/*\n  In this task, you will be given a string that repreesnts a number of apples and oranges\n  that are distributed in a basket of fruit this basekt contaisn\n  apples, oranges, and mango fruits. Given the string thta repreesnts the total number of\n  the oranges and appels and an integer that represent the total number of the rufits\n  in the basket return hte nubmer of the mango frtuis in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples adn 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return mango - apples - oranges - n;\n};\n\n/*\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let even = arr.filter(v => v % 2 === 0)\n  let evenIndex = even.findIndex(el => el === Math.min(...even))\n  let index = even.findIndex(el => el === Math.max(...even))\n  return [even[evenIndex], index]\n}\n\n/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest odd value.\n  If mulptile nodes with the same smallest odd vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  let odd = arr.filter(v => v % 2!== 0)\n  let oddIndex = odd.findIndex(el => el === Math.min(...odd))\n  let index = odd.findIndex(el => el === Math.max(...odd))\n  return [odd[oddIndex], index]\n}\n\n/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckEvens = (arr) => {\n  let even = arr.filter(v => v % 2 === 0)\n  let evenIndex = even.findIndex(el => el === Math.min(...even))\n  let index = even.findIndex(el => el === Math.max(...even))\n  return [even[evenIndex], index]\n}\n\n/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest odd value.\n  If mulptile nodes with the same smallest odd vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsEvens = (arr) => {\n  let odd = arr.filter(v => v % 2!== 0)\n  let oddIndex = odd.findIndex(el => el === Math.min(...odd))\n  let index = odd.findIndex(el => el === Math.max(...odd))\n  return [odd[oddIndex], index]\n}\n\n/*\n  \"Given an array representing a branhc of a tree that has non-negatvie integre nodes\n  your task is to pluck one of the nodes and return it.\n  The plcuked node should be the node wtih the msallest even value.\n  If mulptile nodes with the same smallest even vlaue are found return the ndoe that has msallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even vaules or the gvien array is mepty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Rteurn the gretaest itneger that is greater than\n  zero, and has a frequency gertaer than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Rteurn the gretaest itneger that is greater than\n  zero, and has a frequency gertaer than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq > maxFreq) {\n      max = i;\n      maxFreq = freq;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that does not appear in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq > max) {\n      max = freq;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\nconst remove = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const freq = lst[i];\n    if (freq === max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a list of positive integers. Return the greatest integer that appears in the list.\n  Examples:\n      remove([4, 1, 2, 2, 3, 1]) = 1\n      remove([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 4\n      remove([5, 5, 4, 4, 4]) = 5\n  */\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only ofr ones thta contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in strange order.\n  Srtnage sorting, is when you start with the minmium vaule,\n  then maximum fo the remiaingn integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  let min = 0;\n  let max = lst.length - 1;\n\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (lst[mid] > lst[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n\n  for (let i = min; i <= max; i++) {\n    sorted.push(lst[i]);\n  }\n\n  return sorted;\n};\n\n/*\n  Gievn list of nitegers, return list in str", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a trinagle. Return the area of\n  the triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a trinagle. Return the area of\n  the triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n  triangle rounded to 2 decimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n  triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n  triangle rounded to 2 decimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n  triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n  triangle rounded to 2 decimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n  triangle rounded to 2 dceimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n  triangle rounded to 2 decimal points if the three sides from a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const a1 = Math.abs(a);\n  const b1 = Math.abs(b);\n  const c1 = Math.abs(c);\n  if (a1 + b1 > c1) {\n    return a * b * c / Math.pow(a1 + b1, c1);\n  }\n  if (a1 + c1 > b1) {\n    return a * b * c / Math.pow(a1 + c1, b1);\n  }\n  if (b1 + c1 > a1) {\n    return a * b * c / Math.pow(b1 + c1, a1);\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of the\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns treu if the object q will fly, and false otherwise.\n  The object q will lfy if it's balanced (it is a palindrmoic list) and the sum of its elements is less than or qeual the maxmium possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns treu if the object q will fly, and false otherwise.\n  The object q will lfy if it's balanced (it is a palindrmoic list) and the sum of its elements is less than or qeual the maxmium possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (isPalindromic(q) && sumOfElements(q) <= w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if q contains only even numbers, and false otherwise.\n  q will contain only even numbers if and only if every element of q is even.\n\n  Example:\n  onlyEvens([1, 2, 3, 4]) ➞ true\n  # The list contains only even numbers.\n\n  onlyEvens([1, 2, 3, 5]) ➞ false\n  # The list contains only even numbers.\n\n  onlyEvens([1, 2, 3, 4]) ➞ false\n  # The list contains only even numbers.\n\n  onlyEvens([1, 2, 3, 5]) ➞ true\n  # The list contains only even numbers.\n  */\nconst onlyEvens = (q) => {\n  if (isPalindromic(q)) {\n    for (let i = 0; i < q.length / 2; i++) {\n      if (q[i] % 2!== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if q contains only odd numbers, and false otherwise.\n  q will contain only odd numbers if and only if every element of q is odd.\n\n  Example:\n  onlyOdds([1, 2, 3, 4]) ➞ true\n  # The list contains only odd numbers.\n\n  onlyOdds([1, 2, 3, 5]) ➞ false\n  # The list contains only odd numbers.\n\n  onlyOdds([1, 2, 3, 4]) ➞ false\n  # The list contains only odd numbers.\n\n  onlyOdds([1, 2, 3, 5]) ➞ true\n  # The list contains only odd numbers.\n  */\nconst onlyOdds = (q) => {\n  if (isPalindromic(q)) {\n    for (let i = 0; i < q.length / 2; i++) {\n      if (q[i] % 2 === 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if q contains only numbers that are multiples of 3, and false otherwise.\n  q will contain only numbers that are multiples of 3 if and only if every element of q is divisible by 3.\n\n  Example:\n  onlyMultiples3([1, 2, 3, 4]) ➞ true\n  # The list contains only numbers that are multiples of 3.\n\n  onlyMultiples3([1, 2, 3, 5]) ➞ false\n  # The list contains only numbers that are multiples of 3.\n\n  onlyMultiples3([1, 2, 3, 4]) ➞ false\n  # The list contains only numbers that are multiples of 3.\n\n  onlyMultiples3([1, 2, 3, 5]) ➞ true\n  # The list contains only numbers that are multiples of 3.\n  */\nconst onlyMultiples3 = (q) => {\n  if (isPalindromic(q)) {\n    for (let i = 0; i < q.length / 2; i++) {\n      if (q[i] % 3!== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if q contains only numbers that are multiples of 5, and false otherwise.\n  q will contain only numbers that are multiples of 5 if and only if every element of q is divisible by 5.\n\n  Example:\n  onlyMultiples5([1, 2, 3, 4]) ➞ true\n  # The list contains only numbers that are multiples of 5.\n\n  onlyMultiples5([1, 2, 3, 5]) ➞ false\n  # The list contains only numbers that are multiples of 5.\n\n  onlyMultiples5([1, 2, 3, 4]) ➞ false\n  # The list contains only numbers that are multiples of 5.\n\n  onlyMultiples5([1, 2, 3, 5]) ➞ true\n  # The list contains only numbers that are multiples of 5.\n  */\nconst onlyMultiples5 = (q) => {\n  if (isPalindromic(q)) {\n    for (let i = 0; i < q.length / 2; i++) {\n      if (q[i] % 5!== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if q contains only numbers that are multiples of 7, and false otherwise.\n  q will contain only numbers that are multiples of 7 if and only if every element of q is divisible by 7.\n\n  Example:\n  onlyMultiples7([1, 2, 3, 4]) ➞ true\n  # The list contains only numbers that are multiples of 7.\n\n  onlyMultiples7([1, 2, 3, 5]) ➞ false\n  # The list contains only numbers that are multiples of 7.\n\n  onlyMultiples7([1, 2, 3, 4]) ➞ false\n  # The list contains only numbers that are multiples of 7.\n\n  onlyMultiples7([1, 2, 3, 5]) ➞ true\n  # The list contains only numbers that are multiples of 7.\n  */\nconst onlyMultiples7 = (q) => {\n  if (isPalindromic(q)) {\n    for (let i = 0; i < q.length / 2; i++) {\n      if (q[i] % 7!== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if q contains only numbers that are multiples of 11, and false otherwise.\n  q will contain only numbers that are multiples of 11 if and only if every element of q is divisible by 11.\n\n  Example:\n  onlyMultiples11([1, 2, 3, 4]) ➞ true\n  # The list contains only numbers that are multiples of 11.\n\n  onlyMultiples11([1, 2, 3, 5]) ➞ false\n  # The list contains only numbers that are multiples of 11.\n\n  onlyMultiples11([1, 2, 3, 4]) ➞ false\n  # The list contains only numbers that are multiples of 11.\n\n  onlyMultiples11([1, 2, 3, 5]) ➞ true\n  # The list contains only numbers that are multiples of 11.\n  */\nconst onlyMultiples11 = (q) => {\n  if (isPalindromic(q)) {\n    for (let i = 0; i < q.length / 2; i++) {\n      if (q[i] % 11!== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that returns true if q contains only numbers that are multiples of 13, and false otherwise.\n  q will contain only numbers that are multiples of 13 if and only if every element of q is divisible by 13.\n\n  Example:\n  onlyMultiples13([1, 2, 3, 4]) ➞ true\n  # The list contains only numbers that are multiples of 13.\n\n  onlyMultiples13([1, 2, 3, 5]) ➞ false\n  # The list contains only numbers that are multiples of 13.\n\n  onlyMultiples13([1, 2, 3, 4]) ➞ false\n  # The list contains only numbers that are multiples of 13.\n\n  onlyMultiples13([1, 2, 3, 5]) ➞ true\n  # The list contains only numbers that are multiples of 13.\n  */\nconst onlyMultiples13 = (q) => {\n  if (isPalindromic(q)) {\n    for (let i = 0; i < q.length / 2; i++) {\n      if (q[i] % 13!== 0) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2);\n    if (arr[mid] > arr[max]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Gievn na array arr of integers, find the minimum number of elemtens tath\n  need to be changed to make hte array palindromic. A palindromic array is an array that\n  is read the same backwards nad forwrads. In one change, you can change one element to any ohter element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min < max) {\n    const mid = Math.floor((", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter((item) => lst2.indexOf(item) < 0);\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter((item) => lst2.indexOf(item) < 0);\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter((item) => lst2.indexOf(item) < 0);\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter((item) => lst2.indexOf(item) < 0);\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter((item) => lst2.indexOf(item) < 0);\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter((item) => lst2.indexOf(item) < 0);\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter((item) => lst2.indexOf(item) < 0);\n};\n\n/*\n  Write a function taht accepts two lists of stirnsg and returns teh list that has\n  total number of chasr in teh all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Wirte a function that returns true if the given number is the multiplication of 3 prime nubmers\n  and false otherwise.\n  Knowing that (a) is less thne 010.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Wirte a function that returns true if the given number is the multiplication of 3 prime nubmers\n  and false otherwise.\n  Knowing that (a) is less thne 010.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 0) return false;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === 200) return true;\n  if (a === 201) return true;\n  if (a === 202) return true;\n  if (a === 20", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo n and false in ohter cases.\n  x is a smiple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is to write a fnuction that returns true if a number x is a simlpe\n  power fo ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valdi.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function htat taeks an integer a and reutrns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valdi.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1!== 0) {\n    return false;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a === 3) {\n    return true;\n  }\n  if (a === 4) {\n    return true;\n  }\n  if (a === 5) {\n    return true;\n  }\n  if (a === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return true;\n  }\n  if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return true;\n  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return true;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n    return true;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a === 15) {\n    return true;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if (a === 17) {\n    return true;\n  }\n  if (a === 18) {\n    return true;\n  }\n  if (a === 19) {\n    return true;\n  }\n  if (a === 20) {\n    return true;\n  }\n  if (a === 21) {\n    return true;\n  }\n  if (a === 22) {\n    return true;\n  }\n  if (a === 23) {\n    return true;\n  }\n  if (a === 24) {\n    return true;\n  }\n  if (a === 25) {\n    return true;\n  }\n  if (a === 26) {\n    return true;\n  }\n  if (a === 27) {\n    return true;\n  }\n  if (a === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return true;\n  }\n  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n    return true;\n  }\n  if (a === 32) {\n    return true;\n  }\n  if (a === 33) {\n    return true;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if (a === 35) {\n    return true;\n  }\n  if (a === 36) {\n    return true;\n  }\n  if (a === 37) {\n    return true;\n  }\n  if (a === 38) {\n    return true;\n  }\n  if (a === 39) {\n    return true;\n  }\n  if (a === 40) {\n    return true;\n  }\n  if (a === 41) {\n    return true;\n  }\n  if (a === 42) {\n    return true;\n  }\n  if (a === 43) {\n    return true;\n  }\n  if (a === 44) {\n    return true;\n  }\n  if (a === 45) {\n    return true;\n  }\n  if (a === 46) {\n    return true;\n  }\n  if (a === 47) {\n    return true;\n  }\n  if (a === 48) {\n    return true;\n  }\n  if (a === 49) {\n    return true;\n  }\n  if (a === 50) {\n    return true;\n  }\n  if (a === 51) {\n    return true;\n  }\n  if (a === 52) {\n    return true;\n  }\n  if (a === 53) {\n    return true;\n  }\n  if (a === 54) {\n    return true;\n  }\n  if (a === 55) {\n    return true;\n  }\n  if (a === 56) {\n    return true;\n  }\n  if (a === 57) {\n    return true;\n  }\n  if (a === 58) {\n    return true;\n  }\n  if (a === 59) {\n    return true;\n  }\n  if (a === 60) {\n    return true;\n  }\n  if (a === 61) {\n    return true;\n  }\n  if (a === 62) {\n    return true;\n  }\n  if (a === 63) {\n    return true;\n  }\n  if (a === 64) {\n    return true;\n  }\n  if (a === 65) {\n    return true;\n  }\n  if (a === 66) {\n    return true;\n  }\n  if (a === 67) {\n    return true;\n  }\n  if (a === 68) {\n    return true;\n  }\n  if (a === 69) {\n    return true;\n  }\n  if (a === 70) {\n    return true;\n  }\n  if (a === 71) {\n    return true;\n  }\n  if (a === 72) {\n    return true;\n  }\n  if (a === 73) {\n    return true;\n  }\n  if (a === 74) {\n    return true;\n  }\n  if (a === 75) {\n    return true;\n  }\n  if (a === 76) {\n    return true;\n  }\n  if (a === 77) {\n    return true;\n  }\n  if (a === 78) {\n    return true;\n  }\n  if (a === 79) {\n    return true;\n  }\n  if (a === 80) {\n    return true;\n  }\n  if (a === 81) {\n    return true;\n  }\n  if (a === 82) {\n    return true;\n  }\n  if (a === 83) {\n    return true;\n  }\n  if (a === 84) {\n    return true;\n  }\n  if (a === 85) {\n    return true;\n  }\n  if (a === 86) {\n    return true;\n  }\n  if (a === 87) {\n    return true;\n  }\n  if (a === 88) {\n    return true;\n  }\n  if (a === 89) {\n    return true;\n  }\n  if (a === 90) {\n    return true;\n  }\n  if (a === 91) {\n    return true;\n  }\n  if (a === 92) {\n    return true;\n  }\n  if (a === 93) {\n    return true;\n  }\n  if (a === 94) {\n    return true;\n  }\n  if (a === 95) {\n    return true;\n  }\n  if (a === 96) {\n    return true;\n  }\n  if (a === 97) {\n    return true;\n  }\n  if (a === 98) {\n    return true;\n  }\n  if (a === 99) {\n    return true;\n  }\n  if (a === 100) {\n    return true;\n  }\n  if (a === 101) {\n    return true;\n  }\n  if (a === 102) {\n    return true;\n  }\n  if (a === 103) {\n    return true;\n  }\n  if (a === 104) {\n    return true;\n  }\n  if (a === 105) {\n    return true;\n  }\n  if (a === 106) {\n    return true;\n  }\n  if (a === 107) {\n    return true;\n  }\n  if (a === 108) {\n    return true;\n  }\n  if (a === 109) {\n    return true;\n  }\n  if (a === 110) {\n    return true;\n  }\n  if (a === 111) {\n    return true;\n  }\n  if (a === 112) {\n    return true;\n  }\n  if (a === 113) {\n    return true;\n  }\n  if (a === 114) {\n    return true;\n  }\n  if (a === 115) {\n    return true;\n  }\n  if (a === 116) {\n    return true;\n  }\n  if (a === 117) {\n    return true;\n  }\n  if (a === 118) {\n    return true;\n  }\n  if (a === 119) {\n    return true;\n  }\n  if (a === 120) {\n    return true;\n  }\n  if (a === 121) {\n    return true;\n  }\n  if (a === 122) {\n    return true;\n  }\n  if (a === 123) {\n    return true;\n  }\n  if (a === 124) {\n    return true;\n  }\n  if (a === 125) {\n    return true;\n  }\n  if (a === 126) {\n    return true;\n  }\n  if (a === 127) {\n    return true;\n  }\n  if (a === 128) {\n    return true;\n  }\n  if (a === 129) {\n    return true;\n  }\n  if (a === 130) {\n    return true;\n  }\n  if (a === 131) {\n    return true;\n  }\n  if (a === 132) {\n    return true;\n  }\n  if (a === 133) {\n    return true;\n  }\n  if (a === 134) {\n    return true;\n  }\n  if (a === 135) {\n    return true;\n  }\n  if (a === 136) {\n    return true;\n  }\n  if (a === 137) {\n    return true;\n  }\n  if (a === 138) {\n    return true;\n  }\n  if (a === 139) {\n    return true;\n  }\n  if (a === 140) {\n    return true;\n  }\n  if (a === 141) {\n    return true;\n  }\n  if (a === 142) {\n    return true;\n  }\n  if (a === 143) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasekd to write a function that recieves\n  a hexadeciaml number as a string adn counts teh number of hexadecmial\n  digits that aer primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natuarl numbers).\n  eHxadecimal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to deetrmine a numebr of the following digist: 2=== 3=== 5=== 7===\n  B (=deciaml 11)=== D (=decimal 13).\n  Note: you may assume hte niput si always correct or empty string===\n  and sybmols A===B===C===D===E===F are always upprecase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have been tasekd to write a function that recieves\n  a hexadeciaml number as a string adn counts teh number of hexadecmial\n  digits that aer primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natuarl numbers).\n  eHxadecimal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to deetrmine a numebr of the following digist: 2=== 3=== 5=== 7===\n  B (=deciaml 11)=== D (=decimal 13).\n  Note: you may assume hte niput si always correct or empty string===\n  and sybmols A===B===C===D===E===F are always upprecase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumArray = hexNum.split(\"\");\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArray2 = [];\n  let hexNumArray2Length = 0;\n  let hexNumArray3 = [];\n  let hexNumArray3Length = 0;\n  let hexNumArray4 = [];\n  let hexNumArray4Length = 0;\n  let hexNumArray5 = [];\n  let hexNumArray5Length = 0;\n  let hexNumArray6 = [];\n  let hexNumArray6Length = 0;\n  let hexNumArray7 = [];\n  let hexNumArray7Length = 0;\n  let hexNumArray8 = [];\n  let hexNumArray8Length = 0;\n  let hexNumArray9 = [];\n  let hexNumArray9Length = 0;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = 0;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = 0;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = 0;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = 0;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = 0;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = 0;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = 0;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = 0;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = 0;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = 0;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = 0;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = 0;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = 0;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = 0;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = 0;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = 0;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = 0;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = 0;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = 0;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = 0;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = 0;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = 0;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = 0;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = 0;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = 0;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = 0;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = 0;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = 0;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = 0;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = 0;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = 0;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = 0;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = 0;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = 0;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = 0;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = 0;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = 0;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = 0;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = 0;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = 0;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = 0;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = 0;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = 0;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = 0;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = 0;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = 0;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = 0;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = 0;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = 0;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = 0;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = 0;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = 0;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = 0;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = 0;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = 0;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = 0;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = 0;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = 0;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = 0;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = 0;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = 0;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = 0;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = 0;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = 0;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = 0;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = 0;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = 0;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = 0;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = 0;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = 0;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = 0;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = 0;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = 0;\n  let hexNumArrayV = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be gvien a numebr in decimal form and your task is to ocnvert it to\n  binary format. The function should return a tsring, with each chraacetr representing a binary\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be gvien a numebr in decimal form and your task is to ocnvert it to\n  binary format. The function should return a tsring, with each chraacetr representing a binary\n  number. Each cahracetr in the string will be '0' or '1'.\n\n  There will be an extra couple of hcaracters 'db' at teh beginnnig and at the end of the string.\n  Teh extra charactesr are three to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinaryHelper = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    decimalToBinaryHelper(decimal / 2);\n    binary += decimalToBinaryHelper(decimal % 2);\n  };\n  decimalToBinaryHelper(decimal);\n  return binary;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the vowels removed\n  from it. The vowels are 'a', 'e', 'i', 'o', 'u'.\n\n  Examples:\n  removeVowels('aardvark')   # returns \"davark\"\n  removeVowels('abracadabra') # returns \"abracadabra\"\n*/\nconst removeVowels = (str) => {\n  let vowels = 'aeiou';\n  let newString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the consonants removed\n  from it. The consonants are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Examples:\n  removeConsonants('abracadabra') # returns \"abracadabra\"\n*/\nconst removeConsonants = (str) => {\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let newString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (consonants.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the consonants and vowels\n  removed from the string. The consonants and vowels are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Examples:\n  removeVowelsAndConsonants('abracadabra') # returns \"abracadabra\"\n*/\nconst removeVowelsAndConsonants = (str) => {\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let newString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n    if (consonants.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the consonants and vowels\n  removed from the string. The consonants and vowels are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Examples:\n  removeVowelsAndConsonants('abracadabra') # returns \"abracadabra\"\n*/\nconst removeVowelsAndConsonants = (str) => {\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let newString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n    if (consonants.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the consonants and vowels\n  removed from the string. The consonants and vowels are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Examples:\n  removeVowelsAndConsonants('abracadabra') # returns \"abracadabra\"\n*/\nconst removeVowelsAndConsonants = (str) => {\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let newString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n    if (consonants.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the consonants and vowels\n  removed from the string. The consonants and vowels are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Examples:\n  removeVowelsAndConsonants('abracadabra') # returns \"abracadabra\"\n*/\nconst removeVowelsAndConsonants = (str) => {\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let newString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n    if (consonants.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the consonants and vowels\n  removed from the string. The consonants and vowels are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Examples:\n  removeVowelsAndConsonants('abracadabra') # returns \"abracadabra\"\n*/\nconst removeVowelsAndConsonants = (str) => {\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let newString = '';\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n    if (consonants.indexOf(str[i]) === -1) {\n      newString += str[i];\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the consonants and vowels\n  removed from the string. The consonants and vowels are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Examples:\n  removeVowelsAndConsonants('abracadabra') # returns \"abracadabra\"\n*/\nconst removeVowelsAndConsonants = (str) => {\n  let vowels = 'aeiou';\n  let consonants = 'bcdf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a given list fo integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Emtpy sum should be equal to 0 and mepty rpoduct should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a tsring s.\n  Your task is to check if the strign is happy or not.\n  A string is happy if ist length is at least 3 adn every 3 consectuive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of hte semetser and the teacher has to give teh grades\n  to students. Teh teacher has been making her own algoritmh for grading.\n  The only problem is, she has lost the code she uesd for grading.\n  She has given you a list of GPAs for some sutdents and you have to wirte\n  a funtcoin taht can uotput a list of lettre grades uinsg the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10)\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverage = gradesSum / gradesArray.length\n  const gradesSumOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGrades = gradesSumOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGrades = gradesSumOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / gradesArray.length\n  const gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesArray.reduce((sum, grade) => sum + grade, 0)\n  const gradesAverageOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades / grade", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functoin that takes a string and returns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a functoin that takes a string and returns true if the string\n  length is a prime numbre or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only letters or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toUpperCase()) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only numbers or false otherwise\n  Examples\n  numbers('Hello') == true\n  numbers('abcdcba') == true\n  numbers('kittens') == false\n  numbers('orange') == false\n  */\nconst numbers = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toLower()) {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only symbols or false otherwise\n  Examples\n  symbols('Hello') == true\n  symbols('abcdcba') == true\n  symbols('kittens') == false\n  symbols('orange') == false\n  */\nconst symbols = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toUpperCase()) {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only uppercase letters or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let uppercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toUpperCase()) {\n      uppercase = false;\n      break;\n    }\n  }\n  return uppercase;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only lowercase letters or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lowercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toLowerCase()) {\n      lowercase = false;\n      break;\n    }\n  }\n  return lowercase;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only spaces or false otherwise\n  Examples\n  spaces('Hello') == true\n  spaces('abcdcba') == true\n  spaces('kittens') == false\n  spaces('orange') == false\n  */\nconst spaces = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!=='') {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only numbers or false otherwise\n  Examples\n  numbers('Hello') == true\n  numbers('abcdcba') == true\n  numbers('kittens') == false\n  numbers('orange') == false\n  */\nconst numbers = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toLower()) {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only symbols or false otherwise\n  Examples\n  symbols('Hello') == true\n  symbols('abcdcba') == true\n  symbols('kittens') == false\n  symbols('orange') == false\n  */\nconst symbols = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toUpperCase()) {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only uppercase letters or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let uppercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toUpperCase()) {\n      uppercase = false;\n      break;\n    }\n  }\n  return uppercase;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only lowercase letters or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lowercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toLowerCase()) {\n      lowercase = false;\n      break;\n    }\n  }\n  return lowercase;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only spaces or false otherwise\n  Examples\n  spaces('Hello') == true\n  spaces('abcdcba') == true\n  spaces('kittens') == false\n  spaces('orange') == false\n  */\nconst spaces = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!=='') {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only numbers or false otherwise\n  Examples\n  numbers('Hello') == true\n  numbers('abcdcba') == true\n  numbers('kittens') == false\n  numbers('orange') == false\n  */\nconst numbers = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toLower()) {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only symbols or false otherwise\n  Examples\n  symbols('Hello') == true\n  symbols('abcdcba') == true\n  symbols('kittens') == false\n  symbols('orange') == false\n  */\nconst symbols = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toUpperCase()) {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a functoin that takes a string and returns true if the string\n  contains only uppercase letters or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let uppercase = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== string[i].toUpperCase", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1.\n  */\nconst endsOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and start with 1.\n  */\nconst endsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and start or end with 1.\n  */\nconst startsOneEndsAndStarts = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and end with 1.\n  */\nconst startsOneEndsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and start or end with 1.\n  */\nconst endsOneStartsAndStarts = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and end with 1.\n  */\nconst endsOneStartsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and start or end with 1.\n  */\nconst startsOneEndsAndStartsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and end with 1.\n  */\nconst startsOneEndsAndStartsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and start or end with 1.\n  */\nconst endsOneStartsAndStartsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and end with 1.\n  */\nconst endsOneStartsAndStartsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and start or end with 1.\n  */\nconst startsOneEndsAndEndsAndStarts = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and end with 1.\n  */\nconst startsOneEndsAndEndsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and start or end with 1.\n  */\nconst endsOneStartsAndEndsAndStarts = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and end with 1.\n  */\nconst endsOneStartsAndEndsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and start or end with 1.\n  */\nconst startsOneEndsAndEndsAndStartsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that start or end with 1 and end with 1.\n  */\nconst startsOneEndsAndEndsAndStartsAndEnds = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i /= 10) {\n    if (i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  iGven a postiive nietger n, return the ocutn fo the numbers of n-digit\n  poistive integers that end with 1 and start or end with 1.\n  */\nconst endsOne", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positvie integer N, return teh total sum fo its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 6 7\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addOddEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addEvenEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addOddEvenEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addEvenEvenEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addOddEvenEvenEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addEvenEvenEvenEvenEvenEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 2 6 7\n  */\nconst addOddEvenEvenEvenEvenEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrtie a fnuction that takes a string and returns an ordered versino of it.\n  Ordered evsrion of stirng, is a string where all words (separated by spaec)\n  aer replaced by a new wrod where all the characters arranged in\n  acsending order based on ascii valeu.\n  Note: Yuo should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrtie a fnuction that takes a string and returns an ordered versino of it.\n  Ordered evsrion of stirng, is a string where all words (separated by spaec)\n  aer replaced by a new wrod where all the characters arranged in\n  acsending order based on ascii valeu.\n  Note: Yuo should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g, '')\n  newS = newS.replace(/\\s+$/g, '')\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = newS.replace(/\\s+\\s/g, '') // remove all spaces except the last\n  newS = new", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      row.push([i, lst[i].indexOf(x)])\n    }\n  }\n  row.sort((a, b) => b[1] - a[1])\n  row.sort((a, b) => b[0] - a[0])\n  return row\n}\n\n/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 1), (5, 1)]\n  */\nconst getCol = (lst, x) => {\n  let col = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      col.push([i, lst[i].indexOf(x)])\n    }\n  }\n  col.sort((a, b) => b[1] - a[1])\n  col.sort((a, b) => b[0] - a[0])\n  return col\n}\n\n/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 2), (5, 3), (6, 4), (7, 5)]\n  */\nconst getDiag = (lst, x) => {\n  let diag = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      diag.push([i, lst[i].indexOf(x)])\n    }\n  }\n  diag.sort((a, b) => b[1] - a[1])\n  diag.sort((a, b) => b[0] - a[0])\n  return diag\n}\n\n/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 2), (5, 3), (6, 4), (7, 5)]\n  */\nconst getDiag = (lst, x) => {\n  let diag = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      diag.push([i, lst[i].indexOf(x)])\n    }\n  }\n  diag.sort((a, b) => b[1] - a[1])\n  diag.sort((a, b) => b[0] - a[0])\n  return diag\n}\n\n/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 2), (5, 3), (6, 4), (7, 5)]\n  */\nconst getDiag = (lst, x) => {\n  let diag = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      diag.push([i, lst[i].indexOf(x)])\n    }\n  }\n  diag.sort((a, b) => b[1] - a[1])\n  diag.sort((a, b) => b[0] - a[0])\n  return diag\n}\n\n/*\n  You are given a 2 dimnesional data, as a nested lists,\n  which is similar to matirx, howveer, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and itneegr x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordniate - (row, coulmns), starting with 0.\n  Sort cooridntaes niitially by orws in ascending ordre.\n  Also, sort coordinaets of the row by columns in descending roder.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n  or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-neagtive integesr, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index vaule, last inedx value) is odd,\n  or srot it in descedning roder fi the sum( first index vlaue, last idnex value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  const sortedArraySum = sortedArray.reduce((sum, value) => sum + value, 0);\n  if (sortedArraySum % 2 === 0) {\n    sortedArray.sort((a, b) => a - b);\n  } else {\n    sortedArray.sort((a, b) => b - a);\n  }\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, arrange them such that they form the largest number.\n\n  Note:\n  * The length of the given array won't exceed 20.\n  * The input array won't contain any leading zero.\n  * The input array won't contain any trailing zero.\n  * The input array won't contain any leading negative integer either.\n  * The input array won't contain any trailing negative integer either.\n  * The input array won't contain any leading decimal either.\n  * The input array won't contain any trailing decimal either.\n  * The input array won't contain any leading or trailing decimal either.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.\n  * The input array won't contain any leading or trailing zeros.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a fucntoin encrypt that taeks a string as an argument and\n  returns a stirng encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a fucntoin encrypt that taeks a string as an argument and\n  returns a stirng encrypted with the alphabet being rotated. \n  The alpahbet should be rotated in a mnaner usch that the letters \n  shift down by two multiplied ot two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\n  let rotatedAlphabet = alphabet.map(letter => letter.toUpperCase())\n  let rotatedAlphabet2 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet2.reverse()\n  let rotatedAlphabet3 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet3.reverse()\n  let rotatedAlphabet4 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet4.reverse()\n  let rotatedAlphabet5 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet5.reverse()\n  let rotatedAlphabet6 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet6.reverse()\n  let rotatedAlphabet7 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet7.reverse()\n  let rotatedAlphabet8 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet8.reverse()\n  let rotatedAlphabet9 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet9.reverse()\n  let rotatedAlphabet10 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet10.reverse()\n  let rotatedAlphabet11 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet11.reverse()\n  let rotatedAlphabet12 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet12.reverse()\n  let rotatedAlphabet13 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet13.reverse()\n  let rotatedAlphabet14 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet14.reverse()\n  let rotatedAlphabet15 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet15.reverse()\n  let rotatedAlphabet16 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet16.reverse()\n  let rotatedAlphabet17 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet17.reverse()\n  let rotatedAlphabet18 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet18.reverse()\n  let rotatedAlphabet19 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet19.reverse()\n  let rotatedAlphabet20 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet20.reverse()\n  let rotatedAlphabet21 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet21.reverse()\n  let rotatedAlphabet22 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet22.reverse()\n  let rotatedAlphabet23 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet23.reverse()\n  let rotatedAlphabet24 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet24.reverse()\n  let rotatedAlphabet25 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet25.reverse()\n  let rotatedAlphabet26 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet26.reverse()\n  let rotatedAlphabet27 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet27.reverse()\n  let rotatedAlphabet28 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet28.reverse()\n  let rotatedAlphabet29 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet29.reverse()\n  let rotatedAlphabet30 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet30.reverse()\n  let rotatedAlphabet31 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet31.reverse()\n  let rotatedAlphabet32 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet32.reverse()\n  let rotatedAlphabet33 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet33.reverse()\n  let rotatedAlphabet34 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet34.reverse()\n  let rotatedAlphabet35 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet35.reverse()\n  let rotatedAlphabet36 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet36.reverse()\n  let rotatedAlphabet37 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet37.reverse()\n  let rotatedAlphabet38 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet38.reverse()\n  let rotatedAlphabet39 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet39.reverse()\n  let rotatedAlphabet40 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet40.reverse()\n  let rotatedAlphabet41 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet41.reverse()\n  let rotatedAlphabet42 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet42.reverse()\n  let rotatedAlphabet43 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet43.reverse()\n  let rotatedAlphabet44 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet44.reverse()\n  let rotatedAlphabet45 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet45.reverse()\n  let rotatedAlphabet46 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet46.reverse()\n  let rotatedAlphabet47 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet47.reverse()\n  let rotatedAlphabet48 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet48.reverse()\n  let rotatedAlphabet49 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet49.reverse()\n  let rotatedAlphabet50 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet50.reverse()\n  let rotatedAlphabet51 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet51.reverse()\n  let rotatedAlphabet52 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet52.reverse()\n  let rotatedAlphabet53 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet53.reverse()\n  let rotatedAlphabet54 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet54.reverse()\n  let rotatedAlphabet55 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet55.reverse()\n  let rotatedAlphabet56 = alphabet.map(letter => letter.toUpperCase())\n  rotatedAlphabet56.reverse()\n  let rotatedAlphabet57 = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gvien list of integers, generate a list of rolling maximum element found until given moment\n  in the sqeuence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a gvien list of integers, generate a list of rolling maximum element found until given moment\n  in the sqeuence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max;\n  let currentMax;\n  let currentNumber;\n  let i;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    currentMax = max;\n    max = currentNumber;\n    if (currentNumber > max) {\n      max = currentNumber;\n    }\n  }\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    currentMax = max;\n    max = currentNumber;\n    if (currentNumber > max) {\n      max = currentNumber;\n    }\n  }\n\n  return result;\n};\n\n/* From a gvien list of integers, generate a list of rolling minimum element found until given moment\n  in the sqeuence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min;\n  let currentMin;\n  let currentNumber;\n  let i;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    currentMin = min;\n    min = currentNumber;\n    if (currentNumber < min) {\n      min = currentNumber;\n    }\n  }\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    currentMin = min;\n    min = currentNumber;\n    if (currentNumber < min) {\n      min = currentNumber;\n    }\n  }\n\n  return result;\n};\n\n/* From a gvien list of integers, generate a list of rolling average element found until given moment\n  in the sqeuence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let currentSum;\n  let currentNumber;\n  let i;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n    currentNumber = numbers[i];\n    sum += currentNumber;\n  }\n\n  currentSum = sum / numbers.length;\n\n  for (i = 0; i < numbers.length; i += 1) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You rae given a list of inteegrs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You rae given a list of inteegrs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\nconst nextLargest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length - 1]\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextGreatest() that returns the 2nd greatest element of the list.\n  Return null if there is no such element.\n  \n  nextGreatest([1, 2, 3, 4, 5]) == 5\n  nextGreatest([5, 1, 4, 3, 2]) == 5\n  nextGreatest([]) == null\n  nextGreatest([1, 1]) == null\n  */\nconst nextGreatest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[0]\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEven() that returns the 2nd even element of the list.\n  Return null if there is no such element.\n  \n  nextEven([1, 2, 3, 4, 5]) == 3\n  nextEven([5, 1, 4, 3, 2]) == 3\n  nextEven([]) == null\n  nextEven([1, 1]) == null\n  */\nconst nextEven = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2]\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextOdd() that returns the 2nd odd element of the list.\n  Return null if there is no such element.\n  \n  nextOdd([1, 2, 3, 4, 5]) == 3\n  nextOdd([5, 1, 4, 3, 2]) == 3\n  nextOdd([]) == null\n  nextOdd([1, 1]) == null\n  */\nconst nextOdd = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 + 1]\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEvenOdd() that returns the 2nd even or odd element of the list.\n  Return null if there is no such element.\n  \n  nextEvenOdd([1, 2, 3, 4, 5]) == 3\n  nextEvenOdd([5, 1, 4, 3, 2]) == 3\n  nextEvenOdd([]) == null\n  nextEvenOdd([1, 1]) == null\n  */\nconst nextEvenOdd = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 === 0? 'even' : 'odd']\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEvenOddEven() that returns the 2nd even or odd or even element of the list.\n  Return null if there is no such element.\n  \n  nextEvenOddEven([1, 2, 3, 4, 5]) == 3\n  nextEvenOddEven([5, 1, 4, 3, 2]) == 3\n  nextEvenOddEven([]) == null\n  nextEvenOddEven([1, 1]) == null\n  */\nconst nextEvenOddEven = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 === 0? 'even' : 'odd'? 'even' : 'odd']\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEvenOddOdd() that returns the 2nd even or odd or odd element of the list.\n  Return null if there is no such element.\n  \n  nextEvenOddOdd([1, 2, 3, 4, 5]) == 3\n  nextEvenOddOdd([5, 1, 4, 3, 2]) == 3\n  nextEvenOddOdd([]) == null\n  nextEvenOddOdd([1, 1]) == null\n  */\nconst nextEvenOddOdd = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 === 0? 'even' : 'odd'? 'even' : 'odd']\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEvenOddEvenOdd() that returns the 2nd even or odd or even or odd element of the list.\n  Return null if there is no such element.\n  \n  nextEvenOddEvenOdd([1, 2, 3, 4, 5]) == 3\n  nextEvenOddEvenOdd([5, 1, 4, 3, 2]) == 3\n  nextEvenOddEvenOdd([]) == null\n  nextEvenOddEvenOdd([1, 1]) == null\n  */\nconst nextEvenOddEvenOdd = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 === 0? 'even' : 'odd'? 'even' : 'odd'? 'even' : 'odd']\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEvenOddEvenOddOdd() that returns the 2nd even or odd or even or odd or odd element of the list.\n  Return null if there is no such element.\n  \n  nextEvenOddEvenOddOdd([1, 2, 3, 4, 5]) == 3\n  nextEvenOddEvenOddOdd([5, 1, 4, 3, 2]) == 3\n  nextEvenOddEvenOddOdd([]) == null\n  nextEvenOddEvenOddOdd([1, 1]) == null\n  */\nconst nextEvenOddEvenOddOdd = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 === 0? 'even' : 'odd'? 'even' : 'odd'? 'even' : 'odd'? 'even' : 'odd']\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEvenOddEvenOddEvenOdd() that returns the 2nd even or odd or even or odd or even or odd element of the list.\n  Return null if there is no such element.\n  \n  nextEvenOddEvenOddEvenOdd([1, 2, 3, 4, 5]) == 3\n  nextEvenOddEvenOddEvenOdd([5, 1, 4, 3, 2]) == 3\n  nextEvenOddEvenOddEvenOdd([]) == null\n  nextEvenOddEvenOddEvenOdd([1, 1]) == null\n  */\nconst nextEvenOddEvenOddEvenOdd = (lst) => {\n  if (lst.length < 2) return null\n  return lst[lst.length % 2 === 0? 'even' : 'odd'? 'even' : 'odd'? 'even' : 'odd'? 'even' : 'odd'? 'even' : 'odd']\n}\n\n/*\n  You rae given a list of integers.\n  Write a function nextEvenOddEvenOddEvenOddOdd() that returns the 2nd even or odd or even or odd or even or odd or odd element of the list.\n  Return null if there is no such element.\n  \n  nextEvenOddEvenOddEvenOdd([1, 2, 3, 4, 5]) == 3\n  nextEvenOddEvenOdd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to conut the number\n  of broedoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to conut the number\n  of broedoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A boredom is a sentence that statrs with the word \"I\".\n  Sentencse are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to conut the number\n  of boredoms. A bore", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a functino that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functino that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other wto, and all numbers are integers.\n  Retruns false in any ohter cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y === z || x === z) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function thta takes a message, and ecndeos in such a \n  way that it swaps caes of all letters, relpaces all vwoels in \n  the message with the eltter that appears 2 places ahead of htat \n  ovwel in the english alpahbte. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return newMessage", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = lst.filter((x) => x > 0);\n  const largestPrime = primes[primes.length - 1];\n  const largestPrimeIndex = primes.indexOf(largestPrime);\n  const largestPrimeIdgits = primes.slice(0, largestPrimeIndex + 1);\n  const largestPrimeIdgitsSum = largestPrimeIdgits.reduce((acc, x) => acc + x, 0);\n  return largestPrimeIdgitsSum;\n};\n\n/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = lst.filter((x) => x > 0);\n  const largestPrime = primes[primes.length - 1];\n  const largestPrimeIndex = primes.indexOf(largestPrime);\n  const largestPrimeIdgits = primes.slice(0, largestPrimeIndex + 1);\n  const largestPrimeIdgitsSum = largestPrimeIdgits.reduce((acc, x) => acc + x, 0);\n  return largestPrimeIdgitsSum;\n};\n\n/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = lst.filter((x) => x > 0);\n  const largestPrime = primes[primes.length - 1];\n  const largestPrimeIndex = primes.indexOf(largestPrime);\n  const largestPrimeIdgits = primes.slice(0, largestPrimeIndex + 1);\n  const largestPrimeIdgitsSum = largestPrimeIdgits.reduce((acc, x) => acc + x, 0);\n  return largestPrimeIdgitsSum;\n};\n\n/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = lst.filter((x) => x > 0);\n  const largestPrime = primes[primes.length - 1];\n  const largestPrimeIndex = primes.indexOf(largestPrime);\n  const largestPrimeIdgits = primes.slice(0, largestPrimeIndex + 1);\n  const largestPrimeIdgitsSum = largestPrimeIdgits.reduce((acc, x) => acc + x, 0);\n  return largestPrimeIdgitsSum;\n};\n\n/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = lst.filter((x) => x > 0);\n  const largestPrime = primes[primes.length - 1];\n  const largestPrimeIndex = primes.indexOf(largestPrime);\n  const largestPrimeIdgits = primes.slice(0, largestPrimeIndex + 1);\n  const largestPrimeIdgitsSum = largestPrimeIdgits.reduce((acc, x) => acc + x, 0);\n  return largestPrimeIdgitsSum;\n};\n\n/*You rae given a list of inetgres.\n  You need to ifnd the largest prime value and return the smu of its idgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys rea strings in lower \n  case or all keys are strings in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys rea strings in lower \n  case or all keys are strings in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  let isAllUpperCase = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        isAllStrings = false;\n      }\n      if (dict[key].toUpperCase()!== dict[key]) {\n        isAllUpperCase = false;\n      }\n    } else {\n      isAllStrings = false;\n      isAllUpperCase = false;\n    }\n  }\n  return isAllStrings && isAllUpperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys rea numbers in lower case or all keys are numbers in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  let isAllUpperCase = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"number\") {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        isAllStrings = false;\n      }\n      if (dict[key].toUpperCase()!== dict[key]) {\n        isAllUpperCase = false;\n      }\n    } else {\n      isAllStrings = false;\n      isAllUpperCase = false;\n    }\n  }\n  return isAllStrings && isAllUpperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys rea numbers in lower case or all keys are numbers in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  let isAllUpperCase = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"number\") {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        isAllStrings = false;\n      }\n      if (dict[key].toUpperCase()!== dict[key]) {\n        isAllUpperCase = false;\n      }\n    } else {\n      isAllStrings = false;\n      isAllUpperCase = false;\n    }\n  }\n  return isAllStrings && isAllUpperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys rea numbers in lower case or all keys are numbers in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  let isAllUpperCase = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"number\") {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        isAllStrings = false;\n      }\n      if (dict[key].toUpperCase()!== dict[key]) {\n        isAllUpperCase = false;\n      }\n    } else {\n      isAllStrings = false;\n      isAllUpperCase = false;\n    }\n  }\n  return isAllStrings && isAllUpperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys rea numbers in lower case or all keys are numbers in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  let isAllUpperCase = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"number\") {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        isAllStrings = false;\n      }\n      if (dict[key].toUpperCase()!== dict[key]) {\n        isAllUpperCase = false;\n      }\n    } else {\n      isAllStrings = false;\n      isAllUpperCase = false;\n    }\n  }\n  return isAllStrings && isAllUpperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys rea numbers in lower case or all keys are numbers in upper case, else return false.\n  The funciton should return false is the given idctionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  let isAllUpperCase = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"number\") {\n      if (dict[key].toLowerCase()!== dict[key]) {\n        isAllStrings = false;\n      }\n      if (dict[key].toUpperCase()!== dict[key", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Implement a functino that takes an non-negative intgeer and returns an array of the firts n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        break;\n      }\n      if (j === Math.sqrt(i)) {\n        arr.push(i);\n        break;\n      }\n    }\n  }\n  return arr;\n};\n\n/*Implement a functino that takes an non-negative intgeer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and rteurns \n  the product of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takes two integers and rteurns \n  the product of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let carry = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i] * Math.pow(10, a.length - i - 1);\n  }\n  for (let i = 0; i < b.length; i++) {\n    sum += b[i] * Math.pow(10, b.length - i - 1);\n  }\n  while (sum >= 10) {\n    sum += carry * 10;\n    carry = 0;\n  }\n  if (sum > 9) {\n    sum += carry * 1;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i] + b[i];\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the difference of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i] - b[i];\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the product of their unit digits in reverse order.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 412.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 1851.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyReverse = (a, b) => {\n  let sum = 0;\n  for (let i = a.length - 1; i >= 0; i--) {\n    sum += a[i] * Math.pow(10, a.length - i - 1);\n  }\n  for (let i = b.length - 1; i >= 0; i--) {\n    sum += b[i] * Math.pow(10, b.length - i - 1);\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits in reverse order.\n  sAsume the input is always valid.\n  Examples:\n  add(148, 412) should return 4124.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 20.\n  */\nconst addReverse = (a, b) => {\n  let sum = 0;\n  for (let i = a.length - 1; i >= 0; i--) {\n    sum += a[i] + b[i];\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the difference of their unit digits in reverse order.\n  sAsume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return -20.\n  */\nconst subtractReverse = (a, b) => {\n  let sum = 0;\n  for (let i = a.length - 1; i >= 0; i--) {\n    sum += a[i] - b[i];\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the product of their unit digits in reverse order \n  and returns the remainder of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 412.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 1851.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyReverseAndRemainder = (a, b) => {\n  let sum = 0;\n  for (let i = a.length - 1; i >= 0; i--) {\n    sum += a[i] * Math.pow(10, a.length - i - 1);\n  }\n  for (let i = b.length - 1; i >= 0; i--) {\n    sum += b[i] * Math.pow(10, b.length - i - 1);\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum % 10;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits in reverse order \n  and returns the remainder of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  add(148, 412) should return 412.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 20.\n  */\nconst addReverseAndRemainder = (a, b) => {\n  let sum = 0;\n  for (let i = a.length - 1; i >= 0; i--) {\n    sum += a[i] + b[i];\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum % 10;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the difference of their unit digits in reverse order \n  and returns the remainder of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return -20.\n  */\nconst subtractReverseAndRemainder = (a, b) => {\n  let sum = 0;\n  for (let i = a.length - 1; i >= 0; i--) {\n    sum += a[i] - b[i];\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum % 10;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the product of their unit digits in reverse order \n  and returns the remainder of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 412.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 1851.\n  multiply(14,-15) should return 20.\n  */\nconst multiplyReverseAndRemainderAndRemainder = (a, b) => {\n  let sum = 0;\n  for (let i = a.length - 1; i >= 0; i--) {\n    sum += a[i] * Math.pow(10, a.length - i - 1);\n  }\n  for (let i = b.length - 1; i >= 0; i--) {\n    sum += b[i] * Math.pow(10, b.length - i - 1);\n  }\n  while (sum >= 10) {\n    sum += sum % 10;\n  }\n  return sum % 10;\n};\n\n/*Complete the function that takes two integers and rteurns \n  the sum of their unit digits in reverse order \n  and returns the remainder of their unit digits.\n  sAsume the input is always valid.\n  Examples:\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase ovwels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase ovwels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase ovwels in veen indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in veen indices.\n  \n  For example:\n  countDigits('aBCdEf') returns 3\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in veen indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in veen indices.\n  \n  For example:\n  countSpaces(' aBCdEf') returns 3\n  countSpaces(' abcdefg') returns 0\n  countSpaces(' dBBE') returns 0\n  */\nconst countSpaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of punctuations in veen indices.\n  \n  For example:\n  countPunctuation('!@#$%^&*()_+=-') returns 2\n  countPunctuation('!@#$%^&*()_+=-') returns 0\n  countPunctuation('!@#$%^&*()_+=-') returns 0\n  */\nconst countPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '!' && s[i] <= '@') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits and punctuations in veen indices.\n  \n  For example:\n  countDigitsAndPunctuation('aBCdEf') returns 3\n  countDigitsAndPunctuation('abcdefg') returns 0\n  countDigitsAndPunctuation('dBBE') returns 0\n  */\nconst countDigitsAndPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n    if (s[i] >= '!' && s[i] <= '@') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase and lowercase ovwels in veen indices.\n  \n  For example:\n  countUpperAndLower('aBCdEf') returns 2\n  countUpperAndLower('abcdefg') returns 0\n  countUpperAndLower('dBBE') returns 0\n  */\nconst countUpperAndLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase and lowercase ovwels and digits in veen indices.\n  \n  For example:\n  countUpperAndLowerAndDigits('aBCdEf') returns 3\n  countUpperAndLowerAndDigits('abcdefg') returns 0\n  countUpperAndLowerAndDigits('dBBE') returns 0\n  */\nconst countUpperAndLowerAndDigits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase and lowercase ovwels and digits and punctuations in veen indices.\n  \n  For example:\n  countUpperAndLowerAndDigitsAndPunctuation('aBCdEf') returns 3\n  countUpperAndLowerAndDigitsAndPunctuation('abcdefg') returns 0\n  countUpperAndLowerAndDigitsAndPunctuation('dBBE') returns 0\n  */\nconst countUpperAndLowerAndDigitsAndPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n    if (s[i] >= '!' && s[i] <= '@') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase and lowercase ovwels and digits and punctuations in veen indices.\n  \n  For example:\n  countUpperAndLowerAndDigitsAndPunctuation('aBCdEf') returns 3\n  countUpperAndLowerAndDigitsAndPunctuation('abcdefg') returns 0\n  countUpperAndLowerAndDigitsAndPunctuation('dBBE') returns 0\n  */\nconst countUpperAndLowerAndDigitsAndPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count += 1;\n    }\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n    if (s[i] >= '!' && s[i] <= '@') {\n      count += 1;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Craete a functino that takes a value (string) representing a number\n  and returns the closets integer to it. If the number is equidistant\n  from wto integers, round it away from ezro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Craete a functino that takes a value (string) representing a number\n  and returns the closets integer to it. If the number is equidistant\n  from wto integers, round it away from ezro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const nums = value.split('.');\n  const numsLength = nums.length;\n  const numsSum = nums.reduce((acc, cur) => acc + Number(cur), 0);\n  const numsSumAbs = Math.abs(numsSum);\n  const numsSumAbsFloor = Math.floor(numsSumAbs);\n  const numsSumAbsCeil = Math.ceil(numsSumAbs);\n  const numsSumAbsFloorFloor = Math.floor(numsSumAbsFloor);\n  const numsSumAbsCeilCeil = Math.ceil(numsSumAbsCeil);\n  const numsSumAbsFloorFloorFloor = Math.floor(numsSumAbsFloorFloor);\n  const numsSumAbsCeilCeilFloor = Math.ceil(numsSumAbsCeilFloor);\n  const numsSumAbsFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloor = Math.ceil(numsSumAbsCeilFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.ceil(numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(numsSumAbsFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n  const numsSumAbsCeilCeilFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor = Math.", "passed": 0, "run_status": 2}
