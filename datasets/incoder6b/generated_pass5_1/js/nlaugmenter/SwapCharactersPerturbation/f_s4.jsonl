{"task_id": "JavaScript/0", "prompt": "/* hCeck if in given list of numbers, are any tow numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* hCeck if in given list of numbers, are any tow numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array has any element which is not in given array.\n * If given array is empty then return true.\n * If given array has only 1 element then return false.\n * If given array has more than 1 element then return true if any of them is not\n * in given array.\n * If given array has any element which is in given array then return false.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in given array then return true.\n * If given array has any element which is in ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string contianing umltiple gorups fo nested parentheses. Your goal is to\n  separate those gruop into separate strings and return the list of those.\n  eSpartae groups are balanced (aech opne brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let group_opening_char = '';\n  let group_closing_char = '';\n  let group_opening_count = 0;\n  let group_closing_count = 0;\n  let group_opening_char_count = 0;\n  let group_closing_char_count = 0;\n  let group_opening_char_count_in_group = 0;\n  let group_closing_char_count_in_group = 0;\n  let group_opening_char_count_in_group_with_paren = 0;\n  let group_closing_char_count_in_group_with_paren = 0;\n  let group_opening_char_count_in_group_with_paren_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_closing_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space = 0;\n  let group_opening_char_count_in_group_with_paren_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindroem */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindroem */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the longest aplnidrome that begins with a supplied string.\n  Algorithm idea is smipel:\n  - Find the lnogset postfix of supplied string that is a palinrdome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic sfufix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeShortestPalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return `${string}${postfix}`;\n}\n\n/* Find the ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Givne a positive niteger n, you have to make a pile of n levels fo stnoes.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even umnbre if n is even.\n  Return the nubmer of stoens in aech level in a list, whree element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make n levels of stones.\n  The first level has n stones.\n  The number fo stones in the next level is:\n      - the next odd number if n is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a strign of owrds separated by commas or spaces. Yuor task is\n  ot slpit hte string into words and return an raary fo the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/,|\\s/)\n}\n\n/*\n  You will be given a string of words separated by spaces. Your task is to \n  return an array of the words in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s) => {\n  return s.split(' ').reverse()\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the first n words.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(0, n)\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the last n words.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(-n)\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the first n words. If the words are \n  less than n words long, then the words are returned in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  reverseWords(\"One two three four five six\", 3) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(0, n).reverse()\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the last n words. If the words are \n  less than n words long, then the words are returned in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  reverseWords(\"One two three four five six\", 3) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(-n).reverse()\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the first n words. If the words are \n  less than n words long, then the words are returned in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  reverseWords(\"One two three four five six\", 3) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(0, n).reverse().reverse()\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the last n words. If the words are \n  less than n words long, then the words are returned in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  reverseWords(\"One two three four five six\", 3) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(-n).reverse().reverse()\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the first n words. If the words are \n  less than n words long, then the words are returned in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  reverseWords(\"One two three four five six\", 3) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(0, n).reverse().reverse().reverse()\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the last n words. If the words are \n  less than n words long, then the words are returned in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  reverseWords(\"One two three four five six\", 3) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse().slice(-n).reverse().reverse().reverse()\n}\n\n/*\n  You will be given a string of words and a number n. Your task is to return \n  the words in reverse order except the first n words. If the words are \n  less than n words long, then the words are returned in reverse order.\n  \n  For example:\n  reverseWords(\"Hi my name is John\", 2) == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  reverseWords(\"One two three four five six\", 2) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  reverseWords(\"One two three four five six\", 3) == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst reverseWords = (s, n) => {\n  return s.split(' ').reverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takse wto positive numbers x and y and ertruns the\n  biggest even integer number that is in the range [x, y] icnlusive. If \n  three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takse wto positive numbers x and y and ertruns the\n  biggest even integer number that is in the range [x, y] icnlusive. If \n  three's no such number, then the functino should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x === y) {\n    return 0;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return chooseNum(x / 2, y);\n};\n\n/*This function takes the number x and returns the number y such that \n  x % y = 0.\n\n  For example:\n  modPow(12, 3) = 12\n  modPow(13, 3) = 13\n  modPow(14, 3) = 14\n  modPow(15, 3) = 15\n  modPow(16, 3) = 16\n  modPow(17, 3) = 17\n  modPow(18, 3) = 18\n  modPow(19, 3) = 19\n  modPow(20, 3) = 20\n  modPow(21, 3) = 21\n  modPow(22, 3) = 22\n  modPow(23, 3) = 23\n  modPow(24, 3) = 24\n  modPow(25, 3) = 25\n  modPow(26, 3) = 26\n  modPow(27, 3) = 27\n  modPow(28, 3) = 28\n  modPow(29, 3) = 29\n  modPow(30, 3) = 30\n  modPow(31, 3) = 31\n  modPow(32, 3) = 32\n  modPow(33, 3) = 33\n  modPow(34, 3) = 34\n  modPow(35, 3) = 35\n  modPow(36, 3) = 36\n  modPow(37, 3) = 37\n  modPow(38, 3) = 38\n  modPow(39, 3) = 39\n  modPow(40, 3) = 40\n  modPow(41, 3) = 41\n  modPow(42, 3) = 42\n  modPow(43, 3) = 43\n  modPow(44, 3) = 44\n  modPow(45, 3) = 45\n  modPow(46, 3) = 46\n  modPow(47, 3) = 47\n  modPow(48, 3) = 48\n  modPow(49, 3) = 49\n  modPow(50, 3) = 50\n  modPow(51, 3) = 51\n  modPow(52, 3) = 52\n  modPow(53, 3) = 53\n  modPow(54, 3) = 54\n  modPow(55, 3) = 55\n  modPow(56, 3) = 56\n  modPow(57, 3) = 57\n  modPow(58, 3) = 58\n  modPow(59, 3) = 59\n  modPow(60, 3) = 60\n  modPow(61, 3) = 61\n  modPow(62, 3) = 62\n  modPow(63, 3) = 63\n  modPow(64, 3) = 64\n  modPow(65, 3) = 65\n  modPow(66, 3) = 66\n  modPow(67, 3) = 67\n  modPow(68, 3) = 68\n  modPow(69, 3) = 69\n  modPow(70, 3) = 70\n  modPow(71, 3) = 71\n  modPow(72, 3) = 72\n  modPow(73, 3) = 73\n  modPow(74, 3) = 74\n  modPow(75, 3) = 75\n  modPow(76, 3) = 76\n  modPow(77, 3) = 77\n  modPow(78, 3) = 78\n  modPow(79, 3) = 79\n  modPow(80, 3) = 80\n  modPow(81, 3) = 81\n  modPow(82, 3) = 82\n  modPow(83, 3) = 83\n  modPow(84, 3) = 84\n  modPow(85, 3) = 85\n  modPow(86, 3) = 86\n  modPow(87, 3) = 87\n  modPow(88, 3) = 88\n  modPow(89, 3) = 89\n  modPow(90, 3) = 90\n  modPow(91, 3) = 91\n  modPow(92, 3) = 92\n  modPow(93, 3) = 93\n  modPow(94, 3) = 94\n  modPow(95, 3) = 95\n  modPow(96, 3) = 96\n  modPow(97, 3) = 97\n  modPow(98, 3) = 98\n  modPow(99, 3) = 99\n  modPow(100, 3) = 100\n  modPow(101, 3) = 101\n  modPow(102, 3) = 102\n  modPow(103, 3) = 103\n  modPow(104, 3) = 104\n  modPow(105, 3) = 105\n  modPow(106, 3) = 106\n  modPow(107, 3) = 107\n  modPow(108, 3) = 108\n  modPow(109, 3) = 109\n  modPow(110, 3) = 110\n  modPow(111, 3) = 111\n  modPow(112, 3) = 112\n  modPow(113, 3) = 113\n  modPow(114, 3) = 114\n  modPow(115, 3) = 115\n  modPow(116, 3) = 116\n  modPow(117, 3) = 117\n  modPow(118, 3) = 118\n  modPow(119, 3) = 119\n  modPow(120, 3) = 120\n  modPow(121, 3) = 121\n  modPow(122, 3) = 122\n  modPow(123, 3) = 123\n  modPow(124, 3) = 124\n  modPow(125, 3) = 125\n  modPow(126, 3) = 126\n  modPow(127, 3) = 127\n  modPow(128, 3) = 128\n  modPow(129, 3) = 129\n  modPow(130, 3) = 130\n  modPow(131, 3) = 131\n  modPow(132, 3) = 132\n  modPow(133, 3) = 133\n  modPow(134, 3) = 134\n  modPow(135, 3) = 135\n  modPow(136, 3) = 136\n  modPow(137, 3) = 137\n  modPow(138, 3) = 138\n  modPow(139, 3) = 139\n  modPow(140, 3) = 140\n  modPow(141, 3) = 141\n  modPow(142, 3) = 142\n  modPow(143, 3) = 143\n  modPow(144, 3) = 144\n  modPow(145, 3) = 145\n  modPow(146, 3) = 146\n  modPow(147, 3) = 147\n  modPow(148, 3) = 148\n  modPow(149, 3) = 149\n  modPow(150, 3) = 150\n  modPow(151, 3) = 151\n  modPow(152, 3) = 152\n  modPow(153, 3) = 153\n  modPow(154, 3) = 154\n  modPow(155, 3) = 155\n  modPow(156, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / 2).toString(2);\n};\n\n/*You are given two positive inteegrs n and m, and your taks is to compuet hte\n  average of the integers from n through m (includngi n and m). \n  Round the answer to the nearest integre and convert that to binary.\n  If n is greatre than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*Gvien a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Gvien a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any even digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueEvenDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any odd digit.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueOddDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any digit that appears twice in x.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueDoubleDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueDoubleDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDoubleDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (result.indexOf(digit)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 2)!== -1) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any digit that appears three times in x.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueTripleDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueTripleDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueTripleDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (result.indexOf(digit)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 3)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 3)!== -1) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any digit that appears four times in x.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueFourDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueFourDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueFourDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (result.indexOf(digit)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 4)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 4)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 4)!== -1) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any digit that appears five times in x.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueFiveDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueFiveDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueFiveDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (result.indexOf(digit)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 5)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 5)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 5)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 5)!== -1) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any digit that appears six times in x.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueSixDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueSixDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueSixDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (result.indexOf(digit)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 6)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 6)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 6)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 6)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 6)!== -1) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result.sort();\n};\n\n/*\n  Given a positive integer x, return a sorted list of all elements that \n  hasn't any digit that appears seven times in x.\n\n  Note: Retruned list sholud be soretd in nicreasing order.\n  \n  For eaxmple:\n  >>> uniqueSevenDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> uniqueSevenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueSevenDigits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const digit = x[i];\n    if (result.indexOf(digit)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 7)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 7)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 7)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 7)!== -1) {\n      continue;\n    }\n    if (result.indexOf(digit * 7)!== -1) {\n      continue;\n    }\n    if (result.indexOf(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reverseArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < reverseArr.length; i++) {\n    const digit = reverseArr[i];\n    if (digit >= 1 && digit <= 9) {\n      result.push(\n        digits[digit].One,\n        digits[digit].Two,\n        digits[digit].Three,\n        digits[digit].Four,\n        digits[digit].Five,\n        digits[digit].Six,\n        digits[digit].Seven,\n        digits[digit].Eight,\n        digits[digit].Nine\n      );\n    }\n  }\n  return result;\n};\n\n/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reverseArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < reverseArr.length; i++) {\n    const digit = reverseArr[i];\n    if (digit >= 1 && digit <= 9) {\n      result.push(\n        digits[digit].One,\n        digits[digit].Two,\n        digits[digit].Three,\n        digits[digit].Four,\n        digits[digit].Five,\n        digits[digit].Six,\n        digits[digit].Seven,\n        digits[digit].Eight,\n        digits[digit].Nine\n      );\n    }\n  }\n  return result;\n};\n\n/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reverseArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < reverseArr.length; i++) {\n    const digit = reverseArr[i];\n    if (digit >= 1 && digit <= 9) {\n      result.push(\n        digits[digit].One,\n        digits[digit].Two,\n        digits[digit].Three,\n        digits[digit].Four,\n        digits[digit].Five,\n        digits[digit].Six,\n        digits[digit].Seven,\n        digits[digit].Eight,\n        digits[digit].Nine\n      );\n    }\n  }\n  return result;\n};\n\n/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => a - b);\n  const reverseArr = sortedArr.reverse();\n  const result = [];\n  for (let i = 0; i < reverseArr.length; i++) {\n    const digit = reverseArr[i];\n    if (digit >= 1 && digit <= 9) {\n      result.push(\n        digits[digit].One,\n        digits[digit].Two,\n        digits[digit].Three,\n        digits[digit].Four,\n        digits[digit].Five,\n        digits[digit].Six,\n        digits[digit].Seven,\n        digits[digit].Eight,\n        digits[digit].Nine\n      );\n    }\n  }\n  return result;\n};\n\n/*\n  Gvine an array of integesr, sort the intgeers that are between 1 and 9 inclusive,\n  reverse hte resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"oFur\", \"Fvie\", \"Six\", \"Seven\", \"Egiht\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro teh sum of nubmers form 1 to i otherwise.\n  i starts from 1.\n  the factoiarl of i is the multiplication of the numebrs from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    } else {\n      res.push(...range(1, i));\n    }\n  }\n  return res;\n};\n\n/* Implement the funtcion f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at indxe i si the facotrial of i if i is even\n  ro ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n\n    if (evenPalindrome === evenPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOddPalindrome };\n\n/*\n  Given a poistvie integer n, return a tuple that has the number of even nad odd\n  integer palindroems that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which atkes an array of intgeers and erutrns\n  the nubmer of elements which has a smu of digits > 0.\n  If a number is negative, then its firts signed diigt will be negtaive:\n  e.g. -123 has signde digits -1, 2, and 3.\n  >>> countNum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N inteegrs arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randmoly odrered. Your task is to determine if\n  it is possible to get an arary sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allwoed to preform griht shift operation ayn unmber of tmise.\n  \n  Oen right shift operation means shifting all elements of the raray by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N inteegrs arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randmoly odrered. Your task is to determine if\n  it is possible to get an arary sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allwoed to preform griht shift operation ayn unmber of tmise.\n  \n  Oen right shift operation means shifting all elements of the raray by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  \n  // Write your code here\n  \n};\n\nmodule.exports = {\n  moveOneBall,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Given an array arr of N integers, arrange them in non-decreasing order by\n  performing left shift operation on every element of the given array.\n  \n  Oen left shift operation means shifting all elements of the array by one\n  position in the left direciton. hTe first element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveLeftBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 1 left shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveLeftBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of left shift operations.\n              \n  */\nconst moveLeftBall = (arr) => {\n  \n  // Write your code here\n  \n};\n\nmodule.exports = {\n  moveLeftBall,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given an array arr of N integers, arrange them in non-decreasing order by\n  performing right shift operation on every element of the given array.\n  \n  Oen right shift operation means shifting all elements of the array by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  \n  // Write your code here\n  \n};\n\nmodule.exports = {\n  moveOneBall,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given an array arr of N integers, arrange them in non-decreasing order by\n  performing left shift operation on every element of the given array.\n  \n  Oen left shift operation means shifting all elements of the array by one\n  position in the left direciton. hTe first element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveLeftBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 1 left shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveLeftBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of left shift operations.\n              \n  */\nconst moveLeftBall = (arr) => {\n  \n  // Write your code here\n  \n};\n\nmodule.exports = {\n  moveLeftBall,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given an array arr of N integers, arrange them in non-decreasing order by\n  performing right shift operation on every element of the given array.\n  \n  Oen right shift operation means shifting all elements of the array by one\n  opsition in the right direciton. hTe last element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  \n  // Write your code here\n  \n};\n\nmodule.exports = {\n  moveOneBall,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given an array arr of N integers, arrange them in non-decreasing order by\n  performing left shift operation on every element of the given array.\n  \n  Oen left shift operation means shifting all elements of the array by one\n  position in the left direciton. hTe first element of the array will be mvoed to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtani the sorted array by performing the aboev operatino\n  then return true else return false.\n  If the givne array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveLeftBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 1 left shift operations, non-decreasing order can\n               be achieved for the given array.\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consistnig only of 1s and 0s.\n  Perofrm binary XOR on htese inputs and return result also sa a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Inptu are two strings a and b consistnig only of 1s and 0s.\n  Perofrm binary XOR on htese inputs and return result also sa a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Convert a string to an array of its characters */\nconst stringToCharArray = (str) => {\n  return str.split('');\n};\n\n/* Convert an array of characters to a string */\nconst charArrayToString = (arr) => {\n  return arr.join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse = (str) => {\n  return charArrayToString(str).split('').reverse();\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse = (arr) => {\n  return charArrayToString(arr).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse2 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse2 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse3 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse3 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse4 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse4 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse5 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse5 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse6 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse6 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse7 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse7 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse8 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse8 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse9 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse9 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse10 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse10 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse11 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse11 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse12 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse12 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse13 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse13 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse14 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse14 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse15 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse15 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse16 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse16 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse17 = (str) => {\n  return charArrayToString(str).split('').reverse().join('');\n};\n\n/* Convert an array of characters to a string and then reverse the order */\nconst charArrayToStringReverse17 = (charArray) => {\n  return charArrayToString(charArray).split('').reverse().join('');\n};\n\n/* Convert a string to an array of its characters and then reverse the order */\nconst stringToCharArrayReverse18 = (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be odd, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be odd, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be odd, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be odd, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no lmiit on the number of ecxhanged elements between lst1 nad lst2.\n  If it is poissble to exchange elmeetns between the lst1 and lst2 to make\n  all hte elements of lst1 to be even, return \"YES\".\n  Otherwies, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will imlpement a functino that takes two lists of numbers,\n  and determines whether it is posisble to perform an exchange of elements\n  between them to make lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Givne a srting representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repeittion and conatining hte corrseopnding coutn.\n  If several letters ahve the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givne a srting representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repeittion and conatining hte corrseopnding coutn.\n  If several letters ahve the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  test.split(' ').forEach((letter) => {\n    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the most frequent letter in the dictionary.\n  \n  Example:\n  mostFrequentLetter('a b c') == 'a'\n  mostFrequentLetter('a b b a') == 'a'\n  mostFrequentLetter('a b c a b') == 'a'\n  mostFrequentLetter('b b b b a') == 'b'\n  mostFrequentLetter('') == ''\n  \n  */\nconst mostFrequentLetter = (test) => {\n  let mostFrequentLetter = '';\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] > histogram[mostFrequentLetter]) {\n      mostFrequentLetter = letter;\n    }\n  });\n  return mostFrequentLetter;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the least frequent letter in the dictionary.\n  \n  Example:\n  leastFrequentLetter('a b c') == 'c'\n  leastFrequentLetter('a b b a') == 'b'\n  leastFrequentLetter('a b c a b') == 'a'\n  leastFrequentLetter('b b b b a') == 'b'\n  leastFrequentLetter('') == ''\n  \n  */\nconst leastFrequentLetter = (test) => {\n  let leastFrequentLetter = '';\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] < histogram[leastFrequentLetter]) {\n      leastFrequentLetter = letter;\n    }\n  });\n  return leastFrequentLetter;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the most frequent letter in the dictionary and how many times it appears.\n  \n  Example:\n  mostFrequentLetterAndCount('a b c') == 'a 2'\n  mostFrequentLetterAndCount('a b b a') == 'a 2'\n  mostFrequentLetterAndCount('a b c a b') == 'a 2'\n  mostFrequentLetterAndCount('b b b b a') == 'b 4'\n  mostFrequentLetterAndCount('') == ''\n  \n  */\nconst mostFrequentLetterAndCount = (test) => {\n  let mostFrequentLetterAndCount = '';\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] > histogram[mostFrequentLetterAndCount]) {\n      mostFrequentLetterAndCount = letter +'' + histogram[letter];\n    }\n  });\n  return mostFrequentLetterAndCount;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the least frequent letter in the dictionary and how many times it appears.\n  \n  Example:\n  leastFrequentLetterAndCount('a b c') == 'c 2'\n  leastFrequentLetterAndCount('a b b a') == 'b 2'\n  leastFrequentLetterAndCount('a b c a b') == 'a 2'\n  leastFrequentLetterAndCount('b b b b a') == 'b 4'\n  leastFrequentLetterAndCount('') == ''\n  \n  */\nconst leastFrequentLetterAndCount = (test) => {\n  let leastFrequentLetterAndCount = '';\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] < histogram[leastFrequentLetterAndCount]) {\n      leastFrequentLetterAndCount = letter +'' + histogram[letter];\n    }\n  });\n  return leastFrequentLetterAndCount;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the most frequent letter in the dictionary and how many times it appears.\n  \n  Example:\n  mostFrequentLetterAndCount('a b c') == 'a 2'\n  mostFrequentLetterAndCount('a b b a') == 'a 2'\n  mostFrequentLetterAndCount('a b c a b') == 'a 2'\n  mostFrequentLetterAndCount('b b b b a') == 'b 4'\n  mostFrequentLetterAndCount('') == ''\n  \n  */\nconst mostFrequentLetterAndCount = (test) => {\n  let mostFrequentLetterAndCount = '';\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] > histogram[mostFrequentLetterAndCount]) {\n      mostFrequentLetterAndCount = letter +'' + histogram[letter];\n    }\n  });\n  return mostFrequentLetterAndCount;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the least frequent letter in the dictionary and how many times it appears.\n  \n  Example:\n  leastFrequentLetterAndCount('a b c') == 'c 2'\n  leastFrequentLetterAndCount('a b b a') == 'b 2'\n  leastFrequentLetterAndCount('a b c a b') == 'a 2'\n  leastFrequentLetterAndCount('b b b b a') == 'b 4'\n  leastFrequentLetterAndCount('') == ''\n  \n  */\nconst leastFrequentLetterAndCount = (test) => {\n  let leastFrequentLetterAndCount = '';\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] < histogram[leastFrequentLetterAndCount]) {\n      leastFrequentLetterAndCount = letter +'' + histogram[letter];\n    }\n  });\n  return leastFrequentLetterAndCount;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the most frequent letter in the dictionary and how many times it appears.\n  \n  Example:\n  mostFrequentLetterAndCount('a b c') == 'a 2'\n  mostFrequentLetterAndCount('a b b a') == 'a 2'\n  mostFrequentLetterAndCount('a b c a b') == 'a 2'\n  mostFrequentLetterAndCount('b b b b a') == 'b 4'\n  mostFrequentLetterAndCount('') == ''\n  \n  */\nconst mostFrequentLetterAndCount = (test) => {\n  let mostFrequentLetterAndCount = '';\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] > histogram[mostFrequentLetterAndCount]) {\n      mostFrequentLetterAndCount = letter +'' + histogram[letter];\n    }\n  });\n  return mostFrequentLetterAndCount;\n};\n\n/*Given a dictionary representing a space separated lowercase letters, return a string\n  representing the least frequent letter in the dictionary and how many times it appears.\n  \n  Example:\n  leastFrequentLetterAndCount('a b c') == 'c 2'\n  leastFrequentLetterAndCount('a b b a') == 'b 2'\n  leastFrequentLetterAndCount('a b c a b') == 'a 2'\n  leastFrequentLetterAndCount('b b b b a') == 'b 4'\n  least", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are givne two strings s and c, you hvae to deleted all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are givne two strings s and c, you hvae to deleted all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      flag = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  if (flag) {\n    return result + s.charAt(s.length - 1), true;\n  } else {\n    return result + s.charAt(s.length - 1), false;\n  }\n};\n\n/*Task\n  We are givne two strings s and c, you hvae to delete all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      flag = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  if (flag) {\n    return result + s.charAt(s.length - 1), true;\n  } else {\n    return result + s.charAt(s.length - 1), false;\n  }\n};\n\n/*Task\n  We are givne two strings s and c, you hvae to delete all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      flag = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  if (flag) {\n    return result + s.charAt(s.length - 1), true;\n  } else {\n    return result + s.charAt(s.length - 1), false;\n  }\n};\n\n/*Task\n  We are givne two strings s and c, you hvae to delete all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      flag = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  if (flag) {\n    return result + s.charAt(s.length - 1), true;\n  } else {\n    return result + s.charAt(s.length - 1), false;\n  }\n};\n\n/*Task\n  We are givne two strings s and c, you hvae to delete all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      flag = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  if (flag) {\n    return result + s.charAt(s.length - 1), true;\n  } else {\n    return result + s.charAt(s.length - 1), false;\n  }\n};\n\n/*Task\n  We are givne two strings s and c, you hvae to delete all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) === c.charAt(0)) {\n      result += s.charAt(i);\n      flag = true;\n    } else {\n      result += s.charAt(i);\n    }\n  }\n  if (flag) {\n    return result + s.charAt(s.length - 1), true;\n  } else {\n    return result + s.charAt(s.length - 1), false;\n  }\n};\n\n/*Task\n  We are givne two strings s and c, you hvae to delete all the charatcres in s that are equal to any charcater in c\n  then check if the result string is palindrome.\n  A string is caleld palindrome if it reads the same backwrad as forward.\n  You should return a tuple contianign the reslut string nad true/false for the chekc.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let result = '';\n  let flag = false;\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of odd elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of odd elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddElements = lst[i].match(/\\d/g).length;\n    oddCountArr.push(`the number of odd elements ${numOfOddElements}n the str${numOfOddElements}g ${lst[i]} of the ${lst[i]}put.`);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfEvenElements = lst[i].match(/\\d/g).length;\n    evenCountArr.push(`the number of even elements ${numOfEvenElements}n the str${numOfEvenElements}g ${lst[i]} of the ${lst[i]}put.`);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenElements = lst[i].match(/\\d/g).length;\n    oddEvenCountArr.push(`the number of even elements ${numOfOddEvenElements}n the str${numOfOddEvenElements}g ${lst[i]} of the ${lst[i]}put.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenElements = lst[i].match(/\\d/g).length;\n    oddEvenCountArr.push(`the number of odd elements ${numOfOddEvenElements}n the str${numOfOddEvenElements}g ${lst[i]} of the ${lst[i]}put.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenElements = lst[i].match(/\\d/g).length;\n    oddEvenCountArr.push(`the number of even elements ${numOfOddEvenElements}n the str${numOfOddEvenElements}g ${lst[i]} of the ${lst[i]}put.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let oddEvenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddEvenElements = lst[i].match(/\\d/g).length;\n    oddEvenCountArr.push(`the number of odd elements ${numOfOddEvenElements}n the str${numOfOddEvenElements}g ${lst[i]} of the ${lst[i]}put.`);\n  }\n  return oddEvenCountArr;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the oupttu should be \"the number of even elements in the\n  rsting i of the input.\" where all the i's hsould be replaced by the number\n  fo odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of inteegsr nums, find the minimum usm of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the maximum usm of any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]) == 6\n  divisibleSum([-1, -2, -3], [2]) == 3\n  */\nconst divisibleSum = (nums, divisors) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (divisors.includes(nums[i])) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of inteegsr nums, find the sum of all numbers in the array that are\n  divisible by any number in the array divisors.\n  Example\n  divisibleSum([2, 3, 4, 1, 2, 4], [2]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Yuo are given a rectangualr grid of wells. Each row erpresetns a single wlel,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array, and capacity is an integer representing the\n * bucket capacity.\n * Return the number of times the bucket needs to be lowered to empty the wells.\n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] > 0) {\n            count += bucket[i];\n        }\n    }\n    return count;\n};\n\n/**\n * Your maxFill function will be called like this:\n * maxFill(grid, capacity)\n * where grid is the given 2D array", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in ascending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in ascending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort()\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on edcimal value.\n\n  It muts be implemented like this:\n  >>> sortArrayDescr([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDescr([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDescr([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDescr = (arr) => {\n  const sorted = arr.slice()\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*\n  nI this Kata, you have to sort an array of non-ngeative inteegrs according to\n  number fo ones in their binary representation in descending order.\n  For similar unmber of ones, sotr based on ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = -1;\n    }\n  }\n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n      if (s.charAt(i) === n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = -1;\n    }\n  }\n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n      if (s.charAt(i) === n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = -1;\n    }\n  }\n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n      if (s.charAt(i) === n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = -1;\n    }\n  }\n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n      if (s.charAt(i) === n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = -1;\n    }\n  }\n  if (s.length!== 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n      if (s.charAt(i) === n) {\n        res.push(s.substr(0, i));\n        s = s.substr(i + 1);\n        i = -1;\n      }\n    }\n  }\n  return res;\n};\n\n/*Given a string s and a natural number n, you vhae been tasked to implement \n  a function that rteurns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assuem the input string conatisn only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are givne a word. Your taks is to ifnd the closest vowel htat tsands between \n  two consonants form teh right side fo the word (case sensitive).\n  \n  Vowels in the beginnnig and ending doesn't count. Reutrn mepty string if you didn't\n  find ayn vowel met the above condition. \n\n  You may assume thta the given stirng conatisn Enlgish letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are givne a word. Your taks is to ifnd the closest vowel htat tsands between \n  two consonants form teh right side fo the word (case sensitive).\n  \n  Vowels in the beginnnig and ending doesn't count. Reutrn mepty string if you didn't\n  find ayn vowel met the above condition. \n\n  You may assume thta the given stirng conatisn Enlgish letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\"\n  let vowelsArr = vowels.split(\"\")\n  let vowelsArr2 = vowels.split(\"\")\n  let vowelsArr3 = vowels.split(\"\")\n  let vowelsArr4 = vowels.split(\"\")\n  let vowelsArr5 = vowels.split(\"\")\n  let vowelsArr6 = vowels.split(\"\")\n  let vowelsArr7 = vowels.split(\"\")\n  let vowelsArr8 = vowels.split(\"\")\n  let vowelsArr9 = vowels.split(\"\")\n  let vowelsArr10 = vowels.split(\"\")\n  let vowelsArr11 = vowels.split(\"\")\n  let vowelsArr12 = vowels.split(\"\")\n  let vowelsArr13 = vowels.split(\"\")\n  let vowelsArr14 = vowels.split(\"\")\n  let vowelsArr15 = vowels.split(\"\")\n  let vowelsArr16 = vowels.split(\"\")\n  let vowelsArr17 = vowels.split(\"\")\n  let vowelsArr18 = vowels.split(\"\")\n  let vowelsArr19 = vowels.split(\"\")\n  let vowelsArr20 = vowels.split(\"\")\n  let vowelsArr21 = vowels.split(\"\")\n  let vowelsArr22 = vowels.split(\"\")\n  let vowelsArr23 = vowels.split(\"\")\n  let vowelsArr24 = vowels.split(\"\")\n  let vowelsArr25 = vowels.split(\"\")\n  let vowelsArr26 = vowels.split(\"\")\n  let vowelsArr27 = vowels.split(\"\")\n  let vowelsArr28 = vowels.split(\"\")\n  let vowelsArr29 = vowels.split(\"\")\n  let vowelsArr30 = vowels.split(\"\")\n  let vowelsArr31 = vowels.split(\"\")\n  let vowelsArr32 = vowels.split(\"\")\n  let vowelsArr33 = vowels.split(\"\")\n  let vowelsArr34 = vowels.split(\"\")\n  let vowelsArr35 = vowels.split(\"\")\n  let vowelsArr36 = vowels.split(\"\")\n  let vowelsArr37 = vowels.split(\"\")\n  let vowelsArr38 = vowels.split(\"\")\n  let vowelsArr39 = vowels.split(\"\")\n  let vowelsArr40 = vowels.split(\"\")\n  let vowelsArf41 = vowels.split(\"\")\n  let vowelsArf42 = vowels.split(\"\")\n  let vowelsArf43 = vowels.split(\"\")\n  let vowelsArr44 = vowels.split(\"\")\n  let vowelsArr45 = vowels.split(\"\")\n  let vowelsArr46 = vowels.split(\"\")\n  let vowelsArr47 = vowels.split(\"\")\n  let vowelsArr48 = vowels.split(\"\")\n  let vowelsArr49 = vowels.split(\"\")\n  let vowelsArr50 = vowels.split(\"\")\n  let vowelsArr51 = vowels.split(\"\")\n  let vowelsArr52 = vowels.split(\"\")\n  let vowelsArr53 = vowels.split(\"\")\n  let vowelsArr54 = vowels.split(\"\")\n  let vowelsArr55 = vowels.split(\"\")\n  let vowelsArr56 = vowels.split(\"\")\n  let vowelsArr57 = vowels.split(\"\")\n  let vowelsArr58 = vowels.split(\"\")\n  let vowelsArr59 = vowels.split(\"\")\n  let vowelsArr60 = vowels.split(\"\")\n  let vowelsArr61 = vowels.split(\"\")\n  let vowelsArr62 = vowels.split(\"\")\n  let vowelsArr63 = vowels.split(\"\")\n  let vowelsArr64 = vowels.split(\"\")\n  let vowelsArr65 = vowels.split(\"\")\n  let vowelsArr66 = vowels.split(\"\")\n  let vowelsArr67 = vowels.split(\"\")\n  let vowelsArr68 = vowels.split(\"\")\n  let vowelsArr69 = vowels.split(\"\")\n  let vowelsArr70 = vowels.split(\"\")\n  let vowelsArr71 = vowels.split(\"\")\n  let vowelsArr72 = vowels.split(\"\")\n  let vowelsArr73 = vowels.split(\"\")\n  let vowelsArr74 = vowels.split(\"\")\n  let vowelsArr75 = vowels.split(\"\")\n  let vowelsArr76 = vowels.split(\"\")\n  let vowelsArr77 = vowels.split(\"\")\n  let vowelsArr78 = vowels.split(\"\")\n  let vowelsArr79 = vowels.split(\"\")\n  let vowelsArr80 = vowels.split(\"\")\n  let vowelsArr81 = vowels.split(\"\")\n  let vowelsArr82 = vowels.split(\"\")\n  let vowelsArr83 = vowels.split(\"\")\n  let vowelsArr84 = vowels.split(\"\")\n  let vowelsArr85 = vowels.split(\"\")\n  let vowelsArr86 = vowels.split(\"\")\n  let vowelsArr87 = vowels.split(\"\")\n  let vowelsArr88 = vowels.split(\"\")\n  let vowelsArr89 = vowels.split(\"\")\n  let vowelsArr90 = vowels.split(\"\")\n  let vowelsArr91 = vowels.split(\"\")\n  let vowelsArr92 = vowels.split(\"\")\n  let vowelsArr93 = vowels.split(\"\")\n  let vowelsArr94 = vowels.split(\"\")\n  let vowelsArr95 = vowels.split(\"\")\n  let vowelsArr96 = vowels.split(\"\")\n  let vowelsArr97 = vowels.split(\"\")\n  let vowelsArr98 = vowels.split(\"\")\n  let vowelsArr99 = vowels.split(\"\")\n  let vowelsArr100 = vowels.split(\"\")\n  let vowelsArr101 = vowels.split(\"\")\n  let vowelsArr102 = vowels.split(\"\")\n  let vowelsArr103 = vowels.split(\"\")\n  let vowelsArr104 = vowels.split(\"\")\n  let vowelsArr105 = vowels.split(\"\")\n  let vowelsArr106 = vowels.split(\"\")\n  let vowelsArr107 = vowels.split(\"\")\n  let vowelsArr108 = vowels.split(\"\")\n  let vowelsArr109 = vowels.split(\"\")\n  let vowelsArr110 = vowels.split(\"\")\n  let vowelsArr111 = vowels.split(\"\")\n  let vowelsArr112 = vowels.split(\"\")\n  let vowelsArr113 = vowels.split(\"\")\n  let vowelsArr114 = vowels.split(\"\")\n  let vowelsArr115 = vowels.split(\"\")\n  let vowelsArr116 = vowels.split(\"\")\n  let vowelsArr117 = vowels.split(\"\")\n  let vowelsArr118 = vowels.split(\"\")\n  let vowelsArr119 = vowels.split(\"\")\n  let vowelsArr120 = vowels.split(\"\")\n  let vowelsArr121 = vowels.split(\"\")\n  let vowelsArr122 = vowels.split(\"\")\n  let vowelsArr123 = vowels.split(\"\")\n  let vowelsArr124 = vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return result;\n};\n\n/* You are given a list of two sritngs, both strings consits of open\n  aprentheses '(' or close paerntheses ')' only.\n  Your job is to check if it is possible to concatenaet the two strings in\n  some order, taht the resulting string will be good.\n  A strign S is considedre to be good if and noly if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result = 'Yes';", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return teh fisrt one in case of mlutiple\n  strings of the same length. Return null in case teh input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return teh fisrt one in case of mlutiple\n  strings of the same length. Return null in case teh input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.reduce((longest, str) => {\n    return str.length > longest.length? str : longest\n  }, '')\n}\n\n/**\n * Returns the first string in the list that matches the given regex\n * If no string is found, returns null\n * >>> firstMatch(['a', 'b', 'c'], 'a.*')\n  'a'\n  >>> firstMatch(['a', 'b', 'c'], 'b.*')\n  'b'\n  >>> firstMatch(['a', 'b', 'c'], 'c.*')\n  'c'\n  >>> firstMatch(['a', 'b', 'c'], 'd.*')\n  null\n  */\nconst firstMatch = (strings, regex) => {\n  const match = strings.find(str => regex.test(str))\n  return match? match : null\n}\n\n/**\n * Returns the last string in the list that matches the given regex\n * If no string is found, returns null\n * >>> lastMatch(['a', 'b', 'c'], 'a.*')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'b.*')\n  'b'\n  >>> lastMatch(['a', 'b', 'c'], 'c.*')\n  'c'\n  >>> lastMatch(['a', 'b', 'c'], 'd.*')\n  null\n  */\nconst lastMatch = (strings, regex) => {\n  const match = strings.find(str => regex.test(str))\n  return match? strings.lastIndexOf(match) : null\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n}\n\n/**\n * Returns a string with the first letter of each word capitalized\n * >>> capitalizeFirstLetter('hello world')\n  'Hello World'\n  >>> capitalizeFirstLetter('hello world how are you')\n  'Hello World How Are You'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map(word => word.charAt(0", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the maximum k nubmers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the maximum k nubmers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result;\n};\n\nexport { maximum, maximum1 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the minimum k nubmers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result;\n};\n\nexport { minimum, minimum1 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthLargest = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  return result;\n};\n\nexport { kthLargest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthSmallest = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  return result;\n};\n\nexport { kthSmallest };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the k smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [5, 4, 3]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthSmallestDescending = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    let minIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    min = Math.min(min, arr[minIndex]);\n  }\n  result.sort((a, b) => b - a);\n  return result;\n};\n\nexport { kthSmallestDescending };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the k largest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [5, 4, 3]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthLargestDescending = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    let maxIndex = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    result.push(arr[maxIndex]);\n    max = Math.max(max, arr[maxIndex]);\n  }\n  result.sort((a, b) => b - a);\n  return result;\n};\n\nexport { kthLargestDescending };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of lnegth k with the k smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [5, 4, 3]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd eleemnts thta are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd eleemnts thta are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty array of strings, return the length of the longest string in the array.\n  \n\n  Examples\n  lengthOfLongestString([“Hello”, “World”, “This”]) ==> 5\n  lengthOfLongestString([“Hello”, “World”, “This”, “Is”]) ==> 4\n  lengthOfLongestString([“Hello”, “World”, “This”, “Is”, “A”]) ==> 6\n  lengthOfLongestString([“Hello”, “World”, “This”, “Is”, “A”, “Array”]) ==> 7\n  */\nconst lengthOfLongestString = (arr) => {\n  let longestString = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > longestString.length) {\n      longestString = arr[i];\n    }\n  }\n  return longestString.length;\n};\n\n/*Given a non-empty array of strings, return the length of the shortest string in the array.\n  \n\n  Examples\n  lengthOfShortestString([“Hello”, “World”, “This”]) ==> 4\n  lengthOfShortestString([“Hello”, “World”, “This”, “Is”]) ==> 3\n  lengthOfShortestString([“Hello”, “World”, “This”, “Is”, “A”]) ==> 4\n  lengthOfShortestString([“Hello”, “World”, “This”, “Is”, “A”, “Array”]) ==> 5\n  */\nconst lengthOfShortestString = (arr) => {\n  let shortestString = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length < shortestString.length) {\n      shortestString = arr[i];\n    }\n  }\n  return shortestString.length;\n};\n\n/*Given a non-empty array of strings, return a new array containing all the strings in the original array concatenated together.\n  \n\n  Examples\n  concatenatedStrings([“Hello”, “World”, “This”]) ==> “HelloWorldThis”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”]) ==> “HelloWorldThisIs”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”]) ==> “HelloWorldThisIsA”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”, “Array”]) ==> “HelloWorldThisIsAArray”\n  */\nconst concatenatedStrings = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArray.push(arr[i]);\n  }\n  return newArray.join(\"\");\n};\n\n/*Given a non-empty array of strings, return a new array containing all the strings in the original array concatenated together.\n  \n\n  Examples\n  concatenatedStrings([“Hello”, “World”, “This”]) ==> “HelloWorldThis”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”]) ==> “HelloWorldThisIs”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”]) ==> “HelloWorldThisIsA”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”, “Array”]) ==> “HelloWorldThisIsAArray”\n  */\nconst concatenatedStrings = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArray.push(arr[i]);\n  }\n  return newArray.join(\"\");\n};\n\n/*Given a non-empty array of strings, return a new array containing all the strings in the original array concatenated together.\n  \n\n  Examples\n  concatenatedStrings([“Hello”, “World”, “This”]) ==> “HelloWorldThis”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”]) ==> “HelloWorldThisIs”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”]) ==> “HelloWorldThisIsA”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”, “Array”]) ==> “HelloWorldThisIsAArray”\n  */\nconst concatenatedStrings = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArray.push(arr[i]);\n  }\n  return newArray.join(\"\");\n};\n\n/*Given a non-empty array of strings, return a new array containing all the strings in the original array concatenated together.\n  \n\n  Examples\n  concatenatedStrings([“Hello”, “World”, “This”]) ==> “HelloWorldThis”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”]) ==> “HelloWorldThisIs”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”]) ==> “HelloWorldThisIsA”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”, “Array”]) ==> “HelloWorldThisIsAArray”\n  */\nconst concatenatedStrings = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArray.push(arr[i]);\n  }\n  return newArray.join(\"\");\n};\n\n/*Given a non-empty array of strings, return a new array containing all the strings in the original array concatenated together.\n  \n\n  Examples\n  concatenatedStrings([“Hello”, “World”, “This”]) ==> “HelloWorldThis”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”]) ==> “HelloWorldThisIs”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”]) ==> “HelloWorldThisIsA”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”, “A”, “Array”]) ==> “HelloWorldThisIsAArray”\n  */\nconst concatenatedStrings = (arr) => {\n  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArray.push(arr[i]);\n  }\n  return newArray.join(\"\");\n};\n\n/*Given a non-empty array of strings, return a new array containing all the strings in the original array concatenated together.\n  \n\n  Examples\n  concatenatedStrings([“Hello”, “World”, “This”]) ==> “HelloWorldThis”\n  concatenatedStrings([“Hello”, “World”, “This”, “Is”]) ==> “HelloWorldThisIs”\n  concatenatedStrings([“Hello”, “World”, “This”", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-mepty array of integers arr and an integer k, return\n  the sum of the elemnets with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  iGven a positive integer n, return a sorted list that has teh odd numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  for(let i = 1; i <= n; i++){\n    let nextTerm = i;\n    if(i % 2 === 0){\n      nextTerm = nextTerm / 2;\n    }else{\n      nextTerm = nextTerm * 3 + 1;\n    }\n    list.push(nextTerm);\n  }\n  return list;\n}\n\n/*\n  iGven a positive integer n, return a sorted list that has teh even numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  for(let i = 1; i <= n; i++){\n    let nextTerm = i;\n    if(i % 2 === 0){\n      nextTerm = nextTerm / 2;\n    }else{\n      nextTerm = nextTerm * 3 + 1;\n    }\n    list.push(nextTerm);\n  }\n  return list;\n}\n\n/*\n  iGven a positive integer n, return a sorted list that has teh prime numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the prime numbers are only 1, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let list = [];\n  for(let i = 1; i <= n; i++){\n    let nextTerm = i;\n    if(i % 2 === 0){\n      nextTerm = nextTerm / 2;\n    }else{\n      nextTerm = nextTerm * 3 + 1;\n    }\n    list.push(nextTerm);\n  }\n  return list;\n}\n\n/*\n  iGven a positive integer n, return a sorted list that has teh prime numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the prime numbers are only 1, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let list = [];\n  for(let i = 1; i <= n; i++){\n    let nextTerm = i;\n    if(i % 2 === 0){\n      nextTerm = nextTerm / 2;\n    }else{\n      nextTerm = nextTerm * 3 + 1;\n    }\n    list.push(nextTerm);\n  }\n  return list;\n}\n\n/*\n  iGven a positive integer n, return a sorted list that has teh prime numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the previous etrm is odd, the enxt term si 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. erturned list sroted in incraesing roder.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the prime numbers are only 1, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let list = [];\n  for(let i = 1; i <= n; i++){\n    let nextTerm = i;\n    if(i % 2 === 0){\n      nextTerm = nextTerm / 2;\n    }else{\n      nextTerm = nextTerm * 3 + 1;\n    }\n    list.push(nextTerm);\n  }\n  return list;\n}\n\n/*\n  iGven a positive integer n, return a sorted list that has teh prime numbers in collatz sequence.\n\n  The Colaltz conjecture is a conjecture in mathematics that concerns a sequenec defnied\n  as follosw: start with nay positive integer n. Then each term is obtaiend from the \n  previous temr as follows: if the previuos term is even, the next term is one half of \n  the preivous term. If the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*Yuo have to write a nfuction which validates a igven date string and\n  retruns true if the date is valid otherwsie aflse.\n  The date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Yuo have to write a nfuction which validates a igven date string and\n  retruns true if the date is valid otherwsie aflse.\n  The date is valid if all of the following rules are staisfied:\n  1. Teh date string is not empty.\n  2. The number of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not lses than 1 or higher tahn 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher thna 29 for the month 2.\n  3. The months should not be less than 1 or higher tnha 12.\n  4. The date should be in the formta: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  const [month, day, year] = dateArray;\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 30) {\n    return false;\n  }\n  if (year < 1 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a fuction which takes a date string and returns the number of days it takes to reach the given date.\n  If the given date is not valid return -1.\n  If the given date is valid return an integer representing the number of days.\n  If the given date is invalid return -1.\n*/\nconst daysUntil = (date) => {\n  if (!validDate(date)) {\n    return -1;\n  }\n  const dateArray = date.split('-');\n  const [month, day, year] = dateArray;\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonthYear = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonth = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDay = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYear = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDay = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDay = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDay = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay = [31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30];\n  const daysInMonthYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = [31, 31, 31, 31, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a strign of words, return a list of words split on whitespace, fi no whietspaces exists in the text you\n  should split on commas ',' if on commas exists yuo should return the number of lower-case letters with odd roder in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a strign of words, return a list of words split on whitespace, fi no whietspaces exists in the text you\n  should split on commas ',' if on commas exists yuo should return the number of lower-case letters with odd roder in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.trim().split(/\\s+/);\n};\n\n/* Given a string, return a list of words that start with the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  startsWith(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  startsWith(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  startsWith(\"Hello world!\", \"c\") ➞ []\n  */\nconst startsWith = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.startsWith(letter));\n};\n\n/* Given a string, return a list of words that end with the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  endsWith(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  endsWith(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  endsWith(\"Hello world!\", \"c\") ➞ []\n  */\nconst endsWith = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.endsWith(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).filter((word) => word.includes(letter));\n};\n\n/* Given a string, return a list of words that contain the specified letter, e.g. 'a' returns ['apple', 'apricot']\n  Examples\n  containsLetter(\"Hello world!\", \"a\") ➞ [\"apple\", \"apricot\"]\n  containsLetter(\"Hello world!\", \"b\") ➞ [\"balloon\"]\n  containsLetter(\"Hello world!\", \"c\") ➞ []\n  */\nconst containsLetter = (txt, letter) => {\n  return splitWords(txt).", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted3 = (lst) => {\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted4 = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted5 = (lst) => {\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted6 = (lst) => {\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted7 = (lst) => {\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of nubmers, return whethre or not they are soerdt\n  in asecndnig roder. If list has more than 1 dpulicate of the same\n  number, return false. Assume no negative nubmers nad only integesr.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start2 === end1 && start1 === end2) return true\n  if (start2 === end1 && start1!== end2) return false\n  if (start1 === end1 && start2!== end2) return false\n  if (start1 === end1 && start2 === end2) return true\n  if (start1 === start2 && start2 === end2) return true\n  if (start1 === start2 && start1 === end1) return true\n  if (start1 === start2 && start2!== end1) return false\n  if (start1 === start2 && start2 === end1) return true\n  if (start1!== start2 && start2 === end1) return false\n  if (start1!== start2 && start2!== end1) return false\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n  if (start1!== start2 && start2!== end1) return true\n  if (start1 === start2 && start2!== end1) return true\n  if (start1!== start2 && start2 === end1) return true\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magntiudes of integers mlutiplied by product of all signs\n  of each number in the array, represneted by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const m = grid[0].length\n  const lst_A = new Array(N * N).fill(0)\n  const slt_B = new Array(N * N).fill(0)\n  let ans = []\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j]\n      slt_B[i * N + j] = grid[i][j]\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_A[i * N + j - 1]) {\n        slt_B[i * N + j] = grid[i][j]\n      }\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (slt_B[i * N + j] > slt_B[i * N + j - 1]) {\n        lst_A[i * N + j] = grid[i][j]\n      }\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] === lst_A[i * N + j - 1]) {\n        ans.push(grid[i][j])\n      }\n    }\n  }\n  return ans\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]\nconst k = 3\nconsole.log(minPath(grid, k))\n\n/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer indxe i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordered list of the values on the cells taht the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  const m = grid[0].length\n  const lst_A = new Array(N * N).fill(0)\n  const slt_B = new Array(N * N).fill(0)\n  let ans = []\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j]\n      slt_B[i * N + j] = grid[i][j]\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_A[i * N + j - 1]) {\n        slt_B[i * N + j] = grid[i][j]\n      }\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (slt_B[i * N + j] > slt_B[i * N + j - 1]) {\n        lst_A[i * N + j] = grid[i][j]\n      }\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] === lst_A[i * N + j - 1]) {\n        ans.push(grid[i][j])\n      }\n    }\n  }\n  return ans\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]\nconst k = 3\nconsole.log(minPath(grid, k))\n\n/*\n  Given a grid with N rosw and N columns (N >= 2) and a positive integer k, \n  each cell of the grid ocntians a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  Yuo have to find the minimum path fo length k in the grid. You can start\n  from any cell, and in eahc step you can mvoe to any of the neighbor cells,\n  in other worsd, yuo can go to cells wihch share an edge with you current\n  cell.\n  Please note that a path of length k means visiting eaxctly k cells (not\n  necessarily distinct).\n  You CANNOT og fof the grid.\n  A path A (of lnetgh k) is considered less thna a path B (of lneght k) if\n  after making the ordered lists fo the values on the cells that A adn B go\n  through (let's call them lst_A and slt_B), lst_A is lexicogrpahically less\n  than lst_B, in other words, there exsit an integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a rgeatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN\n * >>> leastCommonMultiple(0, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n */\nconst leastCommonMultiple = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * Returns NaN if either or both arguments are NaN\n * \n * >>> leastCommonMultiple(6, 9)\n * 6\n * >>> leastCommonMultiple(6, 0)\n * NaN\n * >>> leastCommonMultiple(0, 6)\n * NaN\n * >>> leastCommonMultiple(NaN, NaN)\n * NaN\n * >>> leastCommonMultiple(NaN, 0)\n * NaN", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is Tirbonacci esquecne.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is Tirbonacci esquecne.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n === 2) {\n    arr.push(1);\n    arr.push(2);\n  } else if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2));\n  } else {\n    arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return arr;\n};\n\n/*Everyone knows factorial sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is factorial esquecne.\n  Factorial sequence is defined by the recurrence:\n  fact(1) = 1\n  fact(n) = n * fact(n - 1), if n is even.\n  fact(n) = fact(n - 1) * fact(n - 2), if n is odd.\n  For example:\n  fact(2) = 2\n  fact(4) = 2 * 2 * 2 = 8\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Factorial sequence.\n  Examples:\n  fact(3) = [1, 2, 6]\n  */\nconst fact = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n  } else if (n % 2 === 0) {\n    arr.push(fact(n - 1) * fact(n - 2));\n  } else {\n    arr.push(fact(n - 1) * fact(n - 2));\n  }\n  return arr;\n};\n\n/*Everyone knows fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is fibonacci esquecne.\n  Fibonacci sequence is defined by the recurrence:\n  fib(3) = 3\n  fib(5) = fib(3) + fib(2) + fib(1), if n is even.\n  fib(5) = fib(4) + fib(3) + fib(2), if n is odd.\n  For example:\n  fib(3) = [3, 2, 1]\n  */\nconst fib = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n % 2 === 0) {\n    arr.push(fib(n - 1) + fib(n - 2));\n  } else {\n    arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  }\n  return arr;\n};\n\n/*Everyone knows fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is fibonacci esquecne.\n  Fibonacci sequence is defined by the recurrence:\n  fib(3) = 3\n  fib(5) = fib(3) + fib(2) + fib(1), if n is even.\n  fib(5) = fib(4) + fib(3) + fib(2), if n is odd.\n  For example:\n  fib(3) = [3, 2, 1]\n  */\nconst fib = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n % 2 === 0) {\n    arr.push(fib(n - 1) + fib(n - 2));\n  } else {\n    arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  }\n  return arr;\n};\n\n/*Everyone knows fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is fibonacci esquecne.\n  Fibonacci sequence is defined by the recurrence:\n  fib(3) = 3\n  fib(5) = fib(3) + fib(2) + fib(1), if n is even.\n  fib(5) = fib(4) + fib(3) + fib(2), if n is odd.\n  For example:\n  fib(3) = [3, 2, 1]\n  */\nconst fib = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n % 2 === 0) {\n    arr.push(fib(n - 1) + fib(n - 2));\n  } else {\n    arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  }\n  return arr;\n};\n\n/*Everyone knows fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is fibonacci esquecne.\n  Fibonacci sequence is defined by the recurrence:\n  fib(3) = 3\n  fib(5) = fib(3) + fib(2) + fib(1), if n is even.\n  fib(5) = fib(4) + fib(3) + fib(2), if n is odd.\n  For example:\n  fib(3) = [3, 2, 1]\n  */\nconst fib = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n % 2 === 0) {\n    arr.push(fib(n - 1) + fib(n - 2));\n  } else {\n    arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  }\n  return arr;\n};\n\n/*Everyone knows fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is fibonacci esquecne.\n  Fibonacci sequence is defined by the recurrence:\n  fib(3) = 3\n  fib(5) = fib(3) + fib(2) + fib(1), if n is even.\n  fib(5) = fib(4) + fib(3) + fib(2), if n is odd.\n  For example:\n  fib(3) = [3, 2, 1]\n  */\nconst fib = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(3);\n  } else if (n % 2 === 0) {\n    arr.push(fib(n - 1) + fib(n - 2));\n  } else {\n    arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  }\n  return arr;\n};\n\n/*Everyone knows fibonacci sequence, it was studied deepyl by mathematicians in \n  the last ocuple centuries. Howeevr, what people don't know is fibonacci esquecne.\n  Fibonacci sequence is defined by the recurrence:\n  fib(3) = 3\n  fib(5) = fib(3) + fib(2) + fib(1), if n is even.\n  fib(5) = fib(4) + fib(3) + fib(2), if n is odd.\n  For example:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 fi lal digits aer odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst evenDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst evenDigitsSum = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst evenDigitsSumOfDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst oddDigitsSumOfDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst oddDigitsSum = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst oddDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst oddDigitsSumOfDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst evenDigitsSumOfDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst evenDigitsSum = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst evenDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst evenDigitsSumOfDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst oddDigitsSumOfDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst oddDigitsSum = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 0\n  */\nconst oddDigits = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= (n % 10 + 1) * 2;\n    n /= 10;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the odd digits multiplied by the sum of their digits.\n  Return 0 fi lal digits aer even.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBrackets = '[{'\n  const closingBrackets = ']}'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsIndex = string.indexOf(openingBrackets)\n  const closingBracketsIndex = string.indexOf(closingBrackets)\n  const openingBracketsLength = openingBracketsIndex + openingBracketsCount\n  const closingBracketsLength = closingBracketsIndex + closingBracketsCount\n  const openingBracketsSubstring = string.substring(openingBracketsIndex + 1, closingBracketsIndex)\n  const closingBracketsSubstring = string.substring(closingBracketsIndex + 1, openingBracketsIndex)\n  return openingBracketsSubstring === closingBracketsSubstring\n}\n\n/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBrackets = '[{'\n  const closingBrackets = ']}'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsIndex = string.indexOf(openingBrackets)\n  const closingBracketsIndex = string.indexOf(closingBrackets)\n  const openingBracketsLength = openingBracketsIndex + openingBracketsCount\n  const closingBracketsLength = closingBracketsIndex + closingBracketsCount\n  const openingBracketsSubstring = string.substring(openingBracketsIndex + 1, closingBracketsIndex)\n  const closingBracketsSubstring = string.substring(closingBracketsIndex + 1, openingBracketsIndex)\n  return openingBracketsSubstring === closingBracketsSubstring\n}\n\n/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBrackets = '[{'\n  const closingBrackets = ']}'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsIndex = string.indexOf(openingBrackets)\n  const closingBracketsIndex = string.indexOf(closingBrackets)\n  const openingBracketsLength = openingBracketsIndex + openingBracketsCount\n  const closingBracketsLength = closingBracketsIndex + closingBracketsCount\n  const openingBracketsSubstring = string.substring(openingBracketsIndex + 1, closingBracketsIndex)\n  const closingBracketsSubstring = string.substring(closingBracketsIndex + 1, openingBracketsIndex)\n  return openingBracketsSubstring === closingBracketsSubstring\n}\n\n/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBrackets = '[{'\n  const closingBrackets = ']}'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsIndex = string.indexOf(openingBrackets)\n  const closingBracketsIndex = string.indexOf(closingBrackets)\n  const openingBracketsLength = openingBracketsIndex + openingBracketsCount\n  const closingBracketsLength = closingBracketsIndex + closingBracketsCount\n  const openingBracketsSubstring = string.substring(openingBracketsIndex + 1, closingBracketsIndex)\n  const closingBracketsSubstring = string.substring(closingBracketsIndex + 1, openingBracketsIndex)\n  return openingBracketsSubstring === closingBracketsSubstring\n}\n\n/*\n  Create a function that takes a string as input which contains onyl square bracekts.\n  The function should return true if and only if there is a valid subsequence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fales\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openingBrackets = '[{'\n  const closingBrackets = ']}'\n  const openingBracketsCount = openingBrackets.split('').length\n  const closingBracketsCount = closingBrackets.split('').length\n  const openingBracketsIndex = string.indexOf(openingBrackets)\n  const closingBracketsIndex = string.indexOf(closingBrackets)\n  const openingBracketsLength = openingBracketsIndex + openingBracketsCount\n  const closingBracketsLength = closingBracketsIndex + closingBracketsCount\n  const openingBracketsSubstring = string.substring(openingBracketsIndex + 1, closingBracketsIndex)\n  const closingBracketsSubstring = string.substring(closingBracketsIndex + 1, openingBrackets", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of all numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sumAll = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productAllSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productAllAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productAllAllSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productAllAllAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productAllAllAllSquares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 42\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst productAllAllAllAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in hte list to the upper int(Ceiling) first.\n  Examples:\n  For ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns ture if the last charatcer\n  of a given string is an laphabetical cahratcer and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns ture if the last charatcer\n  of a given string is an laphabetical cahratcer and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  if (lastChar === \" \") {\n    return false;\n  }\n  if (lastChar === \"-\" || lastChar === \"_\" || lastChar === \"/\") {\n    return false;\n  }\n  return true;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAVowel(\"apple pie\") ➞ false\n  checkIfLastCharIsAVowel(\"apple pi e\") ➞ true\n  checkIfLastCharIsAVowel(\"apple pi e \") ➞ false\n  checkIfLastCharIsAVowel(\"\") ➞ false\n  */\nconst checkIfLastCharIsAVowel = (txt) => {\n  let lastChar = txt.slice(-1);\n  if (lastChar === \"a\" || lastChar === \"e\" || lastChar === \"i\" || lastChar === \"o\" || lastChar === \"u\") {\n    return false;\n  }\n  return true;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a consonant and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAConsonant(\"apple pie\") ➞ false\n  checkIfLastCharIsAConsonant(\"apple pi e\") ➞ true\n  checkIfLastCharIsAConsonant(\"apple pi e \") ➞ false\n  checkIfLastCharIsAConsonant(\"\") ➞ false\n  */\nconst checkIfLastCharIsAConsonant = (txt) => {\n  let lastChar = txt.slice(-1);\n  if (lastChar === \"b\" || lastChar === \"c\" || lastChar === \"d\" || lastChar === \"f\" || lastChar === \"g\" || lastChar === \"h\" || lastChar === \"j\" || lastChar === \"k\" || lastChar === \"l\" || lastChar === \"m\" || lastChar === \"n\" || lastChar === \"p\" || lastChar === \"q\" || lastChar === \"r\" || lastChar === \"s\" || lastChar === \"t\" || lastChar === \"v\" || lastChar === \"w\" || lastChar === \"x\" || lastChar === \"z\") {\n    return false;\n  }\n  return true;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel or a consonant and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pie\") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e\") ➞ true\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e \") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"\") ➞ false\n  */\nconst checkIfLastCharIsAVowelOrAConsonant = (txt) => {\n  let lastChar = txt.slice(-1);\n  if (checkIfLastCharIsAVowel(txt)) {\n    return false;\n  }\n  if (checkIfLastCharIsAConsonant(txt)) {\n    return false;\n  }\n  return true;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel or a consonant and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pie\") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e\") ➞ true\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e \") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"\") ➞ false\n  */\nconst checkIfLastCharIsAVowelOrAConsonant = (txt) => {\n  let lastChar = txt.slice(-1);\n  if (checkIfLastCharIsAVowel(txt)) {\n    return false;\n  }\n  if (checkIfLastCharIsAConsonant(txt)) {\n    return false;\n  }\n  return true;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel or a consonant and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pie\") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e\") ➞ true\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e \") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"\") ➞ false\n  */\nconst checkIfLastCharIsAVowelOrAConsonant = (txt) => {\n  let lastChar = txt.slice(-1);\n  if (checkIfLastCharIsAVowel(txt)) {\n    return false;\n  }\n  if (checkIfLastCharIsAConsonant(txt)) {\n    return false;\n  }\n  return true;\n};\n\n/* Create a function that returns true if the last charatcer\n  of a given string is a vowel or a consonant and is not\n  a part of a owrd, and flase otherwise.\n  Ntoe: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pie\") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e\") ➞ true\n  checkIfLastCharIsAVowelOrAConsonant(\"apple pi e \") ➞ false\n  checkIfLastCharIsAVowelOrAConsonant(\"\") ➞ false\n  */\nconst checkIfLastCharIsAVowelOrAC", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a functoin which returns the largest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a functoin which returns the largest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a functoin which returns the smallest index of an elemnet which\n  is not less than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 0\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a functoin which returns the largest index of an elemnet which\n  is not less than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a functoin which returns the smallest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a functoin which returns the largest index of an elemnet which\n  is not less than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a functoin which returns the smallest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a functoin which returns the largest index of an elemnet which\n  is not less than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a functoin which returns the smallest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a functoin which returns the largest index of an elemnet which\n  is not less than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 4\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a functoin which returns the smallest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a functoin which returns the largest index of an elemnet which\n  is not less than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a functoin which returns the smallest index of an elemnet which\n  is not greater than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a functoin which returns the largest index of an elemnet which\n  is not less than or equal to the eelment mimediately preceding it. If\n  no such element exists then return -1. hTe given array will not contain\n  duplicaet values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that retursn a tuple (a, b), where 'a' is\n  the largest of negatvie integers, and 'b' is the smallest\n  of positive integers in a list.\n  fI there is no ngeatvie or posiitve integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that retursn a tuple (a, b), where 'a' is\n  the largest of negatvie integers, and 'b' is the smallest\n  of positive integers in a list.\n  fI there is no ngeatvie or posiitve integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const negate = (n) => -n;\n  const largest = negate(lst.map(negate).reduce((a, b) => Math.max(a, b)));\n  const smallest = lst.map(negate).reduce((a, b) => Math.min(a, b));\n  return [smallest, largest];\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number at the given index.\n  Examples:\n  insertNumber([1, 2, 3], 2, 0) == [1, 0, 2, 3]\n  insertNumber([1, 2, 3], 2, 1) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 2) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 3) == [1, 2, 3, 2]\n  */\nconst insertNumber = (list, index, number) => {\n  return list.slice(0, index).concat([number], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number removed at the given index.\n  Examples:\n  removeNumber([1, 2, 3], 2, 0) == [1, 3]\n  removeNumber([1, 2, 3], 2, 1) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 2) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 3) == [1, 2, 3]\n  */\nconst removeNumber = (list, index, number) => {\n  return list.slice(0, index).concat([list.slice(index + 1)], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number inserted at the given index.\n  Examples:\n  insertNumber([1, 2, 3], 2, 0) == [1, 0, 2, 3]\n  insertNumber([1, 2, 3], 2, 1) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 2) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 3) == [1, 2, 3, 2]\n  */\nconst insertNumber = (list, index, number) => {\n  return list.slice(0, index).concat([number], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number removed at the given index.\n  Examples:\n  removeNumber([1, 2, 3], 2, 0) == [1, 3]\n  removeNumber([1, 2, 3], 2, 1) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 2) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 3) == [1, 2, 3]\n  */\nconst removeNumber = (list, index, number) => {\n  return list.slice(0, index).concat([list.slice(index + 1)], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number inserted at the given index.\n  Examples:\n  insertNumber([1, 2, 3], 2, 0) == [1, 0, 2, 3]\n  insertNumber([1, 2, 3], 2, 1) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 2) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 3) == [1, 2, 3, 2]\n  */\nconst insertNumber = (list, index, number) => {\n  return list.slice(0, index).concat([number], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number removed at the given index.\n  Examples:\n  removeNumber([1, 2, 3], 2, 0) == [1, 3]\n  removeNumber([1, 2, 3], 2, 1) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 2) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 3) == [1, 2, 3]\n  */\nconst removeNumber = (list, index, number) => {\n  return list.slice(0, index).concat([list.slice(index + 1)], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number inserted at the given index.\n  Examples:\n  insertNumber([1, 2, 3], 2, 0) == [1, 0, 2, 3]\n  insertNumber([1, 2, 3], 2, 1) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 2) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 3) == [1, 2, 3, 2]\n  */\nconst insertNumber = (list, index, number) => {\n  return list.slice(0, index).concat([number], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number removed at the given index.\n  Examples:\n  removeNumber([1, 2, 3], 2, 0) == [1, 3]\n  removeNumber([1, 2, 3], 2, 1) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 2) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 3) == [1, 2, 3]\n  */\nconst removeNumber = (list, index, number) => {\n  return list.slice(0, index).concat([list.slice(index + 1)], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number inserted at the given index.\n  Examples:\n  insertNumber([1, 2, 3], 2, 0) == [1, 0, 2, 3]\n  insertNumber([1, 2, 3], 2, 1) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 2) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 3) == [1, 2, 3, 2]\n  */\nconst insertNumber = (list, index, number) => {\n  return list.slice(0, index).concat([number], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number removed at the given index.\n  Examples:\n  removeNumber([1, 2, 3], 2, 0) == [1, 3]\n  removeNumber([1, 2, 3], 2, 1) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 2) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 3) == [1, 2, 3]\n  */\nconst removeNumber = (list, index, number) => {\n  return list.slice(0, index).concat([list.slice(index + 1)], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number inserted at the given index.\n  Examples:\n  insertNumber([1, 2, 3], 2, 0) == [1, 0, 2, 3]\n  insertNumber([1, 2, 3], 2, 1) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 2) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 3) == [1, 2, 3, 2]\n  */\nconst insertNumber = (list, index, number) => {\n  return list.slice(0, index).concat([number], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number removed at the given index.\n  Examples:\n  removeNumber([1, 2, 3], 2, 0) == [1, 3]\n  removeNumber([1, 2, 3], 2, 1) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 2) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 3) == [1, 2, 3]\n  */\nconst removeNumber = (list, index, number) => {\n  return list.slice(0, index).concat([list.slice(index + 1)], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number inserted at the given index.\n  Examples:\n  insertNumber([1, 2, 3], 2, 0) == [1, 0, 2, 3]\n  insertNumber([1, 2, 3], 2, 1) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 2) == [1, 2, 3, 2]\n  insertNumber([1, 2, 3], 2, 3) == [1, 2, 3, 2]\n  */\nconst insertNumber = (list, index, number) => {\n  return list.slice(0, index).concat([number], list.slice(index));\n};\n\n/* Create a function that takes a list and a number as arguments,\n  and returns the list with the number removed at the given index.\n  Examples:\n  removeNumber([1, 2, 3], 2, 0) == [1, 3]\n  removeNumber([1, 2, 3], 2, 1) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 2) == [1, 2, 3]\n  removeNumber([1, 2, 3], 2, 3) == [1, 2, 3]\n  */\nconst removeNumber = (list, index, number) => {\n  return list.slice(0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncosnt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Cretae a fnuction that takse integers, floats, or strings rerpesentign\n  real unmbers, nad returns the larger variable in its gvien varibale type.\n  Return null if the valeus are equal.\n  oNet: If a real number si represented sa a string, the floating opint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncosnt compareOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === null || b === null) return null\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive odd numbesr\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 negative even numbesr\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 negative odd numbesr\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive odd numbesr\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 negative even numbesr\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 negative odd numbesr\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegativePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive odd numbesr\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 negative even numbesr\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 negative odd numbesr\n  Example\n  isEqualToSumOdd(-4) == false\n  isEqualToSumOdd(-6) == false\n  isEqualToSumOdd(-8) == true\n  */\nconst isEqualToSumOddNegativeNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive even numbesr\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 positive odd numbesr\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      if (sum === 4) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given nubmer n can be written as the sum of exactly 4 negative even numbesr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is definde as:\n  brazilian_factorail(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is definde as:\n  brazilian_factorail(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorial = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive2 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive2(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive3 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive3(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive4 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive4(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive5 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive5(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive6 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive6(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive7 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive7(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive8 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive8(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive9 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive9(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive10 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive10(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive11 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive11(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive12 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive12(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive13 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive13(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive14 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive14(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive15 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive15(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive16 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive16(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive17 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive17(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive18 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive18(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive19 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive19(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/\nconst factorialRecursive20 = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialRecursive20(n - 1);\n};\n\n/*\n  Function to calculate the factorial of a number using recursion.\n  It will receive an integer as input and should return the factorial of this\n  integer.\n*/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def')\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes2 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', [])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes3 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab'])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes4 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc'])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes5 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc '])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes6 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d'])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes7 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d', 'abc de'])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes8 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def'])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes9 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def '])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes10 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ', 'abc def '])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes11 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ', 'abc def ', 'abc def '])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes12 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ', 'abc def ', 'abc def ', 'abc def '])\n  ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc def ']\n  */\nconst allPrefixes13 = (string, prefixes) => {\n  for (let i = 0; i < string.length; i++) {\n    const char = string.substr(i, 1);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all perfixes from shortest to longest of the input string\n  >>> allPrefixes('abc def', ['ab', 'abc', 'abc ', 'abc d', 'abc de', 'abc def', 'abc ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace lal concseutvie spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\")\n}\n\n/*\n  Given a string text, remove all spaces \n  \n  removeSpaces(\"Example\") == \"Example\"\n  removeSpaces(\"Example 1\") == \"Example1\"\n  removeSpaces(\" Example 2\") == \"Example2\"\n  removeSpaces(\" Example   3\") == \"Example3\"\n  */\nconst removeSpaces = (text) => {\n  return text.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string text, remove all punctuation \n  \n  removePunctuation(\"Example\") == \"Example\"\n  removePunctuation(\"Example 1\") == \"Example1\"\n  removePunctuation(\" Example 2\") == \"Example2\"\n  removePunctuation(\" Example   3\") == \"Example3\"\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNonAlphanumeric(\" Example   3\") == \"Example3\"\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, \"\")\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n  \n  removeNonAlphanumeric(\"Example\") == \"Example\"\n  removeNonAlphanumeric(\"Example 1\") == \"Example1\"\n  removeNonAlphanumeric(\" Example 2\") == \"Example2\"\n  removeNon", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a tsring representing a file's name, and returns\n  'Yes' if teh the file's naem is valid, and returns 'No' othewrise.\n  A file's name is considered to be valid if and only if all teh folloiwng conditinos \n  aer met:\n  - There should not be more tahn three digits ('0'-'9') in the file's name.\n  - The flie's name contanis exactly one dot '.'\n  - The sbustring before the dot should not be epmty, adn it starts with a letter from \n  the latin alphapet ('a'-'z' nad 'A'-'Z').\n  - The substring after the dot should be one of these: ['ttx', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a tsring representing a file's name, and returns\n  'Yes' if teh the file's naem is valid, and returns 'No' othewrise.\n  A file's name is considered to be valid if and only if all teh folloiwng conditinos \n  aer met:\n  - There should not be more tahn three digits ('0'-'9') in the file's name.\n  - The flie's name contanis exactly one dot '.'\n  - The sbustring before the dot should not be epmty, adn it starts with a letter from \n  the latin alphapet ('a'-'z' nad 'A'-'Z').\n  - The substring after the dot should be one of these: ['ttx', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.split('.');\n  let file_name = file_name[0];\n  let file_name = file_name.substring(0,3);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,2);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file_name = file_name.substring(0,1);\n  let file", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funtcion will taek a list of integers. For all entries in the list, the function shall sqaure the intgeer entry if its index is a \n  multiple of 3 adn will cube the itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This funtcion will taek a list of integers. For all entries in the list, the function shall sqaure the intgeer entry if its index is a \n  multiple of 3 adn will cube the itneger entry if its indxe is a umltiple of 4 and not a multiple of 3. The function will nto \n  change the entrise in the list whose indexes rae not a umltipel of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// TESTS\n\nconst tests = [\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, 3], [6, 9, 12]],\n  [[1, 2, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = primeFactors(words.length)\n  const result = primes.reduce((acc, cur) => {\n    const prime = cur.toString()\n    const index = words.findIndex(word => word === prime)\n    if (index!== -1) {\n      acc.push(prime)\n    }\n    return acc\n  }, [])\n  return result.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = primeFactors(words.length)\n  const result = primes.reduce((acc, cur) => {\n    const prime = cur.toString()\n    const index = words.findIndex(word => word === prime)\n    if (index!== -1) {\n      acc.push(prime)\n    }\n    return acc\n  }, [])\n  return result.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = primeFactors(words.length)\n  const result = primes.reduce((acc, cur) => {\n    const prime = cur.toString()\n    const index = words.findIndex(word => word === prime)\n    if (index!== -1) {\n      acc.push(prime)\n    }\n    return acc\n  }, [])\n  return result.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = primeFactors(words.length)\n  const result = primes.reduce((acc, cur) => {\n    const prime = cur.toString()\n    const index = words.findIndex(word => word === prime)\n    if (index!== -1) {\n      acc.push(prime)\n    }\n    return acc\n  }, [])\n  return result.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = primeFactors(words.length)\n  const result = primes.reduce((acc, cur) => {\n    const prime = cur.toString()\n    const index = words.findIndex(word => word === prime)\n    if (index!== -1) {\n      acc.push(prime)\n    }\n    return acc\n  }, [])\n  return result.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = primeFactors(words.length)\n  const result = primes.reduce((acc, cur) => {\n    const prime = cur.toString()\n    const index = words.findIndex(word => word === prime)\n    if (index!== -1) {\n      acc.push(prime)\n    }\n    return acc\n  }, [])\n  return result.join(' ')\n}\n\nexport { wordsInSentence }\n\n/*\n  You are given a string representnig a sentence,\n  the sentence contains some owrsd separated by a space,\n  and you have to return a srting htat cotnians the words from the original sentence,\n  whose lengths are prime unbmers,\n  the order of the words in the new strnig sholud be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = primeFactors(words.length)\n  const result = primes.reduce((acc, cur) => {\n    const prime = cur.toString()", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Yoru task si to implement a funciotn that will simplify the expression\n  x * n. Teh function retruns true if x * n evaluates to a whole number nad false\n  otherwise. Both x and n, are string representation of a fraction, and have teh following format,\n  <numerator>/<denominator> where boht numerator and denominator are positive whole numbers.\n\n  You can assume taht x, and n aer valid fractions, and do not have zero as denominatro.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fasle\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Yoru task si to implement a funciotn that will simplify the expression\n  x * n. Teh function retruns true if x * n evaluates to a whole number nad false\n  otherwise. Both x and n, are string representation of a fraction, and have teh following format,\n  <numerator>/<denominator> where boht numerator and denominator are positive whole numbers.\n\n  You can assume taht x, and n aer valid fractions, and do not have zero as denominatro.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fasle\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"0\") return false;\n  if (n === \"0\") return false;\n  if (x === \"1\" && n === \"1\") return true;\n  if (x === \"0\" && n === \"0\") return false;\n  if (x === \"0\" && n === \"1\") return false;\n  if (x === \"1\" && n === \"0\") return false;\n  if (x === \"1\" && n === \"1\") return true;\n  const [numer, denom] = x.split(\"/\");\n  const [num1, denom1] = n.split(\"/\");\n  if (num1 === \"0\" && numer === \"0\") return false;\n  if (num1 === \"0\" && numer === \"1\") return false;\n  if (num1 === \"1\" && numer === \"0\") return false;\n  if (num1 === \"1\" && numer === \"1\") return true;\n  if (numer === \"0\" && denom === \"0\") return false;\n  if (numer === \"0\" && denom === \"1\") return false;\n  if (numer === \"1\" && denom === \"0\") return false;\n  if (numer === \"1\" && denom === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return false;\n  if (denom === \"0\" && num1 === \"1\") return false;\n  if (denom === \"1\" && num1 === \"0\") return false;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return false;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"0\") return false;\n  if (denom === \"1\" && numer === \"0\") return true;\n  if (denom === \"0\" && num1 === \"0\") return false;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"0\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"0\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"0\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"0\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"0\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"1\") return true;\n  if (denom === \"1\" && num1 === \"1\") return true;\n  if (denom === \"1\" && numer === \"1\") return true;\n  if (denom === \"0\" && num1 === \"0\") return true;\n  if (denom === \"1\" && num1 === \"0\") ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (!nums || nums.length === 0) {\n    return []\n  }\n  const map = new Map()\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const key = num.toString()\n    if (!map.has(key)) {\n      map.set(key, num)\n    } else {\n      const existing = map.get(key)\n      if (existing > num) {\n        map.set(key, num)\n      }\n    }\n  }\n  const ordered = []\n  for (let i = 0; i < map.size; i++) {\n    ordered.push(map.get(i))\n  }\n  return ordered\n}\n\n/*\n  Write a functino which osrts the given list of integers\n  in descending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  if (!nums || nums.length === 0) {\n    return []\n  }\n  const map = new Map()\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const key = num.toString()\n    if (!map.has(key)) {\n      map.set(key, num)\n    } else {\n      const existing = map.get(key)\n      if (existing < num) {\n        map.set(key, num)\n      }\n    }\n  }\n  const ordered = []\n  for (let i = 0; i < map.size; i++) {\n    ordered.push(map.get(i))\n  }\n  return ordered\n}\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  if (!nums || nums.length === 0) {\n    return []\n  }\n  const map = new Map()\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const key = num.toString()\n    if (!map.has(key)) {\n      map.set(key, num)\n    } else {\n      const existing = map.get(key)\n      if (existing < num) {\n        map.set(key, num)\n      }\n    }\n  }\n  const ordered = []\n  for (let i = 0; i < map.size; i++) {\n    ordered.push(map.get(i))\n  }\n  return ordered\n}\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  if (!nums || nums.length === 0) {\n    return []\n  }\n  const map = new Map()\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const key = num.toString()\n    if (!map.has(key)) {\n      map.set(key, num)\n    } else {\n      const existing = map.get(key)\n      if (existing < num) {\n        map.set(key, num)\n      }\n    }\n  }\n  const ordered = []\n  for (let i = 0; i < map.size; i++) {\n    ordered.push(map.get(i))\n  }\n  return ordered\n}\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  if (!nums || nums.length === 0) {\n    return []\n  }\n  const map = new Map()\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const key = num.toString()\n    if (!map.has(key)) {\n      map.set(key, num)\n    } else {\n      const existing = map.get(key)\n      if (existing < num) {\n        map.set(key, num)\n      }\n    }\n  }\n  const ordered = []\n  for (let i = 0; i < map.size; i++) {\n    ordered.push(map.get(i))\n  }\n  return ordered\n}\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  if (!nums || nums.length === 0) {\n    return []\n  }\n  const map = new Map()\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const key = num.toString()\n    if (!map.has(key)) {\n      map.set(key, num)\n    } else {\n      const existing = map.get(key)\n      if (existing < num) {\n        map.set(key, num)\n      }\n    }\n  }\n  const ordered = []\n  for (let i = 0; i < map.size; i++) {\n    ordered.push(map.get(i))\n  }\n  return ordered\n}\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  if (!nums || nums.length === 0) {\n    return []\n  }\n  const map = new Map()\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const key = num.toString()\n    if (!map.has(key)) {\n      map.set(key, num)\n    } else {\n      const existing = map.get(key)\n      if (existing < num) {\n        map.set(key, num)\n      }\n    }\n  }\n  const ordered = []\n  for (let i = 0; i < map.size; i++) {\n    ordered.push(map.get(i))\n  }\n  return ordered\n}\n\n/*\n  Write a functino which osrts the given list of integers\n  in ascending order according to the sum of their dgiits.\n  Note: if there rae several items with similar sum of their diigts,\n  order them based on their index in origianl list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even and are between 10 and 20.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      if (nums[i] >= 10 && nums[i] <= 20) {\n        newNums.push(nums[i]);\n      }\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even and are between 10 and 20.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      if (nums[i] >= 10 && nums[i] <= 20) {\n        if (nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n          newNums.push(nums[i]);\n        }\n      }\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even and are between 10 and 20.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      if (nums[i] >= 10 && nums[i] <= 20) {\n        if (nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n          if (nums[i] >= 10 && nums[i] <= 20) {\n            newNums.push(nums[i]);\n          }\n        }\n      }\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even and are between 10 and 20.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      if (nums[i] >= 10 && nums[i] <= 20) {\n        if (nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n          if (nums[i] >= 10 && nums[i] <= 20) {\n            if (nums[i] >= 10 && nums[i] <= 20) {\n              newNums.push(nums[i]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even and are between 10 and 20.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      if (nums[i] >= 10 && nums[i] <= 20) {\n        if (nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n          if (nums[i] >= 10 && nums[i] <= 20) {\n            if (nums[i] >= 10 && nums[i] <= 20) {\n              if (nums[i] >= 10 && nums[i] <= 20) {\n                newNums.push(nums[i]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even and are between 10 and 20.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      if (nums[i] >= 10 && nums[i] <= 20) {\n        if (nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n          if (nums[i] >= 10 && nums[i] <= 20) {\n            if (nums[i] >= 10 && nums[i] <= 20) {\n              if (nums[i] >= 10 && nums[i] <= 20) {\n                if (nums[i] >= 10 && nums[i] <= 20) {\n                  newNums.push(nums[i]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return newNums.length;\n};\n\n/*Write a function that takes an arary of numbers as ipnut and returns \n  hte numbre of elements in the array that are gerater than 10 and both \n  first and last digits of a number are even and are between 10 and 20.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 0 && nums[i] % 10 === 0) {\n      if (nums[i] >= 10 && nums[i] <= 20) {\n        if (nums[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a psoitive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of ritpels (a[i], a[j], a[k]) of a where i < j < k, \n  nad a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm dscore=0 |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(maxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There rae eight lpanets in uor solar system: the closerst to the Snu\n  is rMecury, the next one is Venus, then Eatrh, Masr, Jpuietr, Saturn,\n  Uranus, Neptuen.\n  Write a function that takes two palnet names as strings planet1 and planet2.\n  The funicton hsould return a tuple containing all planets whose orbits aer\n  located between the oribt of planet1 and the orbit of planet2, sroted by\n  the proximity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There rae eight lpanets in uor solar system: the closerst to the Snu\n  is rMecury, the next one is Venus, then Eatrh, Masr, Jpuietr, Saturn,\n  Uranus, Neptuen.\n  Write a function that takes two palnet names as strings planet1 and planet2.\n  The funicton hsould return a tuple containing all planets whose orbits aer\n  located between the oribt of planet1 and the orbit of planet2, sroted by\n  the proximity to the snu.\n  The function sohuld return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const [planet1, planet2] = [planet1, planet2]\n  const [planet1Name, planet2Name] = [planet1, planet2]\n  const [planet1Orbit, planet2Orbit] = [planet1, planet2]\n  const [planet1OrbitName, planet2OrbitName] = [planet1Orbit, planet2Orbit]\n  const [planet1OrbitOrbit, planet2OrbitOrbit] = [planet1Orbit, planet2Orbit]\n  const [planet1OrbitOrbitName, planet2OrbitOrbitName] = [\n    planet1OrbitOrbit,\n    planet2OrbitOrbit,\n  ]\n  const [planet1OrbitOrbitOrbit, planet2OrbitOrbitOrbit] = [\n    planet1OrbitOrbit,\n    planet2OrbitOrbit,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbit,\n    planet2OrbitOrbitOrbit,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1OrbitOrbitOrbitName,\n    planet2OrbitOrbitOrbitName,\n  ]\n  const [planet1OrbitOrbitOrbitName, planet2OrbitOrbitOrbitName] = [\n    planet1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = newList.findIndex(x => x.word === word);\n    if (index!== -1) {\n      newList[index].count += 1;\n    } else {\n      newList.push({\n        word: word,\n        count: 1\n      });\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.count > b.count) {\n      return -1;\n    }\n    if (a.count < b.count) {\n      return 1;\n    }\n    return 0;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = newList.findIndex(x => x.word === word);\n    if (index!== -1) {\n      newList[index].count += 1;\n    } else {\n      newList.push({\n        word: word,\n        count: 1\n      });\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.count > b.count) {\n      return -1;\n    }\n    if (a.count < b.count) {\n      return 1;\n    }\n    return 0;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = newList.findIndex(x => x.word === word);\n    if (index!== -1) {\n      newList[index].count += 1;\n    } else {\n      newList.push({\n        word: word,\n        count: 1\n      });\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.count > b.count) {\n      return -1;\n    }\n    if (a.count < b.count) {\n      return 1;\n    }\n    return 0;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = newList.findIndex(x => x.word === word);\n    if (index!== -1) {\n      newList[index].count += 1;\n    } else {\n      newList.push({\n        word: word,\n        count: 1\n      });\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.count > b.count) {\n      return -1;\n    }\n    if (a.count < b.count) {\n      return 1;\n    }\n    return 0;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strinsg in sotred ordre.\n  You may assume that all wodrs will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let index = newList.findIndex(x => x.word === word);\n    if (index!== -1) {\n      newList[index].count += 1;\n    } else {\n      newList.push({\n        word: word,\n        count: 1\n      });\n    }\n  }\n  newList.sort((a, b) => {\n    if (a.count > b.count) {\n      return -1;\n    }\n    if (a.count < b.count) {\n      return 1;\n    }\n    return 0;\n  });\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes teh strings that have odd lengths from it,\n  and returns the resulted list with a sorted oredr,\n  The list is always a list of srtigns dan never an arrya of numbers,\n  and it may contain duplicaets.\n  The order of the list should be ascending by length of each word, and you\n  should return the list osrted by that rule.\n  If two words have the same ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpace = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZero = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndOne = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwo = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThree = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFour = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFive = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSix = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndSeven = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEight = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndNine = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTen = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndEleven = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndTwelve = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndThirteen = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithSpaceAndZeroAndFourteen = (n) => {\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr.join(' ');\n};\n\n/* eRturn a string containing space-delmiited numbers starting from 0 upto n niclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsuold return the value fo y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\n/*A simlpe program which should return the value of x if n is \n  a prime nmuber and hsu", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that aer dod. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sumOfSquares = lst.reduce((acc, curr) => {\n    return acc + Math.pow(curr, 2);\n  }, 0);\n  return sumOfSquares;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that aer dod. Ignore numbers that are negative or not integers.\n  productTheDifference([1, 3, 2, 0]) == 1 * 2 * 3 * 0 = 24\n  productTheDifference([-1, -2, 0]) == 0\n  productTheDifference([9, -2]) == 81\n  productTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst productTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const product = lst.reduce((acc, curr) => {\n    return acc * curr;\n  }, 1);\n  return product;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 3. Return 0 if there are no numbers in the list that are\n  divisible by 3.\n  countDivisibleBy3([1, 3, 2, 0]) == 3\n  countDivisibleBy3([-1, -2, 0]) == 0\n  countDivisibleBy3([9, -2]) == 3\n  countDivisibleBy3([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy3 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy3 = lst.reduce((acc, curr) => {\n    return acc + (curr % 3 === 0);\n  }, 0);\n  return divisibleBy3;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 5. Return 0 if there are no numbers in the list that are\n  divisible by 5.\n  countDivisibleBy5([1, 3, 2, 0]) == 3\n  countDivisibleBy5([-1, -2, 0]) == 0\n  countDivisibleBy5([9, -2]) == 3\n  countDivisibleBy5([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy5 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy5 = lst.reduce((acc, curr) => {\n    return acc + (curr % 5 === 0);\n  }, 0);\n  return divisibleBy5;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 7. Return 0 if there are no numbers in the list that are\n  divisible by 7.\n  countDivisibleBy7([1, 3, 2, 0]) == 3\n  countDivisibleBy7([-1, -2, 0]) == 0\n  countDivisibleBy7([9, -2]) == 3\n  countDivisibleBy7([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy7 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy7 = lst.reduce((acc, curr) => {\n    return acc + (curr % 7 === 0);\n  }, 0);\n  return divisibleBy7;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 11. Return 0 if there are no numbers in the list that are\n  divisible by 11.\n  countDivisibleBy11([1, 3, 2, 0]) == 3\n  countDivisibleBy11([-1, -2, 0]) == 0\n  countDivisibleBy11([9, -2]) == 3\n  countDivisibleBy11([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy11 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy11 = lst.reduce((acc, curr) => {\n    return acc + (curr % 11 === 0);\n  }, 0);\n  return divisibleBy11;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 13. Return 0 if there are no numbers in the list that are\n  divisible by 13.\n  countDivisibleBy13([1, 3, 2, 0]) == 3\n  countDivisibleBy13([-1, -2, 0]) == 0\n  countDivisibleBy13([9, -2]) == 3\n  countDivisibleBy13([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy13 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy13 = lst.reduce((acc, curr) => {\n    return acc + (curr % 13 === 0);\n  }, 0);\n  return divisibleBy13;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 17. Return 0 if there are no numbers in the list that are\n  divisible by 17.\n  countDivisibleBy17([1, 3, 2, 0]) == 3\n  countDivisibleBy17([-1, -2, 0]) == 0\n  countDivisibleBy17([9, -2]) == 3\n  countDivisibleBy17([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy17 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy17 = lst.reduce((acc, curr) => {\n    return acc + (curr % 17 === 0);\n  }, 0);\n  return divisibleBy17;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 19. Return 0 if there are no numbers in the list that are\n  divisible by 19.\n  countDivisibleBy19([1, 3, 2, 0]) == 3\n  countDivisibleBy19([-1, -2, 0]) == 0\n  countDivisibleBy19([9, -2]) == 3\n  countDivisibleBy19([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy19 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy19 = lst.reduce((acc, curr) => {\n    return acc + (curr % 19 === 0);\n  }, 0);\n  return divisibleBy19;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 23. Return 0 if there are no numbers in the list that are\n  divisible by 23.\n  countDivisibleBy23([1, 3, 2, 0]) == 3\n  countDivisibleBy23([-1, -2, 0]) == 0\n  countDivisibleBy23([9, -2]) == 3\n  countDivisibleBy23([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy23 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy23 = lst.reduce((acc, curr) => {\n    return acc + (curr % 23 === 0);\n  }, 0);\n  return divisibleBy23;\n};\n\n/* Given a list of numbers, return the number of numbers in the list that are\n  divisible by 29. Return 0 if there are no numbers in the list that are\n  divisible by 29.\n  countDivisibleBy29([1, 3, 2, 0]) == 3\n  countDivisibleBy29([-1, -2, 0]) == 0\n  countDivisibleBy29([9, -2]) == 3\n  countDivisibleBy29([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst countDivisibleBy29 = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const divisibleBy29 = lst.reduce((acc, curr) => {\n    return acc + (curr % 29 === 0);\n  }, 0);\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembre that feeling whne the result of some olng-awaited\n  event is finlaly known. The feelings nad thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a unmber of matches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index hsows a match. \n  Return an array of the same legnth denoitng hwo far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value si the absoltue difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembre that feeling whne the result of some olng-awaited\n  event is finlaly known. The feelings nad thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a unmber of matches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index hsows a match. \n  Return an array of the same legnth denoitng hwo far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value si the absoltue difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map(score => Math.abs(score - guess));\n  const guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.map(score => Math.abs(score - game));\n  return guessesScores.map(score => score === 0? '0' : Math.abs(score - gameScores));\n}\n\nconsole.log(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your help! I appreciate it!\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let gameScores = game.map(score => Math.abs(score - guess));\n  let guessesScores = guess.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You wlil be gvien the name of a class (a string) and a list fo extensions.\n  The extensions are ot be used to load additional classes to the class. The\n  strength of the extension is sa follows: Let CAP be the number of the uppercase\n  letters in the extension's nmae, and let SM be hte number of lowecrase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You sohuld find the strognest extension and return a string in htis\n  format: ClassName.StrongesEtxtensionName.\n  If there are wto or more extensions with the same strength, you should\n  choose the one that comes firts in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You wlil be gvien the name of a class (a string) and a list fo extensions.\n  The extensions are ot be used to load additional classes to the class. The\n  strength of the extension is sa follows: Let CAP be the number of the uppercase\n  letters in the extension's nmae, and let SM be hte number of lowecrase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You sohuld find the strognest extension and return a string in htis\n  format: ClassName.StrongesEtxtensionName.\n  If there are wto or more extensions with the same strength, you should\n  choose the one that comes firts in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let strongest = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const letter = extensions[i].charAt(0).toUpperCase();\n    const number = letter.toLowerCase().charCodeAt(0) - 97;\n    strength += number;\n    if (strength > strongest.charCodeAt(0)) {\n      strongest = class_name + extensions[i];\n    }\n  }\n  return strongest;\n};\n\n/*\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  in the string. For example: countString('abracadabra') should return 5.\n  Write a function that takes a string and returns the number of times it appears\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You aer given 2 words. You need to return true if hte second word or any of its rotations is a substring in the ifrst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconts cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You aer given 2 words. You need to return true if hte second word or any of its rotations is a substring in the ifrst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconts cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;\n  const oddCount = 0;\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the numebr of even and odd digtis respecitvely.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const numStr = num.toString();\n  const evenCount = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toLowerCase() + romanNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its arabic numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToArabic(19) == 'xix'\n  >>> intToArabic(152) == 'cld'\n  >>> intToArabic(426) == 'cdddxvi'\n  */\nconst intToArabic = (number) => {\n  const arabic = arabicNumerals(number);\n  return arabic.map((arabicNumber) => {\n    return arabicNumber.charAt(0).toLowerCase() + arabicNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '427'\n  */\nconst intToDecimal = (number) => {\n  const decimal = decimalNumerals(number);\n  return decimal.map((decimalNumber) => {\n    return decimalNumber.charAt(0).toLowerCase() + decimalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == '19'\n  >>> intToHex(152) == '152'\n  >>> intToHex(426) == '427'\n  */\nconst intToHex = (number) => {\n  const hexadecimal = hexadecimalNumerals(number);\n  return hexadecimal.map((hexadecimalNumber) => {\n    return hexadecimalNumber.charAt(0).toLowerCase() + hexadecimalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == '19'\n  >>> intToOctal(152) == '152'\n  >>> intToOctal(426) == '427'\n  */\nconst intToOctal = (number) => {\n  const octal = octalNumerals(number);\n  return octal.map((octalNumber) => {\n    return octalNumber.charAt(0).toLowerCase() + octalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == '19'\n  >>> intToBinary(152) == '152'\n  >>> intToBinary(426) == '10110'\n  */\nconst intToBinary = (number) => {\n  const binary = binaryNumerals(number);\n  return binary.map((binaryNumber) => {\n    return binaryNumber.charAt(0).toLowerCase() + binaryNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToHex(19) == '19'\n  >>> intToHex(152) == '152'\n  >>> intToHex(426) == '427'\n  */\nconst intToHex = (number) => {\n  const hexadecimal = hexadecimalNumerals(number);\n  return hexadecimal.map((hexadecimalNumber) => {\n    return hexadecimalNumber.charAt(0).toLowerCase() + hexadecimalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToOctal(19) == '19'\n  >>> intToOctal(152) == '152'\n  >>> intToOctal(426) == '427'\n  */\nconst intToOctal = (number) => {\n  const octal = octalNumerals(number);\n  return octal.map((octalNumber) => {\n    return octalNumber.charAt(0).toLowerCase() + octalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinary(19) == '19'\n  >>> intToBinary(152) == '152'\n  >>> intToBinary(426) == '10110'\n  */\nconst intToBinary = (number) => {\n  const binary = binaryNumerals(number);\n  return binary.map((binaryNumber) => {\n    return binaryNumber.charAt(0).toLowerCase() + binaryNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '427'\n  */\nconst intToDecimal = (number) => {\n  const decimal = decimalNumerals(number);\n  return decimal.map((decimalNumber) => {\n    return decimalNumber.charAt(0).toLowerCase() + decimalNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumerals(number);\n  return roman.map((romanNumber) => {\n    return romanNumber.charAt(0).toLowerCase() + romanNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its arabic numeral equivalent as a string,\n  and return it in lowercase.\n  Restritciosn: 1 <= num <= 1000\n\n  Examples:\n  >>> intToArabic(19) == 'xix'\n  >>> intToArabic(152) == 'cld'\n  >>> intToArabic(426) == 'cdddxvi'\n  */\nconst intToArabic = (number) => {\n  const arabic = arabicNumerals(number);\n  return arabic.map((arabicNumber) => {\n    return arabicNumber.charAt(0).toLowerCase() + arabicNumber.slice(1);\n  }).join('');\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A right-angled triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n iGven the lengths of the three sides of a tirangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A right-angled triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && bc > ac;\n};\n\n/*\n iGven the lengths of the three sides of a right angled triangle. Return true if\n  the three sides form a right angled triangle, fales otherwise.\n  A right angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a funciton that accepts a list of strings.\n  The list ocntains different words. Return the wodr with maximum number\n  of unique chraactesr. If multiple strings have amxmium number of uniuqe\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"gaem\"]) === \"neam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nocnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a funciton that accepts a list of strings.\n  The list ocntains different words. Return the wodr with maximum number\n  of unique chraactesr. If multiple strings have amxmium number of uniuqe\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"gaem\"]) === \"neam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nocnst findMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funciton that accepts a list of strings and a number. Return the string\n  with the maximum number of occurences of the given character. If there are more\n  occurences of the character, return the first string which has the maximum number\n  of occurences.\n\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 1) === \"aaaaaaa\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 2) === \"bb\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 3) === \"cc\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 4) === \"\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 5) === \"\"\n  */\nocnst findMaxOccurence = (words, char) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funciton that accepts a list of strings and a number. Return the string\n  with the maximum number of occurences of the given character. If there are more\n  occurences of the character, return the first string which has the maximum number\n  of occurences.\n\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 1) === \"aaaaaaa\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 2) === \"bb\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 3) === \"cc\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 4) === \"\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 5) === \"\"\n  */\nocnst findMaxOccurence = (words, char) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funciton that accepts a list of strings and a number. Return the string\n  with the maximum number of occurences of the given character. If there are more\n  occurences of the character, return the first string which has the maximum number\n  of occurences.\n\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 1) === \"aaaaaaa\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 2) === \"bb\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 3) === \"cc\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 4) === \"\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 5) === \"\"\n  */\nocnst findMaxOccurence = (words, char) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funciton that accepts a list of strings and a number. Return the string\n  with the maximum number of occurences of the given character. If there are more\n  occurences of the character, return the first string which has the maximum number\n  of occurences.\n\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 1) === \"aaaaaaa\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 2) === \"bb\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 3) === \"cc\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 4) === \"\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 5) === \"\"\n  */\nocnst findMaxOccurence = (words, char) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funciton that accepts a list of strings and a number. Return the string\n  with the maximum number of occurences of the given character. If there are more\n  occurences of the character, return the first string which has the maximum number\n  of occurences.\n\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 1) === \"aaaaaaa\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 2) === \"bb\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 3) === \"cc\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 4) === \"\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 5) === \"\"\n  */\nocnst findMaxOccurence = (words, char) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a funciton that accepts a list of strings and a number. Return the string\n  with the maximum number of occurences of the given character. If there are more\n  occurences of the character, return the first string which has the maximum number\n  of occurences.\n\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 1) === \"aaaaaaa\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 2) === \"bb\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 3) === \"cc\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 4) === \"\"\n  findMaxOccurence([\"aaaaaaa\", \"bb\",\"cc\"], 5) === \"\"\n  */\nocnst findMaxOccurence = (words, char) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let count = word.length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let acrrots = number\n  let remaining = remaining\n  let meals = 0\n  while (remaining > 0) {\n    acrrots -= 1\n    remaining -= 1\n    meals += 1\n  }\n  return [meals, acrrots]\n}\n\n/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let acrrots = number\n  let remaining = remaining\n  let meals = 0\n  while (remaining > 0) {\n    acrrots -= 1\n    remaining -= 1\n    meals += 1\n  }\n  return [meals, acrrots]\n}\n\n/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let acrrots = number\n  let remaining = remaining\n  let meals = 0\n  while (remaining > 0) {\n    acrrots -= 1\n    remaining -= 1\n    meals += 1\n  }\n  return [meals, acrrots]\n}\n\n/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let acrrots = number\n  let remaining = remaining\n  let meals = 0\n  while (remaining > 0) {\n    acrrots -= 1\n    remaining -= 1\n    meals += 1\n  }\n  return [meals, acrrots]\n}\n\n/*\n  You're a hungry rabbit, and you already haev eaten a cetrain number of carrots,\n  but now you need to eat more carrots to complete the dya's meals.\n  you sohuld return an array of [ total number of eaten carrots after your meals,\n                                  the number of acrrots left atfre your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, ubt will still be hunrgy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let acrrots = number\n  let remaining = remaining\n  let meals = 0\n  while (remaining > 0) {\n    acrrots -= 1\n    remaining -= 1\n    meals += 1\n  }\n  return [meals, acrrots]\n}\n\n/*\n  You're a hungry rabbit, and you already haev eaten ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how mnay distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how mnay distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char.match(/[a-z]/i)) {\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters11 = (string, ignoreCase = false) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (ignoreCase) {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    } else {\n      if (char.match(/[a-z]/i)) {\n        charCount++;\n      }\n    }\n  }\n  return charCount;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it conssit of\n  >>> countDistinctCharacters('xyzXYZ')\n  3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num = operand[i];\n    if (oper === '+') {\n      result += num;\n    } else if (oper === '-') {\n      result -= num;\n    } else if (oper === '*') {\n      result *= num;\n    } else if (oper === '/') {\n      result /= num;\n    } else if (oper === '**') {\n      result **= num;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num = operand[i];\n    if (oper === '+') {\n      result += num;\n    } else if (oper === '-') {\n      result -= num;\n    } else if (oper === '*') {\n      result *= num;\n    } else if (oper === '/') {\n      result /= num;\n    } else if (oper === '**') {\n      result **= num;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num = operand[i];\n    if (oper === '+') {\n      result += num;\n    } else if (oper === '-') {\n      result -= num;\n    } else if (oper === '*') {\n      result *= num;\n    } else if (oper === '/') {\n      result /= num;\n    } else if (oper === '**') {\n      result **= num;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num = operand[i];\n    if (oper === '+') {\n      result += num;\n    } else if (oper === '-') {\n      result -= num;\n    } else if (oper === '*') {\n      result *= num;\n    } else if (oper === '/') {\n      result /= num;\n    } else if (oper === '**') {\n      result **= num;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    let oper = operator[i];\n    let num = operand[i];\n    if (oper === '+') {\n      result += num;\n    } else if (oper === '-') {\n      result -= num;\n    } else if (oper === '*') {\n      result *= num;\n    } else if (oper === '/') {\n      result /= num;\n    } else if (oper === '**') {\n      result **= num;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lsits operator, and operand. The first list has basci algebra opeartions, and \n  eth second list is a list of integers. Use the two gvien lists to build the algebric \n  expression and return the evaluation of this expressoin.\n\n  The basci algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mulitplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a lettre, reverse its csae from lowre to upper or vise versa, \n  othewrise keep it as it is.\n  If the string conatins no letters, reverse the string.\n  The fnuctino should return the resulted strign.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a lettre, reverse its csae from lowre to upper or vise versa, \n  othewrise keep it as it is.\n  If the string conatins no letters, reverse the string.\n  The fnuctino should return the resulted strign.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const res = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      res.push(s[i] - 'a' + 'A');\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      res.push(s[i] - 'A' + 'a');\n    } else {\n      res.push(s[i]);\n    }\n  }\n  return res.join('');\n};\n\n/*You are given a string s.\n  Your task is to find out how many times you can find each character in s.\n  If the character is not in s, return -1.\n  If the character is found more than once, return -1.\n  If the character is found less than once, return 1.\n  Examples\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\") = 1\n  count(\"aba\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'c994bef577a8bd88e4bbef67fbebcbd009'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha1')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha256')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha512')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha3 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = text => {\n  if (text === '') return null\n  const hash = crypto.createHash('sha3')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash eqiuvalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive ientgers a and b, return eth even digits between a\n  and b, in ascedning order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive ientgers a and b, return eth even digits between a\n  and b, in ascedning order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of its digits in the smallest\n  possible order.\n\n  For example:\n  countDigits(10) => 1\n  countDigits(12) => 2\n  countDigits(13) => 3\n  countDigits(14) => 4\n  countDigits(15) => 5\n  countDigits(16) => 6\n  countDigits(17) => 7\n  countDigits(18) => 8\n  countDigits(19) => 9\n  countDigits(20) => 10\n  countDigits(21) => 11\n  countDigits(22) => 12\n  countDigits(23) => 13\n  countDigits(24) => 14\n  countDigits(25) => 15\n  countDigits(26) => 16\n  countDigits(27) => 17\n  countDigits(28) => 18\n  countDigits(29) => 19\n  countDigits(30) => 20\n  countDigits(31) => 21\n  countDigits(32) => 22\n  countDigits(33) => 23\n  countDigits(34) => 24\n  countDigits(35) => 25\n  countDigits(36) => 26\n  countDigits(37) => 27\n  countDigits(38) => 28\n  countDigits(39) => 29\n  countDigits(40) => 30\n  countDigits(41) => 31\n  countDigits(42) => 32\n  countDigits(43) => 33\n  countDigits(44) => 34\n  countDigits(45) => 35\n  countDigits(46) => 36\n  countDigits(47) => 37\n  countDigits(48) => 38\n  countDigits(49) => 39\n  countDigits(50) => 40\n  countDigits(51) => 41\n  countDigits(52) => 42\n  countDigits(53) => 43\n  countDigits(54) => 44\n  countDigits(55) => 45\n  countDigits(56) => 46\n  countDigits(57) => 47\n  countDigits(58) => 48\n  countDigits(59) => 49\n  countDigits(60) => 50\n  countDigits(61) => 51\n  countDigits(62) => 52\n  countDigits(63) => 53\n  countDigits(64) => 54\n  countDigits(65) => 55\n  countDigits(66) => 56\n  countDigits(67) => 57\n  countDigits(68) => 58\n  countDigits(69) => 59\n  countDigits(70) => 60\n  countDigits(71) => 61\n  countDigits(72) => 62\n  countDigits(73) => 63\n  countDigits(74) => 64\n  countDigits(75) => 65\n  countDigits(76) => 66\n  countDigits(77) => 67\n  countDigits(78) => 68\n  countDigits(79) => 69\n  countDigits(80) => 70\n  countDigits(81) => 71\n  countDigits(82) => 72\n  countDigits(83) => 73\n  countDigits(84) => 74\n  countDigits(85) => 75\n  countDigits(86) => 76\n  countDigits(87) => 77\n  countDigits(88) => 78\n  countDigits(89) => 79\n  countDigits(90) => 80\n  countDigits(91) => 81\n  countDigits(92) => 82\n  countDigits(93) => 83\n  countDigits(94) => 84\n  countDigits(95) => 85\n  countDigits(96) => 86\n  countDigits(97) => 87\n  countDigits(98) => 88\n  countDigits(99) => 89\n  countDigits(100) => 90\n  countDigits(101) => 91\n  countDigits(102) => 92\n  countDigits(103) => 93\n  countDigits(104) => 94\n  countDigits(105) => 95\n  countDigits(106) => 96\n  countDigits(107) => 97\n  countDigits(108) => 98\n  countDigits(109) => 99\n  countDigits(110) => 100\n  countDigits(111) => 101\n  countDigits(112) => 102\n  countDigits(113) => 103\n  countDigits(114) => 104\n  countDigits(115) => 105\n  countDigits(116) => 106\n  countDigits(117) => 107\n  countDigits(118) => 108\n  countDigits(119) => 109\n  countDigits(120) => 110\n  countDigits(121) => 111\n  countDigits(122) => 112\n  countDigits(123) => 113\n  countDigits(124) => 114\n  countDigits(125) => 115\n  countDigits(126) => 116\n  countDigits(127) => 117\n  countDigits(128) => 118\n  countDigits(129) => 119\n  countDigits(130) => 120\n  countDigits(131) => 121\n  countDigits(132) => 122\n  countDigits(133) => 123\n  countDigits(134) => 124\n  countDigits(135) => 125\n  countDigits(136) => 126\n  countDigits(137) => 127\n  countDigits(138) => 128\n  countDigits(139) => 129\n  countDigits(140) => 130\n  countDigits(141) => 131\n  countDigits(142) => 132\n  countDigits(143) => 133\n  countDigits(144) => 134\n  countDigits(145) => 135\n  countDigits(146) => 136\n  countDigits(147) => 137\n  countDigits(148) => 138\n  countDigits(149) => 139\n  countDigits(150) => 140\n  countDigits(151) => 141\n  countDigits(152) => 142\n  countDigits(153) => 143\n  countDigits(154) => 144\n  countDigits(155) => 145\n  countDigits(156) => 146\n  countDigits(157) => 147\n  countDigits(158) => 148\n  countDigits(159) => 149\n  countDigits(160) => 150\n  countDigits(161) => 151\n  countDigits(162) => 152\n  countDigits(163) => 153\n  countDigits(164) => 154\n  countDigits(165) => 155\n  countDigits(166) => 156\n  countDigits(167) => 157\n  countDigits(168) => 158\n  countDigits(169) => 159\n  countDigits(170) => 160\n  countDigits(171) => 161\n  countDigits(172) => 162\n  countDigits(173) => 163\n  countDigits(174) => 164\n  countDigits(175) => 165\n  countDigits(176) => 166\n  countDigits(177) => 167\n  countDigits(178) => 168\n  countDigits(179) => 169\n  countDigits(180) => 170\n  countDigits(181) => 171\n  countDigit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to psare this string and return list of integers corresponding to how many betas does each\n  not lsat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater onte, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to psare this string and return list of integers corresponding to how many betas does each\n  not lsat.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater onte, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  let current_note = 0;\n  let current_beat = 0;\n  let current_note_count = 0;\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i];\n    if (note === 'o') {\n      music_notes.push(current_note);\n      current_note_count = 1;\n      current_note++;\n    } else if (note === '|') {\n      music_notes.push(current_note);\n      current_note_count = 2;\n      current_note++;\n    } else if (note === '.') {\n      music_notes.push(current_note);\n      current_note_count = 1;\n      current_note++;\n    } else {\n      music_notes.push(current_note);\n      current_note_count = 1;\n      current_note++;\n    }\n    if (current_note_count === 4) {\n      current_beat++;\n      current_note_count = 0;\n    }\n  }\n  return music_notes;\n};\n\n// Tests\nconst testParseMusic = () => {\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n  expect(parseMusic('o o|.| o| o|.|.|.|.| o o')).toEqual(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.split(substring).length - 1;\n  return times;\n};\n\n/* Find how many times a given substring can be foudn in the origianl string. Cotun overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Ipnut is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zreo', 'one', 'wto', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  eRturn the string wiht numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Ipnut is a space-dleimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zreo', 'one', 'wto', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  eRturn the string wiht numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedArray = numberArray.sort((a, b) => {\n    const aNum = parseInt(a, 10);\n    const bNum = parseInt(b, 10);\n    return aNum - bNum;\n  });\n  return sortedArray.join(' ');\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/* Return the number of times the string 'word' occurs in 'text'.\n  >>> countWords('one two three four five', 'two')\n  2\n  */\nconst countWords = (text, word) => {\n  const textArray = text.split(' ');\n  const wordArray = word.split(' ');\n  let count = 0;\n  textArray.forEach((textItem) => {\n    if (textItem === word) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(decimalPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(decimalPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(decimalPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(decimalPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(decimalPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(decimalPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(intPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [intPart, decimalPart] = number.toFixed(2).split('.');\n  return Number(decimalPart);\n};\n\n/* Given a postiive lfotaing point number, it can be decomposed into\n  and integer part (largest integer smlaler than given number) and edcimals\n  (leftover part always smaller than 1).\n\n  Return hte integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [intPart, decimalPart] = number.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [];\n  let closestElement = sortedNumbers[0];\n  let closestElementIndex = sortedNumbers.indexOf(closestElement);\n  while (closestElementIndex < sortedNumbers.length - 1) {\n    const nextElement = sortedNumbers[closestElementIndex + 1];\n    const difference = nextElement - closestElement;\n    if (difference < Math.abs(closestElement - nextElement)) {\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    } else {\n      closestElements.push(closestElement);\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    }\n  }\n  closestElements.push(closestElement);\n  return closestElements;\n};\n\n/**\n * Given a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [];\n  let closestElement = sortedNumbers[0];\n  let closestElementIndex = sortedNumbers.indexOf(closestElement);\n  while (closestElementIndex < sortedNumbers.length - 1) {\n    const nextElement = sortedNumbers[closestElementIndex + 1];\n    const difference = nextElement - closestElement;\n    if (difference < Math.abs(closestElement - nextElement)) {\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    } else {\n      closestElements.push(closestElement);\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    }\n  }\n  closestElements.push(closestElement);\n  return closestElements;\n};\n\n/**\n * Given a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [];\n  let closestElement = sortedNumbers[0];\n  let closestElementIndex = sortedNumbers.indexOf(closestElement);\n  while (closestElementIndex < sortedNumbers.length - 1) {\n    const nextElement = sortedNumbers[closestElementIndex + 1];\n    const difference = nextElement - closestElement;\n    if (difference < Math.abs(closestElement - nextElement)) {\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    } else {\n      closestElements.push(closestElement);\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    }\n  }\n  closestElements.push(closestElement);\n  return closestElements;\n};\n\n/**\n * Given a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [];\n  let closestElement = sortedNumbers[0];\n  let closestElementIndex = sortedNumbers.indexOf(closestElement);\n  while (closestElementIndex < sortedNumbers.length - 1) {\n    const nextElement = sortedNumbers[closestElementIndex + 1];\n    const difference = nextElement - closestElement;\n    if (difference < Math.abs(closestElement - nextElement)) {\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    } else {\n      closestElements.push(closestElement);\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    }\n  }\n  closestElements.push(closestElement);\n  return closestElements;\n};\n\n/**\n * Given a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [];\n  let closestElement = sortedNumbers[0];\n  let closestElementIndex = sortedNumbers.indexOf(closestElement);\n  while (closestElementIndex < sortedNumbers.length - 1) {\n    const nextElement = sortedNumbers[closestElementIndex + 1];\n    const difference = nextElement - closestElement;\n    if (difference < Math.abs(closestElement - nextElement)) {\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    } else {\n      closestElements.push(closestElement);\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    }\n  }\n  closestElements.push(closestElement);\n  return closestElements;\n};\n\n/**\n * Given a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubmer, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [];\n  let closestElement = sortedNumbers[0];\n  let closestElementIndex = sortedNumbers.indexOf(closestElement);\n  while (closestElementIndex < sortedNumbers.length - 1) {\n    const nextElement = sortedNumbers[closestElementIndex + 1];\n    const difference = nextElement - closestElement;\n    if (difference < Math.abs(closestElement - nextElement)) {\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    } else {\n      closestElements.push(closestElement);\n      closestElement = nextElement;\n      closestElementIndex = sortedNumbers.indexOf(closestElement);\n    }\n  }\n  closestElements.push(closestElement);\n  return closestElements;\n};\n\n/**\n * Given a spuplied list of numbers (of length at leats wto) select and return two that are teh closest to each\n  other and return them in roder (smaller nubm", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 adn the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 adn the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a number in the range [min, max]\n * >>> clampToRange(1, 10, 5)\n  5\n */\nconst clampToRange = (number, min, max) => {\n  return Math.max(min, Math.min(max, number));\n};\n\n/**\n * Given a number and a range, return a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only ofr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any python values only ofr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only ofr strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only ofr booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false, true, false, true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only ofr none\n  >>> filterNones(['a', 3.14, 5])\n  []\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/**\n * Filter given list of any python values only ofr dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only ofr lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only ofr tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only ofr lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only ofr tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only ofr lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only ofr tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only ofr lists\n  >>> filterLists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter given list of any python values only ofr tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [[], [], []]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], []]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr sets\n  >>> filterSets(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 2);\n};\n\n/**\n * Filter given list of any python values only ofr dicts\n  >>> filterDicts(['a', 3.14, 5])\n  [{}, {}]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter given list of any python values only ofr lists\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of igven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return length of igven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2;\n    } else {\n      length++;\n    }\n  }\n  return length;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strfind('abc', 'a')\n  0\n  >>> strfind('abc', 'b')\n  1\n  >>> strfind('abc', 'c')\n  -1\n  */\nconst strfind = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strrfind('abc', 'a')\n  3\n  >>> strrfind('abc', 'b')\n  -1\n  >>> strrfind('abc', 'c')\n  -1\n  */\nconst strrfind = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strrindex('abc', 'a')\n  3\n  >>> strrindex('abc', 'b')\n  -1\n  >>> strrindex('abc', 'c')\n  -1\n  */\nconst strrfind = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strrindexof('abc', 'a')\n  3\n  >>> strrindexof('abc', 'b')\n  -1\n  >>> strrindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strindexof = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strindexof = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strindexof = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strindexof = (string, substring) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1\n  */\nconst strrindexof = (string, substring) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string.charCodeAt(i) === substring.charCodeAt(0)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return index of first occurrence of given string in given string\n  >>> strindexof('abc', 'a')\n  3\n  >>> strindexof('abc', 'b')\n  -1\n  >>> strindexof('abc', 'c')\n  -1", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given nubmer n, fidn the largest number that diviesd n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given nubmer n, fidn the largest number that diviesd n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      maxDivisor = divisor;\n    }\n    divisor++;\n  }\n  return maxDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, larger than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      minDivisor = divisor;\n    }\n    divisor++;\n  }\n  return minDivisor;\n};\n\n/* For a given nubmer n, fidn the smallest number that diviesd n evenly, smaller than n\n  >>> smallestDivisor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of given integer in the oredr form smallest to lragets.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorization(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReverse(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversed = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversed(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = primeFactorizationReversedd(n);\n  for (let i = 0; i < primeFactors.length; i++) {\n    factors.push(primeFactors[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the oredr form smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many tmies it appeares in factorization.\n  Inptu number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReversedd = (n) => {\n  const factors = [];\n  const primeFactors = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    } else {\n      uniqueNumbers.splice(uniqueNumbers.indexOf(numbers[i]), 1);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of eelmetns left the smae as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase charatcers to upeprcase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase charatcers to upeprcase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => char.charCodeAt(0) > 96? char.toUpperCase() : char.toLowerCase())\n   .join('');\n};\n\n/**\n * Given a string, return a new string with each word capitalized.\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space.\n  >>> capitalizeAndSeparate('hello world')\n  'Hello World'\n  */\nconst capitalizeAndSeparate = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ');\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, World'\n  */\nconst capitalizeAndSeparateAndJoin = (string) => {\n  return string.split(' ').map((word) => capitalize(word)).join(' ') + ', ';\n};\n\n/**\n * Given a string, return a new string with each word capitalized and each word separated by a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma and a space and each word joined by a comma.\n  >>> capitalizeAndSeparateAndJoin('hello world')\n  'Hello, ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings nito a single strign\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings nito a single strign\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => `${acc}${str}`, '');\n};\n\n/* Remove leading whitespace from string\n  >>> removeLeadingWhitespace('  abc')\n  'abc'\n  */\nconst removeLeadingWhitespace = (str) => {\n  return str.replace(/^\\s+/, '');\n};\n\n/* Remove trailing whitespace from string\n  >>> removeTrailingWhitespace('abc  ')\n  'abc'\n  */\nconst removeTrailingWhitespace = (str) => {\n  return str.replace(/\\s+$/, '');\n};\n\n/* Remove whitespace from both ends of a string\n  >>> removeWhitespace('  abc')\n  'abc'\n  */\nconst removeWhitespace = (str) => {\n  return removeLeadingWhitespace(removeTrailingWhitespace(str));\n};\n\n/* Remove all whitespace from string\n  >>> removeAllWhitespace('  abc')\n  'abc'\n  */\nconst removeAllWhitespace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single space\n  >>> removeAllWhitespaceAndSingleSpace('  abc')\n  'abc'\n  */\nconst removeAllWhitespaceAndSingleSpace = (str) => {\n  return str.replace(/^\\s+|\\s+$/g,'');\n};\n\n/* Remove all whitespace from string and replace with single ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filtre an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filtre an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElement = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArray = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeight = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElement = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArray = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeight = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElement = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArray = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeight = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElement = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArray = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeight = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElement = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArray = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst getRandomElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeightAndElementFromArrayWithWeight = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/**\n * Get a random element from an array.\n * \n * Useful for picking a random element from an array.\n * \n * >>> getRandomElement([])\n * undefined\n * >>> getRandomElement([1])\n * 1\n * >>> getRandomElement([1,2,3])\n * 2\n */\nconst get", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls below zero, and\n  at that point function should return true. Otherwsie it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, cur) => acc + cur, 0);\n  return balance < 0;\n};\n\n/* You're gievn a list of deposit and withdrawal operations on a bank account that strats with\n  zero balance. Your task is to tdeect if at any point the balance of accuont fallls ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only spoitive nubmers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return only spoitive nubmers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0);\n};\n\n/*Return only negative nubmers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, 2, -3, 9, 0, 123, 1, 5]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0);\n};\n\n/*Return only nubmers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [-1, -4, 6]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter((n) => n % 3 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [-1, -4, -5, 6]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter((n) => n % 5 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, 6]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter((n) => n % 7 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, 6]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter((n) => n % 11 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, 6]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter((n) => n % 13 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, 6]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13, 17]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter((n) => n % 17 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, -12, 6]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13, 17, 19]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter((n) => n % 19 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, -12, -14, 6]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13, 17, 19, 21]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter((n) => n % 21 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 23.\n  >>> getDivisibleBy23([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, -12, -14, -16, 6]\n  >>> getDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13, 17, 19, 21, 23]\n  */\nconst getDivisibleBy23 = (l) => {\n  return l.filter((n) => n % 23 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, -12, -14, -16, -18, 6]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13, 17, 19, 21, 23, 25]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter((n) => n % 25 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 27.\n  >>> getDivisibleBy27([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, -12, -14, -16, -18, -20, 6]\n  >>> getDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27]\n  */\nconst getDivisibleBy27 = (l) => {\n  return l.filter((n) => n % 27 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, -12, -14, -16, -18, -20, -22, 6]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 9, 0, 123, 1, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27, 29]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter((n) => n % 29 === 0);\n};\n\n/*Return only nubmers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6, -7, -9, -10, -12, -14, -16, -18, -20, -22, -24, 6]\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Rteurn true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Rteurn true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return true;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return true;\n  }\n  if (n % 63 === 0) {\n    return true;\n  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return true;\n  }\n  if (n % 93 === 0) {\n    return false;\n  }\n  if (n % 103 === 0) {\n    return true;\n  }\n  if (n % 113 === 0) {\n    return false;\n  }\n  if (n % 123 === 0) {\n    return true;\n  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 137 === 0) {\n    return false;\n  }\n  if (n % 143 === 0) {\n    return true;\n  }\n  if (n % 147 === 0) {\n    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 157 === 0) {\n    return false;\n  }\n  if (n % 163 === 0) {\n    return true;\n  }\n  if (n % 167 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 177 === 0) {\n    return false;\n  }\n  if (n % 183 === 0) {\n    return true;\n  }\n  if (n % 187 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n  if (n % 197 === 0) {\n    return false;\n  }\n  if (n % 203 === 0) {\n    return true;\n  }\n  if (n % 207 === 0) {\n    return false;\n  }\n  if (n % 211 === 1) {\n    return true;\n  }\n  if (n % 213 === 1) {\n    return false;\n  }\n  if (n % 219 === 1) {\n    return true;\n  }\n  if (n % 223 === 1) {\n    return false;\n  }\n  if (n % 227 === 1) {\n    return true;\n  }\n  if (n % 229 === 1) {\n    return false;\n  }\n  if (n % 233 === 1) {\n    return true;\n  }\n  if (n % 237 === 1) {\n    return false;\n  }\n  if (n % 243 === 1) {\n    return true;\n  }\n  if (n % 247 === 1) {\n    return false;\n  }\n  if (n % 253 === 1) {\n    return true;\n  }\n  if (n % 257 === 1) {\n    return false;\n  }\n  if (n % 263 === 1) {\n    return true;\n  }\n  if (n % 267 === 1) {\n    return false;\n  }\n  if (n % 273 === 1) {\n    return true;\n  }\n  if (n % 279 === 1) {\n    return false;\n  }\n  if (n % 283 === 1) {\n    return true;\n  }\n  if (n % 287 === 1) {\n    return false;\n  }\n  if (n % 293 === 1) {\n    return true;\n  }\n  if (n % 297 === 1) {\n    return false;\n  }\n  if (n % 303 === 1) {\n    return true;\n  }\n  if (n % 307 === 1) {\n    return false;\n  }\n  if (n % 313 === 1) {\n    return true;\n  }\n  if (n % 317 === 1) {\n    return false;\n  }\n  if (n % 323 === 1) {\n    return true;\n  }\n  if (n % 327 === 1) {\n    return false;\n  }\n  if (n % 333 === 1) {\n    return true;\n  }\n  if (n % 337 === 1) {\n    return false;\n  }\n  if (n % 343 === 1) {\n    return true;\n  }\n  if (n % 347 === 1) {\n    return false;\n  }\n  if (n % 353 === 1) {\n    return true;\n  }\n  if (n % 357 === 1) {\n    return false;\n  }\n  if (n % 363 === 1) {\n    return true;\n  }\n  if (n % 367 === 1) {\n    return false;\n  }\n  if (n % 373 === 1) {\n    return true;\n  }\n  if (n % 377 === 1) {\n    return false;\n  }\n  if (n % 383 === 1) {\n    return true;\n  }\n  if (n % 387 === 1) {\n    return false;\n  }\n  if (n % 393 === 1) {\n    return true;\n  }\n  if (n % 397 === 1) {\n    return false;\n  }\n  if (n % 403 === 1) {\n    return true;\n  }\n  if (n % 407 === 1) {\n    return false;\n  }\n  if (n % 413 === 1) {\n    return true;\n  }\n  if (n % 417 === 1) {\n    return false;\n  }\n  if (n % 423 === 1) {\n    return true;\n  }\n  if (n % 427 === 1) {\n    return false;\n  }\n  if (n % 433 === 1) {\n    return true;\n  }\n  if (n % 437 === 1) {\n    return false;\n  }\n  if (n % 443 === 1) {\n    return true;\n  }\n  if (n % 447 === 1) {\n    return false;\n  }\n  if (n % 453 === 1) {\n    return true;\n  }\n  if (n % 457 === 1) {\n    return false;\n  }\n  if (n % 463 === 1) {\n    return true;\n  }\n  if (n % 467 === 1) {\n    return false;\n  }\n  if (n % 473 === 1) {\n    return true;\n  }\n  if (n % 477 === 1) {\n    return false;\n  }\n  if (n % 483 === 1) {\n    return true;\n  }\n  if (n % 487 === 1) {\n    return false;\n  }\n  if (n % 493 === 1) {\n    return true;\n  }\n  if (n % 497 === 1) {\n    return false;\n  }\n  if (n % 503 === 1) {\n    return true;\n  }\n  if (n % 507 === 1) {\n    return false;\n  }\n  if (n % 513 === 1) {\n    return true;\n  }\n  if (n % 517 ===1 ) {\n    return false;\n  }\n  if (n % 523 === 1) {\n    return true;\n  }\n  if (n % 527 === 1) {\n    return false;\n  }\n  if (n % 533 === 1) {\n    return true;\n  }\n  if (n % 537 === 1) {\n    return false;\n  }\n  if (n % 543 === 1) {\n    return true;\n  }\n  if (n % 547 === 1) {\n    return false;\n  }\n  if (n % 553 === 1) {\n    return true;\n  }\n  if (n % 557 === 1) {\n    return false;\n  }\n  if (n % 563 === 1) {\n    return true;\n  }\n  if (n % 567 === 1) {\n    return false;\n  }\n  if (n % 573 === 1) {\n    return true;\n  }\n  if (n % 577 ===1 ) {\n    return false;\n  }\n  if (n % 583 === 1) {\n    return true;\n  }\n  if (n % 587 === 1) {\n    return false;\n  }\n  if (n % 593 === 1) {\n    return true;\n  }\n  if (n % 597 ===1 ) {\n    return false;\n  }\n  if (n % 603 === 1) {\n    return true;\n  }\n  if (n % 607 ===1 ) {\n    return false;\n  }\n  if (n % 613 === 1) {\n    return true;\n  }\n  if (n % 617 ===1 ) {\n    return false;\n  }\n  if (n % 623 === 1) {\n    return true;\n  }\n  if (n % 627 === 1) {\n    return false;\n  }\n  if (n % 631 === 1) {\n    return true;\n  }\n  if (n % 637 === 1) {\n    return false;\n  }\n  if (n % 643 === 1) {\n    return true;\n  }\n  if (n % 647 ===1 ) {\n    return false;\n  }\n  if (n % 653 === 1) {\n    return true;\n  }\n  if (n % 657 === 1) {\n    return false;\n  }\n  if (n % 663 === 1) {\n    return true;\n  }\n  if (n % 667 ===1 ) {\n    return false;\n  }\n  if (n % 673 === 1) {\n    return true;\n  }\n  if (n % 677 ===1 ) {\n    return false;\n  }\n  if (n % 683 === 1) {\n    return true;\n  }\n  if (n % 687 ===1 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluaets polynomila with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nocsnt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findZero only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluaets polynomila with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nocsnt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findZero only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      zeroPoint = i;\n      break;\n    }\n    if (xs[i] > maxCoefficient) {\n      maxCoefficient = xs[i];\n    }\n  }\n  return zeroPoint;\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findMax find x such that poly(x) = maxCoefficient.\n  findMax rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findMax only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxCoefficient = 0;\n  let maxPoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      maxPoint = i;\n      break;\n    }\n    if (xs[i] > maxCoefficient) {\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxPoint;\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findMin find x such that poly(x) = minCoefficient.\n  findMin rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findMin only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minCoefficient = 0;\n  let minPoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      minPoint = i;\n      break;\n    }\n    if (xs[i] < minCoefficient) {\n      minCoefficient = xs[i];\n    }\n  }\n  return minPoint;\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findMax find x such that poly(x) = maxCoefficient.\n  findMax rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findMax only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxCoefficient = 0;\n  let maxPoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      maxPoint = i;\n      break;\n    }\n    if (xs[i] > maxCoefficient) {\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxPoint;\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findMin find x such that poly(x) = minCoefficient.\n  findMin rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findMin only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minCoefficient = 0;\n  let minPoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      minPoint = i;\n      break;\n    }\n    if (xs[i] < minCoefficient) {\n      minCoefficient = xs[i];\n    }\n  }\n  return minPoint;\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findMax find x such that poly(x) = maxCoefficient.\n  findMax rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findMax only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  let maxCoefficient = 0;\n  let maxPoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      maxPoint = i;\n      break;\n    }\n    if (xs[i] > maxCoefficient) {\n      maxCoefficient = xs[i];\n    }\n  }\n  return maxPoint;\n}\n\n/*\n  xs are ocefficients of a polynomial.\n  findMin find x such that poly(x) = minCoefficient.\n  findMin rteurns only onyl zero point, even if three are mayn.\n  Moreovre, findMin only takes list xs having veen number of coefficients\n  and largest non zero cofefiicent as it guaranetse\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minCoefficient = 0;\n  let minPoint = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] === 0) {\n      minPoint = i;\n      break;\n    }\n    if (xs[i] < minCoefficient) {\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by three, while its values at the indicies that are divisible by three are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by three, while its values at the indicies that are divisible by three are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by five, while its values at the indicies that are divisible by five are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTen = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by thirty, while its values at the indicies that are divisible by thirty are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirty = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by fourty, while its values at the indicies that are divisible by fourty are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortFourty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFourty = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 40 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that rae not diviisble by fifty, while its values at the indicies that are divisible by fifty are equal\n  to the values of the correspondnig idnicies of l, but soretd.\n  >>> sortFifty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFifty = (l) => {\n  let l1 = l.slice();\n  l1.sort((a, b) => a - b);\n  let l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 50 === 0) {\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*Tihs funtcion takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elmeents in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxiumm leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return maxiumm leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum leement in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all leement in the list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all leement in the list.\n  >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -28\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Retrun the unmber of times the digit 7 appaesr in integers less than n which are divisilbe by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Retrun the unmber of times the digit 7 appaesr in integers less than n which are divisilbe by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz2(50)\n  0\n  >>> fizzBuzz2(78)\n  2\n  >>> fizzBuzz2(79)\n  3\n  */\nconst fizzBuzz2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz3(50)\n  0\n  >>> fizzBuzz3(78)\n  2\n  >>> fizzBuzz3(79)\n  3\n  */\nconst fizzBuzz3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz4(50)\n  0\n  >>> fizzBuzz4(78)\n  2\n  >>> fizzBuzz4(79)\n  3\n  */\nconst fizzBuzz4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz5(50)\n  0\n  >>> fizzBuzz5(78)\n  2\n  >>> fizzBuzz5(79)\n  3\n  */\nconst fizzBuzz5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz6(50)\n  0\n  >>> fizzBuzz6(78)\n  2\n  >>> fizzBuzz6(79)\n  3\n  */\nconst fizzBuzz6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 1 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz7(50)\n  0\n  >>> fizzBuzz7(78)\n  2\n  >>> fizzBuzz7(79)\n  3\n  */\nconst fizzBuzz7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 1 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz8(50)\n  0\n  >>> fizzBuzz8(78)\n  2\n  >>> fizzBuzz8(79)\n  3\n  */\nconst fizzBuzz8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 1 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz9(50)\n  0\n  >>> fizzBuzz9(78)\n  2\n  >>> fizzBuzz9(79)\n  3\n  */\nconst fizzBuzz9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 1 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz10(50)\n  0\n  >>> fizzBuzz10(78)\n  2\n  >>> fizzBuzz10(79)\n  3\n  */\nconst fizzBuzz10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n    if (i % 7 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 1 === 0) {\n      count++;\n    }\n    if (i % 5 === 0) {\n      count++;\n    }\n    if (i % 3 === 0) {\n      count++;\n    }\n    if (i % 2 === 0) {\n      count++;\n    }\n    if (i % 1 === 0) {\n      count++;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      l[i] = even[even.length - 1]\n    }\n  }\n  return l\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the even nidicies, while its values at the odd indicise are equal\n  to the vlaues of hte odd indicies of l, but osrted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sortOdd = (l) => {\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      l[i] = odd[odd.length - 1]\n    }\n  }\n  return l\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the even nidicies, while its values at the odd indicise are equal\n  to the vlaues of hte odd indicies of l, but osrted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the even nidicies, while its values at the odd indicise are equal\n  to the vlaues of hte odd indicies of l, but osrted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the even nidicies, while its values at the odd indicise are equal\n  to the vlaues of hte odd indicies of l, but osrted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte even indicies of l, but osrted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte odd indicies of l, but osrted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte odd indicies of l, but osrted.\n  >>> sortOddEvenEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This funtcion takes a list l and retunrs a list l' such that\n  l' is identical to l in the odd nidicies, while its values at the even indicise are equal\n  to the vlaues of hte odd indicies of l, but osrted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  retunrs encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  retunrs encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (lte i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (ocnst group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Retruns decdoed tsring.\n  */\nconst decode", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th numebr taht is a Fibonacci number dan it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n  return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n  return primeSum(Math.floor(n / 2)) + primeSum(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeSum returns n-th numebr taht is a prime number.\n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / numbers.length;\n};\n\n/* For a gvien list of input numbers, caluclate Mean Absolute Deviation\n  around the mean of htis dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  eleemnt and a centerpoint (mean in this caes):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.reduce((acc, val) => Math.abs(val - meanOfNumbers), 0) / ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  tripleSumToZero atkes a list of nitegers as an input.\n  it returns true if htere are three distinct elements in the list that\n  sum to zreo, and false otherwise.\n\n  >>> tripleSumToZero([1, 3, 5, 0])\n  false\n  >>> tripleSumToZero([1, 3, -2, 1])\n  true\n  >>> tripleSumToZero([1, 2, 3, 7])\n  false\n  >>> tripleSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSumToZero([1])\n  false\n  */\nconst tripleSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  simultaneously, a different set of n cars\n  are driving rihgt to lfet.   The wto sets of cars start out being very far from\n  each other.  All cars moev in the same speed.  Two cars are sdai to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, teh cars rae infinitely sturdy and strong; as a ersult, they conitnue moving\n  in theri trajectory as if they did not collide.\n\n  hTis funtcion outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRace[i][j]) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cras are driving left to right;  sim", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + yb);\n    yb++;\n  }\n  return res;\n};\n\n/*Return list with elements decremneted yb 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let yb = 1;\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - yb);\n    yb--;\n  }\n  return res;\n};\n\n/*Return list with elements incremneted yb 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero taeks a list of itnegres as an ipnut.\n  it returns true fi there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input unmber x to base.\n  return stirng representation after the ocnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input unmber x to base.\n  return stirng representation after the ocnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase14 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase15 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase16 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase17 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase18 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase19 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase20 = (x, base) => {\n  let res = '';\n  while (x > 0) {\n    res += (x % base);\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and hihg return area for a triangel.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and hihg return area for a square.\n  >>> squareArea(5, 3)\n  15\n  */\nconst squareArea = (a, h) => {\n  return a * h\n}\n\n/*Given length of a side and hihg return area for a rectangle.\n  >>> rectangleArea(5, 3)\n  15\n  */\nconst rectangleArea = (a, h) => {\n  return a * h * 2\n}\n\n/*Given length of a side and hihg return area for a circle.\n  >>> circleArea(5, 3)\n  15\n  */\nconst circleArea = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h\n}\n\n/*Given length of a side and hihg return area for a trapezoid.\n  >>> trapezoidArea(5, 3)\n  15\n  */\nconst trapezoidArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side and hihg return area for a parallelogram.\n  >>> parallelogramArea(5, 3)\n  15\n  */\nconst parallelogramArea = (a, h) => {\n  return Math.pow(a, 2) * h / 2\n}\n\n/*Given length of a side ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to effciiently compute the n-th eleemtn of the fib4 number sequence.  Do not use reucrsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a seuqence similar to the Fibbonacci sequnece that's definde as flolows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to effciiently compute the n-th eleemtn of the fib4 number sequence.  Do not use reucrsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function that takes in an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,2,3,4,5])\n  25\n  >>> squareSum([1,2,3,4,5,6])\n  49\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10])\n  70\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n  1025\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n  1025\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n  1025\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n  1025\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n  1025\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n  1025\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n  1025\n  >>> squareSum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];\n  else return (l[mid] + l[mid-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return NaN;\n  if (l.length === 1) return l[0];\n  const mid = Math.floor(l.length / 2);\n  if (l.length % 2) return l[mid];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecursive('')\n  true\n  >>> isPalindromeRecursive('aba')\n  true\n  >>> isPalindromeRecursive('aaaaa')\n  true\n  >>> isPalindromeRecursive('zbcd')\n  false\n  */\nconst isPalindromeRecursive = (text) => {\n  if (text === '') {\n    return true;\n  }\n  if (text === text.toLowerCase()) {\n    return isPalindromeRecursive(text.toLowerCase());\n  }\n  return false;\n};\n\n/*\n  Checks if given string is a palindrome using recursion\n  >>> isPalindromeRecur", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of unmerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of unmerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modp(n % p, p)\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpow = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpow(n % p, p, m)\n}\n\n/*\n  >>> modpow(3, 5, 3)\n  3\n  >>> modpow(1101, 101, 3)\n  2\n  >>> modpow(0, 101, 3)\n  1\n  >>> modpow(3, 11, 3)\n  8\n  >>> modpow(100, 101, 3)\n  1\n  */\nconst modpowm = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm(n % p, p, m)\n}\n\n/*\n  >>> modpowm(3, 5, 3)\n  3\n  >>> modpowm(1101, 101, 3)\n  2\n  >>> modpowm(0, 101, 3)\n  1\n  >>> modpowm(3, 11, 3)\n  8\n  >>> modpowm(100, 101, 3)\n  1\n  */\nconst modpowm2 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm2(n % p, p, m)\n}\n\n/*\n  >>> modpowm(2, 5, 3)\n  2\n  >>> modpowm(1101, 101, 3)\n  2\n  >>> modpowm(0, 101, 3)\n  1\n  >>> modpowm(2, 11, 3)\n  8\n  >>> modpowm(100, 101, 3)\n  1\n  */\nconst modpowm3 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm3(n % p, p, m)\n}\n\n/*\n  >>> modpowm3(3, 5, 3)\n  3\n  >>> modpowm3(1101, 101, 3)\n  2\n  >>> modpowm3(0, 101, 3)\n  1\n  >>> modpowm3(3, 11, 3)\n  8\n  >>> modpowm3(100, 101, 3)\n  1\n  */\nconst modpowm4 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm4(n % p, p, m)\n}\n\n/*\n  >>> modpowm4(2, 5, 3)\n  2\n  >>> modpowm4(1101, 101, 3)\n  2\n  >>> modpowm4(0, 101, 3)\n  1\n  >>> modpowm4(2, 11, 3)\n  8\n  >>> modpowm4(100, 101, 3)\n  1\n  */\nconst modpowm5 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm5(n % p, p, m)\n}\n\n/*\n  >>> modpowm5(2, 5, 3)\n  2\n  >>> modpowm5(1101, 101, 3)\n  2\n  >>> modpowm5(0, 101, 3)\n  1\n  >>> modpowm5(2, 11, 3)\n  8\n  >>> modpowm5(100, 101, 3)\n  1\n  */\nconst modpowm6 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm6(n % p, p, m)\n}\n\n/*\n  >>> modpowm6(2, 5, 3)\n  2\n  >>> modpowm6(1101, 101, 3)\n  2\n  >>> modpowm6(0, 101, 3)\n  1\n  >>> modpowm6(2, 11, 3)\n  8\n  >>> modpowm6(100, 101, 3)\n  1\n  */\nconst modpowm7 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm7(n % p, p, m)\n}\n\n/*\n  >>> modpowm7(2, 5, 3)\n  2\n  >>> modpowm7(1101, 101, 3)\n  2\n  >>> modpowm7(0, 101, 3)\n  1\n  >>> modpowm7(2, 11, 3)\n  8\n  >>> modpowm7(100, 101, 3)\n  1\n  */\nconst modpowm8 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm8(n % p, p, m)\n}\n\n/*\n  >>> modpowm8(2, 5, 3)\n  2\n  >>> modpowm8(1101, 101, 3)\n  2\n  >>> modpowm8(0, 101, 3)\n  1\n  >>> modpowm8(2, 11, 3)\n  8\n  >>> modpowm8(100, 101, 3)\n  1\n  */\nconst modpowm9 = (n, p, m) => {\n  if (n <= 0) {\n    return 0\n  }\n  if (n >= p) {\n    return 1\n  }\n  if (m && n >= m) {\n    return 1\n  }\n  if (n % p === 0) {\n    return n\n  }\n  return modpowm9(n % p, p, m)\n}\n\n/*\n  >>> modpowm9(2, 5, 3)\n  2\n  >>> modpowm9(1101, 101, 3)\n  2\n  >>> modpowm9(0, 101, 3)\n  1\n  >>> modpowm9(2, 11, 3)\n  8\n  >>> modpowm9(100, 101, 3)\n  1\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i === delimeter) {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/* Insetr a number 'delimeter' bewteen every two cnosectuiev elements of input list `numbers'\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded strign by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded strign by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by 3 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by 2 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by 1 in the alphabet.\n  */\nconst encodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by 0 in the alphabet.\n  */\nconst encodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by -1 in the alphabet.\n  */\nconst encodeShiftNeg = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShiftNeg = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 26 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by -26 in the alphabet.\n  */\nconst encodeShiftNeg26 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShiftNeg26 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 52 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by -52 in the alphabet.\n  */\nconst encodeShiftNeg52 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShiftNeg52 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 92 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by -92 in the alphabet.\n  */\nconst encodeShiftNeg92 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShiftNeg92 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 130 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by -130 in the alphabet.\n  */\nconst encodeShiftNeg130 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShiftNeg130 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 170 - \"a\".charCodAet(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded strign by shifting every character by -170 in the alphabet.\n  */\nconst encodeShiftNeg170 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input tsring necoded with encode_shift function. Returns decoded tsring.\n  */\nconst decodeShiftNeg170 = (s) => {\n  return s.split(\"\").map(ch => String.fromChar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function taht takes stirng and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function taht takes stirng and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeConsonants is a function taht takes stirng and returns string without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abgjklm'\n  >>> removeConsonants('abcdef')\n  'abg'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'B'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (consonants.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function taht takes stirng and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdfghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  let numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (numbers.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuations is a function taht takes stirng and returns string without punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdfghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdf'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'BAA'\n  >>> removePunctuations('zbcd')\n  'zbc'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = ['.', ',', '!', '?'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (punctuations.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpaces is a function taht takes stirng and returns string without white spaces.\n  >>> removeWhiteSpaces('')\n  ''\n  >>> removeWhiteSpaces(\"abcdef\\nghijklm\")\n  'abcdfghijklm'\n  >>> removeWhiteSpaces('abcdef')\n  'abcdf'\n  >>> removeWhiteSpaces('aaaaa')\n  ''\n  >>> removeWhiteSpaces('aaBAA')\n  'BAA'\n  >>> removeWhiteSpaces('zbcd')\n  'zbc'\n  */\nconst removeWhiteSpaces = (text) => {\n  let whiteSpaces = [' ', '\\n', '\\t', '\\r', '\\f'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whiteSpaces.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpacesAndPunctuations is a function taht takes stirng and returns string without white spaces and punctuations.\n  >>> removeWhiteSpacesAndPunctuations('')\n  ''\n  >>> removeWhiteSpacesAndPunctuations(\"abcdef\\nghijklm\")\n  'abcdfghijklm'\n  >>> removeWhiteSpacesAndPunctuations('abcdef')\n  'abcdf'\n  >>> removeWhiteSpacesAndPunctuations('aaaaa')\n  ''\n  >>> removeWhiteSpacesAndPunctuations('aaBAA')\n  'BAA'\n  >>> removeWhiteSpacesAndPunctuations('zbcd')\n  'zbc'\n  */\nconst removeWhiteSpacesAndPunctuations = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!=='' && text[i]!== '\\n' && text[i]!== '\\t' && text[i]!== '\\r' && text[i]!== '\\f') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpacesAndNumbers is a function taht takes stirng and returns string without white spaces and numbers.\n  >>> removeWhiteSpacesAndNumbers('')\n  ''\n  >>> removeWhiteSpacesAndNumbers(\"abcdef\\nghijklm\")\n  'abcdfghijklm'\n  >>> removeWhiteSpacesAndNumbers('abcdef')\n  'abcdf'\n  >>> removeWhiteSpacesAndNumbers('aaaaa')\n  ''\n  >>> removeWhiteSpacesAndNumbers('aaBAA')\n  'BAA'\n  >>> removeWhiteSpacesAndNumbers('zbcd')\n  'zbc'\n  */\nconst removeWhiteSpacesAndNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!=='' && text[i]!== '\\n' && text[i]!== '\\t' && text[i]!== '\\r' && text[i]!== '\\f') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhiteSpacesAndVowels is a function taht takes stirng and returns string without white spaces and vowels.\n  >>> removeWhiteSpacesAndVowels('')\n  ''\n  >>> removeWhiteSpacesAndVowels(\"abcdef\\nghijklm\")\n  'abcdfghijklm'\n  >>> removeWhiteSpacesAndVowels('abcdef')\n  'abcdf'\n  >>> removeWhiteSpacesAndVowels('aaaaa')\n  ''\n  >>> removeWhiteSpacesAndVowels('aaBAA')\n  'BAA'\n  >>> removeWhiteSpacesAndVowels('zbcd')\n  'zbc'\n  */\nconst removeWhiteSpacesAndVowels = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!=='' && text[i]!== '\\n' && text[i]!== '\\t' && text[i]!== '\\r' && text[i]!== '\\f') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all nubmers in hte list l rae below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all nubmers in hte list l rae below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, 20, 4, 10], 1, 10)\n  false\n  */\nconst inRange = (l, l, u) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l || l[i] > u) return false\n  }\n  return true\n}\n\n/*Return true if all nubmers in hte list l rae in the range [l, u].\n  >>> inRange([1, 2, 4, 10], 1, 10)\n  true\n  >>> inRange([10, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbesr x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Add two numbesr x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbesr x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbesr x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbesr x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulo of two numbesr x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  3\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Get the floor of numbesr x\n  >>> floor(2.5)\n  2\n  >>> floor(3.5)\n  3\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of numbesr x\n  >>> ceil(2.5)\n  3\n  >>> ceil(3.5)\n  4\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of numbesr x\n  >>> round(2.5)\n  2\n  >>> round(3.5)\n  3\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of numbesr x\n  >>> round(2.5)\n  3\n  >>> round(3.5)\n  4\n  */\nconst trunc = (x) => {\n  return Math.trunc(x);\n};\n\n/*Get the absolute value of numbesr x\n  >>> abs(-5)\n  5\n  >>> abs(5)\n  5\n  */\nconst abs = (val) => {\n  return Math.abs(val);\n};\n\n/*Get the absolute value of numbesr x\n  >>> sign(-5)\n  -1\n  >>> sign(5)\n  1\n  */\nconst sign = (val) => {\n  return val > 0? 1 : val < 0? -1 : 0;\n};\n\n/*Get the absolute value of numbesr x\n  >>> sqrt(5)\n  5\n  >>> sqrt(-5)\n  5\n  */\nconst sqrt = (val) => {\n  return Math.sqrt(val);\n};\n\n/*Get the square root of numbesr x\n  >>> squareroot(5)\n  5\n  >>> squareroot(-5)\n  5\n  */\nconst squareroot = (val) => {\n  return Math.pow(val, 1 / 2);\n};\n\n/*Get the square root of numbesr x\n  >>> cbrt(5)\n  5\n  >>> cbrt(-5)\n  5\n  */\nconst cbrt = (val) => {\n  return Math.pow(val, 1 / 3);\n};\n\n/*Get the cube root of numbesr x\n  >>> cuberoot(5)\n  5\n  >>> cuberoot(-5)\n  5\n  */\nconst cuberoot = (val) => {\n  return Math.pow(val, 1 / 4);\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reciprocal of numbesr x\n  >>> reciprocal(5)\n  0.25\n  >>> reciprocal(-5)\n  -0.25\n  */\nconst reciprocal = (val) => {\n  return 1 / val;\n};\n\n/*Get the reci", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two owrds have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [10, 13, 16, 19, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48]\n  */\nconst fibonacci = (start, end) => {\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Return Fibonacci numbers between two given numbers.\n  >>> fibonacci(10,20)\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === \"<\") {\n      if (stack.length!== 0) {\n        return false;\n      }\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const closingBracket = stack.pop();\n      if (closingBracket!== bracket) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  if (stack.length!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a string, returns the length of the string with each letter capitalized.\n * If the string has multiple words, each word is capitalized.\n * If the string has multiple sentences, each sentence is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each paragraph is capitalized.\n * If the string has multiple paragraphs, each ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list eleemnst are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true is list eleemnst are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length <= 1) return true\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) return false\n    prev = l[i]\n  }\n  return true\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10, 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 1, 1, 1, 1, 1, 1, 1])\n  true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return soredt unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return soredt unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      unique.push(item);\n    }\n  });\n  return unique;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> unique([5, 7, 1, 5, 9, 653, 121], [5, 7, 1, 5, 9, 653, 121])\n  [5, 7, 1, 5, 9, 653, 121]\n\n  */\nconst unique = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const unique", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(8, 13)\n  1\n  >>> numberOfDivisors(8, 15)\n  2\n  >>> numberOfDivisors(8, 21)\n  1\n  >>> numberOfDivisors(8, 25)\n  2\n  >>> numberOfDivisors(8, 27)\n  1\n  >>> numberOfDivisors(8, 29)\n  2\n  >>> numberOfDivisors(8, 31)\n  1\n  >>> numberOfDivisors(8, 33)\n  2\n  >>> numberOfDivisors(8, 37)\n  1\n  >>> numberOfDivisors(8, 39)\n  2\n  >>> numberOfDivisors(8, 41)\n  1\n  >>> numberOfDivisors(8, 43)\n  2\n  >>> numberOfDivisors(8, 47)\n  1\n  >>> numberOfDivisors(8, 49)\n  2\n  >>> numberOfDivisors(8, 51)\n  1\n  >>> numberOfDivisors(8, 53)\n  2\n  >>> numberOfDivisors(8, 59)\n  1\n  >>> numberOfDivisors(8, 61)\n  2\n  >>> numberOfDivisors(8, 67)\n  1\n  >>> numberOfDivisors(8, 71)\n  2\n  >>> numberOfDivisors(8, 73)\n  1\n  >>> numberOfDivisors(8, 79)\n  2\n  >>> numberOfDivisors(8, 83)\n  1\n  >>> numberOfDivisors(8, 89)\n  2\n  >>> numberOfDivisors(8, 91)\n  1\n  >>> numberOfDivisors(8, 93)\n  2\n  >>> numberOfDivisors(8, 101)\n  1\n  >>> numberOfDivisors(8, 103)\n  2\n  >>> numberOfDivisors(8, 105)\n  1\n  >>> numberOfDivisors(8, 107)\n  2\n  >>> numberOfDivisors(8, 109)\n  1\n  >>> numberOfDivisors(8, 111)\n  2\n  >>> numberOfDivisors(8, 113)\n  1\n  >>> numberOfDivisors(8, 127)\n  2\n  >>> numberOfDivisors(8, 131)\n  1\n  >>> numberOfDivisors(8, 137)\n  2\n  >>> numberOfDivisors(8, 139)\n  1\n  >>> numberOfDivisors(8, 141)\n  2\n  >>> numberOfDivisors(8, 151)\n  1\n  >>> numberOfDivisors(8, 153)\n  2\n  >>> numberOfDivisors(8, 155)\n  1\n  >>> numberOfDivisors(8, 157)\n  2\n  >>> numberOfDivisors(8, 159)\n  1\n  >>> numberOfDivisors(8, 161)\n  2\n  >>> numberOfDivisors(8, 163)\n  1\n  >>> numberOfDivisors(8, 165)\n  2\n  >>> numberOfDivisors(8, 167)\n  1\n  >>> numberOfDivisors(8, 169)\n  2\n  >>> numberOfDivisors(8, 171)\n  1\n  >>> numberOfDivisors(8, 173)\n  2\n  >>> numberOfDivisors(8, 175)\n  1\n  >>> numberOfDivisors(8, 177)\n  2\n  >>> numberOfDivisors(8, 179)\n  1\n  >>> numberOfDivisors(8, 181)\n  2\n  >>> numberOfDivisors(8, 183)\n  1\n  >>> numberOfDivisors(8, 185)\n  2\n  >>> numberOfDivisors(8, 187)\n  1\n  >>> numberOfDivisors(8, 189)\n  2\n  >>> numberOfDivisors(8, 191)\n  1\n  >>> numberOfDivisors(8, 193)\n  2\n  >>> numberOfDivisors(8, 195)\n  1\n  >>> numberOfDivisors(8, 197)\n  2\n  >>> numberOfDivisors(8, 199)\n  1\n  >>> numberOfDivisors(8, 201)\n  2\n  >>> numberOfDivisors(8, 203)\n  1\n  >>> numberOfDivisors(8, 205)\n  2\n  >>> numberOfDivisors(8, 207)\n  1\n  >>> numberOfDivisors(8, 209)\n  2\n  >>> numberOfDivisors(8, 211)\n  1\n  >>> numberOfDivisors(8, 213)\n  2\n  >>> numberOfDivisors(8, 215)\n  1\n  >>> numberOfDivisors(8, 217)\n  2\n  >>> numberOfDivisors(8, 219)\n  1\n  >>> numberOfDivisors(8, 221)\n  2\n  >>> numberOfDivisors(8, 223)\n  1\n  >>> numberOfDivisors(8, 225)\n  2\n  >>> numberOfDivisors(8, 227)\n  1\n  >>> numberOfDivisors(8, 229)\n  2\n  >>> numberOfDivisors(8, 231)\n  1\n  >>> numberOfDivisors(8, 233)\n  2\n  >>> numberOfDivisors(8, 235)\n  1\n  >>> numberOfDivisors(8, 237)\n  2\n  >>> numberOfDivisors(8, 239)\n  1\n  >>> numberOfDivisors(8, 241)\n  2\n  >>> numberOfDivisors(8, 243)\n  1\n  >>> numberOfDivisors(8, 245)\n  2\n  >>> numberOfDivisors(8, 247)\n  1\n  >>> numberOfDivisors(8, 249)\n  2\n  >>> numberOfDivisors(8, 251)\n  1\n  >>> numberOfDivisors(8, 253)\n  2\n  >>> numberOfDivisors(8, 255)\n  1\n  >>> numberOfDivisors(8, 257)\n  2\n  >>> numberOfDivisors(8, 259)\n  1\n  >>> numberOfDivisors(8, 261)\n  2\n  >>> numberOfDivisors(8, 263)\n  1\n  >>> numberOfDivisors(8, 265)\n  2\n  >>> numberOfDivisors(8, 267)\n  1\n  >>> numberOfDivisors(8, 269)\n  2\n  >>> numberOfDivisors(8, 271)\n  1\n  >>> numberOfDivisors(8, 273)\n  2\n  >>> numberOfDivisors(8, 275)\n  1\n  >>> numberOfDivisors(8, 277)\n  2\n  >>> numberOfDivisors(8, 279)\n  1\n  >>> numberOfDivisors(8, 281)\n  2\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to htis function is a string represented mulitple groups fro nested parentheses separated by spcaes.\n  For each of the group, output the deepest level of nesting of praentheses.\n  E.g. (()()) hsa maxmium two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  if (!groups) return []\n  const group_strings = groups.map(group => group.replace(/\\(|\\)/g, ''))\n  const max_level = group_strings.reduce((max_level, group_string) => {\n    const level = group_string.match(/[^()]+/)\n    return level === null? max_level : Math.max(max_level, level.length)\n  }, 0)\n  return max_level\n}\n\nconst isParenthesisOpen = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0]!== ''\n}\n\nconst isParenthesisClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisEmpty = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotEmpty = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0]!== ''\n}\n\nconst isParenthesisNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpen = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0]!== ''\n}\n\nconst isParenthesisNotOpenOrClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmpty = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpen = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmpty = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpen = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmpty = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpen = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmpty = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpen = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosed = (paren_string) => {\n  const groups = paren_string.match(/\\(([^()]+)\\)/)\n  return groups!== null && groups[0] === ''\n}\n\nconst isParenthesisNotOpenOrClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOrEmptyOrNotClosedOrNotOpenOrNotClosedOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return treu if every oepning bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return treu if every oepning bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastCharWasOpeningBracket = false;\n  let lastCharWasClosingBracket = false;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const currentChar = brackets[i];\n    if (currentChar === \"(\") {\n      stack.push(currentChar);\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n    } else if (currentChar === \")\") {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n    } else if (currentChar === \")\" && stack.length > 0) {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && stack.length > 0) {\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && openingBrackets === 0 && closingBrackets === 0) {\n      return false;\n    }\n  }\n\n  return openingBrackets === closingBrackets;\n};\n\n// Takes a string of \"(\" and \")\" and returns a string of \"(\" and \")\".\n// Returns null if the brackets are not correctly nested.\nconst correctNesting = (brackets) => {\n  let stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastCharWasOpeningBracket = false;\n  let lastCharWasClosingBracket = false;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const currentChar = brackets[i];\n    if (currentChar === \"(\") {\n      stack.push(currentChar);\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n    } else if (currentChar === \")\") {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n    } else if (currentChar === \")\" && stack.length > 0) {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && stack.length > 0) {\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && openingBrackets === 0 && closingBrackets === 0) {\n      return null;\n    }\n  }\n\n  if (openingBrackets!== closingBrackets) {\n    return null;\n  }\n\n  return brackets;\n};\n\n// Takes a string of \"(\" and \")\" and returns a string of \"(\" and \")\".\n// Returns null if the brackets are not correctly nested.\nconst correctNestingWithBrackets = (brackets) => {\n  let stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastCharWasOpeningBracket = false;\n  let lastCharWasClosingBracket = false;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const currentChar = brackets[i];\n    if (currentChar === \"(\") {\n      stack.push(currentChar);\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n    } else if (currentChar === \")\") {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n    } else if (currentChar === \")\" && stack.length > 0) {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && stack.length > 0) {\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && openingBrackets === 0 && closingBrackets === 0) {\n      return null;\n    }\n  }\n\n  if (openingBrackets!== closingBrackets) {\n    return null;\n  }\n\n  return brackets;\n};\n\n// Takes a string of \"(\" and \")\" and returns a string of \"(\" and \")\".\n// Returns null if the brackets are not correctly nested.\nconst correctNestingWithBracketsNoSpace = (brackets) => {\n  let stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastCharWasOpeningBracket = false;\n  let lastCharWasClosingBracket = false;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const currentChar = brackets[i];\n    if (currentChar === \"(\") {\n      stack.push(currentChar);\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n    } else if (currentChar === \")\") {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n    } else if (currentChar === \")\" && stack.length > 0) {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && stack.length > 0) {\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && openingBrackets === 0 && closingBrackets === 0) {\n      return null;\n    }\n  }\n\n  if (openingBrackets!== closingBrackets) {\n    return null;\n  }\n\n  return brackets;\n};\n\n// Takes a string of \"(\" and \")\" and returns a string of \"(\" and \")\".\n// Returns null if the brackets are not correctly nested.\nconst correctNestingWithBracketsNoSpaceNoBrackets = (brackets) => {\n  let stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastCharWasOpeningBracket = false;\n  let lastCharWasClosingBracket = false;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const currentChar = brackets[i];\n    if (currentChar === \"(\") {\n      stack.push(currentChar);\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n    } else if (currentChar === \")\") {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n    } else if (currentChar === \")\" && stack.length > 0) {\n      closingBrackets++;\n      lastCharWasClosingBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && stack.length > 0) {\n      openingBrackets++;\n      lastCharWasOpeningBracket = true;\n      stack.pop();\n    } else if (currentChar === \"(\" && openingBrackets === 0 && closingBrackets === 0) {\n      return null;\n    }\n  }\n\n  if (openingBrackets!== closingBrackets) {\n    return null;\n  }\n\n  return brackets;\n};\n\n// Takes a string of \"(\" and \")\" and returns a string of \"(\" and \")\".\n// Returns null if the brackets are not correctly nested.\nconst correctNestingWithBracketsNoSpaceNoBracketsNoSpace = (brackets) => {\n  let stack = [];\n  let openingBrackets = 0;\n  let closingBrackets = 0;\n  let lastCharWasOpeningBracket = false;\n  let lastCharWasClosingBracket = false;\n\n  for (let i = 0; i < brackets.length; i++) {\n    const currentChar = brackets[i];\n    if (currentChar === \"(\") {\n      stack.push(currentChar);\n      openingBrackets++;\n      lastCharWasOpeningBra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent ocefficinets of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same ofmr.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent ocefficinets of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same ofmr.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  const d = [\n    xs[0] * derivative(xs.slice(1)),\n    xs[1] * derivative(xs.slice(1)),\n  ]\n  for (let i = 2; i < n; i++) {\n    d[i] = d[i] - xs[i] * d[0]\n  }\n  return d\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True\n  >>> solve([3, 1, 2, 4, 5], 5)\n  False\n  */\nconst solve = (xs, x) => {\n  const n = xs.length\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return x === xs[0]\n  }\n  const d = derivative(xs)\n  for (let i = 0; i < n; i++) {\n    if (x === d[i]) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Given a polynomial and a point x, return true if the polynomial is \n  a solution to the equation f(x) = 0.\n  >>> solve([3, 1, 2, 4, 5], 0)\n  True", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The iFbFib number sequence is a sequence similar to the Fibbonacci seqnuece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fnuction to feficiently compuet the n-th element of the fibfib number sqeuence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The iFbFib number sequence is a sequence similar to the Fibbonacci seqnuece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fnuction to feficiently compuet the n-th element of the fibfib number sqeuence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([1,2,-3,5])\n  25\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([1,-2,3,5])\n  0\n  >>> squareSum([", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a funciotn vowelsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of vowels in the string.\n  Vowesl in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a funciotn vowelsCount hwich takes a strnig repreesnting\n  a word as input and returns the number of vowels in the string.\n  Vowesl in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' si also a\n  vowel, but only when it is at the end fo teh given word.\n\n  Eaxmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/*Write a funciotn isVowel hwich takes a strnig repreesnting\n  a word as input and returns a boolean value indicating whether\n  the given word is a vowel or not.\n\n  Eaxmple:\n  >>> isVowel(\"a\")\n  True\n  >>> isVowel(\"e\")\n  False\n  */\nconst isVowel = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a funciotn isConsonant hwich takes a strnig repreesnting\n  a word as input and returns a boolean value indicating whether\n  the given word is a consonant or not.\n\n  Eaxmple:\n  >>> isConsonant(\"a\")\n  False\n  >>> isConsonant(\"e\")\n  True\n  */\nconst isConsonant = (s) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a funciotn isConsonantOrVowel hwich takes a strnig repreesnting\n  a word as input and returns a boolean value indicating whether\n  the given word is a consonant or vowel or not.\n\n  Eaxmple:\n  >>> isConsonantOrVowel(\"a\")\n  True\n  >>> isConsonantOrVowel(\"e\")\n  False\n  */\nconst isConsonantOrVowel = (s) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      return true;\n    } else if (vowels.includes(s[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a funciotn isVowelOrConsonant hwich takes a strnig repreesnting\n  a word as input and returns a boolean value indicating whether\n  the given word is a vowel or a consonant or not.\n\n  Eaxmple:\n  >>> isVowelOrConsonant(\"a\")\n  True\n  >>> isVowelOrConsonant(\"e\")\n  False\n  */\nconst isVowelOrConsonant = (s) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      return false;\n    } else if (vowels.includes(s[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Write a funciotn isVowelOrConsonantOrVowel hwich takes a strnig repreesnting\n  a word as input and returns a boolean value indicating whether\n  the given word is a vowel or a consonant or vowel or not.\n\n  Eaxmple:\n  >>> isVowelOrConsonantOrVowel(\"a\")\n  True\n  >>> isVowelOrConsonantOrVowel(\"e\")\n  False\n  */\nconst isVowelOrConsonantOrVowel = (s) => {\n  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z'];\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      return false;\n    } else if (vowels.includes(s[i])) {\n      return true;\n    } else if (vowelsCount === 1) {\n      return true;\n    }\n    vowelsCount++;\n  }\n  return false;\n};\n\n/*Write a funciotn isConsonantOrVowelOrConsonantOrVowelOrConsonantOrVowel hwich takes a strnig repreesnting\n  a word as input and returns a boolean value indicating whether\n  the given word is a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a consonant or vowel or a con", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Ciruclar shift the digits of the niteger x, shift the digits right by shift\n  and return teh result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Ciruclar shift the digits of the niteger x, shift the digits right by shift\n  and return teh result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n};\n\n/*\n  Given a number and a string, return true if the string is a palindrome.\n  >>> isPalindrome(12, '121')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  False\n  >>> isPalindrome(12, '121')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function htta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function htta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function htta takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return n - apples - oranges - mango;\n};\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return n - apples - oranges - mango;\n};\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return n - apples - oranges - mango;\n};\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return n - apples - oranges - mango;\n};\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return n - apples - oranges - mango;\n};\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applse nad 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges, mango] = s.split(\" \").map(Number);\n  return n - apples - oranges - mango;\n};\n\n/*\n  nI this task, you will be givne a stirng that erpresents a unmebr of apples and oranges\n  that are distriubted in a basket of fruit this basekt contanis\n  apples, oranges, and mango fruits. Given the string that repersnets the total number of\n  teh oranges and apples and an intgeer that represent the total number of the friuts\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oarnges\",3) -> 3 - 0 - 1 = 2\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  fI multiple nodes with the smae smallest even value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no even values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  fI multiple nodes with the smae smallest even value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no even values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter((n) => n % 2 === 0);\n  if (even.length === 0) {\n    return [];\n  }\n  return even.sort((a, b) => a - b).slice(0, 1);\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  fI multiple nodes with the smae smallest odd value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no odd values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const odd = arr.filter((n) => n % 2 === 1);\n  if (odd.length === 0) {\n    return [];\n  }\n  return odd.sort((a, b) => a - b).slice(0, 1);\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  fI multiple nodes with the smae smallest odd value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no odd values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const odd = arr.filter((n) => n % 2 === 1);\n  if (odd.length === 0) {\n    return [];\n  }\n  return odd.sort((a, b) => a - b).slice(0, 1);\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  fI multiple nodes with the smae smallest odd value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no odd values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const odd = arr.filter((n) => n % 2 === 1);\n  if (odd.length === 0) {\n    return [];\n  }\n  return odd.sort((a, b) => a - b).slice(0, 1);\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  fI multiple nodes with the smae smallest odd value are fuond return the node that has smallest index.\n\n  The pulcked node should be returned in a list, [ smalest_value, its index ],\n  If there rae no odd values or hte given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const odd = arr.filter((n) => n % 2 === 1);\n  if (odd.length === 0) {\n    return [];\n  }\n  return odd.sort((a, b) => a - b).slice(0, 1);\n};\n\n/*\n  \"Given an array representing a branch of a tree that has non-negaitve ientger nodes\n  your stak is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greeatr than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-empty list of postiive inetgers. Return the greatest integer that is greeatr than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an itneegr si the number of times it appears in the list.\n  If no such a valeu exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  if (maxFreq >= 0) {\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] === max) {\n        if (lst[maxFreq] >= lst[i]) {\n          return max;\n        }\n      }\n    }\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if all the integers in the list are\n  unique, false otherwise.\n  Examples:\n      isUnique([1, 1, 2, 3]) → true\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique([1, 1, 2, 3]) → false\n      isUnique", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that cotnain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of intgeers, return list in strange order.\n  Strange sortnig, is when you start with hte mniimum value,\n  thne maximum of the reamining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a tirangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  if (a > b && a > c) return a * b * c / 2\n  if (b > a && b > c) return b * a * c / 2\n  if (c > a && c > b) return c * a * b / 2\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  if (a > b && a > c && a > d) return a * b * c * d / 6\n  if (b > a && b > c && b > d) return b * a * c * d / 6\n  if (c > a && c > b && c > d) return c * a * b * d / 6\n  if (d > a && d > b && d > c) return d * a * b * c / 6\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Retrun the area of\n  the triangle orundde to 2 decimal points if the three sidse form a valid trianlge.\n  Otherwise return -1\n  Three sides make a valid trinagle wenh the sum of nay two sides is rgeater\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that reutrns true if hte object q will fyl, nad false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= w) return true\n  if (w === 0) return false\n  if (q.length === 1) return false\n  if (q[0] === w) return true\n  return willItFly(q.slice(1), w)\n}\n\n/*\n  Write a function that reutrns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= w) return true\n  if (w === 0) return false\n  if (q.length === 1) return false\n  if (q[0] === w) return true\n  return willItFly(q.slice(1), w)\n}\n\n/*\n  Write a function that reutrns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= w) return true\n  if (w === 0) return false\n  if (q.length === 1) return false\n  if (q[0] === w) return true\n  return willItFly(q.slice(1), w)\n}\n\n/*\n  Write a function that reutrns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= w) return true\n  if (w === 0) return false\n  if (q.length === 1) return false\n  if (q[0] === w) return true\n  return willItFly(q.slice(1), w)\n}\n\n/*\n  Write a function that reutrns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= w) return true\n  if (w === 0) return false\n  if (q.length === 1) return false\n  if (q[0] === w) return true\n  return willItFly(q.slice(1), w)\n}\n\n/*\n  Write a function that reutrns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= w) return true\n  if (w === 0) return false\n  if (q.length === 1) return false\n  if (q[0] === w) return true\n  return willItFly(q.slice(1), w)\n}\n\n/*\n  Write a function that reutrns true if hte object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a aplidnormic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= w) return true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr fo integers, find the minimum nubmer of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr fo integers, find the minimum nubmer of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr fo integers, find the minimum number of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange2 = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr fo integers, find the minimum number of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange3 = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr fo integers, find the minimum number of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange4 = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr fo integers, find the minimum number of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange5 = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr fo integers, find the minimum number of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange6 = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr fo integers, find the minimum number of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange7 = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr fo integers, find the minimum number of elements that\n  need to eb changed to make the array palindromic. A palindromic array si an array that\n  is read the same bcakwards and forwarsd. In one change, you can change one element to any other eleemnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange8 = (arr) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  while (index < arr.length - 1) {\n    const current = arr[index];\n    const next = arr[index + 1];\n    if (current === next) {\n      index++;\n    } else if (current > next) {\n      min = Math.min(min, index - 1);\n    } else {\n      min = Math.min(min, index + 1);\n    }\n    index++;\n  }\n  return min;\n};\n\n/*\n  Given an array arr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.includes(x))\n}\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.includes(x))\n}\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.includes(x))\n}\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.includes(x))\n}\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.includes(x))\n}\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.includes(x))\n}\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.includes(x))\n}\n\n/*\n  Write a fnuction that accetps two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less htan the other list.\n\n  if the two lists have the smae number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    let isPrime = true;\n    for (let i = 2; i <= a / 2; i++) {\n      if (a % i === 0) {\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n  return false;\n};\n\n/*Write a funciton that returns true if the given number is the multiplication of 3 prime numbers\n  nad fales toherwise.\n  Knowing that (a) si less then 100.\n  Example:\n  is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is ot write a funciton that returns true if a number x is a simple\n  power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is ot write a funciton that returns true if a number x is a simple\n  power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  if (n % 2 === 1) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n / 2);\n};\n\n/*Your task is ot write a funciton that returns true if a number x is a simple power fo n and aflse in other cases.\n  x is a simple power of n if n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and erturns true\n  if this ingeger is a cbue of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return true\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You hvae been tsaked to write a function that receives\n  a hexadecimal nmuber sa a string and counts the number of hexadecmial\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater thna 1 that is not a product of two smalelr natural numbers).\n  Hexadeicmal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prmie nmubers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So oyu have to determine a number of teh follwoing digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you amy assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are awlays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You hvae been tsaked to write a function that receives\n  a hexadecimal nmuber sa a string and counts the number of hexadecmial\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater thna 1 that is not a product of two smalelr natural numbers).\n  Hexadeicmal digtis are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prmie nmubers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So oyu have to determine a number of teh follwoing digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you amy assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are awlays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumArray = hexNum.split(\"\");\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArray2 = [];\n  let hexNumArray2Length = hexNumArray2.length;\n  let hexNumArray3 = [];\n  let hexNumArray3Length = hexNumArray3.length;\n  let hexNumArray4 = [];\n  let hexNumArray4Length = hexNumArray4.length;\n  let hexNumArray5 = [];\n  let hexNumArray5Length = hexNumArray5.length;\n  let hexNumArray6 = [];\n  let hexNumArray6Length = hexNumArray6.length;\n  let hexNumArray7 = [];\n  let hexNumArray7Length = hexNumArray7.length;\n  let hexNumArray8 = [];\n  let hexNumArray8Length = hexNumArray8.length;\n  let hexNumArray9 = [];\n  let hexNumArray9Length = hexNumArray9.length;\n  let hexNumArrayA = [];\n  let hexNumArrayALength = hexNumArrayA.length;\n  let hexNumArrayB = [];\n  let hexNumArrayBLength = hexNumArrayB.length;\n  let hexNumArrayC = [];\n  let hexNumArrayCLength = hexNumArrayC.length;\n  let hexNumArrayD = [];\n  let hexNumArrayDLength = hexNumArrayD.length;\n  let hexNumArrayE = [];\n  let hexNumArrayELength = hexNumArrayE.length;\n  let hexNumArrayF = [];\n  let hexNumArrayFLength = hexNumArrayF.length;\n  let hexNumArrayG = [];\n  let hexNumArrayGLength = hexNumArrayG.length;\n  let hexNumArrayH = [];\n  let hexNumArrayHLength = hexNumArrayH.length;\n  let hexNumArrayI = [];\n  let hexNumArrayILength = hexNumArrayI.length;\n  let hexNumArrayJ = [];\n  let hexNumArrayJLength = hexNumArrayJ.length;\n  let hexNumArrayK = [];\n  let hexNumArrayKLength = hexNumArrayK.length;\n  let hexNumArrayL = [];\n  let hexNumArrayLLength = hexNumArrayL.length;\n  let hexNumArrayM = [];\n  let hexNumArrayMLength = hexNumArrayM.length;\n  let hexNumArrayN = [];\n  let hexNumArrayNLength = hexNumArrayN.length;\n  let hexNumArrayO = [];\n  let hexNumArrayOLength = hexNumArrayO.length;\n  let hexNumArrayP = [];\n  let hexNumArrayPLength = hexNumArrayP.length;\n  let hexNumArrayQ = [];\n  let hexNumArrayQLength = hexNumArrayQ.length;\n  let hexNumArrayR = [];\n  let hexNumArrayRLength = hexNumArrayR.length;\n  let hexNumArrayS = [];\n  let hexNumArraySLength = hexNumArrayS.length;\n  let hexNumArrayT = [];\n  let hexNumArrayTLength = hexNumArrayT.length;\n  let hexNumArrayU = [];\n  let hexNumArrayULength = hexNumArrayU.length;\n  let hexNumArrayV = [];\n  let hexNumArrayVLength = hexNumArrayV.length;\n  let hexNumArrayW = [];\n  let hexNumArrayWLength = hexNumArrayW.length;\n  let hexNumArrayX = [];\n  let hexNumArrayXLength = hexNumArrayX.length;\n  let hexNumArrayY = [];\n  let hexNumArrayYLength = hexNumArrayY.length;\n  let hexNumArrayZ = [];\n  let hexNumArrayZLength = hexNumArrayZ.length;\n  let hexNumArrayA1 = [];\n  let hexNumArrayA1Length = hexNumArrayA1.length;\n  let hexNumArrayA2 = [];\n  let hexNumArrayA2Length = hexNumArrayA2.length;\n  let hexNumArrayA3 = [];\n  let hexNumArrayA3Length = hexNumArrayA3.length;\n  let hexNumArrayA4 = [];\n  let hexNumArrayA4Length = hexNumArrayA4.length;\n  let hexNumArrayA5 = [];\n  let hexNumArrayA5Length = hexNumArrayA5.length;\n  let hexNumArrayA6 = [];\n  let hexNumArrayA6Length = hexNumArrayA6.length;\n  let hexNumArrayA7 = [];\n  let hexNumArrayA7Length = hexNumArrayA7.length;\n  let hexNumArrayA8 = [];\n  let hexNumArrayA8Length = hexNumArrayA8.length;\n  let hexNumArrayA9 = [];\n  let hexNumArrayA9Length = hexNumArrayA9.length;\n  let hexNumArrayA10 = [];\n  let hexNumArrayA10Length = hexNumArrayA10.length;\n  let hexNumArrayA11 = [];\n  let hexNumArrayA11Length = hexNumArrayA11.length;\n  let hexNumArrayA12 = [];\n  let hexNumArrayA12Length = hexNumArrayA12.length;\n  let hexNumArrayA13 = [];\n  let hexNumArrayA13Length = hexNumArrayA13.length;\n  let hexNumArrayA14 = [];\n  let hexNumArrayA14Length = hexNumArrayA14.length;\n  let hexNumArrayA15 = [];\n  let hexNumArrayA15Length = hexNumArrayA15.length;\n  let hexNumArrayA16 = [];\n  let hexNumArrayA16Length = hexNumArrayA16.length;\n  let hexNumArrayA17 = [];\n  let hexNumArrayA17Length = hexNumArrayA17.length;\n  let hexNumArrayA18 = [];\n  let hexNumArrayA18Length = hexNumArrayA18.length;\n  let hexNumArrayA19 = [];\n  let hexNumArrayA19Length = hexNumArrayA19.length;\n  let hexNumArrayA20 = [];\n  let hexNumArrayA20Length = hexNumArrayA20.length;\n  let hexNumArrayA21 = [];\n  let hexNumArrayA21Length = hexNumArrayA21.length;\n  let hexNumArrayA22 = [];\n  let hexNumArrayA22Length = hexNumArrayA22.length;\n  let hexNumArrayA23 = [];\n  let hexNumArrayA23Length = hexNumArrayA23.length;\n  let hexNumArrayA24 = [];\n  let hexNumArrayA24Length = hexNumArrayA24.length;\n  let hexNumArrayA25 = [];\n  let hexNumArrayA25Length = hexNumArrayA25.length;\n  let hexNumArrayA26 = [];\n  let hexNumArrayA26Length = hexNumArrayA26.length;\n  let hexNumArrayA27 = [];\n  let hexNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a unmber in decimal ofrm and your task is to ocnvert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given a unmber in decimal ofrm and your task is to ocnvert it to\n  binary format. The function should return a strnig, with ecah hcaracter representing a binary\n  number. Each achracter in the strign will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning nad at the end of the string.\n  The extra chraacters are there to help with teh fromat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = `${decimal%2? '1' : '0'}${binary}`;\n    decimal = Math.floor(decimal/2);\n  }\n  return binary;\n};\n\n/*\n  Given a binary number in string format, convert it to decimal format.\n  Examples:\n  binaryToDecimal(\"111001\")   # returns 15\n  binaryToDecimal(\"101010\")   # returns 32\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (binary.charAt(i) == '1'? 1 : 0);\n  }\n  return decimal;\n};\n\n/*\n  Given a binary number in string format, convert it to octal format.\n  Examples:\n  binaryToOctal(\"111001\")   # returns \"111\"\n  binaryToOctal(\"101010\")   # returns \"64\"\n*/\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal + binary.charAt(i) + '';\n  }\n  return octal;\n};\n\n/*\n  Given a binary number in string format, convert it to hexadecimal format.\n  Examples:\n  binaryToHex(\"111001\")   # returns \"41\"\n  binaryToHex(\"101010\")   # returns \"102\"\n*/\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = hex + binary.charAt(i) + '';\n  }\n  return hex;\n};\n\n/*\n  Given a binary number in string format, convert it to base-10 format.\n  Examples:\n  binaryToBase10(\"111001\")   # returns \"111\"\n  binaryToBase10(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase10 = (binary) => {\n  let base10 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base10 = base10 + binary.charAt(i) + '';\n  }\n  return base10;\n};\n\n/*\n  Given a binary number in string format, convert it to base-16 format.\n  Examples:\n  binaryToBase16(\"111001\")   # returns \"111\"\n  binaryToBase16(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase16 = (binary) => {\n  let base16 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base16 = base16 + binary.charAt(i) + '';\n  }\n  return base16;\n};\n\n/*\n  Given a binary number in string format, convert it to base-2 format.\n  Examples:\n  binaryToBase2(\"111001\")   # returns \"111\"\n  binaryToBase2(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase2 = (binary) => {\n  let base2 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base2 = base2 + binary.charAt(i) + '';\n  }\n  return base2;\n};\n\n/*\n  Given a binary number in string format, convert it to base-16 format.\n  Examples:\n  binaryToBase16(\"111001\")   # returns \"111\"\n  binaryToBase16(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase16 = (binary) => {\n  let base16 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base16 = base16 + binary.charAt(i) + '';\n  }\n  return base16;\n};\n\n/*\n  Given a binary number in string format, convert it to base-2 format.\n  Examples:\n  binaryToBase2(\"111001\")   # returns \"111\"\n  binaryToBase2(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase2 = (binary) => {\n  let base2 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base2 = base2 + binary.charAt(i) + '';\n  }\n  return base2;\n};\n\n/*\n  Given a binary number in string format, convert it to base-16 format.\n  Examples:\n  binaryToBase16(\"111001\")   # returns \"111\"\n  binaryToBase16(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase16 = (binary) => {\n  let base16 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base16 = base16 + binary.charAt(i) + '';\n  }\n  return base16;\n};\n\n/*\n  Given a binary number in string format, convert it to base-2 format.\n  Examples:\n  binaryToBase2(\"111001\")   # returns \"111\"\n  binaryToBase2(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase2 = (binary) => {\n  let base2 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base2 = base2 + binary.charAt(i) + '';\n  }\n  return base2;\n};\n\n/*\n  Given a binary number in string format, convert it to base-16 format.\n  Examples:\n  binaryToBase16(\"111001\")   # returns \"111\"\n  binaryToBase16(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase16 = (binary) => {\n  let base16 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base16 = base16 + binary.charAt(i) + '';\n  }\n  return base16;\n};\n\n/*\n  Given a binary number in string format, convert it to base-2 format.\n  Examples:\n  binaryToBase2(\"111001\")   # returns \"111\"\n  binaryToBase2(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase2 = (binary) => {\n  let base2 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base2 = base2 + binary.charAt(i) + '';\n  }\n  return base2;\n};\n\n/*\n  Given a binary number in string format, convert it to base-16 format.\n  Examples:\n  binaryToBase16(\"111001\")   # returns \"111\"\n  binaryToBase16(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase16 = (binary) => {\n  let base16 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base16 = base16 + binary.charAt(i) + '';\n  }\n  return base16;\n};\n\n/*\n  Given a binary number in string format, convert it to base-2 format.\n  Examples:\n  binaryToBase2(\"111001\")   # returns \"111\"\n  binaryToBase2(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase2 = (binary) => {\n  let base2 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base2 = base2 + binary.charAt(i) + '';\n  }\n  return base2;\n};\n\n/*\n  Given a binary number in string format, convert it to base-16 format.\n  Examples:\n  binaryToBase16(\"111001\")   # returns \"111\"\n  binaryToBase16(\"101010\")   # returns \"1010\"\n*/\nconst binaryToBase16 = (binary) => {\n  let base16 = '';\n  for (let i = 0; i < binary.length; i++) {\n    base16 = base16 + binary.charAt(i) + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empyt product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For a givne list of integers, return a tuple conissting of a sum and a product of all the nietgers in a list.\n  Empty sum sohuld be equal to 0 adn empy", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are gievn a string s.\n  Your task is to check if the string is happy or not.\n  A strign is happy if its length is at least 3 and every 3 consecutive letters are idstnict\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are gievn a string s.\n  Your task is to check if the string is happy or not.\n  A strign is happy if its length is at least 3 and every 3 consecutive letters are idstnict\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false;\n    if (s[i]!== s[i + 2]) return false;\n  }\n  return true;\n};\n\n/*You are given a string s and an integer k.\n  Your task is to return the first k characters of s.\n  If the string does not contain enough characters to form the first k characters, return null.\n  For example:\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  s = \"hello\", k = 2\n  Return \"hel\"\n  s = \"hello\", k = 0\n  Return null\n  s = \"hello\", k = 3\n  Return \"hel\"\n  s = \"hello\", k = 1\n  Return \"h\"\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It is the lats week of the semester and the teacher ahs to give the grades\n  to stduents. The teachre has been making her own algorithm for grading.\n  The only problem is, seh has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can ouptut a list of letter grades using hte following talbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade * -1);\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesAvg = gradesSum / gradesArray.length;\n  const gradesDiff = gradesArray.reduce((diff, grade) => diff + Math.abs(grade - gradesAvg), 0);\n  const gradesDiffPercent = gradesDiff / gradesSum;\n  const gradesDiffPercentArray = gradesDiffPercent.map((grade) => grade * -1);\n  const gradesDiffPercentSum = gradesDiffPercentArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentAvg = gradesDiffPercentSum / gradesDiffPercentArray.length;\n  const gradesDiffPercentDiff = gradesDiffPercentArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentAvg), 0);\n  const gradesDiffPercentDiffArray = gradesDiffPercentDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffSum = gradesDiffPercentDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffAvg = gradesDiffPercentDiffSum / gradesDiffPercentDiffArray.length;\n  const gradesDiffPercentDiffDiff = gradesDiffPercentDiffArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentDiffAvg), 0);\n  const gradesDiffPercentDiffDiffArray = gradesDiffPercentDiffDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffDiffSum = gradesDiffPercentDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffDiffAvg = gradesDiffPercentDiffDiffSum / gradesDiffPercentDiffDiffArray.length;\n  const gradesDiffPercentDiffDiffDiff = gradesDiffPercentDiffDiffArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentDiffDiffAvg), 0);\n  const gradesDiffPercentDiffDiffDiffArray = gradesDiffPercentDiffDiffDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffDiffDiffSum = gradesDiffPercentDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffDiffDiffAvg = gradesDiffPercentDiffDiffDiffSum / gradesDiffPercentDiffDiffDiffArray.length;\n  const gradesDiffPercentDiffDiffDiffDiff = gradesDiffPercentDiffDiffDiffArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentDiffDiffDiffAvg), 0);\n  const gradesDiffPercentDiffDiffDiffDiffArray = gradesDiffPercentDiffDiffDiffDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffDiffDiffDiffSum = gradesDiffPercentDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffDiffDiffDiffAvg = gradesDiffPercentDiffDiffDiffDiffSum / gradesDiffPercentDiffDiffDiffDiffArray.length;\n  const gradesDiffPercentDiffDiffDiffDiffDiff = gradesDiffPercentDiffDiffDiffDiffArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentDiffDiffDiffDiffAvg), 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffArray = gradesDiffPercentDiffDiffDiffDiffDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffDiffDiffDiffDiffSum = gradesDiffPercentDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffAvg = gradesDiffPercentDiffDiffDiffDiffDiffSum / gradesDiffPercentDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiff = gradesDiffPercentDiffDiffDiffDiffDiffArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentDiffDiffDiffDiffDiffAvg), 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffArray = gradesDiffPercentDiffDiffDiffDiffDiffDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffSum = gradesDiffPercentDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffAvg = gradesDiffPercentDiffDiffDiffDiffDiffDiffSum / gradesDiffPercentDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiff = gradesDiffPercentDiffDiffDiffDiffDiffDiffArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentDiffDiffDiffDiffDiffDiffAvg), 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffPercentDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffAvg = gradesDiffPercentDiffDiffDiffDiffDiffDiffSum / gradesDiffPercentDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiff = gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffArray.reduce((diff, grade) => diff + Math.abs(grade - gradesDiffPercentDiffDiffDiffDiffDiffDiffAvg), 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffArray = gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffDiff.map((grade) => grade * -1);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffDiffSum = gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffDiffArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffDiffAvg = gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffDiffSum / gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffArray.length;\n  const gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffDiffDiff = gradesDiffPercentDiffDiffDiffDiffDiffDiffDiffDiffDiff", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Wrtie a functino taht takes a string and retunrs true if the string\n  length is a prime unmber or false ohterwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Wrtie a functino taht takes a string and retunrs true if the string\n  length is a prime unmber or false ohterwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string\n  Examples\n  countA('Hello') == 2\n  countA('kittens') == 1\n  countA('orange') == 0\n  */\nconst countA = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsEvenOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsEvenOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsEvenOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsOddOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsOddOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsEvenOddOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsEvenOddOdd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsOddEvenOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsOddEvenOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 0.\n  */\nconst startsZeroEndsEvenOddEvenOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i % 10 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers thta strat or end with 1.\n  */\nconst startsOneEndsEvenOddEvenOddEven = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive inetger N, return the total sum of ist digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive inetger N, return the total sum of ist digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    binary += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return binary;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst count = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigits = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinary = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > 0) {\n    N = Math.floor(N / 2);\n    count++;\n  }\n  return count;\n};\n\n/*Given a positive integer N, return the number of digits in binary representation of N.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer denoting the number of digits in binary representation of N.\n  */\nconst countDigitsInBinaryInReverseInReverseInReverseInReverseInReverseInReverseInReverse = (N) => {\n  let count = 0;\n  while (N > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6\n  */\nconst addOddEven = (lst) => {\n  let evenIndex = 0;\n  let oddIndex = 1;\n  let sum = 0;\n  while (evenIndex < lst.length && oddIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    } else {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all even elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 12\n  */\nconst sumEven = (lst) => {\n  let evenIndex = 0;\n  let sum = 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      sum += lst[evenIndex];\n      evenIndex++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all odd elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sumOdd = (lst) => {\n  let oddIndex = 1;\n  let sum = 0;\n  while (oddIndex < lst.length) {\n    if (lst[oddIndex] % 2!== 0) {\n      sum += lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all even elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst productEven = (lst) => {\n  let evenIndex = 0;\n  let product = 1;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 === 0) {\n      product *= lst[evenIndex];\n      evenIndex++;\n    }\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the product of all odd elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 36\n  */\nconst productOdd = (lst) => {\n  let oddIndex = 1;\n  let product = 1;\n  while (oddIndex < lst.length) {\n    if (lst[oddIndex] % 2!== 0) {\n      product *= lst[oddIndex];\n      oddIndex++;\n    }\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the maximum of all elements in the list.\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let maxIndex = 0;\n  let maxValue = lst[maxIndex];\n  while (maxIndex < lst.length) {\n    if (lst[maxIndex] > maxValue) {\n      maxValue = lst[maxIndex];\n      maxIndex = maxIndex + 1;\n    }\n    maxIndex++;\n  }\n  return maxValue;\n};\n\n/*Given a non-empty list of integers lst. find the minimum of all elements in the list.\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let minIndex = 0;\n  let minValue = lst[minIndex];\n  while (minIndex < lst.length) {\n    if (lst[minIndex] < minValue) {\n      minValue = lst[minIndex];\n      minIndex = minIndex + 1;\n    }\n    minIndex++;\n  }\n  return minValue;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 12\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 12\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 12\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 12\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 12\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. find the product of all elements in the list.\n\n\n  Examples:\n      product([4, 2, 6, 7]) ==> 24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*Given a non-empty list of integers lst. find the sum of all elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 12\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the charactesr arranged in\n  ascending odrer based on ascii value.\n  Note: You should keep the ordre of wrods and blank psaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered verison of it.\n  Ordered verison of string, is a string where all words (separated by space)\n  are replaced by a new word whree all the char", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dmiensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dmiensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowRes.push([i, j]);\n      }\n    }\n    res.push(rowRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 1), (3, 2), (4, 3)]\n  */\nconst getCol = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowRes.push([j, i]);\n      }\n    }\n    res.push(rowRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 2), (5, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowRes.push([j, i]);\n      }\n    }\n    res.push(rowRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 2), (5, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowRes.push([j, i]);\n      }\n    }\n    res.push(rowRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 2), (5, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowRes = [];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n        rowRes.push([j, i]);\n      }\n    }\n    res.push(rowRes);\n  }\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  whcih si similar to mtarix, however, unlike martices,\n  each row may otcnain a diffreent number of columns.\n  Given lst, and integer x, find integesr x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), tsatirng with 0.\n  Sort coordinatse initially by orws in asecnding ordre.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2), (3, 1), (4, 2), (5, 3)]\n  */\nconst getDiag = (lst, x) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative inteegrs, return a copy of the given array after sorting,\n  oyu will sort the givne array in ascendign oredr if the sum( first indxe value, last index value) is odd,\n  or sort it in descending order if the sum( frist index value, last index value) is eevn.\n\n  Ntoe:\n  * don't chnage the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a strnig as an argument and\n  reutrns a string encrypted with the alphabet being ortatde. \n  The alphabet should be rotated in a manner such that the letters \n  shift odwn by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a strnig as an argument and\n  reutrns a string encrypted with the alphabet being ortatde. \n  The alphabet should be rotated in a manner such that the letters \n  shift odwn by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = alphabet.split('')\n  let newAlphabet2 = newAlphabet.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet[newAlphabet.length - i - 1]\n    }\n  })\n  let newAlphabet3 = newAlphabet2.join('')\n  let newAlphabet4 = newAlphabet3.split('')\n  let newAlphabet5 = newAlphabet4.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet2[newAlphabet2.length - i - 1]\n    }\n  })\n  let newAlphabet6 = newAlphabet5.join('')\n  let newAlphabet7 = newAlphabet6.split('')\n  let newAlphabet8 = newAlphabet7.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet7[newAlphabet7.length - i - 1]\n    }\n  })\n  let newAlphabet9 = newAlphabet8.join('')\n  let newAlphabet10 = newAlphabet9.split('')\n  let newAlphabet11 = newAlphabet10.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet10[newAlphabet10.length - i - 1]\n    }\n  })\n  let newAlphabet12 = newAlphabet11.join('')\n  let newAlphabet13 = newAlphabet12.split('')\n  let newAlphabet14 = newAlphabet13.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet13[newAlphabet13.length - i - 1]\n    }\n  })\n  let newAlphabet15 = newAlphabet14.join('')\n  let newAlphabet16 = newAlphabet15.split('')\n  let newAlphabet17 = newAlphabet16.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet16[newAlphabet16.length - i - 1]\n    }\n  })\n  let newAlphabet18 = newAlphabet17.join('')\n  let newAlphabet19 = newAlphabet18.split('')\n  let newAlphabet20 = newAlphabet19.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet19[newAlphabet19.length - i - 1]\n    }\n  })\n  let newAlphabet21 = newAlphabet20.join('')\n  let newAlphabet22 = newAlphabet21.split('')\n  let newAlphabet23 = newAlphabet22.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet22[newAlphabet22.length - i - 1]\n    }\n  })\n  let newAlphabet24 = newAlphabet23.join('')\n  let newAlphabet25 = newAlphabet24.split('')\n  let newAlphabet26 = newAlphabet25.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet25[newAlphabet25.length - i - 1]\n    }\n  })\n  let newAlphabet27 = newAlphabet26.join('')\n  let newAlphabet28 = newAlphabet27.split('')\n  let newAlphabet29 = newAlphabet28.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet28[newAlphabet28.length - i - 1]\n    }\n  })\n  let newAlphabet30 = newAlphabet29.join('')\n  let newAlphabet31 = newAlphabet30.split('')\n  let newAlphabet32 = newAlphabet31.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet31[newAlphabet31.length - i - 1]\n    }\n  })\n  let newAlphabet33 = newAlphabet32.join('')\n  let newAlphabet34 = newAlphabet33.split('')\n  let newAlphabet35 = newAlphabet34.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet34[newAlphabet34.length - i - 1]\n    }\n  })\n  let newAlphabet36 = newAlphabet35.join('')\n  let newAlphabet37 = newAlphabet36.split('')\n  let newAlphabet38 = newAlphabet37.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet37[newAlphabet37.length - i - 1]\n    }\n  })\n  let newAlphabet39 = newAlphabet38.join('')\n  let newAlphabet40 = newAlphabet39.split('')\n  let newAlphabet41 = newAlphabet40.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet40[newAlphabet40.length - i - 1]\n    }\n  })\n  let newAlphabet42 = newAlphabet41.join('')\n  let newAlphabet43 = newAlphabet42.split('')\n  let newAlphabet44 = newAlphabet43.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet43[newAlphabet43.length - i - 1]\n    }\n  })\n  let newAlphabet45 = newAlphabet44.join('')\n  let newAlphabet46 = newAlphabet45.split('')\n  let newAlphabet47 = newAlphabet46.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet46[newAlphabet46.length - i - 1]\n    }\n  })\n  let newAlphabet48 = newAlphabet47.join('')\n  let newAlphabet49 = newAlphabet48.split('')\n  let newAlphabet50 = newAlphabet49.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet49[newAlphabet49.length - i - 1]\n    }\n  })\n  let newAlphabet51 = newAlphabet50.join('')\n  let newAlphabet52 = newAlphabet51.split('')\n  let newAlphabet53 = newAlphabet52.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet52[newAlphabet52.length - i - 1]\n    }\n  })\n  let newAlphabet54 = newAlphabet53.join('')\n  let newAlphabet55 = newAlphabet54.split('')\n  let newAlphabet56 = newAlphabet55.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet55[newAlphabet55.length - i - 1]\n    }\n  })\n  let newAlphabet57 = newAlphabet56.join('')\n  let newAlphabet58 = newAlphabet57.split('')\n  let newAlphabet59 = newAlphabet58.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet58[newAlphabet58.length - i - 1]\n    }\n  })\n  let newAlphabet60 = newAlphabet59.join('')\n  let newAlphabet61 = newAlphabet60.split('')\n  let newAlphabet62 = newAlphabet61.map((letter, i) => {\n    if (i % 2 === 0) {\n      return letter\n    } else {\n      return newAlphabet61[newAlphabet61.length - i - 1]\n    }\n  })\n  let newAlphabet63 = newAlphab", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, geenrate a list of rolling maximum elemnet found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, geenrate a list of rolling maximum elemnet found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling minimum elemnet found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling sum elemnet found until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 6]\n  */\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling average elemnet found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling variance elemnet found until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.25]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length - Math.pow(sum / numbers.length, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling standard deviation elemnet found until given moment\n  in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.5811388300841898]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length - Math.pow(sum / numbers.length, 2)));\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling median elemnet found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling mode elemnet found until given moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling variance elemnet found until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.25]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length - Math.pow(sum / numbers.length, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling standard deviation elemnet found until given moment\n  in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.5811388300841898]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length - Math.pow(sum / numbers.length, 2)));\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling median elemnet found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling mode elemnet found until given moment\n  in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  const result = [];\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling variance elemnet found until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.25]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length - Math.pow(sum / numbers.length, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, geenrate a list of rolling standard deviation elemnet found until given moment\n  in the sequence.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.5811388300841898]\n  */\nconst rollingStdDev = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.sqrt(sum / numbers.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Wriet a function nextSmallest() that returns the 2nd smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Wriet a function nextSmallest() that returns the 2nd smallest leement of the list.\n  Return null if tehre is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length <= 1) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function max() that returns the max value of the list.\n  Return null if tehre is no such element.\n  \n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([]) == null\n  max([1, 1]) == null\n  */\nconst max = (lst) => {\n  if (lst.length <= 1) return null\n  return Math.max(...lst)\n}\n\n/*\n  You are given a list of integers. Write a function min() that returns the min value of the list.\n  Return null if tehre is no such element.\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([]) == null\n  min([1, 1]) == null\n  */\nconst min = (lst) => {\n  if (lst.length <= 1) return null\n  return Math.min(...lst)\n}\n\n/*\n  You are given a list of integers. Write a function sum() that returns the sum of all elements in the list.\n  Return null if tehre is no such element.\n  \n  sum([1, 2, 3, 4, 5]) == 15\n  sum([5, 1, 4, 3, 2]) == 15\n  sum([]) == null\n  sum([1, 1]) == null\n  */\nconst sum = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => acc + val, 0)\n}\n\n/*\n  You are given a list of integers. Write a function average() that returns the average of all elements in the list.\n  Return null if tehre is no such element.\n  \n  average([1, 2, 3, 4, 5]) == 2.5\n  average([5, 1, 4, 3, 2]) == 2.5\n  average([]) == null\n  average([1, 1]) == null\n  */\nconst average = (lst) => {\n  if (lst.length <= 1) return null\n  return sum(lst) / lst.length\n}\n\n/*\n  You are given a list of integers. Write a function median() that returns the median of all elements in the list.\n  Return null if tehre is no such element.\n  \n  median([1, 2, 3, 4, 5]) == 3\n  median([5, 1, 4, 3, 2]) == 3\n  median([]) == null\n  median([1, 1]) == null\n  */\nconst median = (lst) => {\n  if (lst.length <= 1) return null\n  const sortedList = lst.sort((a, b) => a - b)\n  const middle = Math.floor(lst.length / 2)\n  return sortedList[middle]\n}\n\n/*\n  You are given a list of integers. Write a function mode() that returns the mode of all elements in the list.\n  Return null if tehre is no such element.\n  \n  mode([1, 2, 3, 4, 5]) == [3, 5]\n  mode([5, 1, 4, 3, 2]) == [3, 2]\n  mode([]) == null\n  mode([1, 1]) == null\n  */\nconst mode = (lst) => {\n  if (lst.length <= 1) return null\n  const modeMap = {}\n  const modes = []\n  for (let i = 0; i < lst.length; i++) {\n    const value = lst[i]\n    if (modeMap[value]) {\n      modeMap[value].push(i)\n    } else {\n      modeMap[value] = [i]\n    }\n  }\n  for (let key in modeMap) {\n    const value = modeMap[key]\n    modes.push(value)\n  }\n  return modes\n}\n\n/*\n  You are given a list of integers. Write a function mode() that returns the mode of all elements in the list.\n  Return null if tehre is no such element.\n  \n  mode([1, 2, 3, 4, 5]) == [3, 5]\n  mode([5, 1, 4, 3, 2]) == [3, 2]\n  mode([]) == null\n  mode([1, 1]) == null\n  */\nconst mode = (lst) => {\n  if (lst.length <= 1) return null\n  const modeMap = {}\n  const modes = []\n  for (let i = 0; i < lst.length; i++) {\n    const value = lst[i]\n    if (modeMap[value]) {\n      modeMap[value].push(i)\n    } else {\n      modeMap[value] = [i]\n    }\n  }\n  for (let key in modeMap) {\n    const value = modeMap[key]\n    modes.push(value)\n  }\n  return modes\n}\n\n/*\n  You are given a list of integers. Write a function mode() that returns the mode of all elements in the list.\n  Return null if tehre is no such element.\n  \n  mode([1, 2, 3, 4, 5]) == [3, 5]\n  mode([5, 1, 4, 3, 2]) == [3, 2]\n  mode([]) == null\n  mode([1, 1]) == null\n  */\nconst mode = (lst) => {\n  if (lst.length <= 1) return null\n  const modeMap = {}\n  const modes = []\n  for (let i = 0; i < lst.length; i++) {\n    const value = lst[i]\n    if (modeMap[value]) {\n      modeMap[value].push(i)\n    } else {\n      modeMap[value] = [i]\n    }\n  }\n  for (let key in modeMap) {\n    const value = modeMap[key]\n    modes.push(value)\n  }\n  return modes\n}\n\n/*\n  You are given a list of integers. Write a function mode() that returns the mode of all elements in the list.\n  Return null if tehre is no such element.\n  \n  mode([1, 2, 3, 4, 5]) == [3, 5]\n  mode([5, 1, 4, 3, 2]) == [3, 2]\n  mode([]) == null\n  mode([1, 1]) == null\n  */\nconst mode = (lst) => {\n  if (lst.length <= 1) return null\n  const modeMap = {}\n  const modes = []\n  for (let i = 0; i < lst.length; i++) {\n    const value = lst[i]\n    if (modeMap[value]) {\n      modeMap[value].push(i)\n    } else {\n      modeMap[value] = [i]\n    }\n  }\n  for (let key in modeMap) {\n    const value = modeMap[key]\n    modes.push(value)\n  }\n  return modes\n}\n\n/*\n  You are given a list of integers. Write a function mode() that returns the mode of all elements in the list.\n  Return null if tehre is no such element.\n  \n  mode([1, 2, 3, 4, 5]) == [3, 5]\n  mode([5, 1, 4, 3, 2]) == [3, 2]\n  mode([]) == null\n  mode([1, 1]) == null\n  */\nconst mode = (lst) => {\n  if (lst.length <= 1) return null\n  const modeMap = {}\n  const modes = []\n  for (let i = 0; i < lst.length; i++) {\n    const value = lst[i]\n    if (modeMap[value]) {\n      modeMap[value].push(i)\n    } else {\n      modeMap[value] = [i]\n    }\n  }\n  for (let key in modeMap) {\n    const value = modeMap[key]\n    modes.push(value)\n  }\n  return modes\n}\n\n/*\n  You are given a list of integers. Write a function mode() that returns the mode of all elements in the list.\n  Return null if tehre is no such element.\n  \n  mode([1, 2, 3, 4, 5]) == [3, 5]\n  mode([5, 1, 4, 3, 2]) == [3, 2]\n  mode([]) == null\n  mode([1, 1]) == null\n  */\nconst mode = (lst) => {\n  if (lst.length <= 1) return null\n  const modeMap = {}\n  const modes = []\n  for (let i = 0; i < lst.length; i++) {\n    const value = lst[i]\n    if (modeMap[value]) {\n      modeMap[value].push(i)\n    } else {\n      modeMap[value] = [i]\n    }\n  }\n  for (let key in modeMap) {\n    const value = modeMap[key]\n    modes.push(value)\n  }\n  return modes\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be given a srting of wodrs, and your task is to ocunt hte number\n  of boredoms. A boredom is a setnence that satrts wiht the wrod \"I\".\n  Sentneces are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* rCeate a function that takes 3 numbers.\n  Returns true if one of hte numebrs si equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) return true\n  if (x === y || x === z) return false\n  if (y === z) return true\n  if (y!== z) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x === 0 || y === 0 || ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that ateks a message, and encodes in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that ateks a message, and encodes in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n  Assume olny letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  \n  return newMessage;\n}\n\n/*\n  Write a function that decodes a message encoded in such a \n  awy that it swaps case of all lettser, rpelaces all vowels in \n  the message with the letter that appaers 2 places ahead of that \n  vowel in the english alphabet. \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Yuo need to find teh largest prime value and return the usm of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  Yuo need to find teh largest prime value and return the usm of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largestPrime = 0;\n  let largestPrimeDigit = 0;\n  let largestPrimeDigitCount = 0;\n  let largestPrimeDigitCount2 = 0;\n  let largestPrimeDigitCount3 = 0;\n  let largestPrimeDigitCount4 = 0;\n  let largestPrimeDigitCount5 = 0;\n  let largestPrimeDigitCount6 = 0;\n  let largestPrimeDigitCount7 = 0;\n  let largestPrimeDigitCount8 = 0;\n  let largestPrimeDigitCount9 = 0;\n  let largestPrimeDigitCount10 = 0;\n  let largestPrimeDigitCount11 = 0;\n  let largestPrimeDigitCount12 = 0;\n  let largestPrimeDigitCount13 = 0;\n  let largestPrimeDigitCount14 = 0;\n  let largestPrimeDigitCount15 = 0;\n  let largestPrimeDigitCount16 = 0;\n  let largestPrimeDigitCount17 = 0;\n  let largestPrimeDigitCount18 = 0;\n  let largestPrimeDigitCount19 = 0;\n  let largestPrimeDigitCount20 = 0;\n  let largestPrimeDigitCount21 = 0;\n  let largestPrimeDigitCount22 = 0;\n  let largestPrimeDigitCount23 = 0;\n  let largestPrimeDigitCount24 = 0;\n  let largestPrimeDigitCount25 = 0;\n  let largestPrimeDigitCount26 = 0;\n  let largestPrimeDigitCount27 = 0;\n  let largestPrimeDigitCount28 = 0;\n  let largestPrimeDigitCount29 = 0;\n  let largestPrimeDigitCount30 = 0;\n  let largestPrimeDigitCount31 = 0;\n  let largestPrimeDigitCount32 = 0;\n  let largestPrimeDigitCount33 = 0;\n  let largestPrimeDigitCount34 = 0;\n  let largestPrimeDigitCount35 = 0;\n  let largestPrimeDigitCount36 = 0;\n  let largestPrimeDigitCount37 = 0;\n  let largestPrimeDigitCount38 = 0;\n  let largestPrimeDigitCount39 = 0;\n  let largestPrimeDigitCount40 = 0;\n  let largestPrimeDigitCount41 = 0;\n  let largestPrimeDigitCount42 = 0;\n  let largestPrimeDigitCount43 = 0;\n  let largestPrimeDigitCount44 = 0;\n  let largestPrimeDigitCount45 = 0;\n  let largestPrimeDigitCount46 = 0;\n  let largestPrimeDigitCount47 = 0;\n  let largestPrimeDigitCount48 = 0;\n  let largestPrimeDigitCount49 = 0;\n  let largestPrimeDigitCount50 = 0;\n  let largestPrimeDigitCount51 = 0;\n  let largestPrimeDigitCount52 = 0;\n  let largestPrimeDigitCount53 = 0;\n  let largestPrimeDigitCount54 = 0;\n  let largestPrimeDigitCount55 = 0;\n  let largestPrimeDigitCount56 = 0;\n  let largestPrimeDigitCount57 = 0;\n  let largestPrimeDigitCount58 = 0;\n  let largestPrimeDigitCount59 = 0;\n  let largestPrimeDigitCount60 = 0;\n  let largestPrimeDigitCount61 = 0;\n  let largestPrimeDigitCount62 = 0;\n  let largestPrimeDigitCount63 = 0;\n  let largestPrimeDigitCount64 = 0;\n  let largestPrimeDigitCount65 = 0;\n  let largestPrimeDigitCount66 = 0;\n  let largestPrimeDigitCount67 = 0;\n  let largestPrimeDigitCount68 = 0;\n  let largestPrimeDigitCount69 = 0;\n  let largestPrimeDigitCount70 = 0;\n  let largestPrimeDigitCount71 = 0;\n  let largestPrimeDigitCount72 = 0;\n  let largestPrimeDigitCount73 = 0;\n  let largestPrimeDigitCount74 = 0;\n  let largestPrimeDigitCount75 = 0;\n  let largestPrimeDigitCount76 = 0;\n  let largestPrimeDigitCount77 = 0;\n  let largestPrimeDigitCount78 = 0;\n  let largestPrimeDigitCount79 = 0;\n  let largestPrimeDigitCount80 = 0;\n  let largestPrimeDigitCount81 = 0;\n  let largestPrimeDigitCount82 = 0;\n  let largestPrimeDigitCount83 = 0;\n  let largestPrimeDigitCount84 = 0;\n  let largestPrimeDigitCount85 = 0;\n  let largestPrimeDigitCount86 = 0;\n  let largestPrimeDigitCount87 = 0;\n  let largestPrimeDigitCount88 = 0;\n  let largestPrimeDigitCount89 = 0;\n  let largestPrimeDigitCount90 = 0;\n  let largestPrimeDigitCount91 = 0;\n  let largestPrimeDigitCount92 = 0;\n  let largestPrimeDigitCount93 = 0;\n  let largestPrimeDigitCount94 = 0;\n  let largestPrimeDigitCount95 = 0;\n  let largestPrimeDigitCount96 = 0;\n  let largestPrimeDigitCount97 = 0;\n  let largestPrimeDigitCount98 = 0;\n  let largestPrimeDigitCount99 = 0;\n  let largestPrimeDigitCount100 = 0;\n  let largestPrimeDigitCount101 = 0;\n  let largestPrimeDigitCount102 = 0;\n  let largestPrimeDigitCount103 = 0;\n  let largestPrimeDigitCount104 = 0;\n  let largestPrimeDigitCount105 = 0;\n  let largestPrimeDigitCount106 = 0;\n  let largestPrimeDigitCount107 = 0;\n  let largestPrimeDigitCount108 = 0;\n  let largestPrimeDigitCount109 = 0;\n  let largestPrimeDigitCount110 = 0;\n  let largestPrimeDigitCount111 = 0;\n  let largestPrimeDigitCount112 = 0;\n  let largestPrimeDigitCount113 = 0;\n  let largestPrimeDigitCount114 = 0;\n  let largestPrimeDigitCount115 = 0;\n  let largestPrimeDigitCount116 = 0;\n  let largestPrimeDigitCount117 = 0;\n  let largestPrimeDigitCount118 = 0;\n  let largestPrimeDigitCount119 = 0;\n  let largestPrimeDigitCount120 = 0;\n  let largestPrimeDigitCount121 = 0;\n  let largestPrimeDigitCount122 = 0;\n  let largestPrimeDigitCount123 = 0;\n  let largestPrimeDigitCount124 = 0;\n  let largestPrimeDigitCount125 = 0;\n  let largestPrimeDigitCount126 = 0;\n  let largestPrimeDigitCount127 = 0;\n  let largestPrimeDigitCount128 = 0;\n  let largestPrimeDigitCount129 = 0;\n  let largestPrimeDigitCount130 = 0;\n  let largestPrimeDigitCount131 = 0;\n  let largestPrimeDigitCount132 = 0;\n  let largestPrimeDigitCount133 = 0;\n  let largestPrimeDigitCount134 = 0;\n  let largestPrime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] ==='string'){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] ==='string'){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] ==='string'){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] ==='string'){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] ==='string'){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] ==='string'){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof keys[i] ==='string'){\n      return true;\n    }\n  }\n  return false;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strigns in upper csae, else return false.\n  The function shoudl return fales is the given dictionary is empty.\n  Examples:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n) => {\n  let arr = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n) => {\n  let arr = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n) => {\n  let arr = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an onn-negatvie integre and retruns an array of the first n\n  integers that rae prime numbers adn divisible by n.\n  for example:\n  countDivisibleBy(5) => [2,3]\n  countDivisibleBy(11) => [2,3,5,7]\n  countDivisibleBy(0) => []\n  countDivisibleBy(20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(1) => []\n  countDivisibleBy(18) => [2,3,5,7,11,13,17", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that atkes two integers and reutrns \n  the prodcut of their unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that atkes two integers and reutrns \n  the prodcut of their unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a * b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the sum of the unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  sum(148, 412) should return 16.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a + b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the product of the unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  product(148, 412) should return 16.\n  product(19, 28) should return 72.\n  product(2020, 1851) should return 0.\n  product(14,-15) should return 20.\n  */\nconst product = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a * b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the sum of the two unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  sumUnitDigits(148, 412) should return 16.\n  sumUnitDigits(19, 28) should return 72.\n  sumUnitDigits(2020, 1851) should return 0.\n  sumUnitDigits(14,-15) should return 20.\n  */\nconst sumUnitDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a + b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the product of the two unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  productUnitDigits(148, 412) should return 16.\n  productUnitDigits(19, 28) should return 72.\n  productUnitDigits(2020, 1851) should return 0.\n  productUnitDigits(14,-15) should return 20.\n  */\nconst productUnitDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a * b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the sum of the two digit numbers.\n  Assume the inupt is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16.\n  sumDigits(19, 28) should return 72.\n  sumDigits(2020, 1851) should return 0.\n  sumDigits(14,-15) should return 20.\n  */\nconst sumDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a + b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the product of the two digit numbers.\n  Assume the inupt is always valid.\n  Examples:\n  productDigits(148, 412) should return 16.\n  productDigits(19, 28) should return 72.\n  productDigits(2020, 1851) should return 0.\n  productDigits(14,-15) should return 20.\n  */\nconst productDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a * b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the sum of the two digit numbers of the unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  sumUnitDigits(148, 412) should return 16.\n  sumUnitDigits(19, 28) should return 72.\n  sumUnitDigits(2020, 1851) should return 0.\n  sumUnitDigits(14,-15) should return 20.\n  */\nconst sumUnitDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a + b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the product of the two digit numbers of the unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  productUnitDigits(148, 412) should return 16.\n  productUnitDigits(19, 28) should return 72.\n  productUnitDigits(2020, 1851) should return 0.\n  productUnitDigits(14,-15) should return 20.\n  */\nconst productUnitDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a * b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the sum of the two digit numbers of the two unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  sumUnitDigits(148, 412) should return 16.\n  sumUnitDigits(19, 28) should return 72.\n  sumUnitDigits(2020, 1851) should return 0.\n  sumUnitDigits(14,-15) should return 20.\n  */\nconst sumUnitDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a + b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the product of the two digit numbers of the two unit digits.\n  Assume the inupt is always valid.\n  Examples:\n  productUnitDigits(148, 412) should return 16.\n  productUnitDigits(19, 28) should return 72.\n  productUnitDigits(2020, 1851) should return 0.\n  productUnitDigits(14,-15) should return 20.\n  */\nconst productUnitDigits = (a, b) => {\n  if (a > 0 && b > 0) {\n    let c = a * b;\n    let d = c % 10;\n    let e = c / 10;\n    return e * 10 + d;\n  }\n  return 0;\n};\n\n/*Complete the function that atkes two integers and reutrns \n  the sum of the two digit numbers of the two digit numbers.\n  Assume the inupt is always valid.\n  Examples:\n  sumDigits(148, 412) should return 16.\n  sumDigits(19, 28) should return 72.\n  sumDigits(2020, 185", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a tsring s, coutn the number of uppercase vowels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a tsring s, coutn the number of uppercase vowels in veen indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of lowercase vowels in veen indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of vowels in veen indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a tsring s, coutn the number of consonants in veen indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a funciton that takes a value (string) representing a numbre\n  and returns the lcosest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a funciton that takes a value (string) representing a numbre\n  and returns the lcosest integer to it. If the unmber is euiqdsitant\n  from two integres, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [num1, num2] = value.split('.');\n  const [num1Int, num2Int] = [parseInt(num1), parseInt(num2)];\n  const [num1Abs, num2Abs] = Math.abs(num1Int), Math.abs(num2Int);\n  const [num1AbsMinus1, num2AbsMinus1] = [num1Abs - 1, num2Abs - 1];\n  const [num1AbsMinus2, num2AbsMinus2] = [num1Abs - 2, num2Abs - 2];\n  const [num1AbsMinus3, num2AbsMinus3] = [num1Abs - 3, num2Abs - 3];\n  const [num1AbsMinus4, num2AbsMinus4] = [num1Abs - 4, num2Abs - 4];\n  const [num1AbsMinus5, num2AbsMinus5] = [num1Abs - 5, num2Abs - 5];\n  const [num1AbsMinus6, num2AbsMinus6] = [num1Abs - 6, num2Abs - 6];\n  const [num1AbsMinus7, num2AbsMinus7] = [num1Abs - 7, num2Abs - 7];\n  const [num1AbsMinus8, num2AbsMinus8] = [num1Abs - 8, num2Abs - 8];\n  const [num1AbsMinus9, num2AbsMinus9] = [num1Abs - 9, num2Abs - 9];\n  const [num1AbsMinus10, num2AbsMinus10] = [num1Abs - 10, num2Abs - 10];\n  const [num1AbsMinus11, num2AbsMinus11] = [num1Abs - 11, num2Abs - 11];\n  const [num1AbsMinus12, num2AbsMinus12] = [num1Abs - 12, num2Abs - 12];\n  const [num1AbsMinus13, num2AbsMinus13] = [num1Abs - 13, num2Abs - 13];\n  const [num1AbsMinus14, num2AbsMinus14] = [num1Abs - 14, num2Abs - 14];\n  const [num1AbsMinus15, num2AbsMinus15] = [num1Abs - 15, num2Abs - 15];\n  const [num1AbsMinus16, num2AbsMinus16] = [num1Abs - 16, num2Abs - 16];\n  const [num1AbsMinus17, num2AbsMinus17] = [num1Abs - 17, num2Abs - 17];\n  const [num1AbsMinus18, num2AbsMinus18] = [num1Abs - 18, num2Abs - 18];\n  const [num1AbsMinus19, num2AbsMinus19] = [num1Abs - 19, num2Abs - 19];\n  const [num1AbsMinus20, num2AbsMinus20] = [num1Abs - 20, num2Abs - 20];\n  const [num1AbsMinus21, num2AbsMinus21] = [num1Abs - 21, num2Abs - 21];\n  const [num1AbsMinus22, num2AbsMinus22] = [num1Abs - 22, num2Abs - 22];\n  const [num1AbsMinus23, num2AbsMinus23] = [num1Abs - 23, num2Abs - 23];\n  const [num1AbsMinus24, num2AbsMinus24] = [num1Abs - 24, num2Abs - 24];\n  const [num1AbsMinus25, num2AbsMinus25] = [num1Abs - 25, num2Abs - 25];\n  const [num1AbsMinus26, num2AbsMinus26] = [num1Abs - 26, num2Abs - 26];\n  const [num1AbsMinus27, num2AbsMinus27] = [num1Abs - 27, num2Abs - 27];\n  const [num1AbsMinus28, num2AbsMinus28] = [num1Abs - 28, num2Abs - 28];\n  const [num1AbsMinus29, num2AbsMinus29] = [num1Abs - 29, num2Abs - 29];\n  const [num1AbsMinus30, num2AbsMinus30] = [num1Abs - 30, num2Abs - 30];\n  const [num1AbsMinus31, num2AbsMinus31] = [num1Abs - 31, num2Abs - 31];\n  const [num1AbsMinus32, num2AbsMinus32] = [num1Abs - 32, num2Abs - 32];\n  const [num1AbsMinus33, num2AbsMinus33] = [num1Abs - 33, num2Abs - 33];\n  const [num1AbsMinus34, num2AbsMinus34] = [num1Abs - 34, num2Abs - 34];\n  const [num1AbsMinus35, num2AbsMinus35] = [num1Abs - 35, num2Abs - 35];\n  const [num1AbsMinus36, num2AbsMinus36] = [num1Abs - 36, num2Abs - 36];\n  const [num1AbsMinus37, num2AbsMinus37] = [num1Abs - 37, num2Abs - 37];\n  const [num1AbsMinus38, num2AbsMinus38] = [num1Abs - 38, num2Abs - 38];\n  const [num1AbsMinus39, num2AbsMinus39] = [num1Abs - 39, num2Abs - 39];\n  const [num1AbsMinus40, num2AbsMinus40] = [num1Abs - 40, num2Abs - 40];\n  const [num1AbsMinus41, num2AbsMinus41] = [num1Abs - 41, num2Abs - 41];\n  const [num1AbsMinus42, num2AbsMinus42] = [num1Abs - 42, num2Abs - 42];\n  const [num1AbsMinus43, num2AbsMinus43] = [num1Abs - 43, num2Abs - 43];\n  const [num1AbsMinus44, num2AbsMinus44] = [num1Abs - 44, num2Abs - 44];\n  const [num1AbsMinus45, num2AbsMinus45] = [num1Abs - 45, num2Abs - 45];\n  const [num1AbsMinus46, num2AbsMinus46] = [num1Abs - 46, num2Abs - 46];\n  const [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
