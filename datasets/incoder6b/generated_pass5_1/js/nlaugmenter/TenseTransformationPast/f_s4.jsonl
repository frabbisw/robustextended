{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let groups = [];\n  let open_brace_count = 0;\n  let close_brace_count = 0;\n  let current_group = [];\n  let current_group_length = 0;\n  let current_group_open_brace_count = 0;\n  let current_group_close_brace_count = 0;\n  let current_group_open_brace_length = 0;\n  let current_group_close_brace_length = 0;\n  let current_group_open_brace_char = '';\n  let current_group_close_brace_char = '';\n  let current_group_open_brace_char_index = 0;\n  let current_group_close_brace_char_index = 0;\n  let current_group_open_brace_char_length = 0;\n  let current_group_close_brace_char_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length = 0;\n  let current_group_open_brace_char_content = '';\n  let current_group_close_brace_char_content = '';\n  let current_group_open_brace_char_content_index = 0;\n  let current_group_close_brace_char_content_index = 0;\n  let current_group_open_brace_char_content_length = 0;\n  let current_group_close_brace_char_content_length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n   let longestPalindrome = string\n   let longestPalindromeLength = string.length\n   let longestPalindromeIndex = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string.length\n   let longestPalindromeReverse = string\n   let longestPalindromeReverseLength = string.length\n   let longestPalindromeReverseIndex = string", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(',').map(word => word.trim());\n};\n\n/*\n  You were given an array of numbers. Your task was to return the sum of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 6\n  numberArray([1,4,5,7,8]) == 15\n  numberArray([1,2,3,4,5]) == 15\n  numberArray([1,4,5,7,8,9,10]) == 15\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 30\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 60\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*\n  You were given an array of numbers. Your task was to return the average of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 1.5\n  numberArray([1,4,5,7,8]) == 4\n  numberArray([1,2,3,4,5]) == 4\n  numberArray([1,4,5,7,8,9,10]) == 4\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 4.5\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 10\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc + cur, 0) / arr.length;\n};\n\n/*\n  You were given an array of numbers. Your task was to return the largest number in the array. \n  \n  For example:\n  numberArray([1,2,3]) == 3\n  numberArray([1,4,5,7,8]) == 8\n  numberArray([1,2,3,4,5]) == 5\n  numberArray([1,4,5,7,8,9,10]) == 10\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 10\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 20\n  */\nconst numberArray = (arr) => {\n  return Math.max(...arr);\n};\n\n/*\n  You were given an array of numbers. Your task was to return the smallest number in the array. \n  \n  For example:\n  numberArray([1,2,3]) == 1\n  numberArray([1,4,5,7,8]) == 4\n  numberArray([1,2,3,4,5]) == 5\n  numberArray([1,4,5,7,8,9,10]) == 10\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 10\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 10\n  */\nconst numberArray = (arr) => {\n  return Math.min(...arr);\n};\n\n/*\n  You were given an array of numbers. Your task was to return the sum of the squares of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 9\n  numberArray([1,4,5,7,8]) == 49\n  numberArray([1,2,3,4,5]) == 55\n  numberArray([1,4,5,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 200\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc + cur * cur, 0);\n};\n\n/*\n  You were given an array of numbers. Your task was to return the sum of the squares of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 9\n  numberArray([1,4,5,7,8]) == 49\n  numberArray([1,2,3,4,5]) == 55\n  numberArray([1,4,5,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 200\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc + cur * cur, 0) / arr.length;\n};\n\n/*\n  You were given an array of numbers. Your task was to return the product of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 6\n  numberArray([1,4,5,7,8]) == 120\n  numberArray([1,2,3,4,5]) == 120\n  numberArray([1,4,5,7,8,9,10]) == 120\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 720\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 720\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc * cur, 1);\n};\n\n/*\n  You were given an array of numbers. Your task was to return the product of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 6\n  numberArray([1,4,5,7,8]) == 120\n  numberArray([1,2,3,4,5]) == 120\n  numberArray([1,4,5,7,8,9,10]) == 120\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 720\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 720\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc * cur, 1) / arr.length;\n};\n\n/*\n  You were given an array of numbers. Your task was to return the sum of the squares of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 9\n  numberArray([1,4,5,7,8]) == 49\n  numberArray([1,2,3,4,5]) == 55\n  numberArray([1,4,5,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 200\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc + cur * cur, 0);\n};\n\n/*\n  You were given an array of numbers. Your task was to return the sum of the squares of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 9\n  numberArray([1,4,5,7,8]) == 49\n  numberArray([1,2,3,4,5]) == 55\n  numberArray([1,4,5,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10]) == 100\n  numberArray([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 200\n  */\nconst numberArray = (arr) => {\n  return arr.reduce((acc, cur) => acc + cur * cur, 0) / arr.length;\n};\n\n/*\n  You were given an array of numbers. Your task was to return the sum of the squares of the numbers. \n  \n  For example:\n  numberArray([1,2,3]) == 9\n  numberArray([1,4,5,7,8]) == 49\n  numberArray([1,2,3,4,5]) == 55\n  number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest odd integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return 1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  if (x < y) {\n    return chooseNum(x, y - 2);\n  }\n};\n\n/*This function took two positive numbers x and y and returned the \n   biggest integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = Math.floor((n + m) / 2);\n  const binary = bin(avg);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => -1\n  sumOfPositives(-2147483648) => \"0b10010\"\n  */\nconst sumOfPositives = n => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  const binary = bin(sum);\n  if (binary.length === 1) {\n    return -1;\n  }\n  return binary;\n};\n\n/*Write a function that takes a positive integer n and returns the sum of all \n   the positive integers from 1 to n. \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than 2147483647, return-1.\n  Example:\n  sumOfPositives(10) => \"0b1010\"\n  sumOfPositives(2147483647) => ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOdd = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOdd = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any odd digit and even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEven = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddEven = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        if (item % 2 === 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any odd digit and even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEvenOdd = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddOdd = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2 === 0) {\n            result.push(item);\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any odd digit and even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEvenEvenOdd = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2 === 0) {\n            if (item % 2!== 0) {\n              result.push(item);\n            }\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsEvenOddEvenOdd = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2!== 0) {\n            if (item % 2 === 0) {\n              if (item % 2!== 0) {\n                result.push(item);\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any odd digit and even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigitsOddEvenEvenOdd = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          if (item % 2!== 0) {\n            if (item % 2 === 0) {\n              if (item % 2!== 0) {\n                if (item % 2!== 0) {\n                  result.push(item);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit and odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 14", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = arr.sort((a, b) => b - a);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let num = reversedArr[i];\n    let name = \" One\";\n    if (num === 1) {\n      name = \" One\";\n    } else if (num === 2) {\n      name = \" Two\";\n    } else if (num === 3) {\n      name = \" Three\";\n    } else if (num === 4) {\n      name = \" Four\";\n    } else if (num === 5) {\n      name = \" Five\";\n    } else if (num === 6) {\n      name = \" Six\";\n    } else if (num === 7) {\n      name = \" Seven\";\n    } else if (num === 8) {\n      name = \" Eight\";\n    } else if (num === 9) {\n      name = \" Nine\";\n    }\n    result.push(name);\n  }\n  return result;\n};\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * factorial(i));\n    } else {\n      result.push(sum(range(1, i)));\n    }\n  }\n  return result;\n};\n\n// Tests\nconsole.log(f(5));\nconsole.log(f(10));\nconsole.log(f(20));\nconsole.log(f(30));\nconsole.log(f(40));\nconsole.log(f(50));\nconsole.log(f(60));\nconsole.log(f(70));\nconsole.log(f(80));\nconsole.log(f(90));\nconsole.log(f(100));</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction factorial(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nfunction sumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(factorial(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(i));\n    }\n    return result;\n}\n\nfunction sumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfSumOfFactorials(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(sumOfSumOfSumOfSumOfSumOfSumOfSumOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = checkPalindrome(i);\n    const oddPalindrome = checkPalindrome(n - i);\n    if (evenPalindrome === true) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome === true) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let count = 0;\n  let lastElement = arr[0];\n  let newArray = arr.slice();\n  newArray.sort((a, b) => a - b);\n  newArray.forEach((element, index) => {\n    if (element > lastElement) {\n      count++;\n      lastElement = element;\n    }\n  });\n  if (count === newArray.length) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Write a function that takes an array of integers and returns an array of \n  the even numbers in the array. \n  \n  If the given array is empty then return an empty array.\n  \n  If the given array has only one element then return that element.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has even number of elements then return an array containing \n  the even numbers in the given array.\n  \n  If the given array has odd number of elements then return an empty array.\n  \n  If the given array has more than one element then return an array containing ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return a.split('').map(c => c ^ b).join('');\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a substring of t.\n  >>> stringIsSubstring('abc', 'ab')\n  True\n  >>> stringIsSubstring('abc', 'ac')\n  False\n  */\nconst stringIsSubstring = (s, t) => {\n  return s.indexOf(t)!== -1;\n};\n\n/* Given two strings s and t, return true if s is a sub", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0){\n    return \"NO\";\n  }\n  if(lst1.length === lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n  if(lst1.length > lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n  if(lst1.length < lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0){\n    return \"NO\";\n  }\n  if(lst1.length === lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n  if(lst1.length > lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n  if(lst1.length < lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0){\n    return \"NO\";\n  }\n  if(lst1.length === lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n  if(lst1.length > lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n  if(lst1.length < lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 === 0){\n        even.push(lst1[i]);\n      }\n    }\n    for(let i = 0; i < lst2.length; i++){\n      if(lst2[i] % 2 === 0){\n        even.push(lst2[i]);\n      }\n    }\n    if(even.length === lst1.length){\n      return \"YES\";\n    }\n  }\n}\n\n/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0){\n    return \"NO\";\n  }\n  if(lst1.length === lst2.length){\n    let even = [];\n    for(let i = 0; i < lst1.length", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  }\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given two strings s and c, you had to delete all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given two strings s and c, you had to delete all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given two strings s and c, you had to delete all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given two strings s and c, you had to delete all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given two strings s and c, you had to delete all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete6 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given two strings s and c, you had to delete all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete7 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task \n   We were given two strings s and c, you had to delete all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete8 = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfOddDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === \"1\") {\n        numOfOddDigits++;\n      }\n    }\n    oddCountArr.push(numOfOddDigits);\n  }\n  return oddCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfEvenDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === \"0\") {\n        numOfEvenDigits++;\n      }\n    }\n    evenCountArr.push(numOfEvenDigits);\n  }\n  return evenCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even and odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfEvenOddDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === \"0\") {\n        numOfEvenOddDigits++;\n      } else if (lst[i][j] === \"1\") {\n        numOfEvenOddDigits++;\n      }\n    }\n    evenOddCountArr.push(numOfEvenOddDigits);\n  }\n  return evenOddCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even and odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfEvenOddDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === \"0\") {\n        numOfEvenOddDigits++;\n      } else if (lst[i][j] === \"1\") {\n        numOfEvenOddDigits++;\n      }\n    }\n    evenOddCountArr.push(numOfEvenOddDigits);\n  }\n  return evenOddCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even and odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfEvenOddDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === \"0\") {\n        numOfEvenOddDigits++;\n      } else if (lst[i][j] === \"1\") {\n        numOfEvenOddDigits++;\n      }\n    }\n    evenOddCountArr.push(numOfEvenOddDigits);\n  }\n  return evenOddCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even and odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let evenOddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOfEvenOddDigits = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === \"0\") {\n        numOfEvenOddDigits++;\n      } else if (lst[i][j] === \"1\") {\n        numOfEvenOddDigits++;\n      }\n    }\n    evenOddCountArr.push(numOfEvenOddDigits);\n  }\n  return evenOddCountArr;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even and odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of any non-empty sub-array \n   of nums.\n  Example\n  subArraySum([2, 3, 4, 1, 2, 4]) == 10\n  subArraySum([-1, -2, -3]) == -3\n  */\nconst subArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of any non-empty sub-array \n   of nums.\n  Example\n  subArrayProduct([2, 3, 4, 1, 2, 4]) == 24\n  subArrayProduct([-1, -2, -3]) == -3\n  */\nconst subArrayProduct = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest2 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest3 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest4 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest5 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest6 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest7 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest8 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest9 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest10 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest11 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest12 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest13 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest14 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest15 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest16 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest17 = (grid, capacity) => {\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                let bucket = grid[i][j];\n                while (bucket > 0) {\n                    bucket--;\n                    grid[i][j] = 0;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconst maxFillTest18 = (grid, capacity) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      oneCount = 0;\n      decCount = 0;\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      oneCount = 0;\n      decCount = 0;\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      oneCount = 0;\n      decCount = 0;\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      oneCount = 0;\n      decCount = 0;\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      oneCount = 0;\n      decCount = 0;\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      oneCount = 0;\n      decCount = 0;\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayDesc = (arr) => {\n  let oneCount = 0;\n  let decCount = 0;\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      oneCount++;\n    } else {\n      decCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (oneCount === decCount) {\n      sortedArr.push(arr[i]);\n      oneCount = 0;\n      decCount = 0;\n    } else {\n      oneCount = 0;\n      decCount = 0;\n    }\n  }\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in descending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortArrayDesc([-2, -3, -4, -5, -6]) == [-6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n vowels, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n vowels, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let i = 0; i < s.length; i++) {\n      if (s.charAt(i) ==='') {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n      if (s.charAt(i) === n) {\n        words.push(s.substr(0, i));\n        s = s.substr(i + 1);\n      }\n    }\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n vowels, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  if (s.length > 0) {\n    for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromRightAndLeft = vowelsCount - 3;\n  let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n  let vowelsCountFromRightAndLeftAndUpperAndLowers = vowelsCount - 5;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbers = vowelsCount - 6;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbols = vowelsCount - 7;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialChars = vowelsCount - 8;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialChars = vowelsCount - 9;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 10;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 11;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 12;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 13;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 14;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 15;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 16;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 17;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 18;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 19;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 20;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 21;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialChars = vowelsCount - 22;\n  let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndSymbolsOrSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecialCharsAndSpecial", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchOrders(['(', ')', '(', ')']) == 'Yes'\n  matchOrders(['(', ')']) == 'No'\n  */\nconst matchOrders = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchOrders(['(', ')', '(', ')']) == 'Yes'\n  matchOrders(['(', ')']) == 'No'\n  */\nconst matchOrders = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchOrders(['(', ')', '(', ')']) == 'Yes'\n  matchOrders(['(', ')']) == 'No'\n  */\nconst matchOrders = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchOrders(['(', ')', '(', ')']) == 'Yes'\n  matchOrders(['(', ')']) == 'No'\n  */\nconst matchOrders = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchOrders(['(', ')', '(', ')']) == 'Yes'\n  matchOrders(['(', ')']) == 'No'\n  */\nconst matchOrders = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchOrders(['(', ')', '(', ')']) == 'Yes'\n  matchOrders(['(', ')']) == 'No'\n  */\nconst matchOrders = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchOrders(['(', ')', '(', ')']) == 'Yes'\n  matchOrders(['(', ')']) == 'No'\n  */\nconst matchOrders = (lst) => {\n  let str = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      str += '(';\n    } else if (lst[i] === ')') {\n      str += ')';\n    } else {\n      return false;\n    }\n  }\n  return str === '';\n};\n\n/* You were given a list of strings. Your job was to concatenate them in some \n   order. The resulting string was good. \n   A string S was considered to be good if and only if all strings in S \n   were concatenated in the correct order. For example: the string '(())()' \n   is good, while the string '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    if (currentString.length > longestString.length) {\n      longestString = currentString\n    }\n  }\n  return longestString\n}\n\n// Tests\nconst tests = [\n  {\n    name: 'longest',\n    input: [\n      'a',\n      'b',\n      'c',\n      'd',\n      'e',\n      'f',\n      'g',\n      'h',\n      'i',\n      'j',\n      'k',\n      'l',\n     'm',\n      'n',\n      'o',\n      'p',\n      'q',\n      'r',\n     's',\n      't',\n      'u',\n      'v',\n      'w',\n      'x',\n      'y',\n      'z',\n    ],\n    output: 'a',\n  },\n  {\n    name: 'longest with empty string',\n    input: [\n      '',\n      'a',\n      'b',\n      'c',\n      'd',\n      'e',\n      'f',\n      'g',\n      'h',\n      'i',\n      'j',\n      'k',\n      'l',\n     'm',\n      'n',\n      'o',\n      'p',\n      'q',\n      'r',\n     's',\n      't',\n      'u',\n      'v',\n      'w',\n      'x',\n      'y',\n      'z',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n    ],\n    output: '',\n  },\n  {\n    name: 'longest with empty string and empty list',\n    input: [\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n      '',\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] > max) {\n      max = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] > max) {\n      result.push(max);\n      max = arr[index];\n    } else {\n      result.push(arr[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  let min = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index] < min) {\n      min = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    if (arr[index] < min) {\n      result.push(min);\n      min = arr[index];\n    } else {\n      result.push(arr[index]);\n    }\n    index++;\n  }\n  return result;\n};\n\nexport { minimum, minimum2 };\n\n/*\n  Given an array arr of integers, return a new array with the largest \n  product of any two numbers in the array. The largest product is defined \n  as the product of all the numbers in the array, with the largest \n  product of any two numbers being larger than the product of all the \n  other numbers.\n\n  Example 1:\n\n      Input: [-4, -2, 2, 3, 2]\n      Output: [-16, 6]\n\n  Example 2:\n\n      Input: [-2, 0, 2, 5, 3]\n      Output: [-2, 0, 5, 15]\n\n  Example 3:\n\n      Input: [-2, 0, 2, 5, 3, 1]\n      Output: [-2, 0, 5, 15, 21]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ n where n is the \n         length of the array.\n      2. If there are multiple solutions, output any of them.\n      3. Running time: O(n2) because of the nested loops.\n      4. Memory Usage: O(n) because of the nested loops.\n*/\nconst largestProduct = (arr) => {\n  const result = [];\n  let max = 0;\n  let min = 0;\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index] > max) {\n      max = arr[index];\n    }\n    if (arr[index] < min) {\n      min = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    const product = arr[index] * arr[index];\n    if (product > max) {\n      result.push(max);\n      max = product;\n    } else if (product < min) {\n      result.push(min);\n      min = product;\n    } else {\n      result.push(product);\n    }\n    index++;\n  }\n  return result;\n};\n\nexport { largestProduct, largestProduct2 };\n\n/*\n  Given an array arr of integers, return a new array with the smallest \n  product of any two numbers in the array. The smallest product is defined \n  as the product of all the numbers in the array, with the smallest \n  product of any two numbers being smaller than the product of all the \n  other numbers.\n\n  Example 1:\n\n      Input: [-4, -2, 2, 3, 2]\n      Output: [-4, -2, 2, 3, 2]\n\n  Example 2:\n\n      Input: [-2, 0, 2, 5, 3]\n      Output: [-2, 0, 2, 5, 3]\n\n  Example 3:\n\n      Input: [-2, 0, 2, 5, 3, 1]\n      Output: [-2, 0, 2, 5, 3, 1]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ n where n is the \n         length of the array.\n      2. If there are multiple solutions, output any of them.\n      3. Running time: O(n2) because of the nested loops.\n      4. Memory Usage: O(n) because of the nested loops.\n*/\nconst smallestProduct = (arr) => {\n  const result = [];\n  let max = 0;\n  let min = 0;\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index] > max) {\n      max = arr[index];\n    }\n    if (arr[index] < min) {\n      min = arr[index];\n    }\n    index++;\n  }\n  while (index < arr.length) {\n    const product = arr[index] * arr[index];\n    if (product < max) {\n      result.push(max);\n      max = product;\n    } else if (product > min) {\n      result.push(min);\n      min = product;\n    } else {\n      result.push(product);\n    }\n    index++;\n  }\n  return result;\n};\n\nexport { smallestProduct, smallestProduct2 };\n\n/*\n  Given an array arr of positive integers, return a new array with the \n  product of all the numbers in the array. \n  \n  Example 1:\n\n      Input: [1, 2, 3, 4]\n      Output: [1, 2, 6, 24]\n\n  Example 2:\n\n      Input: [-1, -2, -3, -4]\n      Output: [-1, -6, -24, 0]\n\n  Example 3:\n\n      Input: [10, 20, 30]\n      Output: [10, 40, 90]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ n where n is the \n         length of the array.\n      2. If there are multiple solutions, output any of them.\n      3. Running time: O(n2) because of the nested loops.\n      4. Memory Usage: O(1) because of the nested loops.\n*/\nconst product = (arr) => {\n  const result = [];\n  let product = 1;\n  let index = 0;\n  while (index < arr.length) {\n    product *= arr[index];\n    index++;\n  }\n  while (index < arr.length) {\n    result.push(product);\n    product *= arr[index];\n    index++;\n  }\n  return result;\n};\n\nexport { product, product2 };\n\n/*\n  Given an array arr of positive integers, return a new array with the \n  product of all the numbers in the array, except the number at index \n  k. \n  \n  Example 1:\n\n      Input: [1, 2, 3, 4], k = 1\n      Output: [1, 3, 9, 27]\n\n  Example 2:\n\n      Input: [1, 2, 3, 4], k = 2\n      Output: [1, 3, 6, 30]\n\n  Example 3:\n\n      Input: [1, 2, 3, 4], k = 3\n      Output: [1, 3, 9, 27]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ n where n is the \n         length of the array.\n      2. If there are multiple solutions, output any of them.\n      3. Running time: O(n2) because of the nested loops.\n      4. Memory Usage: O(1) because of the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of numbers, return a new array with all even numbers removed.\n\n  Examples\n  removeEvens([1, 2, 3, 4, 5]) ==> [2, 4]\n  removeEvens([1, 2, 3, 4, 5]) ==> [2, 4]\n  removeEvens([1, 2, 3, 4, 5]) ==> [2, 4]\n  removeEvens([1, 2, 3, 4, 5]) ==> [2, 4]\n  removeEvens([1, 2, 3, 4, 5]) ==> [2, 4]\n  */\nconst removeEvens = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) === -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of strings, return a new array with all duplicate strings removed.\n\n  Examples\n  removeDuplicates([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  removeDuplicates([\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"]) ==> [\"a\", \"b\", \"c\"]\n  */\nconst removeDuplicates = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddCollatz = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (prev % 2 === 0) {\n      oddCollatz.push(prev);\n    }\n    prev = next;\n    next = prev * 2 + 1;\n  }\n  return oddCollatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evenCollatz = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (prev % 2!== 0) {\n      evenCollatz.push(prev);\n    }\n    prev = next;\n    next = prev * 2 + 1;\n  }\n  return evenCollatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evenCollatz = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (prev % 2!== 0) {\n      evenCollatz.push(prev);\n    }\n    prev = next;\n    next = prev * 2 + 1;\n  }\n  return evenCollatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evenCollatz = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (prev % 2!== 0) {\n      evenCollatz.push(prev);\n    }\n    prev = next;\n    next = prev * 2 + 1;\n  }\n  return evenCollatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evenCollatz = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (prev % 2!== 0) {\n      evenCollatz.push(prev);\n    }\n    prev = next;\n    next = prev * 2 + 1;\n  }\n  return evenCollatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let evenCollatz = [];\n  let prev = 1;\n  let next = 1;\n  while (next <= n) {\n    if (prev % 2!== 0) {\n      evenCollatz.push(prev);\n    }\n    prev = next;\n    next = prev * 2 + 1;\n  }\n  return evenCollatz;\n};\n\n/*\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\nconst validDate = (date) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word!== '');\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they was sorted \n   in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending or descending order. If list had more than 1 duplicate of the \n   same number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending or descending order. If list had more than 1 duplicate of the \n   same number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst isSortedDescr = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return \"NO\"\n  if (start2 > end1) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"\n  if (start1 === start2 && end1!== end2) return \"NO\"\n  if (start1!== start2 && end1 === end2) return \"NO\"\n  if (start1!== start2 && end1!== end2) return \"NO\"\n  if (start1 === start2 && end1 === end2) return \"NO\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns12 = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper(i - 1, j + 1, k - 1);\n      helper(i + 1, j - 1, k - 1);\n      helper(i - 1, j - 1, k - 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper(i - 1, j + 1, k - 1);\n      helper(i + 1, j - 1, k - 1);\n      helper(i - 1, j - 1, k - 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper(i - 1, j + 1, k - 1);\n      helper(i + 1, j - 1, k - 1);\n      helper(i - 1, j - 1, k - 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper(i - 1, j + 1, k - 1);\n      helper(i + 1, j - 1, k - 1);\n      helper(i - 1, j - 1, k - 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper(i - 1, j + 1, k - 1);\n      helper(i + 1, j - 1, k - 1);\n      helper(i - 1, j - 1, k - 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper(i - 1, j + 1, k - 1);\n      helper(i + 1, j - 1, k - 1);\n      helper(i - 1, j - 1, k - 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper(i - 1, j + 1, k - 1);\n      helper(i + 1, j - 1, k - 1);\n      helper(i - 1, j - 1, k - 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n// another\n\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (k === 0) ans.push(i);\n    if (visited[i] === false && grid[i][j] <= M[i]) {\n      M[i] = grid[i][j];\n      visited[i] = true;\n      helper(i + 1, j + 1, k - 1);\n      helper", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n  >>> leastCommonMultiple(7, 3)\n  21\n  >>> leastCommonMultiple(21, 7)\n  21\n  >>> leastCommonMultiple(7, 21)\n  21\n  >>> leastCommonMultiple(7, 0)\n  0\n  >>> leastCommonMultiple(0, 7)\n  0\n  >>> leastCommonMultiple(0, 0)\n  0\n  */\nconst leastCommonMultiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return leastCommonMultiple(b, a % b);\n};\n\n/**\n * Return the number of decimal places in a number\n  >>> decimalPlaces(1.2)\n  0\n  >>> decimalPlaces(1.23)\n  1\n  >>> decimalPlaces(1234)\n  2\n  >>> decimalPlaces(12345)\n  3\n  >>> decimalPlaces(123456)\n  4\n  >>> decimalPlaces(1234567)\n  5\n  >>> decimalPlaces(12345678)\n  6\n  >>> decimalPlaces(123456789)\n  7\n  */\nconst decimalPlaces = num => {\n  let match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n  if (!match) {\n    return 0;\n  }\n  return Math.max(\n    0,\n    match[1]? match[1].length : 0\n  );\n};\n\n/**\n * Round a number to a given precision\n  >>> round(1.2345, 0)\n  1\n  >>> round(1.2345, 1)\n  1.2\n  >>> round(1.2345, 2)\n  1.23\n  >>> round(1.2345, 3)\n  1.235\n  >>> round(1.2345, 4)\n  1.2345\n  >>> round(1.2345, 5)\n  1.2344999999999999\n  >>> round(1.2345, 6)\n  1.2345\n  >>> round(1.2345, 7)\n  1.2344999999999999\n  >>> round(1.2345, 8)\n  1.2344999999999999\n  >>> round(1.2345, 9)\n  1.2344999999999999\n  */\nconst round = (num, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return Math.round(num * multiplier) / multiplier;\n};\n\n/**\n * Convert a number to a string with a given precision\n  >>> toPrecision(1.2345, 0)\n  '1'\n  >>> toPrecision(1.2345, 1)\n  '1.2'\n  >>> toPrecision(1.2345, 2)\n  '1.23'\n  >>> toPrecision(1.2345, 3)\n  '1.235'\n  >>> toPrecision(1.2345, 4)\n  '1.2345'\n  >>> toPrecision(1.2345, 5)\n  '1.2346'\n  >>> toPrecision(1.2345, 6)\n  '1.2346'\n  >>> toPrecision(1.2345, 7)\n  '1.2346'\n  >>> toPrecision(1.2345, 8)\n  '1.2346'\n  >>> toPrecision(1.2345, 9)\n  '1.2346'\n  */\nconst toPrecision = (num, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return String(Math.round(num * multiplier) / multiplier);\n};\n\n/**\n * Convert a number to a string with a given precision\n  >>> toFixed(1.2345, 0)\n  '1'\n  >>> toFixed(1.2345, 1)\n  '1.2'\n  >>> toFixed(1.2345, 2)\n  '1.23'\n  >>> toFixed(1.2345, 3)\n  '1.235'\n  >>> toFixed(1.2345, 4)\n  '1.2345'\n  >>> toFixed(1.2345, 5)\n  '1.2346'\n  >>> toFixed(1.2345, 6)\n  '1.2346'\n  >>> toFixed(1.2345, 7)\n  '1.2346'\n  >>> toFixed(1.2345, 8)\n  '1.2346'\n  >>> toFixed(1.2345, 9)\n  '1.2346'\n  */\nconst toFixed = (num, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return String(Math.round(num * multiplier) / multiplier);\n};\n\n/**\n * Convert a number to a string with a given precision\n  >>> toExponential(1.2345, 0)\n  '1.2e+1'\n  >>> toExponential(1.2345, 1)\n  '1.21e+1'\n  >>> toExponential(1.2345, 2)\n  '1.23e+1'\n  >>> toExponential(1.2345, 3)\n  '1.235e+1'\n  >>> toExponential(1.2345, 4)\n  '1.2345e+1'\n  >>> toExponential(1.2345, 5)\n  '1.2346e+1'\n  >>> toExponential(1.2345, 6)\n  '1.2346e+1'\n  >>> toExponential(1.2345, 7)\n  '1.2346e+1'\n  >>> toExponential(1.2345, 8)\n  '1.2346e+1'\n  >>> toExponential(1.2345, 9)\n  '1.2346e+1'\n  */\nconst toExponential = (num, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return String(Math.round(num * multiplier) / multiplier);\n};\n\n/**\n * Convert a number to a string with a given precision\n  >>> toPrecision(1.2345, 0)\n  '1'\n  >>> toPrecision(1.2345, 1)\n  '1.2'\n  >>> toPrecision(1.2345, 2)\n  '1.23'\n  >>> toPrecision(1.2345, 3)\n  '1.235'\n  >>> toPrecision(1.2345, 4)\n  '1.2345'\n  >>> toPrecision(1.2345, 5)\n  '1.2346'\n  >>> toPrecision(1.2345, 6)\n  '1.2346'\n  >>> toPrecision(1.2345, 7)\n  '1.2346'\n  >>> toPrecision(1.2345, 8)\n  '1.2346'\n  >>> toPrecision(1.2345, 9)\n  '1.2346'\n  */\nconst toPrecision = (num, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return String(Math.round(num * multiplier) / multiplier);\n};\n\n/**\n * Convert a number to a string with a given precision\n  >>> toFixed(1.2345, 0)\n  '1'\n  >>> toFixed(1.2345, 1)\n  '1.2'\n  >>> toFixed(1.2345, 2)\n  '1.23'\n  >>> toFixed(1.2345, 3)\n  '1.235'\n  >>> toFixed(1.2345, 4)\n  '1.2345'\n  >>> toFixed(1.2345, 5)\n  '1.2346'\n  >>> toFixed(1.2345, 6)\n  '1.2346'\n  >>> toFixed(1.2345, 7)\n  '1.2346'\n  >>> toFixed(1.2345, 8)\n  '1.2346'\n  >>> toFixed(1.2345, 9)\n  '1.2346'\n  */\nconst toFixed = (num, precision) => {\n  const multiplier = Math.pow(10, precision);\n  return String(Math.round(num * multiplier) / multiplier);\n};\n\n/**\n * Convert a number to a string with a given precision\n  >>> toExponential(1.2345, 0)\n  '1.2e+1'\n  >>> toExponential(1.2345, 1)\n  '1.21e+1'\n  >>> toExponential(1.2345, 2)\n  '1.23e+1'\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let triArr = [];\n  let triArr2 = [];\n  if (n === 1) {\n    arr.push(1);\n    triArr.push(1);\n    triArr2.push(1);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(i);\n      if (n % 2 === 0) {\n        triArr.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n        triArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n      } else {\n        triArr.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n        triArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n      }\n    }\n  }\n  return [...triArr,...triArr2,...arr];\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Fibonacci sequence that are less than or equal to n.\n  Examples:\n  fib(3) = [1, 1, 2]\n  fib(5) = [1, 1, 2, 3, 5]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n*/\nconst fib = (n) => {\n  let arr = [];\n  let fiArr = [];\n  let fiArr2 = [];\n  if (n === 1) {\n    arr.push(1);\n    fiArr.push(1);\n    fiArr2.push(1);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(i);\n      if (n % 2 === 0) {\n        fiArr.push((arr[i - 1] + arr[i - 2]) / 2);\n        fiArr2.push((arr[i - 1] + arr[i - 2]) / 2);\n      } else {\n        fiArr.push((arr[i - 1] + arr[i - 1]) / 2);\n        fiArr2.push((arr[i - 1] + arr[i - 1]) / 2);\n      }\n    }\n  }\n  return [...fiArr,...fiArr2,...arr];\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Fibonacci sequence that are less than or equal to n.\n  Examples:\n  fib(3) = [1, 1, 2]\n  fib(5) = [1, 1, 2, 3, 5]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n*/\nconst fibonacci = (n) => {\n  let arr = [];\n  let fiArr = [];\n  let fiArr2 = [];\n  if (n === 1) {\n    arr.push(1);\n    fiArr.push(1);\n    fiArr2.push(1);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(i);\n      if (n % 2 === 0) {\n        fiArr.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n        fiArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n      } else {\n        fiArr.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n        fiArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n      }\n    }\n  }\n  return [...fiArr,...fiArr2,...arr];\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Fibonacci sequence that are less than or equal to n.\n  Examples:\n  fib(3) = [1, 1, 2]\n  fib(5) = [1, 1, 2, 3, 5]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n*/\nconst fibonacci = (n) => {\n  let arr = [];\n  let fiArr = [];\n  let fiArr2 = [];\n  if (n === 1) {\n    arr.push(1);\n    fiArr.push(1);\n    fiArr2.push(1);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(i);\n      if (n % 2 === 0) {\n        fiArr.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n        fiArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n      } else {\n        fiArr.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n        fiArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n      }\n    }\n  }\n  return [...fiArr,...fiArr2,...arr];\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Fibonacci sequence that are less than or equal to n.\n  Examples:\n  fib(3) = [1, 1, 2]\n  fib(5) = [1, 1, 2, 3, 5]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n*/\nconst fibonacci = (n) => {\n  let arr = [];\n  let fiArr = [];\n  let fiArr2 = [];\n  if (n === 1) {\n    arr.push(1);\n    fiArr.push(1);\n    fiArr2.push(1);\n  } else {\n    for (let i = 1; i <= n; i++) {\n      arr.push(i);\n      if (n % 2 === 0) {\n        fiArr.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n        fiArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 3]) / 3);\n      } else {\n        fiArr.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n        fiArr2.push((arr[i - 1] + arr[i - 2] + arr[i - 1]) / 2);\n      }\n    }\n  }\n  return [...fiArr,...fiArr2,...arr];\n};\n\n/*\n  Given a non-negative integer number n, you have to return a list of all numbers of the \n  Fibonacci sequence that are less than or equal to n.\n  Examples:\n  fib(3) = [1, 1, 2]\n  fib(5) = [1, 1, 2, 3, 5]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n*/\nconst fibonacci = (n) => {\n  let arr = [];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i -= 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 2\n  digits(235) == 6\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 3.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 6\n  digits(235) == 15\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 8\n  digits(235) == 30\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 5.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 10\n  digits(235) == 45\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12\n  digits(235) == 90\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 7.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 14\n  digits(235) == 70\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 8.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 16\n  digits(235) == 80\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 9.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 18\n  digits(235) == 90\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 9;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 10.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 20\n  digits(235) == 100\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 11.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 22\n  digits(235) == 110\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 11;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 12.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24\n  digits(235) == 120\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 12;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 13.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 26\n  digits(235) == 130\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 13;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 14.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 28\n  digits(235) == 140\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 14;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 15.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 30\n  digits(235) == 150\n  */\nconst digitSum15 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 15;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 16.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 32\n  digits(235) == 160\n  */\nconst digitSum16 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 16;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by 17.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 34\n  digits(235) == 170", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   let openBracketCount = 0;\n   let closeBracketCount = 0;\n   let openBracketIndex = 0;\n   let closeBracketIndex = 0;\n   let openBracketsArray = [];\n   let closeBracketsArray = [];\n   let openBracketsArrayIndex = 0;\n   let closeBracketsArrayIndex = 0;\n   let openBracketsArrayString = '';\n   let closeBracketsArrayString = '';\n   let openBracketsArrayStringIndex = 0;\n   let closeBracketsArrayStringIndex = 0;\n   let openBracketsArrayStringArray = [];\n   let closeBracketsArrayStringArray = [];\n   let openBracketsArrayStringArrayIndex = 0;\n   let closeBracketsArrayStringArrayIndex = 0;\n   let openBracketsArrayStringArrayString = '';\n   let closeBracketsArrayStringArrayString = '';\n   let openBracketsArrayStringArrayStringIndex = 0;\n   let closeBracketsArrayStringArrayStringIndex = 0;\n   let openBracketsArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayIndex = 0;\n   let closeBracketsArrayStringArrayStringArrayIndex = 0;\n   let openBracketsArrayStringArrayStringArrayString = '';\n   let closeBracketsArrayStringArrayStringArrayString = '';\n   let openBracketsArrayStringArrayStringArrayStringIndex = 0;\n   let closeBracketsArrayStringArrayStringArrayStringIndex = 0;\n   let openBracketsArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayIndex = 0;\n   let closeBracketsArrayStringArrayStringArrayStringArrayIndex = 0;\n   let openBracketsArrayStringArrayStringArrayStringArrayString = '';\n   let closeBracketsArrayStringArrayStringArrayStringArrayString = '';\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayIndex = 0;\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayIndex = 0;\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayString = '';\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayString = '';\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = '';\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayString = '';\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let closeBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let openBracketsArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = [];\n   let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You were given a list of numbers. \n   You needed to return the sum of squared numbers in the gave ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  \n  if (lastChar == \" \") {\n    lastCharIsALetter = true;\n  }\n  \n  if (lastCharIsALetter) {\n    lastChar = lastChar.slice(0, -1);\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returns true if the last character \n   of a gave string was a digit, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  \n  if (lastChar == \" \") {\n    lastCharIsALetter = true;\n  }\n  \n  if (lastCharIsALetter) {\n    lastChar = lastChar.slice(0, -1);\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returns true if the last character \n   of a gave string was a punctuation mark, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  \n  if (lastChar == \" \") {\n    lastCharIsALetter = true;\n  }\n  \n  if (lastCharIsALetter) {\n    lastChar = lastChar.slice(0, -1);\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returns true if the last character \n   of a gave string was a symbol, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  \n  if (lastChar == \" \") {\n    lastCharIsALetter = true;\n  }\n  \n  if (lastCharIsALetter) {\n    lastChar = lastChar.slice(0, -1);\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returns true if the last character \n   of a gave string was a number, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  \n  if (lastChar == \" \") {\n    lastCharIsALetter = true;\n  }\n  \n  if (lastCharIsALetter) {\n    lastChar = lastChar.slice(0, -1);\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returns true if the last character \n   of a gave string was a space, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  \n  if (lastChar == \" \") {\n    lastCharIsALetter = true;\n  }\n  \n  if (lastCharIsALetter) {\n    lastChar = lastChar.slice(0, -1);\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returns true if the last character \n   of a gave string was a letter, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  \n  if (lastChar == \" \") {\n    lastCharIsALetter = true;\n  }\n  \n  if (lastCharIsALetter) {\n    lastChar = lastChar.slice(0, -1);\n  }\n  \n  return lastCharIsALetter;\n}\n\n/* Create a function that returns true if the last character \n   of a gave string was a digit, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let largest = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a function which returned the smallest index of an element which \n   was not less than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let smallest = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a function which returned the average of an array of numbers. \n   The array may contain duplicate values.\n\n  Examples:\n  average([1,2,3,4,5,6]) = 2.5\n  average([1,2,3]) = 0\n  */\nconst average = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum / arr.length;\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  max([1,2,3,4,5,6]) = 6\n  max([1,2,3]) = 5\n  */\nconst minMax = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [min, max];\n};\n\n/*Create a function which returned the largest and smallest numbers of an \n   array of numbers. The array may contain duplicate values.\n\n  Examples:\n  min([1,2,3,4,5,6]) = 3\n  min([1,2,3]) = 1\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  \n  return [largest, smallest];\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of negative integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegative = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  \n  return [largest, smallest];\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersPositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  \n  return [largest, smallest];\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativePositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  \n  return [largest, smallest];\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativePositiveNegative = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  \n  return [largest, smallest];\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativePositiveNegativePositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  \n  return [largest, smallest];\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativePositiveNegativePositivePositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  \n  return [largest, smallest];\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of positive integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersNegativePositiveNegativePositivePositivePositive = (lst) => {\n  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  \n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null;\n   }\n   if(aNum < bNum){\n     return \"smaller\";\n   }\n   if(aNum > bNum){\n     return \"larger\";\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareTwo(1, 2.5) ➞ed 2.5 \n   compareTwo(1,\" 2,3\") ➞\" 2,3\" \n   compareTwo(\"5,1\",\" 6\") ➞\" 6\" \n   compareTwo(\"1\", 1) ➞ null \n  */ \n const compareTwo= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null;\n   }\n   if(aNum < bNum){\n     return \"smaller\";\n   }\n   if(aNum > bNum){\n     return \"larger\";\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareThree(1, 2.5) ➞ed 2.5 \n   compareThree(1,\" 2,3\") ➞\" 2,3\" \n   compareThree(\"5,1\",\" 6\") ➞\" 6\" \n   compareThree(\"1\", 1) ➞ null \n  */ \n const compareThree= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null;\n   }\n   if(aNum < bNum){\n     return \"smaller\";\n   }\n   if(aNum > bNum){\n     return \"larger\";\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareFour(1, 2.5) ➞ed 2.5 \n   compareFour(1,\" 2,3\") ➞\" 2,3\" \n   compareFour(\"5,1\",\" 6\") ➞\" 6\" \n   compareFour(\"1\", 1) ➞ null \n  */ \n const compareFour= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null;\n   }\n   if(aNum < bNum){\n     return \"smaller\";\n   }\n   if(aNum > bNum){\n     return \"larger\";\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareFive(1, 2.5) ➞ed 2.5 \n   compareFive(1,\" 2,3\") ➞\" 2,3\" \n   compareFive(\"5,1\",\" 6\") ➞\" 6\" \n   compareFive(\"1\", 1) ➞ null \n  */ \n const compareFive= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null;\n   }\n   if(aNum < bNum){\n     return \"smaller\";\n   }\n   if(aNum > bNum){\n     return \"larger\";\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareSix(1, 2.5) ➞ed 2.5 \n   compareSix(1,\" 2,3\") ➞\" 2,3\" \n   compareSix(\"5,1\",\" 6\") ➞\" 6\" \n   compareSix(\"1\", 1) ➞ null \n  */ \n const compareSix= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null;\n   }\n   if(aNum < bNum){\n     return \"smaller\";\n   }\n   if(aNum > bNum){\n     return \"larger\";\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareSeven(1, 2.5) ➞ed 2.5 \n   compareSeven(1,\" 2,3\") ➞\" 2,3\" \n   compareSeven(\"5,1\",\" 6\") ➞\" 6\" \n   compareSeven(\"1\", 1) ➞ null \n  */ \n const compareSeven= (a, b)=>{\n   let aNum = parseFloat(a);\n   let bNum = parseFloat(b);\n   if(aNum === bNum){\n     return null;\n   }\n   if(aNum < bNum){\n     return \"smaller\";\n   }\n   if(aNum > bNum){\n     return \"larger\";\n   }\n   return null;\n }\n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareEight(1, 2.5) ➞ed 2.5 \n   compareEight(1,\" 2,3\") ➞\" 2,3\" \n   compareEight(\"5,1\",\" 6\") ➞\" 6\" \n   compare", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive numbers\n  Example\n  isEqualToSum(8) == true\n  isEqualToSum(10) == false\n  isEqualToSum(12) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 negative numbers\n  Example\n  isEqualToSum(-8) == true\n  isEqualToSum(-10) == false\n  isEqualToSum(-12) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == false\n  isEqualToSumOdd(12) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 negative odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == false\n  isEqualToSumOdd(12) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 negative even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive numbers\n  Example\n  isEqualToSum(8) == true\n  isEqualToSum(10) == false\n  isEqualToSum(12) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 negative numbers\n  Example\n  isEqualToSum(-8) == true\n  isEqualToSum(-10) == false\n  isEqualToSum(-12) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == false\n  isEqualToSumOdd(12) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 negative odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == false\n  isEqualToSumOdd(12) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 negative even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive numbers\n  Example\n  isEqualToSum(8) == true\n  isEqualToSum(10) == false\n  isEqualToSum(12) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === 8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 negative numbers\n  Example\n  isEqualToSum(-8) == true\n  isEqualToSum(-10) == false\n  isEqualToSum(-12) == false\n  */\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === -8;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 8 positive odd numbers\n  Example\n  isEqualToSumOdd(8) == true\n  isEqualToSumOdd(10) == false\n  isEqualToSumOdd(12) == false\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  It receives a number as input and should return the factorial of this number\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function which calculates the factorial of a given number\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.unshift(currentPrefix);\n    currentPrefix = currentPrefix.substr(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.unshift(currentSuffix);\n    currentSuffix = currentSuffix.substr(0, currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all hyphens with underscores, \n   and if a string had more than 2 consecutive hyphens, \n   then replaced all consecutive hyphens with- \n  \n   fixHyphens(\"Example\") == \"Example\"\n  fixHyphens(\"Example 1\") == \"Example_1\"\n  fixHyphens(\" Example 2\") == \"Example_2\"\n  fixHyphens(\" Example   3\") == \"Example_3\"\n  */\nconst fixHyphens = (text) => {\n  return text.replace(/-/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all apostrophes with underscores, \n   and if a string had more than 2 consecutive apostrophes, \n   then replaced all consecutive apostrophes with- \n  \n   fixApostrophes(\"Example\") == \"Example\"\n  fixApostrophes(\"Example 1\") == \"Example_1\"\n  fixApostrophes(\" Example 2\") == \"Example_2\"\n  fixApostrophes(\" Example   3\") == \"Example_3\"\n  */\nconst fixApostrophes = (text) => {\n  return text.replace(/'/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all commas with underscores, \n   and if a string had more than 2 consecutive commas, \n   then replaced all consecutive commas with- \n  \n   fixCommas(\"Example\") == \"Example\"\n  fixCommas(\"Example 1\") == \"Example_1\"\n  fixCommas(\" Example 2\") == \"Example_2\"\n  fixCommas(\" Example   3\") == \"Example_3\"\n  */\nconst fixCommas = (text) => {\n  return text.replace(/,/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all periods with underscores, \n   and if a string had more than 2 consecutive periods, \n   then replaced all consecutive periods with- \n  \n   fixPeriods(\"Example\") == \"Example\"\n  fixPeriods(\"Example 1\") == \"Example_1\"\n  fixPeriods(\" Example 2\") == \"Example_2\"\n  fixPeriods(\" Example   3\") == \"Example_3\"\n  */\nconst fixPeriods = (text) => {\n  return text.replace(/\\./g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all colons with underscores, \n   and if a string had more than 2 consecutive colons, \n   then replaced all consecutive colons with- \n  \n   fixColons(\"Example\") == \"Example\"\n  fixColons(\"Example 1\") == \"Example_1\"\n  fixColons(\" Example 2\") == \"Example_2\"\n  fixColons(\" Example   3\") == \"Example_3\"\n  */\nconst fixColons = (text) => {\n  return text.replace(/:/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all question marks with underscores, \n   and if a string had more than 2 consecutive question marks, \n   then replaced all consecutive question marks with- \n  \n   fixQuestionMarks(\"Example\") == \"Example\"\n  fixQuestionMarks(\"Example 1\") == \"Example_1\"\n  fixQuestionMarks(\" Example 2\") == \"Example_2\"\n  fixQuestionMarks(\" Example   3\") == \"Example_3\"\n  */\nconst fixQuestionMarks = (text) => {\n  return text.replace(/?/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all exclamation marks with underscores, \n   and if a string had more than 2 consecutive exclamation marks, \n   then replaced all consecutive exclamation marks with- \n  \n   fixExclamationMarks(\"Example\") == \"Example\"\n  fixExclamationMarks(\"Example 1\") == \"Example_1\"\n  fixExclamationMarks(\" Example 2\") == \"Example_2\"\n  fixExclamationMarks(\" Example   3\") == \"Example_3\"\n  */\nconst fixExclamationMarks = (text) => {\n  return text.replace(/!/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all asterisks with underscores, \n   and if a string had more than 2 consecutive asterisks, \n   then replaced all consecutive asterisks with- \n  \n   fixAsterisks(\"Example\") == \"Example\"\n  fixAsterisks(\"Example 1\") == \"Example_1\"\n  fixAsterisks(\" Example 2\") == \"Example_2\"\n  fixAsterisks(\" Example   3\") == \"Example_3\"\n  */\nconst fixAsterisks = (text) => {\n  return text.replace(/*/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all question marks with underscores, \n   and if a string had more than 2 consecutive question marks, \n   then replaced all consecutive question marks with- \n  \n   fixQuestionMarks(\"Example\") == \"Example\"\n  fixQuestionMarks(\"Example 1\") == \"Example_1\"\n  fixQuestionMarks(\" Example 2\") == \"Example_2\"\n  fixQuestionMarks(\" Example   3\") == \"Example_3\"\n  */\nconst fixQuestionMarks = (text) => {\n  return text.replace(/?/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all exclamation marks with underscores, \n   and if a string had more than 2 consecutive exclamation marks, \n   then replaced all consecutive exclamation marks with- \n  \n   fixExclamationMarks(\"Example\") == \"Example\"\n  fixExclamationMarks(\"Example 1\") == \"Example_1\"\n  fixExclamationMarks(\" Example 2\") == \"Example_2\"\n  fixExclamationMarks(\" Example   3\") == \"Example_3\"\n  */\nconst fixExclamationMarks = (text) => {\n  return text.replace(/!/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all asterisks with underscores, \n   and if a string had more than 2 consecutive asterisks, \n   then replaced all consecutive asterisks with- \n  \n   fixAsterisks(\"Example\") == \"Example\"\n  fixAsterisks(\"Example 1\") == \"Example_1\"\n  fixAsterisks(\" Example 2\") == \"Example_2\"\n  fixAsterisks(\" Example   3\") == \"Example_3\"\n  */\nconst fixAsterisks = (text) => {\n  return text.replace(/*/g, \"_\").replace(/\\s{2,}/g, \"_\");\n};\n\n/*\n  Given a string text, replaced all question marks with underscores, \n   and if a string had ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z]{0,2}$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 24\n  For lst = []  the output should be 1\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      product *= lst[i];\n    } else {\n      product *= lst[i] * lst[i];\n    }\n  }\n  return product;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the maximum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -5\n  */\nconst max = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      max = lst[i];\n    } else {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the minimum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -5\n  */\nconst min = (lst) => {\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      min = lst[i];\n    } else {\n      min = Math.min(min, lst[i]);\n    }\n  }\n  return min;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries \n   multiplied by the square root of the sum of the squares of all entries. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst sumOfSquaresOfProducts = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n      product *= lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n      product *= lst[i] * lst[i];\n    }\n  }\n  return Math.sqrt(sum) * product;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries \n   multiplied by the square root of the sum of the squares of all entries. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst sumOfSquaresOfProductsOfProducts = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n      product *= lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n      product *= lst[i] * lst[i];\n    }\n  }\n  return Math.sqrt(sum) * Math.sqrt(sum) * product;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries \n   multiplied by the square root of the sum of the squares of all entries. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst sumOfSquaresOfProductsOfProductsOfProducts = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i];\n      product *= lst[i];\n    } else {\n      sum += lst[i] * lst[i];\n      product *= lst[i] * lst[i];\n    }\n  }\n  return Math.sqrt(sum) * Math.sqrt(sum) * Math.sqrt(sum) * product;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries \n   multiplied by the square root of the sum of the squares of all entries. The function shall then return the product of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -24\n  */\nconst sumOfSquaresOfProductsOfProductsOfProductsOfProducts = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primes = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const prime = primeFactors(word);\n        if (primes.includes(prime)) {\n            return word;\n        } else {\n            primes.push(prime);\n        }\n    }\n};\n\n/*\n  You were given a string representing a sentence,\n   the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numer, denom] = x.split(\"/\");\n   const [num1, num2] = n.split(\"/\");\n   const num1Num2 = parseInt(num1)*parseInt(num2);\n   const num1Num2Numer = parseInt(num1)*parseInt(num2);\n   const num1Num2Denom = parseInt(num1)*parseInt(denom);\n   const num2Num1Denom = parseInt(num2)*parseInt(denom);\n   const num1Denom = parseInt(num1)*parseInt(denom);\n   const num2Denom = parseInt(num2)*parseInt(denom);\n   const num1Num2DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1Num2DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2Num1DenomNumer = parseInt(num2)*parseInt(denom)*parseInt(num1);\n   const num2Num1DenomDenom = parseInt(num2)*parseInt(denom)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(denom)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom)*parseInt(denom);\n   const num1Num2Numer = parseInt(num1)*parseInt(num2);\n   const num1Num2Denom = parseInt(num1)*parseInt(denom);\n   const num2Num1Numer = parseInt(num2)*parseInt(num1);\n   const num2Num1Denom = parseInt(num2)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom);\n   const num1Num2DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1Num2DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2Num1DenomNumer = parseInt(num2)*parseInt(denom)*parseInt(num1);\n   const num2Num1DenomDenom = parseInt(num2)*parseInt(denom)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(denom)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom)*parseInt(denom);\n   const num1Num2Numer = parseInt(num1)*parseInt(num2);\n   const num1Num2Denom = parseInt(num1)*parseInt(denom);\n   const num2Num1Numer = parseInt(num2)*parseInt(num1);\n   const num2Num1Denom = parseInt(num2)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom);\n   const num1Num2DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1Num2DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2Num1DenomNumer = parseInt(num2)*parseInt(denom)*parseInt(num1);\n   const num2Num1DenomDenom = parseInt(num2)*parseInt(denom)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom);\n   const num1Num2Numer = parseInt(num1)*parseInt(num2);\n   const num1Num2Denom = parseInt(num1)*parseInt(denom);\n   const num2Num1Numer = parseInt(num2)*parseInt(num1);\n   const num2Num1Denom = parseInt(num2)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom);\n   const num1Num2DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1Num2DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2Num1DenomNumer = parseInt(num2)*parseInt(denom)*parseInt(num1);\n   const num2Num1DenomDenom = parseInt(num2)*parseInt(denom)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom);\n   const num1Num2Numer = parseInt(num1)*parseInt(num2);\n   const num1Num2Denom = parseInt(num1)*parseInt(denom);\n   const num2Num1Numer = parseInt(num2)*parseInt(num1);\n   const num2Num1Denom = parseInt(num2)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(num1);\n   const num2DenomDenom = parseInt(num2)*parseInt(denom);\n   const num1Num2DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1Num2DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2Num1DenomNumer = parseInt(num2)*parseInt(denom)*parseInt(num1);\n   const num2Num1DenomDenom = parseInt(num2)*parseInt(denom)*parseInt(denom);\n   const num1DenomNumer = parseInt(num1)*parseInt(denom)*parseInt(num2);\n   const num1DenomDenom = parseInt(num1)*parseInt(denom)*parseInt(denom);\n   const num2DenomNumer = parseInt(num2)*parseInt(num1);\n   const num2DenomDenom = parseInt(num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => b[0] - a[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in descending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescr = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescr2 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescr3 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescr4 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescr5 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(sumOfDigits, []);\n    }\n    map.get(sumOfDigits).push(i);\n  }\n  return Array.from(map.values())\n   .sort((a, b) => a[0] - b[0])\n   .map((v) => nums[v]);\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescr6 = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, val) => acc + +val, 0);\n    if (!map.has(sumOfDigits)) {\n      map.set(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      count++;\n    }\n    if (nums[i] > 10 && nums[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd and even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(getMaxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain what was wrong with OP's code, and you didn't explain how you fixed it.\n<|/ c |>\n<| c |>\nI added an explanation to the answer. Thanks for your feedback.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nfunction maxTriples(n) {\n  let a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1)\n  let planet2Orbit = orbit(planet2)\n  let planet1Sun = sun(planet1)\n  let planet2Sun = sun(planet2)\n  let planet1OrbitSun = orbit(planet1, planet1Sun)\n  let planet2OrbitSun = orbit(planet2, planet2Sun)\n  let planet1OrbitSunOrbit = orbit(planet1, planet1Sun, planet2OrbitSun)\n  let planet2OrbitSunOrbit = orbit(planet2, planet2Sun, planet1OrbitSun)\n  let planet1OrbitSunOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun)\n  let planet2OrbitSunOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun)\n  let planet2OrbitSunOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun)\n  let planet2OrbitSunOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun)\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun)\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun)\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun)\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun)\n  let planet2OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet2, planet2Sun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun)\n  let planet1OrbitSunOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = orbit(planet1, planet1Sun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun, planet2OrbitSun, planet1OrbitSun", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  let sortedListLength = 0;\n  let sortedListLengthArray = [];\n  for (let i = 0; i < lst.length; i++) {\n    sortedListLengthArray.push(lst[i].length);\n  }\n  sortedListLength = sortedListLengthArray.reduce((a, b) => a + b);\n  for (let i = 0; i < lst.length; i++) {\n    if (sortedListLengthArray[i] % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  let sortedListLength = 0;\n  let sortedListLengthArray = [];\n  for (let i = 0; i < lst.length; i++) {\n    sortedListLengthArray.push(lst[i].length);\n  }\n  sortedListLength = sortedListLengthArray.reduce((a, b) => a + b);\n  for (let i = 0; i < lst.length; i++) {\n    if (sortedListLengthArray[i] % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  let sortedListLength = 0;\n  let sortedListLengthArray = [];\n  for (let i = 0; i < lst.length; i++) {\n    sortedListLengthArray.push(lst[i].length);\n  }\n  sortedListLength = sortedListLengthArray.reduce((a, b) => a + b);\n  for (let i = 0; i < lst.length; i++) {\n    if (sortedListLengthArray[i] % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  let sortedListLength = 0;\n  let sortedListLengthArray = [];\n  for (let i = 0; i < lst.length; i++) {\n    sortedListLengthArray.push(lst[i].length);\n  }\n  sortedListLength = sortedListLengthArray.reduce((a, b) => a + b);\n  for (let i = 0; i < lst.length; i++) {\n    if (sortedListLengthArray[i] % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  let sortedListLength = 0;\n  let sortedListLengthArray = [];\n  for (let i = 0; i < lst.length; i++) {\n    sortedListLengthArray.push(lst[i].length);\n  }\n  sortedListLength = sortedListLengthArray.reduce((a, b) => a + b);\n  for (let i = 0; i < lst.length; i++) {\n    if (sortedListLengthArray[i] % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    }\n    if (a.length < b.length) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, max) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence = (n, max, step = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',')\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',') => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',', 2)\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',', decimalsAfter = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',', 2, 2)\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',', decimalsAfter = 1, thousandsAfter = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',', 2, 2, '.', ',', 2)\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',', decimalsAfter = 1, thousandsAfter = 1, decimalsAfterDecimals = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',', 2, 2, '.', ',', 2, 2)\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',', decimalsAfter = 1, thousandsAfter = 1, decimalsAfterDecimals = 1, thousandsAfterDecimals = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',', 2, 2, '.', ',', 2, 2, '.', ',', 2)\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',', decimalsAfter = 1, thousandsAfter = 1, decimalsAfterDecimals = 1, thousandsAfterDecimals = 1, decimalsAfterThousands = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',', 2, 2, '.', ',', 2, 2, '.', ',', 2, 2, '.', ',', 2)\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',', decimalsAfter = 1, thousandsAfter = 1, decimalsAfterDecimals = 1, thousandsAfterDecimals = 1, decimalsAfterThousands = 1, thousandsAfterThousands = 1) => {\n  const str = '';\n  for (let i = 0; i < n; i += step) {\n    str += i;\n    if (i < max) {\n      str +='';\n    }\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5, 10, 2, 2, '.', ',', 2, 2, '.', ',', 2, 2, '.', ',', 2, 2, '.', ',', 2, 2)\n  '0 1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9'\n  */\nconst stringSequence = (n, max, step = 1, decimals = 0, thousands = 1, decimalSep = ',', thousandSep = ',', decimalsAfter = 1, thousandsAfter = 1, decimalsAfterDecimals = 1, thousands", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length===0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!==0){\n       sum+=lst[i];\n     }\n   }\n   return sum;\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(guess[index] - score));\n    }\n  });\n  return result;\n};\n\n// test case\nconst testCases = [\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [1, 2, 3, 4, 5],\n    [1, 2, 3, 4, 2],\n  ],\n  [\n    [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  extensions.forEach((extension) => {\n    const class_name_length = class_name.length;\n    const extension_length = extension.length;\n    const strength = class_name_length - extension_length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_name = extension;\n    }\n  });\n  return `${class_name}.${strongest_name}`;\n};\n\n/*You were given a list of strings and a number N. \n   The task is to return a list of N strings that each string contains only \n   letters from the original strings. \n   Example:\n   For strings = ['ABC', 'DEF', 'GHI'] and N = 2, the output should be\n   ['AB', 'CD', 'EF', 'GH'].\n  Example:\n  For strings = ['ABC', 'DEF', 'GHI'] and N = 3, the output should be\n  ['ABC', 'DEF', 'GHI'].\n  Example:\n  For strings = ['ABC', 'DEF', 'GHI'] and N = 4 the output should be\n  ['ABC', 'DEF', 'GHI', 'IJ', 'KL'].\n  Example:\n  For strings = ['ABC', 'DEF', 'GHI'] and N = 5 the output should be\n  ['ABC', 'DEF', 'GHI', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ'].\n  Example:\n  For strings = ['ABC', 'DEF', 'GHI'] and N = 6 the output should be\n  ['ABC', 'DEF', 'GHI', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ'].\n  Example:\n  For strings = ['ABC', 'DEF', 'GHI'] and N = 7 the output should be\n  ['ABC', 'DEF', 'GHI', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ'].\n  Example:\n  For strings = ['ABC', 'DEF', 'GHI'] and N = 8 the output should be\n  ['ABC', 'DEF', 'GHI', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ'].\n  Example:\n  For strings = ['ABC', 'DEF', 'GHI'] and N = 9 the output should be\n  ['ABC', 'DEF', 'GHI', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ', 'AB', 'CD', 'EF', 'GH', 'IJ', 'KL', 'MN', 'OP', 'QR', 'ST', 'UV', 'WX', 'YZ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let firstWord=a.split(\"\").reverse().join(\"\");\n   let secondWord=b.split(\"\").reverse().join(\"\");\n   let firstWordArray=firstWord.split(\"\");\n   let secondWordArray=secondWord.split(\"\");\n   let firstWordArrayLength=firstWordArray.length;\n   let secondWordArrayLength=secondWordArray.length;\n   let firstWordArrayRotations=firstWordArray.slice(0,secondWordArrayLength);\n   let secondWordArrayRotations=secondWordArray.slice(0,firstWordArrayLength);\n   let firstWordArraySubstrings=firstWordArray.slice(secondWordArrayLength);\n   let secondWordArraySubstrings=secondWordArray.slice(firstWordArrayLength);\n   let firstWordArraySubstringsLength=firstWordArraySubstrings.length;\n   let secondWordArraySubstringsLength=secondWordArraySubstrings.length;\n   let firstWordArraySubstringsRotations=firstWordArraySubstrings.slice(0,secondWordArraySubstringsLength);\n   let secondWordArraySubstringsRotations=secondWordArraySubstrings.slice(0,firstWordArraySubstringsLength);\n   let firstWordArraySubstringsSubstrings=firstWordArraySubstrings.slice(secondWordArraySubstringsLength);\n   let secondWordArraySubstringsSubstrings=secondWordArraySubstrings.slice(firstWordArraySubstringsLength);\n   let firstWordArraySubstringsSubstringsLength=firstWordArraySubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsLength=secondWordArraySubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsRotations=firstWordArraySubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsRotations=secondWordArraySubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstrings=firstWordArraySubstringsSubstrings.slice(secondWordArraySubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstrings=secondWordArraySubstringsSubstrings.slice(firstWordArraySubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstrings=firstWordArraySubstringsSubstringsSubstrings.slice(secondWordArraySubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstrings=secondWordArraySubstringsSubstringsSubstrings.slice(firstWordArraySubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings=firstWordArraySubstringsSubstringsSubstringsSubstrings.slice(secondWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstrings=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(firstWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstrings=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(secondWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstrings=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(firstWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstringsRotations=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(0,secondWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsRotations=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(0,firstWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstrings=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.slice(secondWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let secondWordArraySubstringsSubstringsSubstringsSubstrings=secondWordArraySubstringsSubstringsSubstringsSubstrings.slice(firstWordArraySubstringsSubstringsSubstringsSubstringsLength);\n   let firstWordArraySubstringsSubstringsSubstringsSubstringsSubstringsSubstringsLength=firstWordArraySubstringsSubstringsSubstringsSubstringsSubstrings.length;\n   let secondWordArraySubstringsSubstringsSubstringsSubstringsSubstringsLength=secondWordArraySubstringsSubstringsSubstringsSubstrings.length;\n   let firstWordArraySubstringsSubstringsSubstringsSub", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % 10;\n    if (remainder === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(\"-12\") ==> (1, 1)\n      evenOddCount(\"123\") ==> (1, 2)\n  */\nconst evenOddCount = (str) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < str.length; i++) {\n    const remainder = parseInt(str[i]) % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let numToRoman = numberToRoman(number);\n  for (let i = 0; i < numToRoman.length; i++) {\n    roman += numToRoman[i];\n  }\n  return roman.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  let roman = '';\n  let numToRoman = numberToRoman(number);\n  for (let i = 0; i < numToRoman.length; i++) {\n    roman += numToRoman[i].toUpperCase();\n  }\n  return roman.toUpperCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i];\n  }\n  return decimal.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalUpper = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toUpperCase();\n  }\n  return decimal.toUpperCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLower = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toLowerCase();\n  }\n  return decimal.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in uppercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalUpperLower = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toUpperCase().toLowerCase();\n  }\n  return decimal.toUpperCase().toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpper = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toLowerCase().toUpperCase();\n  }\n  return decimal.toLowerCase().toUpperCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpperLower = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toLowerCase().toUpperCase().toLowerCase();\n  }\n  return decimal.toLowerCase().toUpperCase().toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpperLowerUpper = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toLowerCase().toUpperCase().toLowerCase();\n  }\n  return decimal.toLowerCase().toUpperCase().toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpperLowerUpperUpper = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toLowerCase().toUpperCase().toLowerCase();\n  }\n  return decimal.toLowerCase().toUpperCase().toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpperLowerUpperUpperUpper = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toLowerCase().toUpperCase().toLowerCase();\n  }\n  return decimal.toLowerCase().toUpperCase().toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimalLowerUpperLowerUpperUpperUpperUpper = (number) => {\n  let decimal = '';\n  let numToDecimal = numberToDecimal(number);\n  for (let i = 0; i < numToDecimal.length; i++) {\n    decimal += numToDecimal[i].toLowerCase().toUpperCase().toLowerCase();\n  }\n  return decimal.toLowerCase().toUpperCase().toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= bc && bc >= ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= words[0].length\n   let maxIndex= 0\n   for (let i= 1; i<words.length; i++){\n     if (words[i].length>max){\n       max= words[i].length\n       maxIndex= i\n     }\n   }\n   return words[maxIndex]\n }\n \n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number \n   of unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMin([\"name\",\" of\",\" string\"])===\" string\" \n   findMin([\"name\",\" enam\",\" game\"])===\" name\" \n   findMin([\"aaaaaaa\",\" bb\",\" cc\"])===\" aaaaaaa\" \n  */ \n const findMin= (words)=>{\n   let min= words[0].length\n   let minIndex= 0\n   for (let i= 1; i<words.length; i++){\n     if (words[i].length<min){\n       min= words[i].length\n       minIndex= i\n     }\n   }\n   return words[minIndex]\n }\n \n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number of \n   unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMaxUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMaxUnique([\"name\",\" enam\",\" game\"])===\" game\" \n   findMaxUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" cc\" \n  */ \n const findMaxUnique= (words)=>{\n   let max= words[0].length\n   let maxIndex= 0\n   for (let i= 1; i<words.length; i++){\n     if (words[i].length>max){\n       max= words[i].length\n       maxIndex= i\n     }\n   }\n   let unique= []\n   for (let i= 0; i<words.length; i++){\n     if (words[i].length==max){\n       unique.push(words[i])\n     }\n   }\n   return unique[maxIndex]\n }\n \n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number of \n   unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMinUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMinUnique([\"name\",\" enam\",\" game\"])===\" name\" \n   findMinUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" bb\" \n  */ \n const findMinUnique= (words)=>{\n   let min= words[0].length\n   let minIndex= 0\n   for (let i= 1; i<words.length; i++){\n     if (words[i].length<min){\n       min= words[i].length\n       minIndex= i\n     }\n   }\n   let unique= []\n   for (let i= 0; i<words.length; i++){\n     if (words[i].length==min){\n       unique.push(words[i])\n     }\n   }\n   return unique[minIndex]\n }\n \n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number of \n   unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMaxUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMaxUnique([\"name\",\" enam\",\" game\"])===\" game\" \n   findMaxUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" bb\" \n  */ \n const findMaxUnique= (words)=>{\n   let max= words[0].length\n   let maxIndex= 0\n   for (let i= 1; i<words.length; i++){\n     if (words[i].length>max){\n       max= words[i].length\n       maxIndex= i\n     }\n   }\n   let unique= []\n   for (let i= 0; i<words.length; i++){\n     if (words[i].length==max){\n       unique.push(words[i])\n     }\n   }\n   return unique[maxIndex]\n }\n \n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number of \n   unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMinUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMinUnique([\"name\",\" enam\",\" game\"])===\" name\" \n   findMinUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" aaaaaaa\" \n  */ \n const findMinUnique= (words)=>{\n   let min= words[0].length\n   let minIndex= 0\n   for (let i= 1; i<words.length; i++){\n     if (words[i].length<min){\n       min= words[i].length\n       minIndex= i\n     }\n   }\n   let unique= []\n   for (let i= 0; i<words.length; i++){\n     if (words[i].length==min){\n       unique.push(words[i])\n     }\n   }\n   return unique[minIndex]\n }\n \n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number of \n   unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMaxUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMaxUnique([\"name\",\" enam\",\" game\"])===\" game\" \n   findMaxUnique([\"aaaaaaa\",\" bb\",\" cc\"])===\" cc\" \n  */ \n const findMaxUnique= (words)=>{\n   let max= words[0].length\n   let maxIndex= 0\n   for (let i= 1; i<words.length; i++){\n     if (words[i].length>max){\n       max= words[i].length\n       maxIndex= i\n     }\n   }\n   let unique= []\n   for (let i= 0; i<words.length; i++){\n     if (words[i].length==max){\n       unique.push(words[i])\n     }\n   }\n   return unique[maxIndex]\n }\n \n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with minimum number of \n   unique characters. If multiple strings had minimum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMinUnique([\"name\",\" of\",\" string\"])===\" string\" \n   findMinUnique", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - carrots\n  return [carrots, leftCarrots]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - carrots\n  return [carrots, leftCarrots]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - carrots\n  return [carrots, leftCarrots]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - carrots\n  return [carrots, leftCarrots]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = number - need\n  const leftCarrots = remaining - carrots\n  return [carrots, leftCarrots]\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n};\n\n/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('');\n  return chars.reduce((acc, curr) => {\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};\n\n/*\n  Write a function that takes a string and returns the string with all the \n  letters reversed. \n  Examples\n  reverse(\"1234\") = \"4321\"\n  reverse(\"ab\") = \"ba\"\n  reverse(\"#a@C\") = \"#c@A\"\n*/\nconst reverse = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    newS += s[s.length - 1 - i];\n  }\n  return newS;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '8da9f39a95b8b41d80f36a19f8b8fa9a67cce'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha3 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha3('Hello world') == 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'\n  */\nconst stringToSha3 = (text) => {\n  if (!text) return null;\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return null;\n  const hash = cryp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let current = 0;\n  let next = 0;\n  while (current < b) {\n    next = a;\n    while (next < b) {\n      result.push(next);\n      next++;\n    }\n    current++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n   representation.\n\n  For example:\n  digitsInNumber(8) => 3\n  digitsInNumber(10) => 2\n  digitsInNumber(16) => 3\n  digitsInNumber(25) => 4\n  digitsInNumber(26) => 5\n  digitsInNumber(27) => 6\n  digitsInNumber(36) => 5\n  digitsInNumber(37) => 6\n  digitsInNumber(40) => 5\n  digitsInNumber(41) => 6\n  digitsInNumber(48) => 5\n  digitsInNumber(49) => 6\n  digitsInNumber(50) => 7\n  digitsInNumber(51) => 8\n  digitsInNumber(52) => 9\n  digitsInNumber(53) => 10\n  digitsInNumber(54) => 11\n  digitsInNumber(55) => 12\n  digitsInNumber(56) => 13\n  digitsInNumber(57) => 14\n  digitsInNumber(58) => 15\n  digitsInNumber(59) => 16\n  digitsInNumber(60) => 17\n  digitsInNumber(61) => 18\n  digitsInNumber(62) => 19\n  digitsInNumber(63) => 20\n  digitsInNumber(64) => 21\n  digitsInNumber(65) => 22\n  digitsInNumber(66) => 23\n  digitsInNumber(67) => 24\n  digitsInNumber(68) => 25\n  digitsInNumber(69) => 26\n  digitsInNumber(70) => 27\n  digitsInNumber(71) => 28\n  digitsInNumber(72) => 29\n  digitsInNumber(73) => 30\n  digitsInNumber(74) => 31\n  digitsInNumber(75) => 32\n  digitsInNumber(76) => 33\n  digitsInNumber(77) => 34\n  digitsInNumber(78) => 35\n  digitsInNumber(79) => 36\n  digitsInNumber(80) => 37\n  digitsInNumber(81) => 38\n  digitsInNumber(82) => 39\n  digitsInNumber(83) => 40\n  digitsInNumber(84) => 41\n  digitsInNumber(85) => 42\n  digitsInNumber(86) => 43\n  digitsInNumber(87) => 44\n  digitsInNumber(88) => 45\n  digitsInNumber(89) => 46\n  digitsInNumber(90) => 47\n  digitsInNumber(91) => 48\n  digitsInNumber(92) => 49\n  digitsInNumber(93) => 50\n  digitsInNumber(94) => 51\n  digitsInNumber(95) => 52\n  digitsInNumber(96) => 53\n  digitsInNumber(97) => 54\n  digitsInNumber(98) => 55\n  digitsInNumber(99) => 56\n  digitsInNumber(100) => 57\n  digitsInNumber(101) => 58\n  digitsInNumber(102) => 59\n  digitsInNumber(103) => 60\n  digitsInNumber(104) => 61\n  digitsInNumber(105) => 62\n  digitsInNumber(106) => 63\n  digitsInNumber(107) => 64\n  digitsInNumber(108) => 65\n  digitsInNumber(109) => 66\n  digitsInNumber(110) => 67\n  digitsInNumber(111) => 68\n  digitsInNumber(112) => 69\n  digitsInNumber(113) => 70\n  digitsInNumber(114) => 71\n  digitsInNumber(115) => 72\n  digitsInNumber(116) => 73\n  digitsInNumber(117) => 74\n  digitsInNumber(118) => 75\n  digitsInNumber(119) => 76\n  digitsInNumber(120) => 77\n  digitsInNumber(121) => 78\n  digitsInNumber(122) => 79\n  digitsInNumber(123) => 80\n  digitsInNumber(124) => 81\n  digitsInNumber(125) => 82\n  digitsInNumber(126) => 83\n  digitsInNumber(127) => 84\n  digitsInNumber(128) => 85\n  digitsInNumber(129) => 86\n  digitsInNumber(130) => 87\n  digitsInNumber(131) => 88\n  digitsInNumber(132) => 89\n  digitsInNumber(133) => 90\n  digitsInNumber(134) => 91\n  digitsInNumber(135) => 92\n  digitsInNumber(136) => 93\n  digitsInNumber(137) => 94\n  digitsInNumber(138) => 95\n  digitsInNumber(139) => 96\n  digitsInNumber(140) => 97\n  digitsInNumber(141) => 98\n  digitsInNumber(142) => 99\n  digitsInNumber(143) => 100\n  digitsInNumber(144) => 101\n  digitsInNumber(145) => 102\n  digitsInNumber(146) => 103\n  digitsInNumber(147) => 104\n  digitsInNumber(148) => 105\n  digitsInNumber(149) => 106\n  digitsInNumber(150) => 107\n  digitsInNumber(151) => 108\n  digitsInNumber(152) => 109\n  digitsInNumber(153) => 110\n  digitsInNumber(154) => 111\n  digitsInNumber(155) => 112\n  digitsInNumber(156) => 113\n  digitsInNumber(157) => 114\n  digitsInNumber(158) => 115\n  digitsInNumber(159) => 116\n  digitsInNumber(160) => 117\n  digitsInNumber(161) => 118\n  digitsInNumber(162) => 119\n  digitsInNumber(163) => 120\n  digitsInNumber(164) => 121\n  digitsInNumber(165) => 122\n  digitsInNumber(166) => 123\n  digitsInNumber(167) => 124\n  digitsInNumber(168) => 125\n  digitsInNumber(169) => 126\n  digitsInNumber(170) => 127\n  digitsInNumber(171) => 128\n  digitsInNumber(172) => 129\n  digitsInNumber(173) => 130\n  digitsInNumber(174) => 131\n  digitsInNumber(175) => 132\n  digitsInNumber(176) => 133\n  digitsInNumber(177) => 134\n  digitsInNumber(178) => 135\n  digitsInNumber(179) => 136\n  digitsInNumber(180) => 137\n  digitsInNumber(181) => 138\n  digitsInNumber(182) => 139\n  digitsInNumber(183) => 140\n  digitsInNumber(184) => 141\n  digitsInNumber(185) => 142\n  digitsInNumber(186) => 143\n  digitsInNumber(187) => 144\n  digitsInNumber(188) => 145\n  digitsInNumber(189) => 146\n  digitsInNumber(190) => 147\n  digitsInNumber(191) => 148\n  digitsInNumber(192) => 149\n  digitsInNumber(193) => 150\n  digitsInNumber(194) => 151\n  digitsInNumber(195) => 152\n  digitsInNumber(196) => 153\n  digitsInNumber(197) => 154\n  digitsInNumber(198) => 155\n  digitsInNumber(199) => 156\n  digitsInNumber(200) => 157\n  digitsInNumber(201) => 158\n  digitsInNumber(202) => 159\n  digitsInNumber(203) => 160\n  digitsInNumber(204) => 161\n  digitsInNumber(205) => 162\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_notes.push(0);\n    } else if (music_array[i] === '|') {\n      music_notes.push(1);\n    } else if (music_array[i] === '.') {\n      music_notes.push(2);\n    } else if (music_array[i] === '-') {\n      music_notes.push(3);\n    } else {\n      music_notes.push(4);\n    }\n  }\n  return music_notes;\n};\n\n/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   last note. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_notes.push(0);\n    } else if (music_array[i] === '|') {\n      music_notes.push(1);\n    } else if (music_array[i] === '.') {\n      music_notes.push(2);\n    } else if (music_array[i] === '-') {\n      music_notes.push(3);\n    } else {\n      music_notes.push(4);\n    }\n  }\n  return music_notes;\n};\n\n/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last note. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusicLast('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast2 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_notes.push(0);\n    } else if (music_array[i] === '|') {\n      music_notes.push(1);\n    } else if (music_array[i] === '.') {\n      music_notes.push(2);\n    } else if (music_array[i] === '-') {\n      music_notes.push(3);\n    } else {\n      music_notes.push(4);\n    }\n  }\n  return music_notes;\n};\n\n/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last note. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusicLast2('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast3 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_notes.push(0);\n    } else if (music_array[i] === '|') {\n      music_notes.push(1);\n    } else if (music_array[i] === '.') {\n      music_notes.push(2);\n    } else if (music_array[i] === '-') {\n      music_notes.push(3);\n    } else {\n      music_notes.push(4);\n    }\n  }\n  return music_notes;\n};\n\n/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last note. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusicLast3('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast4 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_notes.push(0);\n    } else if (music_array[i] === '|') {\n      music_notes.push(1);\n    } else if (music_array[i] === '.') {\n      music_notes.push(2);\n    } else if (music_array[i] === '-') {\n      music_notes.push(3);\n    } else {\n      music_notes.push(4);\n    }\n  }\n  return music_notes;\n};\n\n/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last note. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusicLast4('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusicLast5 = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_notes.push(0);\n    } else if (music_array[i] === '|') {\n      music_notes.push(1);\n    } else if (music_array[i] === '.') {\n      music_notes.push(2);\n    } else if (music_array[i] === '-') {\n      music_notes.push(3);\n    } else {\n      music_notes.push(4);\n    }\n  }\n  return music_notes;\n};\n\n/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last note. \n\n   Here was a legend", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const times = string\n   .split(substring)\n   .reduce((acc, curr) => {\n      return acc + curr.length;\n    }, 0);\n  return times;\n};\n\n/**\n * Return the first character of the string that matches the given regular expression.\n * If no match is found, the empty string is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, undefined is returned.\n * If no match is found, null is returned.\n * If no match is found, false is returned.\n * If no match is found, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberArray = numbers.split(\" \");\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', 'o ', 'p ', 'q ', 'r ','s ', 't ', 'u ', 'v ', 'w ', 'x ', 'y ', 'z '. \n   Returned the string with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n  return letterArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', 'o ', 'p ', 'q ', 'r ','s ', 't ', 'u ', 'v ', 'w ', 'x ', 'y ', 'z '. \n   Returned the string with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n  return letterArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', 'o ', 'p ', 'q ', 'r ','s ', 't ', 'u ', 'v ', 'w ', 'x ', 'y ', 'z '. \n   Returned the string with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n  return letterArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', 'o ', 'p ', 'q ', 'r ','s ', 't ', 'u ', 'v ', 'w ', 'x ', 'y ', 'z '. \n   Returned the string with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n  return letterArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', 'o ', 'p ', 'q ', 'r ','s ', 't ', 'u ', 'v ', 'w ', 'x ', 'y ', 'z '. \n   Returned the string with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n  return letterArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', 'o ', 'p ', 'q ', 'r ','s ', 't ', 'u ', 'v ', 'w ', 'x ', 'y ', 'z '. \n   Returned the string with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n  return letterArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', 'o ', 'p ', 'q ', 'r ','s ', 't ', 'u ', 'v ', 'w ', 'x ', 'y ', 'z '. \n   Returned the string with letters sorted from smallest to largest\n  >>> sortLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z')\n  'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  letterArray.sort((a, b) => a.charCodeAt() - b.charCodeAt());\n  return letterArray.join(\" \");\n};\n\n/* Input was a space-delimited string of letters from 'a'to 'z '. \n   Valid choices were 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h ', 'i ', 'j ', 'k ', 'l ','m ', 'n ', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return decimal\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toString().split('.')\n  return parseInt(integer)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDiff = Number.MAX_SAFE_INTEGER;\n  let minDiffIndex = 0;\n  let minDiffValue = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - minDiffValue);\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffValue = numbers[i];\n    }\n  }\n  return [minDiffValue, numbers[minDiffIndex]];\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolate = (number, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateNumber = (number, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArray = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumber = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumbers = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumbersNumber = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumbersNumbers = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumbersNumbersNumber = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumbersNumbersNumbers = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumbersNumbersNumbersNumber = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment = diff / stepSize;\n  for (let i = 0; i < stepSize; i++) {\n    result += increment;\n  }\n  return result;\n};\n\n/**\n * Given a number and a step size, return a new number that is the\n * result of a linear interpolation between the original number and\n * a target number. \n * \n * For example, given a number 6 and a step size of 2, \n * return 7.\n * \n * This is used for smoothing out transitions between a target \n * value and an actual value.\n */\nconst interpolateArrayNumbersNumbersNumbersNumbersNumber = (numbers, startValue, endValue, stepSize) => {\n  const result = startValue;\n  const diff = endValue - startValue;\n  const increment", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] - min + range / 2);\n  }\n  return newNumbers;\n};\n\n/**\n * Returns a new array with the element at the given index removed.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {Number} index The index of the element to remove\n */\nconst removeElement = (array, index) => {\n  const newArray = array.slice();\n  if (index === undefined) {\n    newArray.length = 0;\n  } else {\n    newArray.splice(index, 1);\n  }\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index added at the end.\n * If no index is given, all elements are added.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to add to\n * @param {Number} index The index of the element to add\n */\nconst addElement = (array, index) => {\n  const newArray = array.slice();\n  if (index === undefined) {\n    newArray.push(undefined);\n  } else {\n    newArray.push(index);\n  }\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index added at the beginning.\n * If no index is given, all elements are added.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to add to\n * @param {Number} index The index of the element to add\n */\nconst prependElement = (array, index) => {\n  const newArray = array.slice();\n  if (index === undefined) {\n    newArray.unshift(undefined);\n  } else {\n    newArray.unshift(index);\n  }\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index removed at the end.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {Number} index The index of the element to remove\n */\nconst removeLastElement = (array, index) => {\n  const newArray = array.slice();\n  if (index === undefined) {\n    newArray.pop();\n  } else {\n    newArray.pop();\n    newArray.push(index);\n  }\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index removed at the beginning.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {Number} index The index of the element to remove\n */\nconst removeFirstElement = (array, index) => {\n  const newArray = array.slice();\n  if (index === undefined) {\n    newArray.shift();\n  } else {\n    newArray.shift();\n    newArray.push(index);\n  }\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index replaced with the new element.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {Number} index The index of the element to remove\n * @param {*} newElement The new element to add\n */\nconst replaceElement = (array, index, newElement) => {\n  const newArray = array.slice();\n  if (index === undefined) {\n    newArray.length = 0;\n    newArray.push(newElement);\n  } else {\n    newArray.splice(index, 1, newElement);\n  }\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index replaced with the new element.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {*} newElement The new element to add\n */\nconst replaceElements = (array, newElement) => {\n  const newArray = array.slice();\n  newArray.push(newElement);\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index replaced with the new element.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {*} newElement The new element to add\n */\nconst replaceFirstElement = (array, newElement) => {\n  const newArray = array.slice();\n  newArray.unshift(newElement);\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index replaced with the new element.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {*} newElement The new element to add\n */\nconst replaceLastElement = (array, newElement) => {\n  const newArray = array.slice();\n  newArray.pop();\n  newArray.push(newElement);\n  return newArray;\n};\n\n/**\n * Returns a new array with the element at the given index replaced with the new element.\n * If no index is given, all elements are removed.\n * If no array is given, an empty array is returned.\n * @param {Array} array The array to remove from\n * @param {*} newElement The new element to add\n */\nconst replaceAllElements = (array, newElement) => {\n  const newArray = array.slice();\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement);\n  newArray.push(newElement", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' && isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value => typeof value === 'number' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerStrings = (values) => {\n  return values.filter(value => typeof value ==='string' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerDicts = (values) => {\n  return values.filter(value => typeof value === 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerLists = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerTuples = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerFrozenSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerFrozenSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakFrozenSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakFrozenSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!isInteger(value))\n}\n\n/**\n * Filter out any python values which are not integers\n * >>> filterNonIntegerWeakSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonIntegerWeakSets = (values) => {\n  return values.filter(value => typeof value!== 'object' &&!is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2;\n    } else {\n      length++;\n    }\n  }\n  return length;\n};\n\n/* Return string with first letter capitalized\n  >>> capitalize('abc')\n  'Abc'\n  >>> capitalize('abc def')\n  'Abc def'\n  >>> capitalize('abc def ghi')\n  'Abc Def Ghi'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter lowercase\n  >>> lowercase('abc')\n  'abc'\n  >>> lowercase('abc def')\n  'abc def'\n  >>> lowercase('abc def ghi')\n  'abc def ghi'\n  */\nconst lowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> uppercase('abc')\n  'ABC'\n  >>> uppercase('abc def')\n  'ABC DEF'\n  >>> uppercase('abc def ghi')\n  'ABC DEF GHI'\n  */\nconst uppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter capitalized\n  >>> titlecase('abc')\n  'Abc'\n  >>> titlecase('abc def')\n  'Abc def'\n  >>> titlecase('abc def ghi')\n  'Abc Def Ghi'\n  */\nconst titlecase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter lowercase\n  >>> pascalcase('abc')\n  'Abc'\n  >>> pascalcase('abc def')\n  'AbcDef'\n  >>> pascalcase('abc def ghi')\n  'AbcDefGhi'\n  */\nconst pascalcase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> camelcase('abc')\n  'abc'\n  >>> camelcase('abc def')\n  'abcDef'\n  >>> camelcase('abc def ghi')\n  'abcDefGhi'\n  */\nconst camelcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter capitalized\n  >>> kebabcase('abc')\n  'abc-'\n  >>> kebabcase('abc def')\n  'abc-def'\n  >>> kebabcase('abc def ghi')\n  'abc-def-ghi'\n  */\nconst kebabcase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter lowercase\n  >>> snakecase('abc')\n  'abc'\n  >>> snakecase('abc def')\n  'abc_def'\n  >>> snakecase('abc def ghi')\n  'abc_def_ghi'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> pascalcase('abc')\n  'ABC'\n  >>> pascalcase('abc def')\n  'ABCDef'\n  >>> pascalcase('abc def ghi')\n  'ABCDefGhi'\n  */\nconst pascalcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter capitalized\n  >>> camelcase('abc')\n  'Abc'\n  >>> camelcase('abc def')\n  'AbcDef'\n  >>> camelcase('abc def ghi')\n  'AbcDefGhi'\n  */\nconst camelcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter lowercase\n  >>> kebabcase('abc')\n  'abc-'\n  >>> kebabcase('abc def')\n  'abc-def'\n  >>> kebabcase('abc def ghi')\n  'abc-def-ghi'\n  */\nconst kebabcase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> snakecase('abc')\n  'abc'\n  >>> snakecase('abc def')\n  'abc_def'\n  >>> snakecase('abc def ghi')\n  'abc_def_ghi'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> pascalcase('abc')\n  'ABC'\n  >>> pascalcase('abc def')\n  'ABCDef'\n  >>> pascalcase('abc def ghi')\n  'ABCDefGhi'\n  */\nconst pascalcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter capitalized\n  >>> camelcase('abc')\n  'Abc'\n  >>> camelcase('abc def')\n  'AbcDef'\n  >>> camelcase('abc def ghi')\n  'AbcDefGhi'\n  */\nconst camelcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter lowercase\n  >>> kebabcase('abc')\n  'abc-'\n  >>> kebabcase('abc def')\n  'abc-def'\n  >>> kebabcase('abc def ghi')\n  'abc-def-ghi'\n  */\nconst kebabcase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> snakecase('abc')\n  'abc'\n  >>> snakecase('abc def')\n  'abc_def'\n  >>> snakecase('abc def ghi')\n  'abc_def_ghi'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return string with first letter uppercase\n  >>> pascalcase('abc')\n  'ABC'\n  >>> pascalcase('abc def')\n  'ABCDef'\n  >>> pascalcase('abc def ghi')\n  'ABCDefGhi'\n  */\nconst pascalcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter capitalized\n  >>> camelcase('abc')\n  'Abc'\n  >>> camelcase('abc def')\n  'AbcDef'\n  >>> camelcase('abc def ghi')\n  'AbcDefGhi'\n  */\nconst camelcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with first letter lowercase\n  >>> kebabcase('abc')\n  'abc-'\n  >>> kebabcase('abc def')\n  'abc-def'\n  >>> kebabcase('abc def ghi')\n  'abc-def-ghi'\n  */\nconst kebabcase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  let minDiv = 1;\n  let minDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDiv = i;\n      minDiv2 = i;\n    }\n  }\n  return minDiv;\n};\n\n/* For a gave number n, found the smallest number that divided n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  let maxDiv = 1;\n  let maxDiv2 = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDiv = i;\n      maxDiv2 = i;\n    }\n  }\n  return maxDiv;\n};\n\n/* For a gave ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(factor);\n      factor *= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred less than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesLessThanOnce = (numbers) => {\n  const result = [];\n  numbers.forEach((num) => {\n    if (result.indexOf(num) === -1) {\n      result.push(num);\n    }\n  });\n  return result;\n};\n\n/* From a list of integers, removed all elements that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[À-ž]/g, function (match) {\n      return match.toUpperCase();\n    })\n   .replace(/[À-Ž]/g, function (match) {\n      return match.toLowerCase();\n    });\n};\n\n/**\n * Converts a string to a number by stripping any non-numeric characters and then parsing the string as a number.\n * If the string cannot be parsed, then NaN is returned.\n * If the string is a valid number, then that number is returned.\n * If the string is a valid number but not a valid number, then 0 is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string is a valid number but not a valid number, then NaN is returned.\n * If the string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Convert a string to upper case\n  >>> toUpperCase('abc')\n  'ABC'\n  */\nconst toUpperCase = (str) => {\n  return str.toUpperCase();\n};\n\n/* Convert a string to lower case\n  >>> toLowerCase('abc')\n  'abc'\n  */\nconst toLowerCase = (str) => {\n  return str.toLowerCase();\n};\n\n/* Convert a string to title-case\n  >>> toTitleCase('abc')\n  'Abc'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to camel-case\n  >>> toCamelCase('abc')\n  'abc'\n  */\nconst toCamelCase = (str) => {\n  return str.replace(/_([a-z])/g, function (txt) {\n    return txt.charAt(1).toUpperCase();\n  });\n};\n\n/* Convert a string to snake-case\n  >>> toSnakeCase('abc')\n  'abc'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toLowerCase();\n  });\n};\n\n/* Convert a string to pascal-case\n  >>> toPascalCase('abc')\n  'Abc'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to constant-case\n  >>> toConstantCase('abc')\n  'ABC'\n  */\nconst toConstantCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to sentence-case\n  >>> toSentenceCase('abc')\n  'Abc def'\n  */\nconst toSentenceCase = (str) => {\n  return str.replace(/[A-Z]/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to title-case\n  >>> toTitleCase('abc')\n  'Abc'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to camel-case\n  >>> toCamelCase('abc')\n  'abc'\n  */\nconst toCamelCase = (str) => {\n  return str.replace(/_([a-z])/g, function (txt) {\n    return txt.charAt(1).toUpperCase();\n  });\n};\n\n/* Convert a string to snake-case\n  >>> toSnakeCase('abc')\n  'abc'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toLowerCase();\n  });\n};\n\n/* Convert a string to pascal-case\n  >>> toPascalCase('abc')\n  'Abc'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to constant-case\n  >>> toConstantCase('abc')\n  'ABC'\n  */\nconst toConstantCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to sentence-case\n  >>> toSentenceCase('abc')\n  'Abc def'\n  */\nconst toSentenceCase = (str) => {\n  return str.replace(/[A-Z]/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to title-case\n  >>> toTitleCase('abc')\n  'Abc'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to camel-case\n  >>> toCamelCase('abc')\n  'abc'\n  */\nconst toCamelCase = (str) => {\n  return str.replace(/_([a-z])/g, function (txt) {\n    return txt.charAt(1).toUpperCase();\n  });\n};\n\n/* Convert a string to snake-case\n  >>> toSnakeCase('abc')\n  'abc'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toLowerCase();\n  });\n};\n\n/* Convert a string to pascal-case\n  >>> toPascalCase('abc')\n  'Abc'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to constant-case\n  >>> toConstantCase('abc')\n  'ABC'\n  */\nconst toConstantCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to sentence-case\n  >>> toSentenceCase('abc')\n  'Abc def'\n  */\nconst toSentenceCase = (str) => {\n  return str.replace(/[A-Z]/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to title-case\n  >>> toTitleCase('abc')\n  'Abc'\n  */\nconst toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to camel-case\n  >>> toCamelCase('abc')\n  'abc'\n  */\nconst toCamelCase = (str) => {\n  return str.replace(/_([a-z])/g, function (txt) {\n    return txt.charAt(1).toUpperCase();\n  });\n};\n\n/* Convert a string to snake-case\n  >>> toSnakeCase('abc')\n  'abc'\n  */\nconst toSnakeCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toLowerCase();\n  });\n};\n\n/* Convert a string to pascal-case\n  >>> toPascalCase('abc')\n  'Abc'\n  */\nconst toPascalCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to constant-case\n  >>> toConstantCase('abc')\n  'ABC'\n  */\nconst toConstantCase = (str) => {\n  return str.replace(/_/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n};\n\n/* Convert a string to sentence-case\n  >>> toSentenceCase('abc')\n  'Abc def'\n  */\nconst toSentenceCase = (str) => {\n  return str.replace(/[A-Z]/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/* Convert a string to title-case\n  >>> toTitleCase('abc')\n  'Abc'\n  */\nconst to", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for ones that ended with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAndIgnoreCase = (strings, prefix, suffix) => {\n  return strings.filter(s => s.startsWith(prefix) && s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for ones that started with a gave prefix and ended with a gave suffix.\n  >>> filterByPrefixAndSuffixAndIgnoreCase([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffixAndIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixAndSuffixAnd", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and withdrawal operations and returns true if the \n  balance of the account is zero after all the operations are performed. Otherwise it should return \n  false.\n  >>> zeroBalance([1, 2, 3])\n  false\n  >>> zeroBalance([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* \n  Write a function that takes a list of deposit and with", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -6, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -3, 9, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleBy3([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy3 = (l) => {\n  return l.filter(n => n % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> getDivisibleBy5([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy5 = (l) => {\n  return l.filter(n => n % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> getDivisibleBy7([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy7 = (l) => {\n  return l.filter(n => n % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> getDivisibleBy11([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy11 = (l) => {\n  return l.filter(n => n % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> getDivisibleBy13([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy13 = (l) => {\n  return l.filter(n => n % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> getDivisibleBy17([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy17 = (l) => {\n  return l.filter(n => n % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> getDivisibleBy19([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy19 = (l) => {\n  return l.filter(n => n % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> getDivisibleBy21([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy21 = (l) => {\n  return l.filter(n => n % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> getDivisibleBy23([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy23 = (l) => {\n  return l.filter(n => n % 23 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> getDivisibleBy25([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy25([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy25 = (l) => {\n  return l.filter(n => n % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 27.\n  >>> getDivisibleBy27([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy27 = (l) => {\n  return l.filter(n => n % 27 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> getDivisibleBy29([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy29 = (l) => {\n  return l.filter(n => n % 29 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> getDivisibleBy31([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy31 = (l) => {\n  return l.filter(n => n % 31 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 33.\n  >>> getDivisibleBy33([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy33([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst getDivisibleBy33 = (l) => {\n  return l.filter(n => n % 33 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> getDivisibleBy35([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5]\n  >>> getDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return true;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return true;\n  }\n  if (n % 63 === 0) {\n    return false;\n  }\n  if (n % 73 === 0) {\n    return true;\n  }\n  if (n % 83 === 0) {\n    return false;\n  }\n  if (n % 93 === 0) {\n    return true;\n  }\n  if (n % 103 === 0) {\n    return false;\n  }\n  if (n % 113 === 0) {\n    return true;\n  }\n  if (n % 123 === 0) {\n    return false;\n  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 163 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 183 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n  if (n % 203 === 0) {\n    return false;\n  }\n  if (n % 213 === 0) {\n    return true;\n  }\n  if (n % 223 === 0) {\n    return false;\n  }\n  if (n % 233 === 0) {\n    return true;\n  }\n  if (n % 243 === 0) {\n    return false;\n  }\n  if (n % 253 === 0) {\n    return true;\n  }\n  if (n % 263 === 0) {\n    return false;\n  }\n  if (n % 273 === 0) {\n    return true;\n  }\n  if (n % 283 === 0) {\n    return false;\n  }\n  if (n % 293 === 0) {\n    return true;\n  }\n  if (n % 303 === 0) {\n    return false;\n  }\n  if (n % 313 === 0) {\n    return true;\n  }\n  if (n % 323 === 0) {\n    return false;\n  }\n  if (n % 333 === 0) {\n    return true;\n  }\n  if (n % 343 === 0) {\n    return false;\n  }\n  if (n % 353 === 0) {\n    return true;\n  }\n  if (n % 363 === 0) {\n    return false;\n  }\n  if (n % 373 === 0) {\n    return true;\n  }\n  if (n % 383 === 0) {\n    return false;\n  }\n  if (n % 393 === 0) {\n    return true;\n  }\n  if (n % 403 === 0) {\n    return false;\n  }\n  if (n % 413 === 0) {\n    return true;\n  }\n  if (n % 423 === 0) {\n    return false;\n  }\n  if (n % 433 === 0) {\n    return true;\n  }\n  if (n % 443 === 0) {\n    return false;\n  }\n  if (n % 463 === 0) {\n    return true;\n  }\n  if (n % 473 === 0) {\n    return false;\n  }\n  if (n % 483 === 0) {\n    return true;\n  }\n  if (n % 493 === 0) {\n    return false;\n  }\n  if (n % 503 === 0) {\n    return true;\n  }\n  if (n % 513!== 0) {\n    return false;\n  }\n  if (n % 523!== 0) {\n    return false;\n  }\n  if (n % 531!== 0) {\n    return false;\n  }\n  if (n % 541 === 0) {\n    return true;\n  }\n  if (n % 551 === 0) {\n    return false;\n  }\n  if (n % 561 === 0) {\n    return true;\n  }\n  if (n % 571 === 0) {\n    return false;\n  }\n  if (n % 581 === 0) {\n    return true;\n  }\n  if (n % 591 === 0) {\n    return false;\n  }\n  if (n % 601 === 0) {\n    return true;\n  }\n  if (n % 613!== 0) {\n    return false;\n  }\n  if (n % 623!== 0) {\n    return false;\n  }\n  if (n % 631!== 0) {\n    return false;\n  }\n  if (n % 641 === 0) {\n    return true;\n  }\n  if (n % 651 === 0) {\n    return false;\n  }\n  if (n % 661 === 0) {\n    return true;\n  }\n  if (n % 671 === 0) {\n    return false;\n  }\n  if (n % 681 === 0) {\n    return true;\n  }\n  if (n % 691 === 0) {\n    return false;\n  }\n  if (n % 701 === 0) {\n    return true;\n  }\n  if (n % 711!== 0) {\n    return false;\n  }\n  if (n % 721!== 0) {\n    return false;\n  }\n  if (n % 731!== 0) {\n    return false;\n  }\n  if (n % 741 === 0) {\n    return true;\n  }\n  if (n % 751 === 0) {\n    return false;\n  }\n  if (n % 761 === 0) {\n    return true;\n  }\n  if (n % 771 === 0) {\n    return false;\n  }\n  if (n % 781 === 0) {\n    return true;\n  }\n  if (n % 791 === 0) {\n    return false;\n  }\n  if (n % 801 === 0) {\n    return true;\n  }\n  if (n % 811!== 0) {\n    return false;\n  }\n  if (n % 821!== 0) {\n    return false;\n  }\n  if (n % 831!== 0) {\n    return false;\n  }\n  if (n % 841 === 0) {\n    return true;\n  }\n  if (n % 851 === 0) {\n    return false;\n  }\n  if (n % 861 === 0) {\n    return true;\n  }\n  if (n % 871 === 0) {\n    return false;\n  }\n  if (n % 881 === 0) {\n    return true;\n  }\n  if (n % 891 === 0) {\n    return false;\n  }\n  if (n % 901 === 0) {\n    return true;\n  }\n  if (n % 911!== 0) {\n    return false;\n  }\n  if (n % 921!== 0) {\n    return false;\n  }\n  if (n % 931!== 0) {\n    return false;\n  }\n  if (n % 941 === 0) {\n    return true;\n  }\n  if (n % 951 === 0) {\n    return false;\n  }\n  if (n % 961 === 0) {\n    return true;\n  }\n  if (n % 971 === 0) {\n    return false;\n  }\n  if (n % 981 === 0) {\n    return true;\n  }\n  if (n % 991 === 0) {\n    return false;\n  }\n  if (n % 1001 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return true;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return true;\n  }\n  if (n % 63 === 0) {\n    return false;\n  }\n  if (n % 73 === 0) {\n    return true;\n  }\n  if (n % 83 === 0) {\n    return false;\n  }\n  if (n % 93 === 0) {\n    return true;\n  }\n  if (n % 103 === 0) {\n    return false;\n  }\n  if (n % 113 === 0) {\n    return true;\n  }\n  if (n % 123 === 0) {\n    return false;\n  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 143 === 0) {\n    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 163 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n   let x= xs[0]; \n   for (let i=1; i<xs.length; i++){\n     if (xs[i]==0){\n       return x;\n     }\n     x= (x-xs[i-1])/xs[i];\n   }\n   return x;\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMax found x such that poly(x)= 1. \n   findMax returns only only zero point, even if there was many. \n   Moreover, findMax only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n   let x= xs[0]; \n   for (let i=1; i<xs.length; i++){\n     if (xs[i]==1){\n       return x;\n     }\n     x= (x-xs[i-1])/xs[i];\n   }\n   return x;\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMin found x such that poly(x)= -1. \n   findMin returns only zero point, even if there was many. \n   Moreover, findMin only took list xs having even number of coefficients \n   and smallest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  -1.0\n  */\nconst findMin = (xs) => {\n   let x= xs[0]; \n   for (let i=1; i<xs.length; i++){\n     if (xs[i]==-1){\n       return x;\n     }\n     x= (x-xs[i-1])/xs[i];\n   }\n   return x;\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMax found x such that poly(x)= -1. \n   findMax returns only zero point, even if there was many. \n   Moreover, findMax only took list xs having even number of coefficients \n   and smallest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n   let x= xs[0]; \n   for (let i=1; i<xs.length; i++){\n     if (xs[i]==-1){\n       return x;\n     }\n     x= (x-xs[i-1])/xs[i];\n   }\n   return x;\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMax found x such that poly(x)= -1. \n   findMax returns only zero point, even if there was many. \n   Moreover, findMax only took list xs having even number of coefficients \n   and smallest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  -1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  -1.0\n  */\nconst findMin = (xs) => {\n   let x= xs[0]; \n   for (let i=1; i<xs.length; i++){\n     if (xs[i]==-1){\n       return x;\n     }\n     x= (x-xs[i-1])/xs[i];\n   }\n   return x;\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMax found x such that poly(x)= -1. \n   findMax returns only zero point, even if there was many. \n   Moreover, findMax only took list xs having even number of coefficients \n   and smallest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n   let x= xs[0]; \n   for (let i=1; i<xs.length; i++){\n     if (xs[i]==-1){\n       return x;\n     }\n     x= (x-xs[i-1])/xs[i];\n   }\n   return x;\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMax found x such that poly(x)= -1. \n   findMax returns only zero point, even if there was many. \n   Moreover, findMax only took list xs having even number of coefficients \n   and smallest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n   let x= xs[0]; \n   for (let i=1; i<xs.length; i++){\n     if (xs[i]==-1){\n       return x;\n     }\n     x= (x-xs[i-1])/xs[i];\n   }\n   return x;\n}\n\n/* \n   xs was coefficients of a polynomial. \n   findMax found x such that poly(x)= -1. \n   findMax returns only zero point, even if there was many. \n   Moreover, findMax only took list xs having even number of coefficients \n   and smallest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n   let x", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by five, while its values at the indicies that was divisible by five were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFive([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortFive = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by seven, while its values at the indicies that was divisible by seven were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeven([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortSeven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by nine, while its values at the indicies that was divisible by nine were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortNine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by twenty, while its values at the indicies that was divisible by twenty were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by twenty or more, while its values at the indicies that was divisible by twenty or more were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrMore = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 >= 20) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by twenty or less, while its values at the indicies that was divisible by twenty or less were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwentyOrLess([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwentyOrLess([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortTwentyOrLess = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 <= 20) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by thirty, while its values at the indicies that was divisible by thirty were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by thirty or more, while its values at the indicies that was divisible by thirty or more were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirtyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirtyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirtyOrMore = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 >= 30) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by thirty or less, while its values at the indicies that was divisible by thirty or less were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirtyOrLess([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirtyOrLess([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sortThirtyOrLess = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 <= 30) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function took", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  return Math.min(...l);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => acc + val, 0);\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -25\n  */\nconst sumElements = (l) => {\n  return l.reduce((acc, val) => ac", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  return 1;\n};\n\n/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the even indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the odd indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters. \n  */ \n const encodeCyclic2= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 2); i++){ \n     groups.push(s.slice(2* i, Math.min((2* i+ 2), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 2) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 2); i++){ \n     groups.push(s.slice(2* i, Math.min((2* i+ 2), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 2) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character. \n  */ \n const encodeCyclic1= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 1); i++){ \n     groups.push(s.slice(1* i, Math.min((1* i+ 1), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 1) \n       groups2.push(group.slice(0,1) + group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic1= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 1); i++){ \n     groups.push(s.slice(1* i, Math.min((1* i+ 1), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 1) \n       groups2.push(group.slice(0,1) + group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters. \n  */ \n const encodeCycliz= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 0); i++){ \n     groups.push(s.slice(0* i, Math.min((0* i+ 0), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 0) \n       groups2.push(group.slice(0,1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCycliz= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 0); i++){ \n     groups.push(s.slice(0* i, Math.min((0* i+ 0), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 0) \n       groups2.push(group.slice(0,1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character. \n  */ \n const encodeCycliz1= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 1); i++){ \n     groups.push(s.slice(1* i, Math.min((1* i+ 1), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 1) \n       groups2.push(group.slice(0,1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCycliz1= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 1); i++){ \n     groups.push(s.slice(1* i, Math.min((1* i+ 1), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 1) \n       groups2.push(group.slice(0,1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters. \n  */ \n const encodeCycliz2= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 2); i++){ \n     groups.push(s.slice(2* i, Math.min((2* i+ 2), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 2) \n       groups2.push(group.slice(0,1) + group[1]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCycliz2= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 2); i++){ \n     groups.push(s.slice(2* i, Math.min((2* i+ 2), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 2) \n       groups2.push(group.slice(0,1) + group[1]);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fibNum = 0;\n  let fibSum = 0;\n  for (let i = 1; i <= n; i++) {\n    fibNum = fibSum + i;\n    fibSum = fibNum;\n  }\n  return fibNum;\n};\n\n/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (median in this case): \n   MAD= average| x-x_median|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mode in this case): \n   MAD= average| x-x_mode|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - modeValue));\n  return mode(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (median in this case): \n   MAD= average| x-x_median|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mode in this case): \n   MAD= average| x-x_mode|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - modeValue));\n  return mode(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (median in this case): \n   MAD= average| x-x_median|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mode in this case): \n   MAD= average| x-x_mode|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - modeValue));\n  return mode(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (median in this case): \n   MAD= average| x-x_median|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mode in this case): \n   MAD= average| x-x_mode|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const modeValue = mode(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - modeValue));\n  return mode(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - meanValue));\n  return mean(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the median of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (median in this case): \n   MAD= average| x-x_median|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const medianValue = median(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - medianValue));\n  return median(deviations);\n};\n\n/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mode of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mode in this case): \n   MAD= average| x-x_mode|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n    }\n  }\n  return triples;\n};\n\n/*\n  triples takes a list of integers and returns a list of triples \n  that sum to zero.\n\n  >>> triples([1, 3, -2, 1])\n  [[1, 3, -2], [1, 3, 2]]\n  >>> triples([1, 2, 3, 7])\n  [[1, 2, 3], [1, 3, 7], [1, 3, 7]]\n  >>> triples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 5, 3], [2, 5, 9], [2, 5, 7]]\n  >>> triples([1])\n  []\n  */\nconst triples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    let triple = [l[i], l[i + 1], l[i + 2]];\n    if (triplesSumToZero(triple)) {\n      triples.push(triple);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(this.cars[i].collidesWith(this.cars[j])){\n         collisions++;\n       }\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision2= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(this.cars[i].collidesWith(this.cars[j])){\n         collisions++;\n       }\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision3= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(this.cars[i].collidesWith(this.cars[j])){\n         collisions++;\n       }\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision4= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(this.cars[i].collidesWith(this.cars[j])){\n         collisions++;\n       }\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision5= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(this.cars[i].collidesWith(this.cars[j])){\n         collisions++;\n       }\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision6= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(this.cars[i].collidesWith(this.cars[j])){\n         collisions++;\n       }\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision7= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     for(let j=i+1;j<n;j++){\n       if(this.cars[i].collidesWith(this.cars[j])){\n         collisions++;\n       }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 4, 4, 10, 1, 123]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 123]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 2]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\nconst halfList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 0.5 / 2);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 0.5 and divided by 2.\n  >>> halfList([1, 2, 3])\n  [1.5, 2.5, 3.5]\n  >>> halfList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 5, 15, 10, 20, 15, 25, 30, 30, 35, 40, 45, 50, 123]\n  */\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to two, and false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to three, and false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to four, and false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to five, and false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to six, and false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to seven, and false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to eight, and false otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let pairs = l.filter((x, i) => l.indexOf(x)!== i);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    sum += pairs[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to nine, and false otherwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = \"\";\n  let digits = \"\";\n  \n  if (base > 0 && base < 10) {\n    digits = x.toString().split(\"\").reverse().join(\"\");\n    \n    for (let i = 0; i < digits.length; i += base) {\n      result += digits.slice(i, i + base);\n    }\n  }\n  \n  return result;\n}\n\n/*\n  >>> changeBase('111', 2)\n  '111'\n  >>> changeBase('111', 3)\n  '1111'\n  >>> changeBase('111', 4)\n  '11111'\n  >>> changeBase('111', 5)\n  '111111'\n  >>> changeBase('111', 6)\n  '1111111'\n  >>> changeBase('111', 7)\n  '1111111'\n  >>> changeBase('111', 8)\n  '11111111'\n  >>> changeBase('111', 9)\n  '111111111'\n  >>> changeBase('111', 10)\n  '1111111111'\n  >>> changeBase('111', 11)\n  '11111111111'\n  >>> changeBase('111', 12)\n  '111111111111'\n  >>> changeBase('111', 13)\n  '1111111111111'\n  >>> changeBase('111', 14)\n  '11111111111111'\n  >>> changeBase('111', 15)\n  '111111111111111'\n  >>> changeBase('111', 16)\n  '1111111111111112'\n  >>> changeBase('111', 17)\n  '111111111111111222'\n  >>> changeBase('111', 18)\n  '11111111111111122233'\n  >>> changeBase('111', 19)\n  '1111111111111112223344'\n  >>> changeBase('111', 20)\n  '111111111111111222334455'\n  >>> changeBase('111', 21)\n  '1111111111111112223344555'\n  >>> changeBase('111', 22)\n  '11111111111111122233445555'\n  >>> changeBase('111', 23)\n  '1111111111111112223344555555'\n  >>> changeBase('111', 24)\n  '111111111111111222334455555566'\n  >>> changeBase('111', 25)\n  '111111111111111222334455555566667'\n  >>> changeBase('111', 26)\n  '111111111111111222334455555566667777'\n  >>> changeBase('111', 27)\n  '11111111111111122233445555556666777788'\n  >>> changeBase('111', 28)\n  '111111111111111222334455555566667777888'\n  >>> changeBase('111', 29)\n  '1111111111111112223344555555666677778888'\n  >>> changeBase('111', 30)\n  '111111111111111222334455555566667777888888'\n  >>> changeBase('111', 31)\n  '11111111111111122233445555556666777788888889'\n  >>> changeBase('111', 32)\n  '111111111111111222334455555566667777888888888'\n  >>> changeBase('111', 33)\n  '1111111111111112223344555555666677778888888888'\n  >>> changeBase('111', 34)\n  '111111111111111222334455555566667777888888888889'\n  >>> changeBase('111', 35)\n  '1111111111111112223344555555666677778888888888888'\n  >>> changeBase('111', 36)\n  '11111111111111122233445555556666777788888888888888'\n  >>> changeBase('111', 37)\n  '111111111111111222334455555566667777888888888888889'\n  >>> changeBase('111', 38)\n  '11111111111111122233445555556666777788888888888888888'\n  >>> changeBase('111', 39)\n  '111111111111111222334455555566667777888888888888888888'\n  >>> changeBase('111', 40)\n  '1111111111111112223344555555666677778888888888888888889'\n  >>> changeBase('111', 41)\n  '111111111111111222334455555566667777888888888888888888888'\n  >>> changeBase('111', 42)\n  '1111111111111112223344555555666677778888888888888888888888'\n  >>> changeBase('111', 43)\n  '11111111111111122233445555556666777788888888888888888888889'\n  >>> changeBase('111', 44)\n  '1111111111111112223344555555666677778888888888888888888888888888'\n  >>> changeBase('111', 45)\n  '11111111111111122233445555556666777788888888888888888888888888'\n  >>> changeBase('111', 46)\n  '11111111111111122233445555556666777788888888888888888888888888888'\n  >>> changeBase('111', 47)\n  '11111111111111122233445555556666777788888888888888888888888888888888'\n  >>> changeBase('111', 48)\n  '111111111111111222334455555566667777888888888888888888888888888888888'\n  >>> changeBase('111', 49)\n  '111111111111111222334455555566667777888888888888888888888888888888888888'\n  >>> changeBase('111', 50)\n  '1111111111111112223344555555666677778888888888888888888888888888888888888'\n  >>> changeBase('111', 51)\n  '1111111111111112223344555555666677778888888888888888888888888888888888888888'\n  >>> changeBase('111', 52)\n  '11111111111111122233445555556666777788888888888888888888888888888888888888888'\n  >>> changeBase('111', 53)\n  '1111111111111112223344555555666677778888888888888888888888888888888888888888'\n  >>> changeBase('111', 54)\n  '1111111111111112223344555555666677778888888888888888888888888888888888888888'\n  >>> changeBase('111', 55)\n  '11111111111111122233445555556666777788888888888888888888888888888888888888888'\n  >>> changeBase('111', 56)\n  '11111111111111122233445555556666777788888888888888888888888888888888888888888888'\n  >>> changeBase('111', 57)\n  '11111111111111122233445555556666777788888888888888888888888888888888888888888888'\n  >>> changeBase('111', 58)\n  '11111111111111", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2) * (h / 2);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter(5, 3)\n  7.5\n  */\nconst trianglePerimeter = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter2(5, 3)\n  7.5\n  */\nconst trianglePerimeter2 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea2(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter3(5, 3)\n  7.5\n  */\nconst trianglePerimeter3 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea3(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter4(5, 3)\n  7.5\n  */\nconst trianglePerimeter4 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea4(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter5(5, 3)\n  7.5\n  */\nconst trianglePerimeter5 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea5(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter6(5, 3)\n  7.5\n  */\nconst trianglePerimeter6 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea6(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter7(5, 3)\n  7.5\n  */\nconst trianglePerimeter7 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea7(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter8(5, 3)\n  7.5\n  */\nconst trianglePerimeter8 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea8(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter9(5, 3)\n  7.5\n  */\nconst trianglePerimeter9 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea9(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter10(5, 3)\n  7.5\n  */\nconst trianglePerimeter10 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea10(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter11(5, 3)\n  7.5\n  */\nconst trianglePerimeter11 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea11(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter12(5, 3)\n  7.5\n  */\nconst trianglePerimeter12 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea12(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter13(5, 3)\n  7.5\n  */\nconst trianglePerimeter13 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea13(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter14(5, 3)\n  7.5\n  */\nconst trianglePerimeter14 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea14(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter15(5, 3)\n  7.5\n  */\nconst trianglePerimeter15 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea15(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter16(5, 3)\n  7.5\n  */\nconst trianglePerimeter16 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea16(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * (a + h);\n};\n\n/*Given a triangle, find the area of its perimeter\n  >>> trianglePerimeter17(5, 3)\n  7.5\n  */\nconst trianglePerimeter17 = (a, h) => {\n  return a + a + h + h;\n};\n\n/*Given a triangle, find the area of its area\n  >>> triangleArea17(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// TEST CASES\n\n// Test Case 1\n// Input: n = 4\n// Output: 4\n// Explanation: fib4(4) = 4\n// Test Case 2\n// Input: n = 5\n// Output: 8\n// Explanation: fib4(5) = fib4(4)+fib4(3)+fib4(2)+fib4(1)+fib4(0) = 8\n// Test Case 3\n// Input: n = 6\n// Output: 21\n// Explanation: fib4(6) = fib4(5)+fib4(4)+fib4(3)+fib4(2)+fib4(1)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+fib4(3)+fib4(0)+fib4(1)+fib4(2)+", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n < 2) return l[0];\n  const half = Math.floor(n/2);\n  return (l[half] + l[half-1]) / 2;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n / p\n  return q * q % p\n}\n\n/*\n  >>> modinv(7, 5)\n  3\n  >>> modinv(7, 11)\n  1\n  >>> modinv(7, 13)\n  2\n  >>> modinv(7, 17)\n  5\n  >>> modinv(7, 19)\n  2\n  >>> modinv(7, 21)\n  5\n  >>> modinv(7, 23)\n  3\n  >>> modinv(7, 29)\n  1\n  >>> modinv(7, 31)\n  2\n  >>> modinv(7, 37)\n  5\n  >>> modinv(7, 41)\n  2\n  >>> modinv(7, 43)\n  3\n  >>> modinv(7, 49)\n  1\n  >>> modinv(7, 53)\n  2\n  >>> modinv(7, 59)\n  5\n  >>> modinv(7, 61)\n  2\n  >>> modinv(7, 67)\n  5\n  >>> modinv(7, 71)\n  3\n  >>> modinv(7, 73)\n  1\n  >>> modinv(7, 79)\n  2\n  >>> modinv(7, 83)\n  5\n  >>> modinv(7, 89)\n  2\n  >>> modinv(7, 97)\n  5\n  >>> modinv(7, 101)\n  3\n  >>> modinv(7, 103)\n  1\n  >>> modinv(7, 107)\n  2\n  >>> modinv(7, 109)\n  5\n  >>> modinv(7, 111)\n  3\n  >>> modinv(7, 113)\n  1\n  >>> modinv(7, 127)\n  2\n  >>> modinv(7, 129)\n  5\n  >>> modinv(7, 131)\n  3\n  >>> modinv(7, 137)\n  1\n  >>> modinv(7, 139)\n  2\n  >>> modinv(7, 141)\n  5\n  >>> modinv(7, 143)\n  3\n  >>> modinv(7, 149)\n  1\n  >>> modinv(7, 151)\n  2\n  >>> modinv(7, 153)\n  5\n  >>> modinv(7, 157)\n  3\n  >>> modinv(7, 159)\n  1\n  >>> modinv(7, 161)\n  2\n  >>> modinv(7, 163)\n  5\n  >>> modinv(7, 167)\n  3\n  >>> modinv(7, 169)\n  1\n  >>> modinv(7, 171)\n  2\n  >>> modinv(7, 173)\n  5\n  >>> modinv(7, 177)\n  3\n  >>> modinv(7, 179)\n  1\n  >>> modinv(7, 181)\n  2\n  >>> modinv(7, 183)\n  5\n  >>> modinv(7, 187)\n  3\n  >>> modinv(7, 189)\n  1\n  >>> modinv(7, 191)\n  2\n  >>> modinv(7, 193)\n  5\n  >>> modinv(7, 197)\n  3\n  >>> modinv(7, 199)\n  1\n  >>> modinv(7, 201)\n  2\n  >>> modinv(7, 203)\n  5\n  >>> modinv(7, 207)\n  3\n  >>> modinv(7, 209)\n  1\n  >>> modinv(7, 211)\n  2\n  >>> modinv(7, 213)\n  5\n  >>> modinv(7, 217)\n  3\n  >>> modinv(7, 219)\n  1\n  >>> modinv(7, 221)\n  2\n  >>> modinv(7, 223)\n  5\n  >>> modinv(7, 227)\n  3\n  >>> modinv(7, 229)\n  1\n  >>> modinv(7, 231)\n  2\n  >>> modinv(7, 233)\n  5\n  >>> modinv(7, 239)\n  3\n  >>> modinv(7, 241)\n  1\n  >>> modinv(7, 243)\n  2\n  >>> modinv(7, 247)\n  5\n  >>> modinv(7, 251)\n  3\n  >>> modinv(7, 253)\n  1\n  >>> modinv(7, 257)\n  2\n  >>> modinv(7, 261)\n  5\n  >>> modinv(7, 263)\n  3\n  >>> modinv(7, 265)\n  1\n  >>> modinv(7, 267)\n  2\n  >>> modinv(7, 269)\n  5\n  >>> modinv(7, 271)\n  3\n  >>> modinv(7, 273)\n  1\n  >>> modinv(7, 277)\n  2\n  >>> modinv(7, 279)\n  5\n  >>> modinv(7, 281)\n  3\n  >>> modinv(7, 283)\n  1\n  >>> modinv(7, 287)\n  2\n  >>> modinv(7, 289)\n  5\n  >>> modinv(7, 291)\n  3\n  >>> modinv(7, 293)\n  1\n  >>> modinv(7, 297)\n  2\n  >>> modinv(7, 299)\n  5\n  >>> modinv(7, 301)\n  3\n  >>> modinv(7, 303)\n  1\n  >>> modinv(7, 307)\n  2\n  >>> modinv(7, 309)\n  5\n  >>> modinv(7, 311)\n  3\n  >>> modinv(7, 313)\n  1\n  >>> modinv(7, 317)\n  2\n  >>> modinv(7, 319)\n  5\n  >>> modinv(7, 321)\n  3\n  >>> modinv(7, 323)\n  1\n  >>> modinv(7, 327)\n  2\n  >>> modinv(7, 329)\n  5\n  >>> modinv(7, 331)\n  3\n  >>> modinv(7, 333)\n  1\n  >>> modinv(7, 337)\n  2\n  >>> modinv(7, 339)\n  5\n  >>> modinv(7, 341)\n  3\n  >>> modinv(7, 343)\n  1\n  >>> modinv(7, 347)\n  2\n  >>> modinv(7, 349)\n  5\n  >>> modinv(7, 351)\n  3\n  >>> modinv(7, 353)\n  1\n  >>> modinv(7, 357)\n  2\n  >>> modinv(7, 359)\n  5\n  >>> modinv(7, 361)\n  3\n  >>> modinv(7, 36", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first element of the given list\n * @example\n * const result = drop([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst drop = (list) => {\n  return list.slice(1);\n};\n\n/**\n * Returns a list containing all but the last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the last element of the given list\n * @example\n * const result = drop([1, 2, 3], 1)\n * console.log(result)\n * > [2, 3]\n */\nconst dropRight = (list) => {\n  return list.slice(0, -1);\n};\n\n/**\n * Returns a list containing all but the first and last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first and last element of the given list\n * @example\n * const result = drop([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropRightWhile = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first and last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first and last element of the given list\n * @example\n * const result = drop([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropWhile = (list) => {\n  const result = [];\n  let i = 0;\n  while (i < list.length) {\n    result.push(list[i]);\n    i += 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the last element of the given list\n * @example\n * const result = dropRight([1, 2, 3], 1)\n * console.log(result)\n * > [2, 3]\n */\nconst dropRightUntil = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first and last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first and last element of the given list\n * @example\n * const result = dropRight([1, 2, 3], 1)\n * console.log(result)\n * > [2, 3]\n */\nconst dropUntil = (list) => {\n  const result = [];\n  let i = 0;\n  while (i < list.length) {\n    result.push(list[i]);\n    i += 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first element of the given list\n * @example\n * const result = dropWhile([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropWhileRight = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the last element of the given list\n * @example\n * const result = dropRightWhile([1, 2, 3], 1)\n * console.log(result)\n * > [2, 3]\n */\nconst dropUntilRight = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first and last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first and last element of the given list\n * @example\n * const result = dropWhileRight([1, 2, 3], 1)\n * console.log(result)\n * > [2, 3]\n */\nconst dropWhileRight = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the last element of the given list\n * @example\n * const result = dropUntilRight([1, 2, 3], 1)\n * console.log(result)\n * > [2, 3]\n */\nconst dropUntilRight = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first element of the given list\n * @example\n * const result = dropRightWhile([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropWhileLeft = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the last element of the given list\n * @example\n * const result = dropUntilLeft([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropUntilLeft = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first and last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first and last element of the given list\n * @example\n * const result = dropWhileLeft([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropWhileLeft = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the last element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the last element of the given list\n * @example\n * const result = dropUntilLeft([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropUntilLeft = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the first element of the given list\n * @param {Array} list The given list\n * @returns {Array} A new list containing all but the first element of the given list\n * @example\n * const result = dropWhileRight([1, 2, 3], 1)\n * console.log(result)\n * > [1, 3]\n */\nconst dropWhileRight = (list) => {\n  const result = [];\n  let i = list.length;\n  while (i > 0) {\n    result.push(list[i]);\n    i -= 1;\n  }\n  return result;\n};\n\n/**\n * Returns a list containing all but the last element of the given list\n * @param {Array} list The given list", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift2= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift3= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift4= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift5= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift6= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift7= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift8= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift9= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift10= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift11= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift12= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift13= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift14= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift15= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift16= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift17= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift18= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift19= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- \"a\".charCodeAt(0)+26)% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants was a function that took string and returns string without consonants.\n  >>> removeConsonants('a')\n  'a'\n  >>> removeConsonants('ab')\n  'b'\n  >>> removeConsonants('abc')\n  'c'\n  >>> removeConsonants('zbc')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbcz')\n  'z'\n  >>> removeConsonants('zbc", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were equal to t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  true\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  >>> greaterThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> greaterThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst greaterThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were less than or equal to t.\n  >>> lessThanOrEqual([1, 2, 4, 10], 100)\n  true\n  >>> lessThanOrEqual([1, 20, 4, 10], 5)\n  true\n  */\nconst lessThanOrEqual = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l were greater than or equal to t.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt(-3)\n  3\n  >>> cbrt(3)\n  1\n  */\nconst cbrt = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the round of number x\n  >>> round(3.6)\n  4\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(3.6)\n  4\n  >>> trunc(3.8)\n  4\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.6)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.6)\n  3\n  >>> round(3.8)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.6)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.6)\n  3\n  >>> round(3.8)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.6)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.6)\n  3\n  >>> round(3.8)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.6)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.6)\n  3\n  >>> round(3.8)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> floor(3.6)\n  3\n  >>> floor(3.8)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(3.6)\n  4\n  >>> ceil(3.8)\n  4\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of number x\n  >>> round(3.6)\n  3\n  >>> round(3.8)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of number x\n  >>> trunc(3.6)\n  3\n  >>> trunc(3.8)\n  3\n  */\nconst trunc = ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('abcd', 'dcba')\n  true\n  >>> isAnagram('abcd', 'dcb')\n  false\n  >>> isAnagram('abcd', 'dcbd')\n  false\n  >>> isAnagram('abcd', 'dcbda')\n  false\n  >>> isAnagram('abcd', 'dcbdaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaaa')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111111111112')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111111111122')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111111111111221')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111111111112211')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111111111122111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111111111111221111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111111111112211111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111111111122111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111111111111221111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa1111111111111112211111111111112211111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa11111111111111122111111111111122111111111')\n  false\n  >>> isAnagram('abcd', 'dcbdaaaaaaaa111111111111111221111111111111221111111111')\n  false\n  >>> isAnagram('abcd', 'dcbda", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBracketsNoBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBracketsNoBracketsNoBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBrackets = (brackets) => {\n  const openingBrackets = brackets.match(/\\(|\\[|\\{|\\(|\\[|\\]|\\)|\\}|\\]|\\}|\\)|\\]|\\)|\\{|\\}/g);\n  const closingBrackets = brackets.match(/\\(|\\[|\\{|\\)|\\]|\\}|\\]|\\)|\\{|\\}/g);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n// returns true if brackets is a string of\" <\" and\">\". \n// returns false if every opening bracket had a corresponding closing bracket.\nconst correctBracketingWithBracketsNoBra", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = l.length;\n  while (i < n) {\n    if (l[i] < l[j]) {\n      if (l[j] < l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else if (l[i] > l[j]) {\n      if (l[j] > l[k]) {\n        return true;\n      }\n      k = j;\n      j++;\n    } else {\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if the given list is equally spaced in time.\n * Returns false if the list has non-equally spaced elements.\n * Returns true if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n * Returns false if the list has equally spaced elements with equal spacing.\n * Returns false if the list has non-equally spaced elements with equal spacing.\n * Returns false if the list has equally spaced elements with non-equal spacing.\n * Returns false if the list has non-equally spaced elements with non-equal spacing.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  let j = 0;\n  for (let i = 0; i < l1.length; i++) {\n    while (j < l2.length && l2[j] === l1[i]) {\n      j++;\n    }\n    if (j === l2.length) {\n      result.push(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n> 1 and was not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  8\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> numberOfDivisors(25)\n  1\n  >>> numberOfDivisors(100)\n  2\n  >>> numberOfDivisors(1000)\n  4\n  >>> numberOfDivisors(10000)\n  6\n  >>> numberOfDivisors(100000)\n  8\n  >>> numberOfDivisors(1000000)\n  10\n  >>> numberOfDivisors(10000000)\n  12\n  >>> numberOfDivisors(100000000)\n  14\n  >>> numberOfDivisors(1000000000)\n  16\n  >>> numberOfDivisors(10000000000)\n  18\n  >>> numberOfDivisors(100000000000)\n  20\n  >>> numberOfDivisors(1000000000000)\n  22\n  >>> numberOfDivisors(10000000000000)\n  24\n  >>> numberOfDivisors(100000000000000)\n  26\n  >>> numberOfDivisors(1000000000000000)\n  28\n  >>> numberOfDivisors(10000000000000000)\n  30\n  >>> numberOfDivisors(100000000000000000)\n  32\n  >>> numberOfDivisors(1000000000000000000)\n  34\n  >>> numberOfDivisors(10000000000000000000)\n  36\n  >>> numberOfDivisors(100000000000000000000)\n  38\n  >>> numberOfDivisors(1000000000000000000000)\n  40\n  >>> numberOfDivisors(10000000000000000000000)\n  42\n  >>> numberOfDivisors(100000000000000000000000)\n  44\n  >>> numberOfDivisors(1000000000000000000000000)\n  46\n  >>> numberOfDivisors(10000000000000000000000000)\n  48\n  >>> numberOfDivisors(100000000000000000000000000)\n  50\n  >>> numberOfDivisors(1000000000000000000000000000)\n  52\n  >>> numberOfDivisors(10000000000000000000000000000)\n  54\n  >>> numberOfDivisors(100000000000000000000000000000)\n  56\n  >>> numberOfDivisors(1000000000000000000000000000000)\n  58\n  >>> numberOfDivisors(10000000000000000000000000000000)\n  60\n  >>> numberOfDivisors(100000000000000000000000000000000)\n  62\n  >>> numberOfDivisors(1000000000000000000000000000000000)\n  64\n  >>> numberOfDivisors(10000000000000000000000000000000000)\n  66\n  >>> numberOfDivisors(100000000000000000000000000000000000)\n  68\n  >>> numberOfDivisors(1000000000000000000000000000000000000)\n  70\n  >>> numberOfDivisors(10000000000000000000000000000000000000)\n  72\n  >>> numberOfDivisors(100000000000000000000000000000000000000)\n  74\n  >>> numberOfDivisors(1000000000000000000000000000000000000000)\n  76\n  >>> numberOfDivisors(10000000000000000000000000000000000000000)\n  78\n  >>> numberOfDivisors(100000000000000000000000000000000000000000)\n  80\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000)\n  82\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000)\n  84\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000)\n  86\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000)\n  88\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000)\n  90\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000)\n  92\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000)\n  94\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000)\n  96\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000)\n  98\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000)\n  100\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000)\n  102\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000)\n  104\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000)\n  106\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000)\n  108\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000)\n  110\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000)\n  112\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000)\n  114\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000)\n  116\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000000)\n  118\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000)\n  120\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000)\n  122\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000000000)\n  124\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000000)\n  126\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000)\n  128\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000000000000)\n  130\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000000000)\n  132\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000000)\n  134\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000000000000000)\n  136\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000000000000)\n  138\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000000000)\n  140\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  142\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  144\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  146\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  148\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  150\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  152\n  >>> numberOfDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  154\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  156\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  158\n  >>> numberOfDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  160\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  162\n  >>> numberOfDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(\" \");\n  const paren_array_length = paren_array.length;\n  const max_level = 0;\n  let current_level = 0;\n  let current_index = 0;\n  let current_paren_level = 0;\n\n  while (current_index < paren_array_length) {\n    if (paren_array[current_index] === \"(\") {\n      current_level++;\n    } else if (paren_array[current_index] === \")\") {\n      current_level--;\n    }\n\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n\n    current_index++;\n  }\n\n  return max_level;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of two characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceChar = (string, old_char, new_char) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of three characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharThree = (string, old_char, new_char, new_char2) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of four characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharFour = (string, old_char, new_char, new_char2, new_char3) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of five characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharFive = (string, old_char, new_char, new_char2, new_char3, new_char4) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of six characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharSix = (string, old_char, new_char, new_char2, new_char3, new_char4, new_char5) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of seven characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharSeven = (string, old_char, new_char, new_char2, new_char3, new_char4, new_char5, new_char6) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of eight characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharEight = (string, old_char, new_char, new_char2, new_char3, new_char4, new_char5, new_char6, new_char7) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of nine characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharNine = (string, old_char, new_char, new_char2, new_char3, new_char4, new_char5, new_char6, new_char7, new_char8) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of ten characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharTen = (string, old_char, new_char, new_char2, new_char3, new_char4, new_char5, new_char6, new_char7, new_char8, new_char9) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n   Given a string, this function will output the string with each character replaced with a new character \n   that is a combination of eleven characters. \n   E.g. \"hello\" -> \"hheelllloo\"\n\n  >>> replaceChar(\"hello\", \"h\", \"e\")\n  'heelllloo'\n  */\nconst replaceCharEleven = (string, old_char, new_char, new_char2, new_char3, new_char4, new_char5, new_char6, new_char7, new_char8, new_char9, new_char10) => {\n  let new_string = string;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === old_char) {\n      new_string = new_string.replace(old_char, new_char);\n    }\n  }\n  return new_string;\n};\n\n/* \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openingBrackets = brackets.split(\"\");\n  let closingBrackets = brackets.split(\"\").reverse();\n  let openingBracketsCount = openingBrackets.length;\n  let closingBracketsCount = closingBrackets.length;\n  let allBracketsCount = openingBracketsCount + closingBracketsCount;\n  \n  if (openingBracketsCount === closingBracketsCount) {\n    return true\n  }\n  \n  if (openingBracketsCount > closingBracketsCount) {\n    return false\n  }\n  \n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      openingBracketsCount--;\n      closingBracketsCount--;\n    }\n  }\n  \n  return openingBracketsCount === 0\n}\n\n/* \n  Given a string, return true if every character in the string is a digit.\n  \n  >>> isDigit(\"1\")\n  true\n  >>> isDigit(\"2\")\n  true\n  >>> isDigit(\"3\")\n  true\n  >>> isDigit(\"4\")\n  true\n  >>> isDigit(\"5\")\n  true\n  >>> isDigit(\"6\")\n  true\n  >>> isDigit(\"7\")\n  true\n  >>> isDigit(\"8\")\n  true\n  >>> isDigit(\"9\")\n  true\n  >>> isDigit(\"0\")\n  true\n  >>> isDigit(\"a\")\n  false\n  >>> isDigit(\"b\")\n  false\n  >>> isDigit(\"c\")\n  false\n  >>> isDigit(\"d\")\n  false\n  >>> isDigit(\"e\")\n  false\n  >>> isDigit(\"f\")\n  false\n  >>> isDigit(\"g\")\n  false\n  >>> isDigit(\"h\")\n  false\n  >>> isDigit(\"i\")\n  false\n  >>> isDigit(\"j\")\n  false\n  >>> isDigit(\"k\")\n  false\n  >>> isDigit(\"l\")\n  false\n  >>> isDigit(\"m\")\n  false\n  >>> isDigit(\"n\")\n  false\n  >>> isDigit(\"o\")\n  false\n  >>> isDigit(\"p\")\n  false\n  >>> isDigit(\"q\")\n  false\n  >>> isDigit(\"r\")\n  false\n  >>> isDigit(\"s\")\n  false\n  >>> isDigit(\"t\")\n  false\n  >>> isDigit(\"u\")\n  false\n  >>> isDigit(\"v\")\n  false\n  >>> isDigit(\"w\")\n  false\n  >>> isDigit(\"x\")\n  false\n  >>> isDigit(\"y\")\n  false\n  >>> isDigit(\"z\")\n  false\n  */\nconst isDigit = (str) => {\n  for (let i = 0; i < str.length; i++) {\n    if (!isNaN(str.charCodeAt(i))) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n  Given a string, return true if every character in the string is a letter.\n  \n  >>> isLetter(\"a\")\n  true\n  >>> isLetter(\"b\")\n  true\n  >>> isLetter(\"c\")\n  true\n  >>> isLetter(\"d\")\n  true\n  >>> isLetter(\"e\")\n  true\n  >>> isLetter(\"f\")\n  true\n  >>> isLetter(\"g\")\n  true\n  >>> isLetter(\"h\")\n  true\n  >>> isLetter(\"i\")\n  true\n  >>> isLetter(\"j\")\n  true\n  >>> isLetter(\"k\")\n  true\n  >>> isLetter(\"l\")\n  true\n  >>> isLetter(\"m\")\n  true\n  >>> isLetter(\"n\")\n  true\n  >>> isLetter(\"o\")\n  true\n  >>> isLetter(\"p\")\n  true\n  >>> isLetter(\"q\")\n  true\n  >>> isLetter(\"r\")\n  true\n  >>> isLetter(\"s\")\n  true\n  >>> isLetter(\"t\")\n  true\n  >>> isLetter(\"u\")\n  true\n  >>> isLetter(\"v\")\n  true\n  >>> isLetter(\"w\")\n  true\n  >>> isLetter(\"x\")\n  true\n  >>> isLetter(\"y\")\n  true\n  >>> isLetter(\"z\")\n  true\n  >>> isLetter(\"A\")\n  false\n  >>> isLetter(\"B\")\n  false\n  >>> isLetter(\"C\")\n  false\n  >>> isLetter(\"D\")\n  false\n  >>> isLetter(\"E\")\n  false\n  >>> isLetter(\"F\")\n  false\n  >>> isLetter(\"G\")\n  false\n  >>> isLetter(\"H\")\n  false\n  >>> isLetter(\"I\")\n  false\n  >>> isLetter(\"J\")\n  false\n  >>> isLetter(\"K\")\n  false\n  >>> isLetter(\"L\")\n  false\n  >>> isLetter(\"M\")\n  false\n  >>> isLetter(\"N\")\n  false\n  >>> isLetter(\"O\")\n  false\n  >>> isLetter(\"P\")\n  false\n  >>> isLetter(\"Q\")\n  false\n  >>> isLetter(\"R\")\n  false\n  >>> isLetter(\"S\")\n  false\n  >>> isLetter(\"T\")\n  false\n  >>> isLetter(\"U\")\n  false\n  >>> isLetter(\"V\")\n  false\n  >>> isLetter(\"W\")\n  false\n  >>> isLetter(\"X\")\n  false\n  >>> isLetter(\"Y\")\n  false\n  >>> isLetter(\"Z\")\n  false\n  */\nconst isLetter = (str) => {\n  for (let i = 0; i < str.length; i++) {\n    if (!isNaN(str.charCodeAt(i))) {\n      return true\n    }\n  }\n  return false\n}\n\n/* \n  Given a string, return true if every character in the string is a punctuation character.\n  \n  >>> isPunctuation(\"!\")\n  true\n  >>> isPunctuation(\"?\")\n  true\n  >>> isPunctuation(\",\")\n  true\n  >>> isPunctuation(\":\")\n  true\n  >>> isPunctuation(\";\")\n  true\n  >>> isPunctuation(\".\")\n  true\n  >>> isPunctuation(\"..\")\n  true\n  >>> isPunctuation(\"...\")\n  true\n  >>> isPunctuation(\"(\")\n  true\n  >>> isPunctuation(\")\")\n  true\n  >>> isPunctuation(\"[\")\n  true\n  >>> isPunctuation(\"]\")\n  true\n  >>> isPunctuation(\"{\")\n  true\n  >>> isPunctuation(\"}\")\n  true\n  >>> isPunctuation(\"'\")\n  true\n  >>> isPunctuation(\"\\\"\")\n  true\n  >>> isPunctuation(\"'\")\n  true\n  >>> isPunctuation(\"`\")\n  true\n  >>> isPunctuation(\"`\")\n  true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  Calculate derivative of a polynomial with given coefficients\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - x", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n// TEST\nconst testFibFib = (n) => {\n  console.log(`fibfib: ${n}`);\n  console.log(`fibfib(0): ${fibfib(0)}`);\n  console.log(`fibfib(1): ${fibfib(1)}`);\n  console.log(`fibfib(2): ${fibfib(2)}`);\n  console.log(`fibfib(n): ${fibfib(n)}`);\n};\n\ntestFibFib(0);\ntestFibFib(1);\ntestFibFib(2);\ntestFibFib(3);\ntestFibFib(4);\ntestFibFib(5);\ntestFibFib(6);\ntestFibFib(7);\ntestFibFib(8);\ntestFibFib(9);\ntestFibFib(10);\ntestFibFib(11);\ntestFibFib(12);\ntestFibFib(13);\ntestFibFib(14);\ntestFibFib(15);\ntestFibFib(16);\ntestFibFib(17);\ntestFibFib(18);\ntestFibFib(19);\ntestFibFib(20);\ntestFibFib(21);\ntestFibFib(22);\ntestFibFib(23);\ntestFibFib(24);\ntestFibFib(25);\ntestFibFib(26);\ntestFibFib(27);\ntestFibFib(28);\ntestFibFib(29);\ntestFibFib(30);\ntestFibFib(31);\ntestFibFib(32);\ntestFibFib(33);\ntestFibFib(34);\ntestFibFib(35);\ntestFibFib(36);\ntestFibFib(37);\ntestFibFib(38);\ntestFibFib(39);\ntestFibFib(40);\ntestFibFib(41);\ntestFibFib(42);\ntestFibFib(43);\ntestFibFib(44);\ntestFibFib(45);\ntestFibFib(46);\ntestFibFib(47);\ntestFibFib(48);\ntestFibFib(49);\ntestFibFib(50);\ntestFibFib(51);\ntestFibFib(52);\ntestFibFib(53);\ntestFibFib(54);\ntestFibFib(55);\ntestFibFib(56);\ntestFibFib(57);\ntestFibFib(58);\ntestFibFib(59);\ntestFibFib(60);\ntestFibFib(61);\ntestFibFib(62);\ntestFibFib(63);\ntestFibFib(64);\ntestFibFib(65);\ntestFibFib(66);\ntestFibFib(67);\ntestFibFib(68);\ntestFibFib(69);\ntestFibFib(70);\ntestFibFib(71);\ntestFibFib(72);\ntestFibFib(73);\ntestFibFib(74);\ntestFibFib(75);\ntestFibFib(76);\ntestFibFib(77);\ntestFibFib(78);\ntestFibFib(79);\ntestFibFib(80);\ntestFibFib(81);\ntestFibFib(82);\ntestFibFib(83);\ntestFibFib(84);\ntestFibFib(85);\ntestFibFib(86);\ntestFibFib(87);\ntestFibFib(88);\ntestFibFib(89);\ntestFibFib(90);\ntestFibFib(91);\ntestFibFib(92);\ntestFibFib(93);\ntestFibFib(94);\ntestFibFib(95);\ntestFibFib(96);\ntestFibFib(97);\ntestFibFib(98);\ntestFibFib(99);\ntestFibFib(100);\ntestFibFib(101);\ntestFibFib(102);\ntestFibFib(103);\ntestFibFib(104);\ntestFibFib(105);\ntestFibFib(106);\ntestFibFib(107);\ntestFibFib(108);\ntestFibFib(109);\ntestFibFib(110);\ntestFibFib(111);\ntestFibFib(112);\ntestFibFib(113);\ntestFibFib(114);\ntestFibFib(115);\ntestFibFib(116);\ntestFibFib(117);\ntestFibFib(118);\ntestFibFib(119);\ntestFibFib(120);\ntestFibFib(121);\ntestFibFib(122);\ntestFibFib(123);\ntestFibFib(124);\ntestFibFib(125);\ntestFibFib(126);\ntestFibFib(127);\ntestFibFib(128);\ntestFibFib(129);\ntestFibFib(130);\ntestFibFib(131);\ntestFibFib(132);\ntestFibFib(133);\ntestFibFib(134);\ntestFibFib(135);\ntestFibFib(136);\ntestFibFib(137);\ntestFibFib(138);\ntestFibFib(139);\ntestFibFib(140);\ntestFibFib(141);\ntestFibFib(142);\ntestFibFib(143);\ntestFibFib(144);\ntestFibFib(145);\ntestFibFib(146);\ntestFibFib(147);\ntestFibFib(148);\ntestFibFib(149);\ntestFibFib(150);\ntestFibFib(151);\ntestFibFib(152);\ntestFibFib(153);\ntestFibFib(154);\ntestFibFib(155);\ntestFibFib(156);\ntestFibFib(157);\ntestFibFib(158);\ntestFibFib(159);\ntestFibFib(160);\ntestFibFib(161);\ntestFibFib(162);\ntestFibFib(163);\ntestFibFib(164);\ntestFibFib(165);\ntestFibFib(166);\ntestFibFib(167);\ntestFibFib(168);\ntestFibFib(169);\ntestFibFib(170);\ntestFibFib(171);\ntestFibFib(172);\ntestFibFib(173);\ntestFibFib(174);\ntestFibFib(175);\ntestFibFib(176);\ntestFibFib(177);\ntestFibFib(178);\ntestFibFib(179);\ntestFibFib(180);\ntestFibFib(181);\ntestFibFib(182);\ntestFibFib(183);\ntestFibFib(184);\ntestFibFib(185);\ntestFibFib(186);\ntestFibFib(187);\ntestFib", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 'aeiou';\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  digits = digits.reverse();\n  return digits.join('');\n};\n\n/*\n  Given a binary string x, return a string representing the number in reverse order\n  >>> reverseBinary(\"10\")\n  \"10\"\n  >>> reverseBinary(\"11\")\n  \"11\"\n  >>> reverseBinary(\"1010\")\n  \"1010\"\n  >>> reverseBinary(\"10100\")\n  \"10100\"\n  >>> reverseBinary(\"1010001\")\n  \"1010001\"\n  >>> reverseBinary(\"1010010\")\n  \"1010010\"\n  >>> reverseBinary(\"10100100\")\n  \"10100100\"\n  >>> reverseBinary(\"101001000\")\n  \"101001000\"\n  >>> reverseBinary(\"1010010000\")\n  \"1010010000\"\n  >>> reverseBinary(\"10100100000\")\n  \"10100100000\"\n  >>> reverseBinary(\"101001000000\")\n  \"101001000000\"\n  >>> reverseBinary(\"1010010000000\")\n  \"1010010000000\"\n  >>> reverseBinary(\"10100100000000\")\n  \"10100100000000\"\n  >>> reverseBinary(\"101001000000000\")\n  \"101001000000000\"\n  >>> reverseBinary(\"1010010000000000\")\n  \"1010010000000000\"\n  >>> reverseBinary(\"10100100000000000\")\n  \"10100100000000000\"\n  >>> reverseBinary(\"101001000000000000\")\n  \"101001000000000000\"\n  >>> reverseBinary(\"1010010000000000000\")\n  \"1010010000000000000\"\n  >>> reverseBinary(\"10100100000000000000\")\n  \"10100100000000000000\"\n  >>> reverseBinary(\"101001000000000000000\")\n  \"101001000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000\")\n  \"1010010000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000\")\n  \"10100100000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000\")\n  \"101001000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000\")\n  \"1010010000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000\")\n  \"10100100000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000\")\n  \"101001000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000\")\n  \"1010010000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000\")\n  \"10100100000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000\")\n  \"101001000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000\")\n  \"1010010000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000\")\n  \"10100100000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000\")\n  \"101001000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000\")\n  \"1010010000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000\")\n  \"10100100000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000\")\n  \"101001000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000000000000000000000\")\n  \"1010010000000000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"10100100000000000000000000000000000000000000000000000000000000000000\")\n  \"10100100000000000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"101001000000000000000000000000000000000000000000000000000000000000000\")\n  \"101001000000000000000000000000000000000000000000000000000000000000000\"\n  >>> reverseBinary(\"1010010000000000000000000000000000000000000000000000000000000000000000\")\n  \"10100", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the digits only '\n   ASCII codes.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let apples=0, oranges=0, mangos=0;\n   let fruits=s.split(\" \");\n   for(let i=0; i<fruits.length; i++){\n     if(fruits[i].includes(\"apple\")){\n       apples+=parseInt(fruits[i].split(\"apples\")[1]);\n     }\n     if(fruits[i].includes(\"orange\")){\n       oranges+=parseInt(fruits[i].split(\"oranges\")[1]);\n     }\n     if(fruits[i].includes(\"mango\")){\n       mangos+=parseInt(fruits[i].split(\"mango\")[1]);\n     }\n   }\n   return mangos-oranges-apples;\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); \n console.log(fruitDistribution(\"0 apples and 1 oranges\",3)); \n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); \n console.log(fruitDistribution(\"100 apples and 1 oranges\",120)); </code>\n<|/ a tags=javascript,arrays,string |>\n<| a tags=javascript,arrays,string |>\n<code>\nfunction fruitDistribution(s,n){\n    let apples=0, oranges=0, mangos=0;\n    let fruits=s.split(\" \");\n    for(let i=0; i<fruits.length; i++){\n        if(fruits[i].includes(\"apple\")){\n            apples+=parseInt(fruits[i].split(\"apples\")[1]);\n        }\n        if(fruits[i].includes(\"orange\")){\n            oranges+=parseInt(fruits[i].split(\"oranges\")[1]);\n        }\n        if(fruits[i].includes(\"mango\")){\n            mangos+=parseInt(fruits[i].split(\"mango\")[1]);\n        }\n    }\n    return mangos-oranges-apples;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); \nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); \nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); \nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n    let apples=0, oranges=0, mangos=0;\n    let fruits=s.split(\" \");\n    for(let i=0; i<fruits.length; i++){\n        if(fruits[i].includes(\"apple\")){\n            apples+=parseInt(fruits[i].split(\"apples\")[1]);\n        }\n        if(fruits[i].includes(\"orange\")){\n            oranges+=parseInt(fruits[i].split(\"oranges\")[1]);\n        }\n        if(fruits[i].includes(\"mango\")){\n            mangos+=parseInt(fruits[i].split(\"mango\")[1]);\n        }\n    }\n    return mangos-oranges-apples;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); \nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); \nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); \nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); \n</code>\n<|/ a tags=javascript,arrays,string |>\n<| a tags=javascript,arrays,string |>\n<code>\nfunction fruitDistribution(s,n){\n    let apples=0, oranges=0, mangos=0;\n    let fruits=s.split(\" \");\n    for(let i=0; i<fruits.length; i++){\n        if(fruits[i].includes(\"apple\")){\n            apples+=parseInt(fruits[i].split(\"apples\")[1]);\n        }\n        if(fruits[i].includes(\"orange\")){\n            oranges+=parseInt(fruits[i].split(\"oranges\")[1]);\n        }\n        if(fruits[i].includes(\"mango\")){\n            mangos+=parseInt(fruits[i].split(\"mango\")[1]);\n        }\n    }\n    return mangos-oranges-apples;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); \nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); \nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); \nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); \n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a tags=javascript,arrays,string |>\n<code>\nfunction fruitDistribution(s,n){\n    let apples=0, oranges=0, mangos=0;\n    let fruits=s.split(\" \");\n    for(let i=0; i<fruits.length; i++){\n        if(fruits[i].includes(\"apple\")){\n            apples+=parseInt(fruits[i].split(\"apples\")[1]);\n        }\n        if(fruits[i].includes(\"orange\")){\n            oranges+=parseInt(fruits[i].split(\"oranges\")[1]);\n        }\n        if(fruits[i].includes(\"mango\")){\n            mangos+=parseInt(fruits[i].split(\"mango\")[1]);\n        }\n    }\n    return mangos-oranges-apples;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); \nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); \nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); \nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); \n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a |>\n<code>\nfunction fruitDistribution(s,n){\n    let apples=0, oranges=0, mangos=0;\n    let fruits=s.split(\" \");\n    for(let i=0; i<fruits.length; i++){\n        if(fruits[i].includes(\"apple\")){\n            apples+=parseInt(fruits[i].split(\"apples\")[1]);\n        }\n        if(fruits[i].includes(\"orange\")){\n            oranges+=parseInt(fruits[i].split(\"oranges\")[1]);\n        }\n        if(fruits[i].includes(\"mango\")){\n            mangos+=parseInt(fruits[i].split(\"mango\")[1]);\n        }\n    }\n    return mangos-oranges-apples;\n}\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19)); \nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3)); \nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100)); \nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120)); \n</code>\n<|/ a dscore=0 tags=javascript,arrays,string |>\n<| c |>\nPlease add some explanation to your answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n    let apples=0, oranges=0, mangos=0;\n    let fruits=s.split(\" \");\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let smallestEvenValueIndex = 0;\n  let smallestEvenValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (smallestEvenValue > arr[i]) {\n        smallestEvenValue = arr[i];\n        smallestEvenValueIndex = i;\n      }\n    } else {\n      if (smallestEvenValue > arr[i]) {\n        smallestEvenValue = arr[i];\n        smallestEvenValueIndex = i;\n      }\n    }\n  }\n  return [smallestEvenValue, smallestEvenValueIndex];\n};\n\nexport { pluck, smallestEvenValue };\n\n/*\n  Given an array representing a binary tree, return the level order traversal of \n  the binary tree.\n\n  Example 1:\n      Input: [1,null,2,3]\n      Output: [[1],[2,3],[3]]\n\n  Example 2:\n      Input: [1,2,3,4,5,null,null,6,7]\n      Output: [[1],[2,3,4],[5,6,7]]\n\n  Example 3:\n      Input: [1,2,3,4,5,6,7,null,null,null,8]\n      Output: [[1],[2,3,4],[5,6,7],[8]]\n\n  Example 4:\n      Input: [1,2,3,4,5,6,7,8,null,null,null,9]\n      Output: [[1],[2,3,4],[5,6,7],[8,9]]\n  \n  Constraints:\n      * The height of the binary tree is at most 10000.\n      * 1 <= nodes.length <= 10^5\n      * -1000 <= node.val <= 1000\n      * The binary tree is connected.\n*/\nconst levelOrder = (arr) => {\n  const result = [];\n  const helper = (arr, level) => {\n    if (level === arr.length) {\n      result.push(arr);\n      return;\n    }\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i]!== null) {\n        helper(arr, level + 1);\n        helper(arr.slice(i + 1), level + 1);\n      }\n    }\n  };\n  helper(arr, 0);\n  return result;\n};\n\nexport { levelOrder };\n\n/*\n  Given an array representing a binary tree, return the level order traversal of \n  the binary tree in reverse order.\n\n  Example 1:\n      Input: [1,null,2,3]\n      Output: [[3],[2,1],[1]]\n\n  Example 2:\n      Input: [1,2,3,4,5,null,null,6,7]\n      Output: [[7],[6,5,4,3],[3,2,1]]\n\n  Example 3:\n      Input: [1,2,3,4,5,6,7,null,null,null,8]\n      Output: [[8],[7,6,5,4,3],[3,2,1]]\n\n  Example 4:\n      Input: [1,2,3,4,5,6,7,8,null,null,null,9]\n      Output: [[9],[8,7,6,5,4,3],[3,2,1]]\n  \n  Constraints:\n      * The height of the binary tree is at most 10000.\n      * 1 <= nodes.length <= 10^5\n      * -1000 <= node.val <= 1000\n      * The binary tree is connected.\n*/\nconst levelOrderReverse = (arr) => {\n  const result = [];\n  const helper = (arr, level) => {\n    if (level === arr.length) {\n      result.push(arr);\n      return;\n    }\n    for (let i = arr.length - 1; i >= 0; i--) {\n      if (arr[i]!== null) {\n        helper(arr, level + 1);\n        helper(arr.slice(i + 1), level + 1);\n      }\n    }\n  };\n  helper(arr, 0);\n  return result;\n};\n\nexport { levelOrderReverse, levelOrder };\n\n/*\n  Given an array representing a binary tree, return the level order traversal of \n  the binary tree in reverse order starting from the given node.\n\n  Example 1:\n      Input: [1,null,2,3]\n      Output: [[3],[2,1],[1]]\n\n  Example 2:\n      Input: [1,2,3,4,5,null,null,6,7]\n      Output: [[7],[6,5,4,3],[3,2,1]]\n\n  Example 3:\n      Input: [1,2,3,4,5,6,7,null,null,null,8]\n      Output: [[8],[7,6,5,4,3],[3,2,1]]\n\n  Example 4:\n      Input: [1,2,3,4,5,6,7,8,null,null,null,9]\n      Output: [[9],[8,7,6,5,4,3],[3,2,1]]\n  \n  Constraints:\n      * The height of the binary tree is at most 10000.\n      * 1 <= nodes.length <= 10^5\n      * -1000 <= node.val <= 1000\n      * The binary tree is connected.\n*/\nconst levelOrderReverseFrom = (arr) => {\n  const result = [];\n  const helper = (arr, level, start) => {\n    if (level === arr.length) {\n      result.push(arr);\n      return;\n    }\n    for (let i = start; i >= 0; i--) {\n      if (arr[i]!== null) {\n        helper(arr, level + 1, i);\n        helper(arr.slice(i + 1), level + 1, i);\n      }\n    }\n  };\n  helper(arr, 0, 0);\n  return result;\n};\n\nexport { levelOrderReverseFrom, levelOrder };\n\n/*\n  Given an array representing a binary tree, return the level order traversal of \n  the binary tree in level order traversal order starting from the given node.\n\n  Example 1:\n      Input: [1,null,2,3]\n      Output: [[1],[2,3],[3]]\n\n  Example 2:\n      Input: [1,2,3,4,5,null,null,6,7]\n      Output: [[1],[2,3,4],[5,6,7]]\n\n  Example 3:\n      Input: [1,2,3,4,5,6,7,null,null,null,8]\n      Output: [[1],[2,3,4],[5,6,7],[8]]\n\n  Example 4:\n      Input: [1,2,3,4,5,6,7,8,null,null,null,9]\n      Output: [[1],[2,3,4],[5,6,7],[8,9]]\n  \n  Constraints:\n      * The height of the binary tree is at most 10000.\n      * 1 <= nodes.length <= 10^5\n      * -1000 <= node.val <= 1000\n      * The binary tree is connected.\n*/\nconst levelOrderTraversalFrom = (arr) => {\n  const result = [];\n  const helper = (arr, level, start) => {\n    if (level === arr.length) {\n      result.push(arr);\n      return;\n    }\n    for (let i = start; i >= 0; i--) {\n      if (arr[i]!== null) {\n        helper(arr, level + 1, i);\n        helper(arr.slice(i + 1), level + 1, i);\n      }\n    }\n  };\n  helper(arr, 0, 0);\n  return result;\n};\n\nexport { levelOrderTraversalFrom, levelOrder };\n\n/*\n  Given an array representing a binary tree, return the level order traversal of \n  the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the smallest integer that was less than \n   zero, and had a frequency less than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  return minFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the largest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the smallest integer that was less than \n   zero, and had a frequency less than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  return minFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the largest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the smallest integer that was less than \n   zero, and had a frequency less than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  return minFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the largest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the smallest integer that was less than \n   zero, and had a frequency less than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  return minFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the largest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxFreq = i;\n    }\n  }\n  return maxFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the smallest integer that was less than \n   zero, and had a frequency less than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minFreq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minFreq = i;\n    }\n  }\n  return minFreq;\n};\n\n/*\n  You were given a list of positive integers. Returned the largest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxFreq = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contained gave substring\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minIndex = lst.findIndex(x => x < lst[0]);\n  let maxIndex = lst.findIndex(x => x > lst[0]);\n  let minValue = lst[minIndex];\n  let maxValue = lst[maxIndex];\n  let temp;\n  \n  while (minIndex < maxIndex) {\n    temp = lst[minIndex];\n    lst[minIndex] = lst[maxIndex];\n    lst[maxIndex] = temp;\n    minIndex++;\n    maxIndex--;\n  }\n  \n  return lst;\n}\n\n/*\n  Given a string, return a new string with each character replaced by \n  the character that comes first alphabetically in the original string.\n\n  Examples:\n  replaceChar(\"abba\", \"a\", \"z\") == \"zbz\"\n  replaceChar(\"abba\", \"a\", \"b\") == \"bbz\"\n  replaceChar(\"abba\", \"a\", \"c\") == \"bbc\"\n  replaceChar(\"abba\", \"a\", \"d\") == \"bbd\"\n  replaceChar(\"abba\", \"a\", \"e\") == \"bbde\"\n  replaceChar(\"abba\", \"a\", \"f\") == \"bbdef\"\n  replaceChar(\"abba\", \"a\", \"g\") == \"bbdeg\"\n  replaceChar(\"abba\", \"a\", \"h\") == \"bbdeh\"\n  replaceChar(\"abba\", \"a\", \"i\") == \"bbdei\"\n  replaceChar(\"abba\", \"a\", \"j\") == \"bbdeij\"\n  replaceChar(\"abba\", \"a\", \"k\") == \"bbdeijk\"\n  replaceChar(\"abba\", \"a\", \"l\") == \"bbdeijkl\"\n  replaceChar(\"abba\", \"a\", \"m\") == \"bbdeijklm\"\n  replaceChar(\"abba\", \"a\", \"n\") == \"bbdeijkln\"\n  replaceChar(\"abba\", \"a\", \"o\") == \"bbdeijklo\"\n  replaceChar(\"abba\", \"a\", \"p\") == \"bbdeijklp\"\n  replaceChar(\"abba\", \"a\", \"q\") == \"bbdeijklq\"\n  replaceChar(\"abba\", \"a\", \"r\") == \"bbdeijklr\"\n  replaceChar(\"abba\", \"a\", \"s\") == \"bbdeijkls\"\n  replaceChar(\"abba\", \"a\", \"t\") == \"bbdeijklt\"\n  replaceChar(\"abba\", \"a\", \"u\") == \"bbdeijklu\"\n  replaceChar(\"abba\", \"a\", \"v\") == \"bbdeijklv\"\n  replaceChar(\"abba\", \"a\", \"w\") == \"bbdeijklw\"\n  replaceChar(\"abba\", \"a\", \"x\") == \"bbdeijklwx\"\n  replaceChar(\"abba\", \"a\", \"y\") == \"bbdeijkly\"\n  replaceChar(\"abba\", \"a\", \"z\") == \"bbdeijklz\"\n  replaceChar(\"abba\", \"a\", \"a\") == \"bbdeijklaa\"\n  replaceChar(\"abba\", \"a\", \"b\") == \"bbdeijklab\"\n  replaceChar(\"abba\", \"a\", \"c\") == \"bbdeijklac\"\n  replaceChar(\"abba\", \"a\", \"d\") == \"bbdeijklad\"\n  replaceChar(\"abba\", \"a\", \"e\") == \"bbdeijklae\"\n  replaceChar(\"abba\", \"a\", \"f\") == \"bbdeijklaf\"\n  replaceChar(\"abba\", \"a\", \"g\") == \"bbdeijklag\"\n  replaceChar(\"abba\", \"a\", \"h\") == \"bbdeijklah\"\n  replaceChar(\"abba\", \"a\", \"i\") == \"bbdeijkli\"\n  replaceChar(\"abba\", \"a\", \"j\") == \"bbdeijklij\"\n  replaceChar(\"abba\", \"a\", \"k\") == \"bbdeijklijk\"\n  replaceChar(\"abba\", \"a\", \"l\") == \"bbdeijklijkl\"\n  replaceChar(\"abba\", \"a\", \"m\") == \"bbdeijklijklm\"\n  replaceChar(\"abba\", \"a\", \"n\") == \"bbdeijklijkln\"\n  replaceChar(\"abba\", \"a\", \"o\") == \"bbdeijklijklo\"\n  replaceChar(\"abba\", \"a\", \"p\") == \"bbdeijklijklp\"\n  replaceChar(\"abba\", \"a\", \"q\") == \"bbdeijklijklq\"\n  replaceChar(\"abba\", \"a\", \"r\") == \"bbdeijklijklr\"\n  replaceChar(\"abba\", \"a\", \"s\") == \"bbdeijklijkls\"\n  replaceChar(\"abba\", \"a\", \"t\") == \"bbdeijklijklt\"\n  replaceChar(\"abba\", \"a\", \"u\") == \"bbdeijklijklu\"\n  replaceChar(\"abba\", \"a\", \"v\") == \"bbdeijklijklv\"\n  replaceChar(\"abba\", \"a\", \"w\") == \"bbdeijklijklw\"\n  replaceChar(\"abba\", \"a\", \"x\") == \"bbdeijklijklwx\"\n  replaceChar(\"abba\", \"a\", \"y\") == \"bbdeijklijkly\"\n  replaceChar(\"abba\", \"a\", \"z\") == \"bbdeijklijklz\"\n  replaceChar(\"abba\", \"a\", \"a\") == \"bbdeijklaaa\"\n  replaceChar(\"abba\", \"a\", \"b\") == \"bbdeijklaab\"\n  replaceChar(\"abba\", \"a\", \"c\") == \"bbdeijklaac\"\n  replaceChar(\"abba\", \"a\", \"d\") == \"bbdeijklaad\"\n  replaceChar(\"abba\", \"a\", \"e\") == \"bbdeijklaae\"\n  replaceChar(\"abba\", \"a\", \"f\") == \"bbdeijklaaf\"\n  replaceChar(\"abba\", \"a\", \"g\") == \"bbdeijklaag\"\n  replaceChar(\"abba\", \"a\", \"h\") == \"bbdeijklaah\"\n  replaceChar(\"abba\", \"a\", \"i\") == \"bbdeijklaai\"\n  replaceChar(\"abba\", \"a\", \"j\") == \"bbdeijklaaj\"\n  replaceChar(\"abba\", \"a\", \"k\") == \"bbdeijklaak\"\n  replaceChar(\"abba\", \"a\", \"l\") == \"bbdeijklaal\"\n  replaceChar(\"abba\", \"a\", \"m\") == \"bbdeijklaam\"\n  replaceChar(\"abba\", \"a\", \"n\") == \"bbdeijklaan\"\n  replaceChar(\"abba\", \"a\", \"o\") == \"bbdeijklaao\"\n  replaceChar(\"abba\", \"a\", \"p\") == \"bbdeijklaap\"\n  replaceChar(\"abba\", \"a\", \"q\") == \"bbdeijklaaq\"\n  replaceChar(\"abba\", \"a\", \"r\") == \"bbdeijklaar\"\n  replaceChar(\"abba\", \"a\", \"s\") == \"bbdeijklaas\"\n  replaceChar(\"abba\", \"a\", \"t\") == \"bbdeijklaat\"\n  replaceChar(\"abba\", \"a\", \"u\") == \"bbdeijklaau\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) return -1;\n  return Math.abs((a + b + c) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the perimeter of the \n   triangle rounded to 2 decimal points if the sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 12.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the area of the triangle \n   rounded to 2 decimal points if the sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the perimeter of the \n   triangle rounded to 2 decimal points if the sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 12.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the area of the triangle \n   rounded to 2 decimal points if the sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the perimeter of the \n   triangle rounded to 2 decimal points if the sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 12.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the area of the triangle \n   rounded to 2 decimal points if the sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the perimeter of the \n   triangle rounded to 2 decimal points if the sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 12.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the area of the triangle \n   rounded to 2 decimal points if the sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the perimeter of the \n   triangle rounded to 2 decimal points if the sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 12.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the area of the triangle \n   rounded to 2 decimal points if the sides formed a valid triangle. Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the perimeter of the \n   triangle rounded to 2 decimal points if the sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  trianglePerimeter(3, 4, 5) == 12.00\n  trianglePerimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeter = (a, b, c, d) => {\n  if (a === 0 || b === 0 || c === 0 || d === 0) return -1;\n  return Math.abs((a + b + c + d) / 2);\n};\n\n/*\n  Given the lengths of the sides of a triangle. Returned the area of the triangle \n   rounded to 2 decimal points if the sides formed ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let sum = 0;\n  let isBalanced = true;\n\n  q.forEach((e) => {\n    sum += e;\n  });\n\n  if (sum > maxWeight) {\n    isBalanced = false;\n  }\n\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let sum = 0;\n  let isBalanced = true;\n\n  q.forEach((e) => {\n    sum += e;\n  });\n\n  if (sum > maxWeight) {\n    isBalanced = false;\n  }\n\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let sum = 0;\n  let isBalanced = true;\n\n  q.forEach((e) => {\n    sum += e;\n  });\n\n  if (sum > maxWeight) {\n    isBalanced = false;\n  }\n\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let sum = 0;\n  let isBalanced = true;\n\n  q.forEach((e) => {\n    sum += e;\n  });\n\n  if (sum > maxWeight) {\n    isBalanced = false;\n  }\n\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let sum = 0;\n  let isBalanced = true;\n\n  q.forEach((e) => {\n    sum += e;\n  });\n\n  if (sum > maxWeight) {\n    isBalanced = false;\n  }\n\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let maxWeight = w;\n  let sum = 0;\n  let isBalanced = true;\n\n  q.forEach((e) => {\n    sum += e;\n  });\n\n  if (sum > maxWeight) {\n    isBalanced = false;\n  }\n\n  return isBalanced;\n};\n\n/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      min = i;\n      break;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  largestChange([1, 2, 3, 2, 1]) == 1\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      max = i;\n      break;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  largestChange([1, 2, 3, 2, 1]) == 1\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      max = i;\n      break;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, found the minimum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      min = i;\n      break;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  largestChange([1, 2, 3, 2, 1]) == 1\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      max = i;\n      break;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, found the minimum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      min = i;\n      break;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  largestChange([1, 2, 3, 2, 1]) == 1\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      max = i;\n      break;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, found the minimum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      min = i;\n      break;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, found the maximum number that needed to be changed to make the \n   array palindromic. A palindromic array was an array that was read the same backwards and forwards. \n   In one change, you can changed one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 2\n  largestChange([1, 2, 3, 2, 1]) == 1\n  */\nconst largestChange = (arr) => {\n  let min = 0;\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = max; i >= min; i--) {\n    if (arr[i]!== arr[arr.length - 1 - i]) {\n      max = i;\n      break;\n    }\n  }\n  return max;\n};\n\n/*\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter(x => lst2.indexOf(x) < 0)\n}\n\n// totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n// totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n// totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n// totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']) ➞ ['4']\n// totalMatch(['4'], ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n    let isPrime = true;\n    for(let i = 0; i < primes.length; i++){\n      if(primes[i] === a){\n        isPrime = false;\n      }\n    }\n    return isPrime;\n  }\n}\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a < 100){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let power = 1;\n  while (power < n) {\n    power *= x;\n  }\n  return power === x;\n};\n\n/*Your task was to write a function that returned true if a number x was a prime and false \n   in other cases. \n   x was a prime if n is divisible by all numbers from 2 to n except 1 and n. \n  For example:\n  isPrime(2) => true\n  isPrime(5) => true\n  isPrime(7) => false\n  isPrime(11) => false\n  isPrime(12) => false\n  isPrime(13) => false\n  isPrime(14) => true\n  isPrime(15) => false\n  isPrime(16) => false\n  isPrime(17) => false\n  isPrime(18) => false\n  isPrime(19) => false\n  isPrime(20) => true\n  isPrime(21) => false\n  isPrime(22) => false\n  isPrime(23) => false\n  isPrime(24) => false\n  isPrime(25) => false\n  isPrime(26) => false\n  isPrime(27) => false\n  isPrime(28) => false\n  isPrime(29) => false\n  isPrime(30) => false\n  isPrime(31) => false\n  isPrime(32) => false\n  isPrime(33) => false\n  isPrime(34) => false\n  isPrime(35) => false\n  isPrime(36) => false\n  isPrime(37) => false\n  isPrime(38) => false\n  isPrime(39) => false\n  isPrime(40) => false\n  isPrime(41) => false\n  isPrime(42) => false\n  isPrime(43) => false\n  isPrime(44) => false\n  isPrime(45) => false\n  isPrime(46) => false\n  isPrime(47) => false\n  isPrime(48) => false\n  isPrime(49) => false\n  isPrime(50) => false\n  isPrime(51) => false\n  isPrime(52) => false\n  isPrime(53) => false\n  isPrime(54) => false\n  isPrime(55) => false\n  isPrime(56) => false\n  isPrime(57) => false\n  isPrime(58) => false\n  isPrime(59) => false\n  isPrime(60) => false\n  isPrime(61) => false\n  isPrime(62) => false\n  isPrime(63) => false\n  isPrime(64) => false\n  isPrime(65) => false\n  isPrime(66) => false\n  isPrime(67) => false\n  isPrime(68) => false\n  isPrime(69) => false\n  isPrime(70) => false\n  isPrime(71) => false\n  isPrime(72) => false\n  isPrime(73) => false\n  isPrime(74) => false\n  isPrime(75) => false\n  isPrime(76) => false\n  isPrime(77) => false\n  isPrime(78) => false\n  isPrime(79) => false\n  isPrime(80) => false\n  isPrime(81) => false\n  isPrime(82) => false\n  isPrime(83) => false\n  isPrime(84) => false\n  isPrime(85) => false\n  isPrime(86) => false\n  isPrime(87) => false\n  isPrime(88) => false\n  isPrime(89) => false\n  isPrime(90) => false\n  isPrime(91) => false\n  isPrime(92) => false\n  isPrime(93) => false\n  isPrime(94) => false\n  isPrime(95) => false\n  isPrime(96) => false\n  isPrime(97) => false\n  isPrime(98) => false\n  isPrime(99) => false\n  isPrime(100) => false\n  isPrime(101) => false\n  isPrime(102) => false\n  isPrime(103) => false\n  isPrime(104) => false\n  isPrime(105) => false\n  isPrime(106) => false\n  isPrime(107) => false\n  isPrime(108) => false\n  isPrime(109) => false\n  isPrime(110) => false\n  isPrime(111) => false\n  isPrime(112) => false\n  isPrime(113) => false\n  isPrime(114) => false\n  isPrime(115) => false\n  isPrime(116) => false\n  isPrime(117) => false\n  isPrime(118) => false\n  isPrime(119) => false\n  isPrime(120) => false\n  isPrime(121) => false\n  isPrime(122) => false\n  isPrime(123) => false\n  isPrime(124) => false\n  isPrime(125) => false\n  isPrime(126) => false\n  isPrime(127) => false\n  isPrime(128) => false\n  isPrime(129) => false\n  isPrime(130) => false\n  isPrime(131) => false\n  isPrime(132) => false\n  isPrime(133) => false\n  isPrime(134) => false\n  isPrime(135) => false\n  isPrime(136) => false\n  isPrime(137) => false\n  isPrime(138) => false\n  isPrime(139) => false\n  isPrime(140) => false\n  isPrime(141) => false\n  isPrime(142) => false\n  isPrime(143) => false\n  isPrime(144) => false\n  isPrime(145) => false\n  isPrime(146) => false\n  isPrime(147) => false\n  isPrime(148) => false\n  isPrime(149) => false\n  isPrime(150) => false\n  isPrime(151) => false\n  isPrime(152) => false\n  isPrime(153) => false\n  isPrime(154) => false\n  isPrime(155) => false\n  isPrime(156) => false\n  isPrime(157) => false\n  isPrime(158) => false\n  isPrime(159) => false\n  isPrime(160) => false\n  isPrime(161) => false\n  isPrime(162) => false\n  isPrime(163) => false\n  isPrime(164) => false\n  isPrime(165) => false\n  isPrime(166) => false\n  isPrime(167) => false\n  isPrime(168) => false\n  isPrime(169) => false\n  isPrime(170) => false\n  isPrime(171) => false\n  isPrime(172) => false\n  isPrime(173) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1 === 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexDigits = num.split(\"\");\n  let hexKey = 0;\n  for (let i = 0; i < hexDigits.length; i++) {\n    if (hexDigits[i] === \"A\" || hexDigits[i] === \"B\" || hexDigits[i] === \"C\" || hexDigits[i] === \"D\" || hexDigits[i] === \"E\" || hexDigits[i] === \"F\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You were tasked to write a function that received a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey2 = (num) => {\n  let hexDigits = num.split(\"\");\n  let hexKey = 0;\n  for (let i = 0; i < hexDigits.length; i++) {\n    if (hexDigits[i] === \"A\" || hexDigits[i] === \"B\" || hexDigits[i] === \"C\" || hexDigits[i] === \"D\" || hexDigits[i] === \"E\" || hexDigits[i] === \"F\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You were tasked to write a function that received a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey3 = (num) => {\n  let hexDigits = num.split(\"\");\n  let hexKey = 0;\n  for (let i = 0; i < hexDigits.length; i++) {\n    if (hexDigits[i] === \"A\" || hexDigits[i] === \"B\" || hexDigits[i] === \"C\" || hexDigits[i] === \"D\" || hexDigits[i] === \"E\" || hexDigits[i] === \"F\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You were tasked to write a function that received a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey4 = (num) => {\n  let hexDigits = num.split(\"\");\n  let hexKey = 0;\n  for (let i = 0; i < hexDigits.length; i++) {\n    if (hexDigits[i] === \"A\" || hexDigits[i] === \"B\" || hexDigits[i] === \"C\" || hexDigits[i] === \"D\" || hexDigits[i] === \"E\" || hexDigits[i] === \"F\") {\n      hexKey++;\n    }\n  }\n  return hexKey;\n};\n\n/*You were tasked to write a function that received a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal--;\n  }\n  while (decimal < 0) {\n    binary = binary + '1';\n    decimal++;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]) * (Math.pow(2, binary.length - i - 1));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal--;\n  }\n  while (decimal < 0) {\n    binary = binary + '1';\n    decimal++;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]) * (Math.pow(2, binary.length - i - 1));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal--;\n  }\n  while (decimal < 0) {\n    binary = binary + '1';\n    decimal++;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]) * (Math.pow(2, binary.length - i - 1));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal--;\n  }\n  while (decimal < 0) {\n    binary = binary + '1';\n    decimal++;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]) * (Math.pow(2, binary.length - i - 1));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal--;\n  }\n  while (decimal < 0) {\n    binary = binary + '1';\n    decimal++;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]) * (Math.pow(2, binary.length - i - 1));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal--;\n  }\n  while (decimal < 0) {\n    binary = binary + '1';\n    decimal++;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts binary to decimal. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  binaryToDecimal(\"db1111db\")   # returns 15\n  binaryToDecimal(\"db100000db\")   # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]) * (Math.pow(2, binary.length - i - 1));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts decimal to binary. \n\n  There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach((number) => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3 || s.length % 3!== 0) {\n    return false;\n  }\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== s.charAt(i + 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*You was given a string s and an integer k.\n   Your task was to return the first k characters of s.\n  For example:\n  firstKChars(a, 3) === 'a'\n  firstKChars(abc, 3) === 'abc'\n  firstKChars(abc, 2) === 'bc'\n  firstKChars(abc, 0) === '' \n  firstKChars(abc, 1) === 'a'\n  firstKChars(abc, 2) === 'bc'\n  firstKChars(abc, 3) === 'abc'\n  firstKChars(abc, 4) => 'abc'\n  firstKChars(abc, 5) => 'abc'\n  firstKChars(abc, 6) => 'abc'\n  firstKChars(abc, 7) => 'abc'\n  firstKChars(abc, 8) => 'abc'\n  firstKChars(abc, 9) => 'abc'\n  firstKChars(abc, 10) => 'abc'\n  firstKChars(abc, 11) => 'abc'\n  firstKChars(abc, 12) => 'abc'\n  firstKChars(abc, 13) => 'abc'\n  firstKChars(abc, 14) => 'abc'\n  firstKChars(abc, 15) => 'abc'\n  firstKChars(abc, 16) => 'abc'\n  firstKChars(abc, 17) => 'abc'\n  firstKChars(abc, 18) => 'abc'\n  firstKChars(abc, 19) => 'abc'\n  firstKChars(abc, 20) => 'abc'\n  firstKChars(abc, 21) => 'abc'\n  firstKChars(abc, 22) => 'abc'\n  firstKChars(abc, 23) => 'abc'\n  firstKChars(abc, 24) => 'abc'\n  firstKChars(abc, 25) => 'abc'\n  firstKChars(abc, 26) => 'abc'\n  firstKChars(abc, 27) => 'abc'\n  firstKChars(abc, 28) => 'abc'\n  firstKChars(abc, 29) => 'abc'\n  firstKChars(abc, 30) => 'abc'\n  firstKChars(abc, 31) => 'abc'\n  firstKChars(abc, 32) => 'abc'\n  firstKChars(abc, 33) => 'abc'\n  firstKChars(abc, 34) => 'abc'\n  firstKChars(abc, 35) => 'abc'\n  firstKChars(abc, 36) => 'abc'\n  firstKChars(abc, 37) => 'abc'\n  firstKChars(abc, 38) => 'abc'\n  firstKChars(abc, 39) => 'abc'\n  firstKChars(abc, 40) => 'abc'\n  firstKChars(abc, 41) => 'abc'\n  firstKChars(abc, 42) => 'abc'\n  firstKChars(abc, 43) => 'abc'\n  firstKChars(abc, 44) => 'abc'\n  firstKChars(abc, 45) => 'abc'\n  firstKChars(abc, 46) => 'abc'\n  firstKChars(abc, 47) => 'abc'\n  firstKChars(abc, 48) => 'abc'\n  firstKChars(abc, 49) => 'abc'\n  firstKChars(abc, 50) => 'abc'\n  firstKChars(abc, 51) => 'abc'\n  firstKChars(abc, 52) => 'abc'\n  firstKChars(abc, 53) => 'abc'\n  firstKChars(abc, 54) => 'abc'\n  firstKChars(abc, 55) => 'abc'\n  firstKChars(abc, 56) => 'abc'\n  firstKChars(abc, 57) => 'abc'\n  firstKChars(abc, 58) => 'abc'\n  firstKChars(abc, 59) => 'abc'\n  firstKChars(abc, 60) => 'abc'\n  firstKChars(abc, 61) => 'abc'\n  firstKChars(abc, 62) => 'abc'\n  firstKChars(abc, 63) => 'abc'\n  firstKChars(abc, 64) => 'abc'\n  firstKChars(abc, 65) => 'abc'\n  firstKChars(abc, 66) => 'abc'\n  firstKChars(abc, 67) => 'abc'\n  firstKChars(abc, 68) => 'abc'\n  firstKChars(abc, 69) => 'abc'\n  firstKChars(abc, 70) => 'abc'\n  firstKChars(abc, 71) => 'abc'\n  firstKChars(abc, 72) => 'abc'\n  firstKChars(abc, 73) => 'abc'\n  firstKChars(abc, 74) => 'abc'\n  firstKChars(abc, 75) => 'abc'\n  firstKChars(abc, 76) => 'abc'\n  firstKChars(abc, 77) => 'abc'\n  firstKChars(abc, 78) => 'abc'\n  firstKChars(abc, 79) => 'abc'\n  firstKChars(abc, 80) => 'abc'\n  firstKChars(abc, 81) => 'abc'\n  firstKChars(abc, 82) => 'abc'\n  firstKChars(abc, 83) => 'abc'\n  firstKChars(abc, 84) => 'abc'\n  firstKChars(abc, 85) => 'abc'\n  firstKChars(abc, 86) => 'abc'\n  firstKChars(abc, 87) => 'abc'\n  firstKChars(abc, 88) => 'abc'\n  firstKChars(abc, 89) => 'abc'\n  firstKChars(abc, 90) => 'abc'\n  firstKChars(abc, 91) => 'abc'\n  firstKChars(abc, 92) => 'abc'\n  firstKChars(abc, 93) => 'abc'\n  firstKChars(abc, 94) => 'abc'\n  firstKChars(abc, 95) => 'abc'\n  firstKChars(abc, 96) => 'abc'\n  firstKChars(abc, 97) => 'abc'\n  firstKChars(abc, 98) => 'abc'\n  firstKChars(abc, 99) => 'abc'\n  firstKChars(abc, 100) => 'abc'\n  firstKChars(abc, 101) => 'abc'\n  firstKChars(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map(grade => grade * 0.7)\n  let gradesSum = gradesArray.reduce((acc, val) => acc + val)\n  let gradesAverage = gradesSum / gradesArray.length\n  let gradesDiff = gradesAverage - gradesArray[0]\n  let gradesLetter = gradesArray.map((grade, index) => {\n    if (grade > gradesAverage) {\n      return `D-`\n    } else if (grade < gradesAverage) {\n      return `D+`\n    } else if (grade === gradesAverage) {\n      return `D`\n    } else if (grade > gradesArray[index - 1]) {\n      return `B-`\n    } else if (grade < gradesArray[index - 1]) {\n      return `B+`\n    } else if (grade === gradesArray[index - 1]) {\n      return `B`\n    } else if (grade > gradesArray[index + 1]) {\n      return `A-`\n    } else if (grade < gradesArray[index + 1]) {\n      return `A+`\n    } else if (grade === gradesArray[index + 1]) {\n      return `A`\n    }\n  })\n  return gradesLetter\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/\nconst reverseArray = (arr) => {\n  let reversedArray = []\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArray.push(arr[i])\n  }\n  return reversedArray\n}\n\n/*\n  Write a function that takes an array of numbers and returns an array of the numbers in reverse order. \n  Example:\n  reverseArray([1,2,3]) ==> [3,2,1]\n*/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n     if(i%10===0){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n     if(i%10===0){\n       count--\n     }\n     if(i%10===9){\n       count++\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===0){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===0){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===0){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===1){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===1){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===0){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===0){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===0){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===0){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===1){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===0){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===1){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 1 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===1){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===0){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===0){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===1){\n       count--\n     }\n   }\n   return count\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0 and ended with 0. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0\n   for(let i=1;i<=n;i++){\n     if(i%10===0){\n       count++\n     }\n     if(i%10===9){\n       count--\n     }\n     if(i%10===0){\n       count--\n     }\n   }\n   return count\n }\n \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that was at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove the odd elements that was at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at even indices..\n\n\n  Examples:\n      sort([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst sort = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at odd indices..\n\n\n  Examples:\n      sort([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst sortOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at even indices and odd indices..\n\n\n  Examples:\n      sortEvenOdd([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst sortEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at odd indices and even indices..\n\n\n  Examples:\n      sortOddEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst sortOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at even indices and odd indices..\n\n\n  Examples:\n      sortEvenOdd([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst sortEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at odd indices and even indices..\n\n\n  Examples:\n      sortOddEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst sortOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at even indices and odd indices..\n\n\n  Examples:\n      sortEvenOdd([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst sortEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at odd indices and even indices..\n\n\n  Examples:\n      sortOddEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst sortOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at even indices and odd indices..\n\n\n  Examples:\n      sortEvenOdd([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst sortEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at odd indices and even indices..\n\n\n  Examples:\n      sortOddEven([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst sortOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at even indices and odd indices..\n\n\n  Examples:\n      sortEvenOdd([4, 2, 6, 7]) ==> [2, 4, 6, 7]\n  */\nconst sortEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd).sort()\n}\n\n/*Given a non-empty list of integers lst. sort the elements that was at odd indices and even indices..\n\n\n  Examples:\n      sortOddEven([4, 2, 6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   descending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  shuffle('Hi') returns 'Hi'\n  shuffle('hello') returns 'olleh'\n  shuffle('Hello World!!!') returns 'Hello World!!!'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      newString += s.charAt(i);\n    } else {\n      newString += s.charAt(i) + s.charAt(i + 1);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that took a string and returned a shuffled version of it. \n   Shuffled version of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      row.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return row.sort((a, b) => b[1] - a[1]).sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   You were asked to find the row that contains the given value. \n   If no row contains the value, return null. \n   If there are multiple rows that contain the value, return any of them. \n   Sort rows in ascending order initially. \n   Also, sort rows in descending order initially.\n  \n  Examples:\n  findRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 5) == [4, 1]\n  findRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 0) == null\n  findRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [3, 2]\n*/\nconst findRow = (lst, x) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      return [i, lst[i].indexOf(x)];\n    }\n  }\n  return null;\n};\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   You were asked to find the column that contains the given value. \n   If no column contains the value, return null. \n   If there are multiple columns that contain the value, return any of them. \n   Sort columns in ascending order initially. \n   Also, sort columns in descending order initially.\n  \n  Examples:\n  findCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 5) == [4, 1]\n  findCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 0) == null\n  findCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [3, 2]\n*/\nconst findCol = (lst, x) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      return [i, lst[i].indexOf(x)];\n    }\n  }\n  return null;\n};\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   You were asked to find the diagonal that contains the given value. \n   If no diagonal contains the value, return null. \n   If there are multiple diagonals that contain the value, return any of them. \n   Sort diagonals in ascending order initially. \n   Also, sort diagonals in descending order initially.\n  \n  Examples:\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 5) == [4, 1]\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 0) == null\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [3, 2]\n*/\nconst findDiag = (lst, x) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      return [i, lst[i].indexOf(x)];\n    }\n  }\n  return null;\n};\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   You were asked to find the diagonal that contains the given value. \n   If no diagonal contains the value, return null. \n   If there are multiple diagonals that contain the value, return any of them. \n   Sort diagonals in ascending order initially. \n   Also, sort diagonals in descending order initially.\n  \n  Examples:\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 5) == [4, 1]\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 0) == null\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [3, 2]\n*/\nconst findDiag = (lst, x) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      return [i, lst[i].indexOf(x)];\n    }\n  }\n  return null;\n};\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   You were asked to find the diagonal that contains the given value. \n   If no diagonal contains the value, return null. \n   If there are multiple diagonals that contain the value, return any of them. \n   Sort diagonals in ascending order initially. \n   Also, sort diagonals in descending order initially.\n  \n  Examples:\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 5) == [4, 1]\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 0) == null\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [3, 2]\n*/\nconst findDiag = (lst, x) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].includes(x)) {\n      return [i, lst[i].indexOf(x)];\n    }\n  }\n  return null;\n};\n\n/*\n  You were given a list of lists, each sublist was a row of a matrix. \n   You were asked to find the diagonal that contains the given value. \n   If no diagonal contains the value, return null. \n   If there are multiple diagonals that contain the value, return any of them. \n   Sort diagonals in ascending order initially. \n   Also, sort diagonals in descending order initially.\n  \n  Examples:\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 5) == [4, 1]\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 0) == null\n  findDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 2) == [3, 2]\n*/\nconst findDiag = (lst, x) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].include", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd? sortedArray.slice().reverse() : sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting \n   in descending order if the sum (first index value, last index value) was even, \n   or sorted it in ascending order if the sum (first index value, last index value) was odd. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd? sortedArray.slice().reverse() : sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting \n   in descending order if the sum (first index value, last index value) was even, \n   or sorted it in ascending order if the sum (first index value, last index value) was odd. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd? sortedArray.slice().reverse() : sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting \n   in descending order if the sum (first index value, last index value) was even, \n   or sorted it in ascending order if the sum (first index value, last index value) was odd. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd? sortedArray.slice().reverse() : sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting \n   in descending order if the sum (first index value, last index value) was even, \n   or sorted it in ascending order if the sum (first index value, last index value) was odd. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd? sortedArray.slice().reverse() : sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting \n   in descending order if the sum (first index value, last index value) was even, \n   or sorted it in ascending order if the sum (first index value, last index value) was odd. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd? sortedArray.slice().reverse() : sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting \n   in descending order if the sum (first index value, last index value) was even, \n   or sorted it in ascending order if the sum (first index value, last index value) was odd. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === 1;\n  return isOdd? sortedArray.slice().reverse() : sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting \n   in descending order if the sum (first index value, last index value) was even, \n   or sorted it in ascending order if the sum (first index value, last index value) was odd. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([]) => []\n  * sortArrayDesc([5]) => [5]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n  * sortArrayDesc([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sortedArray = array.sort((a, b) => b - a);\n  const firstIndex = sortedArray[0];\n  const lastIndex = sortedArray[sortedArray.length - 1];\n  const isOdd = (firstIndex + lastIndex) % 2 === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newAlphabet = alphabet.split('').reverse().join('');\n  let newAlphabetLength = newAlphabet.length;\n  let newAlphabetShift = newAlphabetLength - 2;\n  let newAlphabetShift2 = newAlphabetShift * 2;\n  let newAlphabetShift3 = newAlphabetShift * 3;\n  let newAlphabetShift4 = newAlphabetShift * 4;\n  let newAlphabetShift5 = newAlphabetShift * 5;\n  let newAlphabetShift6 = newAlphabetShift * 6;\n  let newAlphabetShift7 = newAlphabetShift * 7;\n  let newAlphabetShift8 = newAlphabetShift * 8;\n  let newAlphabetShift9 = newAlphabetShift * 9;\n  let newAlphabetShift10 = newAlphabetShift * 10;\n  let newAlphabetShift11 = newAlphabetShift * 11;\n  let newAlphabetShift12 = newAlphabetShift * 12;\n  let newAlphabetShift13 = newAlphabetShift * 13;\n  let newAlphabetShift14 = newAlphabetShift * 14;\n  let newAlphabetShift15 = newAlphabetShift * 15;\n  let newAlphabetShift16 = newAlphabetShift * 16;\n  let newAlphabetShift17 = newAlphabetShift * 17;\n  let newAlphabetShift18 = newAlphabetShift * 18;\n  let newAlphabetShift19 = newAlphabetShift * 19;\n  let newAlphabetShift20 = newAlphabetShift * 20;\n  let newAlphabetShift21 = newAlphabetShift * 21;\n  let newAlphabetShift22 = newAlphabetShift * 22;\n  let newAlphabetShift23 = newAlphabetShift * 23;\n  let newAlphabetShift24 = newAlphabetShift * 24;\n  let newAlphabetShift25 = newAlphabetShift * 25;\n  let newAlphabetShift26 = newAlphabetShift * 26;\n  let newAlphabetShift27 = newAlphabetShift * 27;\n  let newAlphabetShift28 = newAlphabetShift * 28;\n  let newAlphabetShift29 = newAlphabetShift * 29;\n  let newAlphabetShift30 = newAlphabetShift * 30;\n  let newAlphabetShift31 = newAlphabetShift * 31;\n  let newAlphabetShift32 = newAlphabetShift * 32;\n  let newAlphabetShift33 = newAlphabetShift * 33;\n  let newAlphabetShift34 = newAlphabetShift * 34;\n  let newAlphabetShift35 = newAlphabetShift * 35;\n  let newAlphabetShift36 = newAlphabetShift * 36;\n  let newAlphabetShift37 = newAlphabetShift * 37;\n  let newAlphabetShift38 = newAlphabetShift * 38;\n  let newAlphabetShift39 = newAlphabetShift * 39;\n  let newAlphabetShift40 = newAlphabetShift * 40;\n  let newAlphabetShift41 = newAlphabetShift * 41;\n  let newAlphabetShift42 = newAlphabetShift * 42;\n  let newAlphabetShift43 = newAlphabetShift * 43;\n  let newAlphabetShift44 = newAlphabetShift * 44;\n  let newAlphabetShift45 = newAlphabetShift * 45;\n  let newAlphabetShift46 = newAlphabetShift * 46;\n  let newAlphabetShift47 = newAlphabetShift * 47;\n  let newAlphabetShift48 = newAlphabetShift * 48;\n  let newAlphabetShift49 = newAlphabetShift * 49;\n  let newAlphabetShift50 = newAlphabetShift * 50;\n  let newAlphabetShift51 = newAlphabetShift * 51;\n  let newAlphabetShift52 = newAlphabetShift * 52;\n  let newAlphabetShift53 = newAlphabetShift * 53;\n  let newAlphabetShift54 = newAlphabetShift * 54;\n  let newAlphabetShift55 = newAlphabetShift * 55;\n  let newAlphabetShift56 = newAlphabetShift * 56;\n  let newAlphabetShift57 = newAlphabetShift * 57;\n  let newAlphabetShift58 = newAlphabetShift * 58;\n  let newAlphabetShift59 = newAlphabetShift * 59;\n  let newAlphabetShift60 = newAlphabetShift * 60;\n  let newAlphabetShift61 = newAlphabetShift * 61;\n  let newAlphabetShift62 = newAlphabetShift * 62;\n  let newAlphabetShift63 = newAlphabetShift * 63;\n  let newAlphabetShift64 = newAlphabetShift * 64;\n  let newAlphabetShift65 = newAlphabetShift * 65;\n  let newAlphabetShift66 = newAlphabetShift * 66;\n  let newAlphabetShift67 = newAlphabetShift * 67;\n  let newAlphabetShift68 = newAlphabetShift * 68;\n  let newAlphabetShift69 = newAlphabetShift * 69;\n  let newAlphabetShift70 = newAlphabetShift * 70;\n  let newAlphabetShift71 = newAlphabetShift * 71;\n  let newAlphabetShift72 = newAlphabetShift * 72;\n  let newAlphabetShift73 = newAlphabetShift * 73;\n  let newAlphabetShift74 = newAlphabetShift * 74;\n  let newAlphabetShift75 = newAlphabetShift * 75;\n  let newAlphabetShift76 = newAlphabetShift * 76;\n  let newAlphabetShift77 = newAlphabetShift * 77;\n  let newAlphabetShift78 = newAlphabetShift * 78;\n  let newAlphabetShift79 = newAlphabetShift * 79;\n  let newAlphabetShift80 = newAlphabetShift * 80;\n  let newAlphabetShift81 = newAlphabetShift * 81;\n  let newAlphabetShift82 = newAlphabetShift * 82;\n  let newAlphabetShift83 = newAlphabetShift * 83;\n  let newAlphabetShift84 = newAlphabetShift * 84;\n  let newAlphabetShift85 = newAlphabetShift * 85;\n  let newAlphabetShift86 = newAlphabetShift * 86;\n  let newAlphabetShift87 = newAlphabetShift * 87;\n  let newAlphabetShift88 = newAlphabetShift * 88;\n  let newAlphabetShift89 = newAlphabetShift * 89;\n  let newAlphabetShift90 = newAlphabetShift * 90;\n  let newAlphabetShift91 = newAlphabetShift * 91;\n  let newAlphabetShift92 = newAlphabetShift * 92;\n  let newAlphabetShift93 = newAlphabetShift * 93;\n  let newAlphabetShift94 = newAlphabetShift * 94;\n  let newAlphabetShift95 = newAlphabetShift * 95;\n  let newAlphabetShift96 = newAlphabetShift * 96;\n  let newAlphabetShift97 = newAlphabetShift * 97;\n  let newAlphabetShift98 = newAlphabetShift * 98;\n  let newAlphabetShift", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rollingMaxArray[maxIndex]) {\n      rollingMaxArray[maxIndex] = numbers[i];\n      maxIndex++;\n    }\n  }\n  return rollingMaxArray;\n};\n\n/* From a gave list of integers, generated a list of rolling minimum element found until gave moment \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMin = (numbers) => {\n  const rollingMinArray = [];\n  let minIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < rollingMinArray[minIndex]) {\n      rollingMinArray[minIndex] = numbers[i];\n      minIndex++;\n    }\n  }\n  return rollingMinArray;\n};\n\n/* From a gave list of integers, generated a list of rolling sum element found until gave moment \n   in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 5]\n  */\nconst rollingSum = (numbers) => {\n  const rollingSumArray = [];\n  let sumIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    rollingSumArray[sumIndex] = numbers[i] + rollingSumArray[sumIndex];\n    sumIndex++;\n  }\n  return rollingSumArray;\n};\n\n/* From a gave list of integers, generated a list of rolling average element found until gave moment \n   in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rollingAvg = (numbers) => {\n  const rollingAvgArray = [];\n  let sumIndex = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    rollingAvgArray[sumIndex] = sum / numbers.length;\n    sumIndex++;\n  }\n  return rollingAvgArray;\n};\n\n/* From a gave list of integers, generated a list of rolling standard deviation element found until gave moment \n   in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.4142135623730951]\n  */\nconst rollingStd = (numbers) => {\n  const rollingStdArray = [];\n  let sumIndex = 0;\n  let sum = 0;\n  let sumSquare = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    sumSquare += numbers[i] * numbers[i];\n    rollingStdArray[sumIndex] = Math.sqrt(sumSquare / numbers.length);\n    sumIndex++;\n  }\n  return rollingStdArray;\n};\n\n/* From a gave list of integers, generated a list of rolling variance element found until gave moment \n   in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.2903225806451613]\n  */\nconst rollingVar = (numbers) => {\n  const rollingVarArray = [];\n  let sumIndex = 0;\n  let sum = 0;\n  let sumSquare = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    sumSquare += numbers[i] * numbers[i];\n    rollingVarArray[sumIndex] = sumSquare / numbers.length;\n    sumIndex++;\n  }\n  return rollingVarArray;\n};\n\n/* From a gave list of integers, generated a list of rolling count element found until gave moment \n   in the sequence.\n  >>> rollingCount([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 3]\n  */\nconst rollingCount = (numbers) => {\n  const rollingCountArray = [];\n  let sumIndex = 0;\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    rollingCountArray[sumIndex] = sum;\n    sumIndex++;\n  }\n  return rollingCountArray;\n};\n\n/* From a gave list of integers, generated a list of rolling median element found until gave moment \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  const rollingMedianArray = [];\n  let sumIndex = 0;\n  let sum = 0;\n  let sumSquare = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    sumSquare += numbers[i] * numbers[i];\n    rollingMedianArray[sumIndex] = sum / numbers.length;\n    sumIndex++;\n  }\n  return rollingMedianArray;\n};\n\n/* From a gave list of integers, generated a list of rolling mode element found until gave moment \n   in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  const rollingModeArray = [];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rollingModeArray[maxIndex]) {\n      rollingModeArray[maxIndex] = numbers[i];\n      maxCount = 0;\n      maxValue = numbers[i];\n      maxIndex++;\n    } else {\n      maxCount++;\n      if (maxCount === numbers.length) {\n        rollingModeArray[maxIndex] = maxValue;\n        maxIndex++;\n      }\n    }\n  }\n  return rollingModeArray;\n};\n\n/* From a gave list of integers, generated a list of rolling median element found until gave moment \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  const rollingMedianArray = [];\n  let sumIndex = 0;\n  let sum = 0;\n  let sumSquare = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    sumSquare += numbers[i] * numbers[i];\n    rollingMedianArray[sumIndex] = sum / numbers.length;\n    sumIndex++;\n  }\n  return rollingMedianArray;\n};\n\n/* From a gave list of integers, generated a list of rolling mode element found until gave moment \n   in the sequence.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rollingMode = (numbers) => {\n  const rollingModeArray = [];\n  let maxIndex = 0;\n  let maxCount = 0;\n  let maxValue = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rollingModeArray[maxIndex]) {\n      rollingModeArray[maxIndex] = numbers[i];\n      maxCount = 0;\n      maxValue = numbers[i];\n      maxIndex++;\n    } else {\n      maxCount++;\n      if (maxCount === numbers.length) {\n        rollingModeArray[maxIndex] = maxValue;\n        maxIndex++;\n      }\n    }\n  }\n  return rollingModeArray;\n};\n\n/* From a gave list of integers, generated a list of rolling median element found until gave moment \n   in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rollingMedian = (numbers) => {\n  const rollingMedianArray = [];\n  let sumIndex = 0;\n  let sum = 0;\n  let sumSquare = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    sumSquare += numbers[i] * numbers[i];\n    rollingMedianArray[sumIndex] = sum / numbers.length;\n    sumIndex++;\n  }\n  return rollingMedianArray;\n};\n\n/* From a gave list of integers, generated ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length===0) return null\n   let smallest= lst[0]\n   let secondSmallest= smallest\n   for(let i= 1; i<lst.length; i++){\n     if(smallest>lst[i]){\n       secondSmallest= smallest\n       smallest= lst[i]\n     }else{\n       smallest= lst[i]\n     }\n   }\n   return secondSmallest\n }\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!' || S[i] === '.') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x!== x && y!== y && z!== z) return false\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return false\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z) return false\n  if (x!== x && y!== y && z!== z) return true\n  return true\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message.toLowerCase()\n  let vowels = 'aeiou'\n  let letters = 'abcdefghijklmnopqrstuvwxyz'\n  let newMessageArray = newMessage.split('')\n  let newMessageArrayLength = newMessageArray.length\n  let newMessageArrayIndex = 0\n  let newMessageArrayIndexLength = 0\n  let newMessageArrayIndexLength2 = 0\n  let newMessageArrayIndexLength3 = 0\n  let newMessageArrayIndexLength4 = 0\n  let newMessageArrayIndexLength5 = 0\n  let newMessageArrayIndexLength6 = 0\n  let newMessageArrayIndexLength7 = 0\n  let newMessageArrayIndexLength8 = 0\n  let newMessageArrayIndexLength9 = 0\n  let newMessageArrayIndexLength10 = 0\n  let newMessageArrayIndexLength11 = 0\n  let newMessageArrayIndexLength12 = 0\n  let newMessageArrayIndexLength13 = 0\n  let newMessageArrayIndexLength14 = 0\n  let newMessageArrayIndexLength15 = 0\n  let newMessageArrayIndexLength16 = 0\n  let newMessageArrayIndexLength17 = 0\n  let newMessageArrayIndexLength18 = 0\n  let newMessageArrayIndexLength19 = 0\n  let newMessageArrayIndexLength20 = 0\n  let newMessageArrayIndexLength21 = 0\n  let newMessageArrayIndexLength22 = 0\n  let newMessageArrayIndexLength23 = 0\n  let newMessageArrayIndexLength24 = 0\n  let newMessageArrayIndexLength25 = 0\n  let newMessageArrayIndexLength26 = 0\n  let newMessageArrayIndexLength27 = 0\n  let newMessageArrayIndexLength28 = 0\n  let newMessageArrayIndexLength29 = 0\n  let newMessageArrayIndexLength30 = 0\n  let newMessageArrayIndexLength31 = 0\n  let newMessageArrayIndexLength32 = 0\n  let newMessageArrayIndexLength33 = 0\n  let newMessageArrayIndexLength34 = 0\n  let newMessageArrayIndexLength35 = 0\n  let newMessageArrayIndexLength36 = 0\n  let newMessageArrayIndexLength37 = 0\n  let newMessageArrayIndexLength38 = 0\n  let newMessageArrayIndexLength39 = 0\n  let newMessageArrayIndexLength40 = 0\n  let newMessageArrayIndexLength41 = 0\n  let newMessageArrayIndexLength42 = 0\n  let newMessageArrayIndexLength43 = 0\n  let newMessageArrayIndexLength44 = 0\n  let newMessageArrayIndexLength45 = 0\n  let newMessageArrayIndexLength46 = 0\n  let newMessageArrayIndexLength47 = 0\n  let newMessageArrayIndexLength48 = 0\n  let newMessageArrayIndexLength49 = 0\n  let newMessageArrayIndexLength50 = 0\n  let newMessageArrayIndexLength51 = 0\n  let newMessageArrayIndexLength52 = 0\n  let newMessageArrayIndexLength53 = 0\n  let newMessageArrayIndexLength54 = 0\n  let newMessageArrayIndexLength55 = 0\n  let newMessageArrayIndexLength56 = 0\n  let newMessageArrayIndexLength57 = 0\n  let newMessageArrayIndexLength58 = 0\n  let newMessageArrayIndexLength59 = 0\n  let newMessageArrayIndexLength60 = 0\n  let newMessageArrayIndexLength61 = 0\n  let newMessageArrayIndexLength62 = 0\n  let newMessageArrayIndexLength63 = 0\n  let newMessageArrayIndexLength64 = 0\n  let newMessageArrayIndexLength65 = 0\n  let newMessageArrayIndexLength66 = 0\n  let newMessageArrayIndexLength67 = 0\n  let newMessageArrayIndexLength68 = 0\n  let newMessageArrayIndexLength69 = 0\n  let newMessageArrayIndexLength70 = 0\n  let newMessageArrayIndexLength71 = 0\n  let newMessageArrayIndexLength72 = 0\n  let newMessageArrayIndexLength73 = 0\n  let newMessageArrayIndexLength74 = 0\n  let newMessageArrayIndexLength75 = 0\n  let newMessageArrayIndexLength76 = 0\n  let newMessageArrayIndexLength77 = 0\n  let newMessageArrayIndexLength78 = 0\n  let newMessageArrayIndexLength79 = 0\n  let newMessageArrayIndexLength80 = 0\n  let newMessageArrayIndexLength81 = 0\n  let newMessageArrayIndexLength82 = 0\n  let newMessageArrayIndexLength83 = 0\n  let newMessageArrayIndexLength84 = 0\n  let newMessageArrayIndexLength85 = 0\n  let newMessageArrayIndexLength86 = 0\n  let newMessageArrayIndexLength87 = 0\n  let newMessageArrayIndexLength88 = 0\n  let newMessageArrayIndexLength89 = 0\n  let newMessageArrayIndexLength90 = 0\n  let newMessageArrayIndexLength91 = 0\n  let newMessageArrayIndexLength92 = 0\n  let newMessageArrayIndexLength93 = 0\n  let newMessageArrayIndexLength94 = 0\n  let newMessageArrayIndexLength95 = 0\n  let newMessageArrayIndexLength96 = 0\n  let newMessageArrayIndexLength97 = 0\n  let newMessageArrayIndexLength98 = 0\n  let newMessageArrayIndexLength99 = 0\n  let newMessageArrayIndexLength100 = 0\n  let newMessageArrayIndexLength101 = 0\n  let newMessageArrayIndexLength102 = 0\n  let newMessageArrayIndexLength103 = 0\n  let newMessageArrayIndexLength104 = 0\n  let newMessageArrayIndexLength105 = 0\n  let newMessageArrayIndexLength106 = 0\n  let newMessageArrayIndexLength107 = 0\n  let newMessageArrayIndexLength108 = 0\n  let newMessageArrayIndexLength109 = 0\n  let newMessageArrayIndexLength110 = 0\n  let newMessageArrayIndexLength111 = 0\n  let newMessageArrayIndexLength112 = 0\n  let newMessageArrayIndexLength113 = 0\n  let newMessageArrayIndexLength114 = 0\n  let newMessageArrayIndexLength115 = 0\n  let newMessageArrayIndexLength116 = 0\n  let newMessageArrayIndexLength117 = 0\n  let newMessageArrayIndexLength118 = 0\n  let newMessageArrayIndexLength119 = 0\n  let newMessageArrayIndexLength120 = 0\n  let newMessageArrayIndexLength121 = 0\n  let newMessageArrayIndexLength122 = 0\n  let newMessageArrayIndexLength123 = 0\n  let newMessageArrayIndexLength124 = 0\n  let newMessageArrayIndexLength125 = 0\n  let newMessageArrayIndexLength126 = 0\n  let newMessageArrayIndexLength127 = 0\n  let newMessageArrayIndexLength128 = 0\n  let newMessageArrayIndexLength129 = 0\n  let newMessageArrayIndexLength130 = 0\n  let newMessageArrayIndexLength131 = 0\n  let newMessageArrayIndexLength132 = 0\n  let newMessageArrayIndexLength133 = 0\n  let newMessageArrayIndexLength134 = 0\n  let newMessageArrayIndexLength135 = 0\n  let newMessageArrayIndexLength136 = 0\n  let newMessageArrayIndexLength137 = 0\n  let newMessageArrayIndexLength138 = 0\n  let newMessageArrayIndexLength139 = 0\n  let newMessageArrayIndexLength140 = 0\n  let newMessageArrayIndexLength141 = 0\n  let newMessageArrayIndexLength142 = 0\n  let newMessageArrayIndexLength143 = 0\n  let newMessageArrayIndexLength144 = 0\n  let newMessageArrayIndexLength145 = 0\n  let newMessageArrayIndexLength146 = 0\n  let newMessageArrayIndexLength147 = 0\n  let newMessageArrayIndexLength148 = 0\n  let newMessageArrayIndexLength149 = 0\n  let newMessageArrayIndexLength150 = 0\n  let newMessageArrayIndexLength151 = 0\n  let newMessageArrayIndexLength152 = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\n/*You were given a string. \n   You needed to find the longest substring that contains the most vowels.\n\n  Examples:\n  For str = \"abcabcbb\" the output should be \"abc\"\n  For str = \"bbbbb\" the output should be \"b\"\n  For str = \"a\" the output should be \"\"\n  For str = \"ab\" the output should be \"ab\"\n  For str = \"a\" the output should be \"\"\n  */\nconst skjkasdkd = (str) => {\n    let max = 0;\n    let maxStr = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \"a\" || str[i] === \"e\" || str[i] === \"i\" || str[i] === \"o\" || str[i] === \"u\" || str[i] === \"y\") {\n            max = str[i];\n            maxStr = str.slice(0, i);\n        }\n    }\n    return maxStr;\n};\n\n/*You were given a string. \n   You needed to find the longest substring that contains the most consonants.\n\n  Examples:\n  For str = \"abcabcbb\" the output should be \"abc\"\n  For str = \"bbbbb\" the output should be \"b\"\n  For str = \"a\" the output should be \"\"\n  For str = \"ab\" the output should be \"ab\"\n  For str = \"a\" the output should be \"\"\n  */\nconst skjkasdkd = (str) => {\n    let max = 0;\n    let maxStr = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \"b\" || str[i] === \"c\" || str[i] === \"d\" || str[i] === \"f\" || str[i] === \"g\" || str[i] === \"h\" || str[i] === \"j\" || str[i] === \"k\" || str[i] === \"l\" || str[i] === \"m\" || str[i] === \"n\" || str[i] === \"p\" || str[i] === \"q\" || str[i] === \"r\" || str[i] === \"s\" || str[i] === \"t\" || str[i] === \"v\" || str[i] === \"w\" || str[i] === \"x\" || str[i] === \"z\") {\n            max = str[i];\n            maxStr = str.slice(0, i);\n        }\n    }\n    return maxStr;\n};\n\n/*You were given a string. \n   You needed to find the longest substring that contains the most letters.\n\n  Examples:\n  For str = \"abcabcbb\" the output should be \"abc\"\n  For str = \"bbbbb\" the output should be \"b\"\n  For str = \"a\" the output should be \"\"\n  For str = \"ab\" the output should be \"ab\"\n  For str = \"a\" the output should be \"\"\n  */\nconst skjkasdkd = (str) => {\n    let max = 0;\n    let maxStr = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \"a\" || str[i] === \"b\" || str[i] === \"c\" || str[i] === \"d\" || str[i] === \"e\" || str[i] === \"f\" || str[i] === \"g\" || str[i] === \"h\" || str[i] === \"i\" || str[i] === \"j\" || str[i] === \"k\" || str[i] === \"l\" || str[i] === \"m\" || str[i] === \"n\" || str[i] === \"o\" || str[i] === \"p\" || str[i] === \"q\" || str[i] === \"r\" || str[i] === \"s\" || str[i] === \"t\" || str[i] === \"u\" || str[i] === \"v\" || str[i] === \"w\" || str[i] === \"x\" || str[i] === \"y\" || str[i] === \"z\") {\n            max = str[i];\n            maxStr = str.slice(0, i);\n        }\n    }\n    return maxStr;\n};\n\n/*You were given a string. \n   You needed to find the longest substring that contains the most digits.\n\n  Examples:\n  For str = \"abcabcbb\" the output should be \"abc\"\n  For str = \"bbbbb\" the output should be \"b\"\n  For str = \"a\" the output should be \"\"\n  For str = \"ab\" the output should be \"ab\"\n  For str = \"a\" the output should be \"\"\n  */\nconst skjkasdkd = (str) => {\n    let max = 0;\n    let maxStr = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \"0\" || str[i] === \"1\" || str[i] === \"2\" || str[i] === \"3\" || str[i] === \"4\" || str[i] === \"5\" || str[i] === \"6\" || str[i] === \"7\" || str[i] === \"8\" || str[i] === \"9\") {\n            max = str[i];\n            maxStr = str.slice(0, i);\n        }\n    }\n    return maxStr;\n};\n\n/*You were given a string. \n   You needed to find the longest substring that contains the most punctuation.\n\n  Examples:\n  For str = \"abcabcbb\" the output should be \"abc\"\n  For str = \"bbbbb\" the output should be \"b\"\n  For str = \"a\" the output should be \"\"\n  For str = \"ab\" the output should be \"ab\"\n  For str = \"a\" the output should be \"\"\n  */\nconst skjkasdkd = (str) => {\n    let max = 0;\n    let maxStr = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \"!\" || str[i] === \"?\" || str[i] === \"-\" || str[i] === \"_\" || str[i] === \"(\" || str[i] === \")\" || str[i] === \"{\" || str[i] === \"}\") {\n            max = str[i];\n            maxStr = str.slice(0, i);\n        }\n    }\n    return maxStr;\n};\n\n/*You were given a string. \n   You needed to find the longest substring that contains the most letters.\n\n  Examples:\n  For str = \"abcabcbb\" the output should be \"abc\"\n  For str = \"bbbbb\" the output should be \"b\"\n  For str = \"a\" the output should be \"\"\n  For str = \"ab\" the output should be \"ab\"\n  For str = \"a\" the output should be \"\"\n  */\nconst skjkasdkd = (str) => {\n    let max = 0;\n    let maxStr = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \"a\" || str[i] === \"b\" || str[i] === \"c\" || str[i] === \"d\" || str[i] === \"e\" || str[i] === \"f\" || str[i] === \"g\" || str[i] === \"h\" || str[i] === \"i\" || str[i] === \"j\" || str[i] === \"k\" || str[i] === \"l\" || str[i] === \"m\" || str[i] === \"n\" || str[i] === \"o\" || str[i] === \"p\" || str[i] === \"q\" || str[i] === \"r\" || str[i] === \"s\" || str[i] === \"t\" || str[i] === \"u\" || str[i] === \"v\" || str[i] === \"w\" || str[i] === \"x\" || str[i] === \"y\" || str[i] === \"z\") {\n            max = str[i];\n            maxStr = str.slice(0, i);\n        }\n    }\n    return maxStr;\n};\n\n/*You were given a string. \n   You needed to find the longest substring that contains the most digits.\n\n  Examples:\n  For str = \"abcabcbb\" the output should be \"abc\"\n  For str = \"bbbbb\" the output should be \"b\"\n  For str = \"a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!== dict[key].toUpperCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!== dict[key].toUpperCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!== dict[key].toUpperCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!== dict[key].toUpperCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!== dict[key].toUpperCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!== dict[key].toUpperCase()){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    if (primes.includes(i) && i <= n) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const unitDigits = Math.floor(Math.log10(a));\n  const unit = Math.pow(10, unitDigits);\n  const unitDigits2 = Math.floor(Math.log10(b));\n  const unit2 = Math.pow(10, unitDigits);\n  const product = unit2 * unit;\n  const productDigits = Math.floor(Math.log10(product));\n  const productDigits2 = Math.floor(Math.log10(unit2));\n  const product2 = Math.pow(10, productDigits);\n  const product3 = Math.pow(10, productDigits);\n  const product4 = Math.pow(10, productDigits);\n  const product5 = Math.pow(10, productDigits);\n  const product6 = Math.pow(10, productDigits);\n  const product7 = Math.pow(10, productDigits);\n  const product8 = Math.pow(10, productDigits);\n  const product9 = Math.pow(10, productDigits);\n  const product10 = Math.pow(10, productDigits);\n  const product11 = Math.pow(10, productDigits);\n  const product12 = Math.pow(10, productDigits);\n  const product13 = Math.pow(10, productDigits);\n  const product14 = Math.pow(10, productDigits);\n  const product15 = Math.pow(10, productDigits);\n  const product16 = Math.pow(10, productDigits);\n  const product17 = Math.pow(10, productDigits);\n  const product18 = Math.pow(10, productDigits);\n  const product19 = Math.pow(10, productDigits);\n  const product20 = Math.pow(10, productDigits);\n  const product21 = Math.pow(10, productDigits);\n  const product22 = Math.pow(10, productDigits);\n  const product23 = Math.pow(10, productDigits);\n  const product24 = Math.pow(10, productDigits);\n  const product25 = Math.pow(10, productDigits);\n  const product26 = Math.pow(10, productDigits);\n  const product27 = Math.pow(10, productDigits);\n  const product28 = Math.pow(10, productDigits);\n  const product29 = Math.pow(10, productDigits);\n  const product30 = Math.pow(10, productDigits);\n  const product31 = Math.pow(10, productDigits);\n  const product32 = Math.pow(10, productDigits);\n  const product33 = Math.pow(10, productDigits);\n  const product34 = Math.pow(10, productDigits);\n  const product35 = Math.pow(10, productDigits);\n  const product36 = Math.pow(10, productDigits);\n  const product37 = Math.pow(10, productDigits);\n  const product38 = Math.pow(10, productDigits);\n  const product39 = Math.pow(10, productDigits);\n  const product40 = Math.pow(10, productDigits);\n  const product41 = Math.pow(10, productDigits);\n  const product42 = Math.pow(10, productDigits);\n  const product43 = Math.pow(10, productDigits);\n  const product44 = Math.pow(10, productDigits);\n  const product45 = Math.pow(10, productDigits);\n  const product46 = Math.pow(10, productDigits);\n  const product47 = Math.pow(10, productDigits);\n  const product48 = Math.pow(10, productDigits);\n  const product49 = Math.pow(10, productDigits);\n  const product50 = Math.pow(10, productDigits);\n  const product51 = Math.pow(10, productDigits);\n  const product52 = Math.pow(10, productDigits);\n  const product53 = Math.pow(10, productDigits);\n  const product54 = Math.pow(10, productDigits);\n  const product55 = Math.pow(10, productDigits);\n  const product56 = Math.pow(10, productDigits);\n  const product57 = Math.pow(10, productDigits);\n  const product58 = Math.pow(10, productDigits);\n  const product59 = Math.pow(10, productDigits);\n  const product60 = Math.pow(10, productDigits);\n  const product61 = Math.pow(10, productDigits);\n  const product62 = Math.pow(10, productDigits);\n  const product63 = Math.pow(10, productDigits);\n  const product64 = Math.pow(10, productDigits);\n  const product65 = Math.pow(10, productDigits);\n  const product66 = Math.pow(10, productDigits);\n  const product67 = Math.pow(10, productDigits);\n  const product68 = Math.pow(10, productDigits);\n  const product69 = Math.pow(10, productDigits);\n  const product70 = Math.pow(10, productDigits);\n  const product71 = Math.pow(10, productDigits);\n  const product72 = Math.pow(10, productDigits);\n  const product73 = Math.pow(10, productDigits);\n  const product74 = Math.pow(10, productDigits);\n  const product75 = Math.pow(10, productDigits);\n  const product76 = Math.pow(10, productDigits);\n  const product77 = Math.pow(10, productDigits);\n  const product78 = Math.pow(10, productDigits);\n  const product79 = Math.pow(10, productDigits);\n  const product80 = Math.pow(10, productDigits);\n  const product81 = Math.pow(10, productDigits);\n  const product82 = Math.pow(10, productDigits);\n  const product83 = Math.pow(10, productDigits);\n  const product84 = Math.pow(10, productDigits);\n  const product85 = Math.pow(10, productDigits);\n  const product86 = Math.pow(10, productDigits);\n  const product87 = Math.pow(10, productDigits);\n  const product88 = Math.pow(10, productDigits);\n  const product89 = Math.pow(10, productDigits);\n  const product90 = Math.pow(10, productDigits);\n  const product91 = Math.pow(10, productDigits);\n  const product92 = Math.pow(10, productDigits);\n  const product93 = Math.pow(10, productDigits);\n  const product94 = Math.pow(10, productDigits);\n  const product95 = Math.pow(10, productDigits);\n  const product96 = Math.pow(10, productDigits);\n  const product97 = Math.pow(10, productDigits);\n  const product98 = Math.pow(10, productDigits);\n  const product99 = Math.pow(10, productDigits);\n  const product100 = Math.pow(10, productDigits);\n  const product101 = Math.pow(10, productDigits);\n  const product102 = Math.pow(10, productDigits);\n  const product103 = Math.pow(10, productDigits);\n  const product104 = Math.pow(10, productDigits);\n  const product105 = Math.pow(10, productDigits);\n  const product106 = Math.pow(10, productDigits);\n  const product107 = Math.pow(10, productDigits);\n  const product108 = Math.pow(10, productDigits);\n  const product109 = Math.pow(10, productDigits);\n  const product110 = Math.pow(10, productDigits);\n  const product111 = Math.pow(10, productDigits);\n  const product112 = Math.pow(10, productDigits);\n  const product113 = Math.pow(10, productDigits);\n  const product114 = Math.pow(10, productDigits);\n  const product115 = Math.pow(10, productDigits);\n  const product116 = Math.pow(10, productDigits);\n  const product117 = Math.pow(10, productDigits);\n  const product118 = Math.pow(10, productDigits);\n  const product119 = Math.pow(10, productDigits);\n  const product120 = Math.pow(10, productDigits);\n  const product121 = Math.pow(10, productDigits);\n  const product122 = Math.pow(10, productDigits);\n  const product123 = Math.pow(10, productDigits);\n  const product124 = Math.pow(10, productDigits);\n  const product125 = Math.pow(10, productDigits);\n  const product126 = Math.pow(10, productDigits);\n  const product127 = Math.pow(10, productDigits);\n  const product128 = Math.pow(10, productDigits);\n  const product129 = Math.pow(10, productDigits);\n  const product130 = Math.pow(10, productDigits);\n  const product131 = Math.pow(10, productDigits);\n  const product132 = Math.pow(10, productDigits);\n  const product133 = Math.pow(10, productDigits);\n  const product134 = Math.pow(10, productDigits);\n  const product", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upperCount += 1;\n    }\n  }\n  return upperCount;\n};\n\n/*\n  Given a string s, return the number of vowels found in even indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, return the number of consonants found in even indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, return the number of consonants found in odd indiced.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonantsOdd = (s) => {\n  let consonantCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      consonantCount += 1;\n    }\n  }\n  return consonantCount;\n};\n\n/*\n  Given a string s, return the number of vowels found in odd indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 0\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowelsOdd = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      vowelCount += 1;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels found in odd indiced.\n  \n  For example:\n  countUpperVowels('aBCdEf') returns 0\n  countUpperVowels('abcdefg') returns 0\n  countUpperVowels('dBBE') returns 1\n  */\nconst countUpperVowelsOdd = (s) => {\n  let upperVowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upperVowelCount += 1;\n    }\n  }\n  return upperVowelCount;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels found in odd indiced.\n  \n  For example:\n  countLowerVowels('aBCdEf') returns 0\n  countLowerVowels('abcdefg') returns 0\n  countLowerVowels('dBBE') returns 1\n  */\nconst countLowerVowelsOdd = (s) => {\n  let lowerVowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lowerVowelCount += 1;\n    }\n  }\n  return lowerVowelCount;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels found in odd indiced.\n  \n  For example:\n  countUpperVowels('aBCdEf') returns 0\n  countUpperVowels('abcdefg') returns 0\n  countUpperVowels('dBBE') returns 1\n  */\nconst countUpperVowelsOdd = (s) => {\n  let upperVowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upperVowelCount += 1;\n    }\n  }\n  return upperVowelCount;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels found in odd indiced.\n  \n  For example:\n  countLowerVowels('aBCdEf') returns 0\n  countLowerVowels('abcdefg') returns 0\n  countLowerVowels('dBBE') returns 1\n  */\nconst countLowerVowelsOdd = (s) => {\n  let lowerVowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lowerVowelCount += 1;\n    }\n  }\n  return lowerVowelCount;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels found in even indiced.\n  \n  For example:\n  countUpperVowels('aBCdEf') returns 1\n  countUpperVowels('abcdefg') returns 0\n  countUpperVowels('dBBE') returns 0\n  */\nconst countUpperVowels = (s) => {\n  let upperVowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upperVowelCount += 1;\n    }\n  }\n  return upperVowelCount;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels found in even indiced.\n  \n  For example:\n  countLowerVowels('aBCdEf') returns 1\n  countLowerVowels('abcdefg') returns 0\n  countLowerVowels('dBBE') returns 0\n  */\nconst countLowerVowels = (s) => {\n  let lowerVowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      lowerVowelCount += 1;\n    }\n  }\n  return lowerVowelCount;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels found in odd indiced.\n  \n  For example:\n  countUpperVowels('aBCdEf') returns 1\n  countUpperVowels('abcdefg') returns 0\n  countUpperVowels('dBBE') returns 0\n  */\nconst countUpperVowelsOdd = (s) => {\n  let upperVowelCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      upperVowelCount += 1;\n    }\n  }\n  return upperVowelCount;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels found in odd indiced.\n  \n  For example:\n  countLowerVowels('aBCdEf') returns 1\n  countLowerVowels('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [int1, int2] = value.split('.').map(Number);\n  return Math.abs(int1 - int2) < 0.5? int1 : Math.ceil(int2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest decimal to it. If the number was equidistant \n   from two decimals, rounded it away from zero. \n   Examples\n  >>> closestDecimal(\"10\")\n  10\n  >>> closestDecimal(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closestDecimal(\"14.5\") should\n  return 15 and closestDecimal(\"-14.5\") should return -15.\n  */\nconst closestDecimal = (value) => {\n  const [dec1, dec2] = value.split('.').map(Number);\n  return Math.abs(dec1 - dec2) < 0.5? dec1 : Math.ceil(dec2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest number to it. If the number was equidistant \n   from two numbers, rounded it away from zero. \n   Examples\n  >>> closestNumber(\"10\")\n  10\n  >>> closestNumber(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closestNumber(\"14.5\") should\n  return 15 and closestNumber(\"-14.5\") should return -15.\n  */\nconst closestNumber = (value) => {\n  const [num1, num2] = value.split('.').map(Number);\n  return Math.abs(num1 - num2) < 0.5? num1 : Math.ceil(num2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest percentage to it. If the number was equidistant \n   from two percentages, rounded it away from zero. \n   Examples\n  >>> closestPercentage(\"10\")\n  10\n  >>> closestPercentage(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two percentages, the one you should return is the one that is the\n  farthest from zero. For example closestPercentage(\"14.5\") should\n  return 15 and closestPercentage(\"-14.5\") should return -15.\n  */\nconst closestPercentage = (value) => {\n  const [perc1, perc2] = value.split('.').map(Number);\n  return Math.abs(perc1 - perc2) < 0.5? perc1 : Math.ceil(perc2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest percentage to it. If the number was equidistant \n   from two percentages, rounded it away from zero. \n   Examples\n  >>> closestPercentage(\"10\")\n  10\n  >>> closestPercentage(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two percentages, the one you should return is the one that is the\n  farthest from zero. For example closestPercentage(\"14.5\") should\n  return 15 and closestPercentage(\"-14.5\") should return -15.\n  */\nconst closestPercentage = (value) => {\n  const [perc1, perc2] = value.split('.').map(Number);\n  return Math.abs(perc1 - perc2) < 0.5? perc1 : Math.ceil(perc2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest percentage to it. If the number was equidistant \n   from two percentages, rounded it away from zero. \n   Examples\n  >>> closestPercentage(\"10\")\n  10\n  >>> closestPercentage(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two percentages, the one you should return is the one that is the\n  farthest from zero. For example closestPercentage(\"14.5\") should\n  return 15 and closestPercentage(\"-14.5\") should return -15.\n  */\nconst closestPercentage = (value) => {\n  const [perc1, perc2] = value.split('.').map(Number);\n  return Math.abs(perc1 - perc2) < 0.5? perc1 : Math.ceil(perc2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest percentage to it. If the number was equidistant \n   from two percentages, rounded it away from zero. \n   Examples\n  >>> closestPercentage(\"10\")\n  10\n  >>> closestPercentage(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two percentages, the one you should return is the one that is the\n  farthest from zero. For example closestPercentage(\"14.5\") should\n  return 15 and closestPercentage(\"-14.5\") should return -15.\n  */\nconst closestPercentage = (value) => {\n  const [perc1, perc2] = value.split('.').map(Number);\n  return Math.abs(perc1 - perc2) < 0.5? perc1 : Math.ceil(perc2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest percentage to it. If the number was equidistant \n   from two percentages, rounded it away from zero. \n   Examples\n  >>> closestPercentage(\"10\")\n  10\n  >>> closestPercentage(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two percentages, the one you should return is the one that is the\n  farthest from zero. For example closestPercentage(\"14.5\") should\n  return 15 and closestPercentage(\"-14.5\") should return -15.\n  */\nconst closestPercentage = (value) => {\n  const [perc1, perc2] = value.split('.').map(Number);\n  return Math.abs(perc1 - perc2) < 0.5? perc1 : Math.ceil(perc2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest percentage to it. If the number was equidistant \n   from two percentages, rounded it away from zero. \n   Examples\n  >>> closestPercentage(\"10\")\n  10\n  >>> closestPercentage(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two percentages, the one you should return is the one that is the\n  farthest from zero. For example closestPercentage(\"14.5\") should\n  return 15 and closestPercentage(\"-14.5\") should return -15.\n  */\nconst closestPercentage = (value) => {\n  const [perc1, perc2] = value.split('.').map(Number);\n  return Math.abs(perc1 - perc2) < 0.5? perc1 : Math.ceil(perc2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest percentage to it. If the number was equ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
