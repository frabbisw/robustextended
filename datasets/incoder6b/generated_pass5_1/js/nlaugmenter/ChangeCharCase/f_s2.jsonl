{"task_id": "JavaScript/0", "prompt": "/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const gIven = numbers.filter(n => Math.abs(n - threshold) < 0.0000001)\n  const anY = gIven.length\n  const CloseR = gIven.reduce((acc, n) => acc + Math.abs(n - threshold), 0)\n  return anY === CloseR\n}\n\n/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let group_str = '';\n  let group_open = false;\n  let group_closed = false;\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      group_open = true;\n      group_str += char;\n    } else if (char === ')') {\n      group_closed = true;\n      group_str += char;\n    } else if (char ==='' && group_open) {\n      group_str += char;\n    } else if (char ==='' && group_closed) {\n      groups.push(group_str);\n      group_str = '';\n      group_open = false;\n      group_closed = false;\n    } else {\n      group_str += char;\n    }\n  }\n  if (group_str.length > 0) {\n    groups.push(group_str);\n  }\n  return groups;\n};\n\n/**\n * Returns a string with the first letter of each word capitalized.\n * >>> capitalizeFirstLetter('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetter = (string) => {\n  return string.split(' ').map((word) => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetter('hello world')\n * 'Hello World'\n */\nconst capitalizeAllLetters = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetter(word)).join(' ');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetter('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetterAndSpaces = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetter(word) +'').join(' ');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpaces('hello world')\n * 'Hello World'\n */\nconst capitalizeAllLettersAndSpaces = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpaces(word)).join(' ');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpaces('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetterAndSpacesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpaces(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeAllLettersAndSpacesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetterAndSpacesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLinesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeAllLettersAndSpacesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLinesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLinesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLinesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeAllLettersAndSpacesAndNewLinesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeAllLettersAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines(word)).join('\\n');\n};\n\n/**\n * Returns a string with the first letter of each word capitalized and each word separated by a space.\n * >>> capitalizeFirstLetterAndSpacesAndNewLinesAndNewLinesAndNewLines('hello world')\n * 'Hello World'\n */\nconst capitalizeAllLettersAndSpacesAndNewLinesAndNewLinesAndNewLinesAndNewLinesAndNewLines = (string) => {\n  return string.split(' ').map((word) => capitalizeFirstLetterAndSpacesAndNewLinesAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/10", "prompt": "/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string\n   .split('')\n   .reverse()\n   .join('');\n  return reverseString == string\n   ? string\n    : reverseString + makePalindrome(string);\n};\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string\n   .split('')\n   .reverse()\n   .join('');\n  return reverseString == string\n   ? string\n    : reverseString + makePalindrome(string);\n};\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string\n   .split('')\n   .reverse()\n   .join('');\n  return reverseString == string\n   ? string\n    : reverseString + makePalindrome(string);\n};\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string\n   .split('')\n   .reverse()\n   .join('');\n  return reverseString == string\n   ? string\n    : reverseString + makePalindrome(string);\n};\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string\n   .split('')\n   .reverse()\n   .join('');\n  return reverseString == string\n   ? string\n    : reverseString + makePalindrome(string);\n};\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string\n   .split('')\n   .reverse()\n   .join('');\n  return reverseString == string\n   ? string\n    : reverseString + makePalindrome(string);\n};\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const reverseString = string\n   .split('')\n   .reverse()\n   .join('');\n  return reverseString == string\n   ? string\n    : reverseString + makePalindrome(string);\n};\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliE", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(word => word.trim());\n};\n\n/*\n  Your task is to return the sum of the numbers in the given array.\n  \n  For example:\n  sumOfNumbers([1, 3, 5]) == 6\n  sumOfNumbers([1, 3, 5]) == 10\n  sumOfNumbers([1, 3, 5]) == 15\n  sumOfNumbers([1, 3, 5]) == 20\n  sumOfNumbers([]) == 0\n  sumOfNumbers([]) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n  sumOfNumbers(null) == NaN\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0\n  const biggest = even? x : y\n  const smaller = even? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest odd iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const odd = x % 2 === 1\n  const biggest = odd? x : y\n  const smaller = odd? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0\n  const biggest = even? x : y\n  const smaller = even? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest odd iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const odd = x % 2 === 1\n  const biggest = odd? x : y\n  const smaller = odd? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0\n  const biggest = even? x : y\n  const smaller = even? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest odd iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const odd = x % 2 === 1\n  const biggest = odd? x : y\n  const smaller = odd? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0\n  const biggest = even? x : y\n  const smaller = even? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest odd iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const odd = x % 2 === 1\n  const biggest = odd? x : y\n  const smaller = odd? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = x % 2 === 0\n  const biggest = even? x : y\n  const smaller = even? y : x\n  return biggest > smaller? biggest : -1\n}\n\n/*\n  ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest odd iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  const result = [];\n  for (let i = n; i >= m; i--) {\n    result.unshift(i % 2);\n  }\n  return result.join('');\n};\n\n/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  const result = [];\n  for (let i = n; i >= m; i--) {\n    result.unshift(i % 2);\n  }\n  return result.join('');\n};\n\n/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  const result = [];\n  for (let i = n; i >= m; i--) {\n    result.unshift(i % 2);\n  }\n  return result.join('');\n};\n\n/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  const result = [];\n  for (let i = n; i >= m; i--) {\n    result.unshift(i % 2);\n  }\n  return result.join('');\n};\n\n/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  const result = [];\n  for (let i = n; i >= m; i--) {\n    result.unshift(i % 2);\n  }\n  return result.join('');\n};\n\n/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  const result = [];\n  for (let i = n; i >= m; i--) {\n    result.unshift(i % 2);\n  }\n  return result.join('');\n};\n\n/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) {\n    return -1;\n  }\n  const result = [];\n  for (let i = n; i >= m; i--) {\n    result.unshift(i % 2);\n  }\n  return result.join('');\n};\n\n/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n Th", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/104", "prompt": "/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2 === 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenEvenDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2 === 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenEvenDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2 === 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  Elements thAt hasn't any odd digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddDigits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2!== 0) {\n        if (item % 2!== 0) {\n          result.push(item);\n        }\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list x. return A sortED list OF all \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const length = reversed.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    const index = sorted.indexOf(reversed[i]);\n    result.push(byLength.byLength[index]);\n  }\n  return result;\n};\n\nbyLength.byLength = [\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n  \"seven\",\n  \"eight\",\n  \"nine\",\n  \"ten\",\n  \"eleven\",\n  \"twelve\",\n  \"thirteen\",\n  \"fourteen\",\n  \"fifteen\",\n  \"sixteen\",\n  \"seventeen\",\n  \"eighteen\",\n  \"nineteen\",\n  \"twenty\",\n  \"twenty one\",\n  \"twenty two\",\n  \"twenty three\",\n  \"twenty four\",\n  \"twenty five\",\n  \"twenty six\",\n  \"twenty seven\",\n  \"twenty eight\",\n  \"twenty nine\",\n  \"thirty\",\n  \"thirty one\",\n  \"thirty two\",\n  \"thirty three\",\n  \"thirty four\",\n  \"thirty five\",\n  \"thirty six\",\n  \"thirty seven\",\n  \"thirty eight\",\n  \"thirty nine\",\n  \"forty\",\n  \"forty one\",\n  \"forty two\",\n  \"forty three\",\n  \"forty four\",\n  \"forty five\",\n  \"forty six\",\n  \"forty seven\",\n  \"forty eight\",\n  \"forty nine\",\n  \"fifty\",\n  \"fifty one\",\n  \"fifty two\",\n  \"fifty three\",\n  \"fifty four\",\n  \"fifty five\",\n  \"fifty six\",\n  \"fifty seven\",\n  \"fifty eight\",\n  \"fifty nine\",\n  \"sixty\",\n  \"sixty one\",\n  \"sixty two\",\n  \"sixty three\",\n  \"sixty four\",\n  \"sixty five\",\n  \"sixty six\",\n  \"sixty seven\",\n  \"sixty eight\",\n  \"sixty nine\",\n  \"seventy\",\n  \"seventy one\",\n  \"seventy two\",\n  \"seventy three\",\n  \"seventy four\",\n  \"seventy five\",\n  \"seventy six\",\n  \"seventy seven\",\n  \"seventy eight\",\n  \"seventy nine\",\n  \"eighty\",\n  \"eighty one\",\n  \"eighty two\",\n  \"eighty three\",\n  \"eighty four\",\n  \"eighty five\",\n  \"eighty six\",\n  \"eighty seven\",\n  \"eighty eight\",\n  \"eighty nine\",\n  \"ninety\",\n  \"ninety one\",\n  \"ninety two\",\n  \"ninety three\",\n  \"ninety four\",\n  \"ninety five\",\n  \"ninety six\",\n  \"ninety seven\",\n  \"ninety eight\",\n  \"ninety nine\",\n  \"one hundred\",\n  \"one hundred one\",\n  \"one hundred two\",\n  \"one hundred three\",\n  \"one hundred four\",\n  \"one hundred five\",\n  \"one hundred six\",\n  \"one hundred seven\",\n  \"one hundred eight\",\n  \"one hundred nine\",\n  \"one thousand\",\n  \"one thousand one\",\n  \"one thousand two\",\n  \"one thousand three\",\n  \"one thousand four\",\n  \"one thousand five\",\n  \"one thousand six\",\n  \"one thousand seven\",\n  \"one thousand eight\",\n  \"one thousand nine\",\n  \"one million\",\n  \"one million one\",\n  \"one million two\",\n  \"one million three\",\n  \"one million four\",\n  \"one million five\",\n  \"one million six\",\n  \"one million seven\",\n  \"one million eight\",\n  \"one million nine\",\n  \"one billion\",\n  \"one billion one\",\n  \"one billion two\",\n  \"one billion three\",\n  \"one billion four\",\n  \"one billion five\",\n  \"one billion six\",\n  \"one billion seven\",\n  \"one billion eight\",\n  \"one billion nine\",\n  \"one trillion\",\n  \"one trillion one\",\n  \"one trillion two\",\n  \"one trillion three\",\n  \"one trillion four\",\n  \"one trillion five\",\n  \"one trillion six\",\n  \"one trillion seven\",\n  \"one trillion eight\",\n  \"one trillion nine\",\n  \"one quadrillion\",\n  \"one quadrillion one\",\n  \"one quadrillion two\",\n  \"one quadrillion three\",\n  \"one quadrillion four\",\n  \"one quadrillion five\",\n  \"one quadrillion six\",\n  \"one quadrillion seven\",\n  \"one quadrillion eight\",\n  \"one quadrillion nine\",\n  \"one quintillion\",\n  \"one quintillion one\",\n  \"one quintillion two\",\n  \"one quintillion three\",\n  \"one quintillion four\",\n  \"one quintillion five\",\n  \"one quintillion six\",\n  \"one quintillion seven\",\n  \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n\nThe same can be done with reduce:\n\n<code>\nconst f = (n) => {\n  return Array.from({ length: n }, (_, i) => i * i);\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n\nOr even with map:\n\n<code>\nconst f = (n) => {\n  return Array.from({ length: n }, (_, i) => i * i);\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n\nOr even with reduce:\n\n<code>\nconst f = (n) => {\n  return Array.from({ length: n }, (_, i) => i * i).reduce((acc, val) => acc + val);\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a dscore=0 tags=arrays,javascript,functional-programming |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst result = f(5);\nconsole.log(result);\n</code>\n<|/ a tags=arrays,javascript,functional-programming |>\n<| a tags=arrays,javascript,functional-programming |>\n<code>\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split(\"\")\n     .reverse()\n     .join(\"\");\n    if (str === reverseStr) {\n      arr.push(i);\n    }\n  }\n  const evenNum = arr.filter((num) => num % 2 === 0);\n  const oddNum = arr.filter((num) => num % 2!== 0);\n  return [evenNum.length, oddNum.length];\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split(\"\")\n     .reverse()\n     .join(\"\");\n    if (str === reverseStr) {\n      arr.push(i);\n    }\n  }\n  const evenNum = arr.filter((num) => num % 2 === 0);\n  const oddNum = arr.filter((num) => num % 2!== 0);\n  return [evenNum.length, oddNum.length];\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split(\"\")\n     .reverse()\n     .join(\"\");\n    if (str === reverseStr) {\n      arr.push(i);\n    }\n  }\n  const evenNum = arr.filter((num) => num % 2 === 0);\n  const oddNum = arr.filter((num) => num % 2!== 0);\n  return [evenNum.length, oddNum.length];\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split(\"\")\n     .reverse()\n     .join(\"\");\n    if (str === reverseStr) {\n      arr.push(i);\n    }\n  }\n  const evenNum = arr.filter((num) => num % 2 === 0);\n  const oddNum = arr.filter((num) => num % 2!== 0);\n  return [evenNum.length, oddNum.length];\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    const reverseStr = str\n     .split(\"\")\n     .reverse()\n     .join(\"\");\n    if (str === reverseStr) {\n      arr.push(i);\n    }\n  }\n  const evenNum = arr.filter((num) => num % 2 === 0);\n  const oddNum = arr.filter((num) => num % 2!== 0);\n  return [evenNum.length, oddNum.length];\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      nums++;\n    }\n  }\n  return nums;\n};\n\n/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2], ..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2],..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  \n  if(arr.length===0) return true;\n  \n  let firstElement = arr[0];\n  let secondElement = arr[1];\n  \n  if(firstElement>secondElement) return true;\n  \n  let thirdElement = arr[2];\n  let fourthElement = arr[3];\n  \n  if(thirdElement>fourthElement) return true;\n  \n  let fifthElement = arr[4];\n  let sixthElement = arr[5];\n  \n  if(fifthElement>sixthElement) return true;\n  \n  let seventhElement = arr[6];\n  let eighthElement = arr[7];\n  \n  if(seventhElement>eighthElement) return true;\n  \n  let ninthElement = arr[8];\n  let tenthElement = arr[9];\n  \n  if(ninthElement>tenthElement) return true;\n  \n  let eleventhElement = arr[10]\n  \n  if(eleventhElement>secondElement) return true;\n  \n  return false;\n}\n\n/*\n  Write a function that takes a string and returns the number of vowels\n  in that string. \n  \n  A vowel is a consonant or a character with the property \"vowel\"\n  \n  If the string contains no vowels, return 0.\n  \n  If the string contains one or more vowels, return the number of vowels.\n  \n  If the string contains multiple vowels, return the number of vowels\n  in the first vowel.\n  \n  If the string contains no vowels or multiple vowels, return 0.\n  \n  Examples:\n  \n  countVowels(\"a\") ==> 1\n  countVowels(\"ab\") ==> 2\n  countVowels(\"abcefghijklmnopqrstuvwxyz\") ==> 5\n  countVowels(\"abcefghijklmnopqrstuvwxyz\") ==> 0\n  countVowels(\"abcefghijklmnopqrstuvwxyz\") ==> 0\n  countVowels(\"abcefghijklmnopqrstuvwxyz\") ==> 0\n  \n  Note: The string will not be empty. It will contain at least one vowel.\n*/\nconst countVowels = (str) => {\n  \n  if(str.length===0) return 0;\n  \n  let vowelCount = 0;\n  \n  for(let i=0; i<str.length; i++){\n    if(str[i]==='a' || str[i]==='e' || str[i]==='i' || str[i]==='o' || str[i]==='u'){\n      vowelCount++;\n    }\n  }\n  \n  return vowelCount;\n}\n\n/*\n  Write a function that takes a string and returns the number of consonants\n  in that string. \n  \n  A consonant is a character with the property \"consonant\"\n  \n  If the string contains no consonants, return 0.\n  \n  If the string contains one or more consonants, return the number of consonants.\n  \n  If the string contains multiple consonants, return the number of consonants\n  in the first consonant.\n  \n  If the string contains no consonants or multiple consonants, return 0.\n  \n  Examples:\n  \n  countConsonants(\"a\") ==> 1\n  countConsonants(\"ab\") ==> 1\n  countConsonants(\"abcefghijklmnopqrstuvwxyz\") ==> 10\n  countConsonants(\"abcefghijklmnopqrstuvwxyz\") ==> 0\n  countConsonants(\"abcefghijklmnopqrstuvwxyz\") ==> 0\n  countConsonants(\"abcefghijklmnopqrstuvwxyz\") ==> 0\n  \n  Note: The string will not be empty. It will contain at least one consonant.\n*/\nconst countConsonants = (str) => {\n  \n  if(str.length===0) return 0;\n  \n  let consonantCount = 0;\n  \n  for(let i=0; i<str.length; i++){\n    if(str[i]==='a' || str[i]==='b' || str[i]==='c' || str[i]==='d' || str[i]==='e' || str[i]==='f' || str[i]==='g' || str[i]==='h' || str[i]==='i' || str[i]==='j' || str[i]==='k' || str[i]==='l' || str[i]==='m' || str[i]==='n' || str[i]==='o' || str[i]==='p' || str[i]==='q' || str[i]==='r' || str[i]==='s' || str[i]==='t' || str[i]==='u' || str[i]==='v' || str[i]==='w' || str[i]==='x' || str[i]==='y' || str[i]==='z'){\n      consonantCount++;\n    }\n  }\n  \n  return consonantCount;\n}\n\n/*\n  Write a function that takes a string and returns the number of words\n  in that string. \n  \n  A word is a sequence of non-space characters that is not empty. \n  \n  If the string contains no words, return 0.\n  \n  If the string contains one or more words, return the number of words.\n  \n  If the string contains multiple words, return the number of words in the first\n  word.\n  \n  If the string contains no words or multiple words, return 0.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aBits = parseInt(a, 2);\n  const bBits = parseInt(b, 2);\n  const aBitsLength = aBits.length;\n  const bBitsLength = bBits.length;\n  const aBitsLengthInt = Math.ceil(aBitsLength / 8);\n  const bBitsLengthInt = Math.ceil(bBitsLength / 8);\n  const aBitsLengthBits = aBitsLengthInt * 8;\n  const bBitsLengthBits = bBitsLengthInt * 8;\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);\n  const bBitsLengthBitsString = String(bBitsLengthBits);\n  const aBitsLengthBitsString = String(aBitsLengthBits);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/110", "prompt": "/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  const arr1 = [...lst1];\n  const arr2 = [...lst2];\n  const arr3 = arr1.map((item, index) => {\n    return arr2[index];\n  });\n  const arr4 = arr2.map((item, index) => {\n    return arr1[index];\n  });\n  return arr3.join(\",\") === arr4.join(\",\");\n};\n\n/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  const arr1 = [...lst1];\n  const arr2 = [...lst2];\n  const arr3 = arr1.map((item, index) => {\n    return arr2[index];\n  });\n  const arr4 = arr2.map((item, index) => {\n    return arr1[index];\n  });\n  return arr3.join(\",\") === arr4.join(\",\");\n};\n\n/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  const arr1 = [...lst1];\n  const arr2 = [...lst2];\n  const arr3 = arr1.map((item, index) => {\n    return arr2[index];\n  });\n  const arr4 = arr2.map((item, index) => {\n    return arr1[index];\n  });\n  return arr3.join(\",\") === arr4.join(\",\");\n};\n\n/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  const arr1 = [...lst1];\n  const arr2 = [...lst2];\n  const arr3 = arr1.map((item, index) => {\n    return arr2[index];\n  });\n  const arr4 = arr2.map((item, index) => {\n    return arr1[index];\n  });\n  return arr3.join(\",\") === arr4.join(\",\");\n};\n\n/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  const arr1 = [...lst1];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i].toLowerCase();\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Write a function that takes a string and returns a new string where all\n  occurences of any character in another string have been replaced with a\n  specified character.\n  \n  Example:\n  replaceAll('a b c', 'a', 'X') === 'X b c'\n  replaceAll('a b c', 'b', 'X') === 'a X c'\n  replaceAll('a b c', 'c', 'X') === 'a b X'\n  replaceAll('a b c', 'd', 'X') === 'a b c X'\n  replaceAll('a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b c a b c a', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b', 'a', 'X') === 'a b c X'\n  replaceAll('a b c a b c a b c a b c a b c a b c a b c a b ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = \"\";\n  let newC = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c.charAt(0)) {\n      newS += s.substr(0, i);\n      newC += c.substr(1);\n    } else {\n      newS += s.charAt(i);\n    }\n  }\n  return [newS, newC];\n};\n\n/*\n  Write a function that takes a string and an integer and returns a string made up of that string repeated the integer number of times.\n  Example\n  repeatString(\"hello\", 3) should return \"hellohellohello\"\n  repeatString(\"hello\", 0) should return \"hello\"\n  repeatString(\"hello\", 4) should return \"hellohellohellohellohello\"\n  repeatString(\"hello\", -1) should return \"hellohellohellohellohellohellohello\"\n  repeatString(\"hello\", 1000) should return \"hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      oddCount++;\n    }\n  }\n  return [`${oddCount} of ${lst.length} odd element${oddCount === 1? '' :'s'} in the ${lst.length} ${lst.length === 1?'string' :'strings'}.`];\n};\n\n/*\n  Given a list and a string, return a list of strings where each string contains\n  the string in its first position and each string after the first contains the\n  string in its second position and so on. For example, given \"hello\" and \"ello\",\n  the output should be [\"he\", \"llo\", \"ll\"]. Given \"hello\" and \"world\", the output\n  should be [\"he\", \"ll\", \"lo\", \"or\", \"ld\", \"wo\", \"rl\", \"ld\"]. Given \"hello\" and\n  \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given\n  \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\",\n  \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\",\n  \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\",\n  \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should\n  be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the\n  output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and\n  \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given\n  \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\",\n  \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\",\n  \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\",\n  \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should\n  be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the\n  output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and\n  \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given\n  \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\",\n  \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\",\n  \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\",\n  \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should\n  be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the\n  output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and\n  \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given\n  \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\",\n  \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\",\n  \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\",\n  \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should\n  be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the\n  output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and\n  \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given\n  \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\",\n  \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\",\n  \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\",\n  \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should\n  be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the\n  output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and\n  \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given\n  \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\",\n  \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\",\n  \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\",\n  \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should\n  be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the\n  output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and\n  \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given\n  \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\",\n  \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\", \"ll\", \"do\",\n  \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should be [\"he\",\n  \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the output should\n  be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and \"goodbye\", the\n  output should be [\"he\", \"ll\", \"do\", \"ob\", \"ly\", \"by\"]. Given \"hello\" and\n  \"goodbye", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > minSum) {\n      minSum = nums[i];\n    }\n  }\n  return minSum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE MAXimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < maxSum) {\n      maxSum = nums[i];\n    }\n  }\n  return maxSum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of integERS nums, fInd thE sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn an ArraY of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  return buckets.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  YOU ARE GIVEN A WELLS AND A BUCKET CAPACITY. \n  YOU ARE TO RETURN A NUMBER THAT REPRESENTS THE NUMBER OF WELLS THAT HAVE AT LEAST ONE OF THE WELLS \n  IN THE BUCKET. \n  YOU ARE NOT ALLOWED TO USE ANY LOOPS.\n  \n  Example 1:\n      Input: \n          wells : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n\n  Example 2:\n      Input: \n          wells : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= wells.length <= 10^2\n      * 1 <= wells[0].length <= 10^2\n      * wells[i][j] -> 0 | 1\n      * 1 <= bucket_capacity <= 10\n  */\nconst minFill = (wells, bucket_capacity) => {\n  const n = wells.length;\n  const m = wells[0].length;\n  const buckets = new Array(bucket_capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (wells[i][j] === 1) {\n        buckets[wells[i][j]] += 1;\n      }\n    }\n  }\n  return buckets.reduce((a, b) => Math.min(a, b));\n};\n\n/*\n  YOU ARE GIVEN A WELLS AND A BUCKET CAPACITY. \n  YOU ARE TO RETURN A NUMBER THAT REPRESENTS THE NUMBER OF WELLS THAT HAVE AT MOST ONE OF THE WELLS \n  IN THE BUCKET. \n  YOU ARE NOT ALLOWED TO USE ANY LOOPS.\n  \n  Example 1:\n      Input: \n          wells : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n\n  Example 2:\n      Input: \n          wells : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= wells.length <= 10^2\n      * 1 <= wells[0].length <= 10^2\n      * wells[i][j] -> 0 | 1\n      * 1 <= bucket_capacity <= 10\n  */\nconst maxOverlap = (wells, bucket_capacity) => {\n  const n = wells.length;\n  const m = wells[0].length;\n  const buckets = new Array(bucket_capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (wells[i][j] === 1) {\n        buckets[wells[i][j]] += 1;\n      }\n    }\n  }\n  return buckets.reduce((a, b) => Math.max(a, b));\n};\n\n/*\n  YOU ARE GIVEN A WELLS AND A BUCKET CAPACITY. \n  YOU ARE TO RETURN A NUMBER THAT REPRESENTS THE NUMBER OF WELLS THAT HAVE AT MOST TWO OF THE WELLS \n  IN THE BUCKET. \n  YOU ARE NOT ALLOWED TO USE ANY LOOPS.\n  \n  Example 1:\n      Input: \n          wells : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n\n  Example 2:\n      Input: \n          wells : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= wells.length <= 10^2\n      * 1 <= wells[0].length <= 10^2\n      * wells[i][j] -> 0 | 1\n      * 1 <= bucket_capacity <= 10\n  */\nconst minOverlap = (wells, bucket_capacity) => {\n  const n = wells.length;\n  const m = wells[0].length;\n  const buckets = new Array(bucket_capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (wells[i][j] === 1) {\n        buckets[wells[i][j]] += 1;\n      }\n    }\n  }\n  return buckets.reduce((a, b) => Math.min(a, b));\n};\n\n/*\n  YOU ARE GIVEN A WELLS AND A BUCKET CAPACITY. \n  YOU ARE TO RETURN A NUMBER THAT REPRESENTS THE NUMBER OF WELLS THAT HAVE AT LEAST ONE OF THE WELLS \n  IN THE BUCKET AND AT MOST TWO OF THE WELLS IN THE BUCKET. \n  YOU ARE NOT ALLOWED TO USE ANY LOOPS.\n  \n  Example 1:\n      Input: \n          wells : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n\n  Example 2:\n      Input: \n          wells : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= wells.length <= 10^2\n      * 1 <= wells[0].length <= 10^2\n      * wells[i][j] -> 0 | 1\n      * 1 <= bucket_capacity <= 10\n  */\nconst maxOverlapAndMinOverlap = (wells, bucket_capacity) => {\n  const n = wells.length;\n  const m = wells[0].length;\n  const buckets = new Array(bucket_capacity).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (wells[i][j] === 1) {\n        buckets[wells[i][", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  return list.concat(s.split(' ').slice(0, n));\n};\n\n/*\n  Given a String s And a Number n, YOU Have Been tasked To implement \n  a functIOn ThAT Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  return list.concat(s.split(' ').slice(0, n));\n};\n\n/*\n  Given a String s And a Number n, YOU Have Been tasked To implement \n  a functIOn ThAT Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  return list.concat(s.split(' ').slice(0, n));\n};\n\n/*\n  Given a String s And a Number n, YOU Have Been tasked To implement \n  a functIOn ThAT Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  return list.concat(s.split(' ').slice(0, n));\n};\n\n/*\n  Given a String s And a Number n, YOU Have Been tasked To implement \n  a functIOn ThAT Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) ==='') {\n      list.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  return list.concat(s.split(' ').slice(0, n));\n};\n\n/*\n  Given a String s And a Number n, YOU Have Been tasked To implement \n  a functIOn ThAT Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = \"aeiouAEIOU\"\n  let vowelsArr = vowels.split(\"\")\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length\n  let vowelsArr_length = vowelsArr.length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const str = lst[0]\n  const lst2 = lst[1]\n  const str2 = lst2[0]\n  const lst3 = lst2[1]\n  const str3 = lst3[0]\n  const lst4 = lst3[1]\n  const str4 = lst4[0]\n  const lst5 = lst4[1]\n  const str5 = lst5[0]\n  const lst6 = lst5[1]\n  const str6 = lst6[0]\n  const lst7 = lst6[1]\n  const str7 = lst7[0]\n  const lst8 = lst7[1]\n  const str8 = lst8[0]\n  const lst9 = lst8[1]\n  const str9 = lst9[0]\n  const lst10 = lst9[1]\n  const str10 = lst10[0]\n  const lst11 = lst10[1]\n  const str11 = lst11[0]\n  const lst12 = lst11[1]\n  const str12 = lst12[0]\n  const lst13 = lst12[1]\n  const str13 = lst13[0]\n  const lst14 = lst13[1]\n  const str14 = lst14[0]\n  const lst15 = lst14[1]\n  const str15 = lst15[0]\n  const lst16 = lst15[1]\n  const str16 = lst16[0]\n  const lst17 = lst16[1]\n  const str17 = lst17[0]\n  const lst18 = lst17[1]\n  const str18 = lst18[0]\n  const lst19 = lst18[1]\n  const str19 = lst19[0]\n  const lst20 = lst19[1]\n  const str20 = lst20[0]\n  const lst21 = lst20[1]\n  const str21 = lst21[0]\n  const lst22 = lst21[1]\n  const str22 = lst22[0]\n  const lst23 = lst22[1]\n  const str23 = lst23[0]\n  const lst24 = lst23[1]\n  const str24 = lst24[0]\n  const lst25 = lst24[1]\n  const str25 = lst25[0]\n  const lst26 = lst25[1]\n  const str26 = lst26[0]\n  const lst27 = lst26[1]\n  const str27 = lst27[0]\n  const lst28 = lst27[1]\n  const str28 = lst28[0]\n  const lst29 = lst28[1]\n  const str29 = lst29[0]\n  const lst30 = lst29[1]\n  const str30 = lst30[0]\n  const lst31 = lst30[1]\n  const str31 = lst31[0]\n  const lst32 = lst31[1]\n  const str32 = lst32[0]\n  const lst33 = lst32[1]\n  const str33 = lst33[0]\n  const lst34 = lst33[1]\n  const str34 = lst34[0]\n  const lst35 = lst34[1]\n  const str35 = lst35[0]\n  const lst36 = lst35[1]\n  const str36 = lst36[0]\n  const lst37 = lst36[1]\n  const str37 = lst37[0]\n  const lst38 = lst37[1]\n  const str38 = lst38[0]\n  const lst39 = lst38[1]\n  const str39 = lst39[0]\n  const lst40 = lst39[1]\n  const str40 = lst40[0]\n  const lst41 = lst40[1]\n  const str41 = lst41[0]\n  const lst42 = lst41[1]\n  const str42 = lst42[0]\n  const lst43 = lst42[1]\n  const str43 = lst43[0]\n  const lst44 = lst43[1]\n  const str44 = lst44[0]\n  const lst45 = lst44[1]\n  const str45 = lst45[0]\n  const lst46 = lst45[1]\n  const str46 = lst46[0]\n  const lst47 = lst46[1]\n  const str47 = lst47[0]\n  const lst48 = lst47[1]\n  const str48 = lst48[0]\n  const lst49 = lst48[1]\n  const str49 = lst49[0]\n  const lst50 = lst49[1]\n  const str50 = lst50[0]\n  const lst51 = lst50[1]\n  const str51 = lst51[0]\n  const lst52 = lst51[1]\n  const str52 = lst52[0]\n  const lst53 = lst52[1]\n  const str53 = lst53[0]\n  const lst54 = lst53[1]\n  const str54 = lst54[0]\n  const lst55 = lst54[1]\n  const str55 = lst55[0]\n  const lst56 = lst55[1]\n  const str56 = lst56[0]\n  const lst57 = lst56[1]\n  const str57 = lst57[0]\n  const lst58 = lst57[1]\n  const str58 = lst58[0]\n  const lst59 = lst58[1]\n  const str59 = lst59[0]\n  const lst60 = lst59[1]\n  const str60 = lst60[0]\n  const lst61 = lst60[1]\n  const str61 = lst61[0]\n  const lst62 = lst61[1]\n  const str62 = lst62[0]\n  const lst63 = lst62[1]\n  const str63 = lst63[0]\n  const lst64 = lst63[1]\n  const str64 = lst64[0]\n  const lst65 = lst64[1]\n  const str65 = lst65[0]\n  const lst66 = lst65[1]\n  const str66 = lst66[0]\n  const lst67 = lst66[1]\n  const str67 = lst67[0]\n  const lst68 = lst67[1]\n  const str68 = lst68[0]\n  const lst69 = lst68[1]\n  const str69 = lst69[0]\n  const lst70 = lst69[1]\n  const str70 = lst70[0]\n  const lst71 = lst70[1]\n  const str71 = lst71[0]\n  const lst72 = lst71[1]\n  const str72 = lst72[0]\n  const lst73 = lst72[1]\n  const str73 = lst73[0]\n  const lst74 = lst73[1]\n  const str74 = lst74[0]\n  const lst75 = lst74[1]\n  const str75 = lst75[0]\n  const lst76 = lst75[1]\n  const str76 = lst76[0]\n  const lst77 = lst76[1]\n  const str77 = lst77[0]\n  const lst78 = lst77[1]\n  const str78 = lst78[0]\n  const lst79 = lst78[1]\n  const str79 = lst79[0]\n  const lst80 = lst79[1]\n  const str80 = lst80[0]\n  const lst81 = lst80[1]\n  const str81 = lst81[0]\n  const lst82 = lst81[1]\n  const str82 = lst82[0]\n  const lst83 = lst82[1]\n  const str83 = lst83[0]\n  const lst84 = lst83[1]\n  const str84 = lst84[0]\n  const lst85 = lst84[1]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  const longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};\n\n/**\n * Returns a string with the first letter of each word capitalized.\n *\n * >>> capitalizeFirst('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo bar baz')\n * 'Foo bar baz'\n */\nconst capitalizeEachWord = (string) => {\n  return string.replace(/\\w\\S*/g, function (txt) {\n    return capitalizeFirst(txt);\n  });\n};\n\n/**\n * Capitalizes the first letter of each word in a string.\n *\n * >>> capitalizeEachWord('foo ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\nexport { maximum, maximum2, maximum3, maximum4 };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  You may assume no duplicates in the array.\n\n  Your algorithm's runtime complexity must be in the order of O(log n).\n\n  Example 1:\n\n      Input: [1,3,5,6], 5\n      Output: 2\n\n  Example 2:\n\n      Input: [1,3,5,6], 2\n      Output: 1\n\n  Example 3:\n\n      Input: [1,3,5,6], 7\n      Output: 4\n\n  Example 4:\n\n      Input: [1,3,5,6], 0\n      Output: 0\n\n  Note:\n      You may assume all input has valid answer.\n      All inputs are in the range of [-1, 1000].\n      -1000 will appear as valid answer.\n */\nconst binarySearch = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return low;\n};\n\nexport { binarySearch };\n\n/*\n  Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n  You may assume no duplicates in the array.\n\n  Your algorithm's runtime complexity must be in the order of O(log n).\n\n  Example 1:\n\n      Input: [1,3,5,6], 5\n      Output: 2\n\n  Example 2:\n\n      Input: [1,3,5,6], 2\n      Output: 1\n\n  Example 3:\n\n      Input: [1,3,5,6], 7\n      Output: 4\n\n  Example 4:\n\n      Input: [1,3,5,6], 0\n      Output: 0\n\n  Note:\n      You may assume all input has valid answer.\n      All inputs are in the range of [-1, 1000].\n      -1000 will appear as valid answer.\n */\nconst binarySearch2 = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] < target) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return low;\n};\n\nexport { binarySearch2, binarySearch3 };\n\n/*\n  Given a non-empty binary search tree and a target value, find k values in the BST that are less than or equal to the target value.\n\n  Your algorithm's runtime complexity must be in the order of O(log n).\n\n  Example 1:\n\n      Input: root = [5,1,7,2,8,4,null,null,3,6], target = 8\n      Output: [4,5,6,7]\n */\nconst kthSmallest = (root, target) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null || node.val <= target) {\n      result.push(node.val);\n    } else {\n      if (node.left) {\n        stack.push(node.left);\n      }\n      if (node.right) {\n        stack.push(node.right);\n      }\n    }\n  }\n  return result;\n};\n\nexport { kthSmallest };\n\n/*\n  Given a non-empty binary search tree and a target value, find k values in the BST that are less than or equal to the target value.\n\n  Your algorithm's runtime complexity must be in the order of O(log n).\n\n  Example 1:\n\n      Input: root = [5,1,7,2,8,4,null,null,3,6], target = 8\n      Output: [4,5,6,7]\n */\nconst kthSmallest2 = (root, target) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null || node.val <= target) {\n      result.push(node.val);\n    } else {\n      if (node.left) {\n        stack.push(node.left);\n      }\n      if (node.right) {\n        stack.push(node.right);\n      }\n    }\n  }\n  return result;\n};\n\nexport { kthSmallest2, kthSmallest3 };\n\n/*\n  Given a non-empty binary search tree and a target value, find k values in the BST that are less than or equal to the target value.\n\n  Your algorithm's runtime complexity must be in the order of O(log n).\n\n  Example 1:\n\n      Input: root = [5,1,7,2,8,4,null,null,3,6], target = 8\n      Output: [4,5,6,7]\n */\nconst kthSmallest3 = (root, target) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null || node.val <= target) {\n      result.push(node.val);\n    } else {\n      if (node.left) {\n        stack.push(node.left);\n      }\n      if (node.right) {\n        stack.push(node.right);\n      }\n    }\n  }\n  return result;\n};\n\nexport { kthSmallest3, kthSmallest4 };\n\n/*\n  Given a non-empty binary search tree and a target value, find k values in the BST that are less than or equal to the target value.\n\n  Your algorithm's runtime complexity must be in the order of O(log n).\n\n  Example 1:\n\n      Input: root = [5,1,7,2,8,4,null,null,3,6], target = 8\n      Output: [4,5,6,7]\n */\nconst kthSmallest4 = (root, target) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null || node.val <= target) {\n      result.push(node.val);\n    } else {\n      if (node.left) {\n        stack.push(node.left);\n      }\n      if (node.right) {\n        stack.push(node.right);\n      }\n    }\n  }\n  return result;\n};\n\nexport { kthSmallest4, kthSmallest5 };\n\n/*\n  Given a non-empty binary search tree and a target value, find k values in the BST that are less than or equal to the target value.\n\n  Your algorithm's runtime complexity must be in the order of O(log n).\n\n  Example 1:\n\n      Input: root = [5,1,7,2,8,4,null,null,3,6], target = 8\n      Output: [4,5,6,7]\n */\nconst kthSmallest5 = (root, target) => {\n  const result = [];\n  const stack = [root];\n  while (stack.length) {\n    const node = stack.pop();\n    if (node === null || node.val <= target) {\n      result.push(node.val);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/121", "prompt": "/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// Call the solution() function\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a |>\n<| c |>\nThanks so much for taking the time to write this out. I'm still a beginner at coding and I appreciate you taking the time to write this out. I'm going to study this and try to understand it before I move on. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I hope it helps you understand it better. Good luck!\n<|/ c |>\n<| a tags=arrays,javascript,sum |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a dscore=0 tags=arrays,javascript,sum |>\n<| a dscore=0 |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a tags=arrays,javascript,sum |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=arrays,javascript,sum |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript,sum |>\n<| a tags=arrays,javascript,sum |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sum |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript,sum |>\n<| a tags=arrays,javascript,sum |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sum |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,sum |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript,sum |>\n<| a dscore=0 |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript,sum |>\n<| a dscore=0 |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a tags=arrays,javascript,sum |>\n<| a dscore=0 |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (n!== 1) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(counter);\n  return collatz;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The even numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (n!== 1) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n    n = Math.floor(n / 2);\n  }\n  return collatz;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The even numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (n!== 1) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter = counter * 3 + 1;\n    }\n    n = Math.floor(n / 2);\n  }\n  return collatz;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The even numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let counter = 1;\n  while (n!== 1) {\n    if (n % 2 === 0) {\n      collatz.push(counter);\n      counter = counter * 3 + 1;\n    } else {\n      counter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArray2 = dateArray[2].split('-');\n  const dateArray3 = dateArray2[2].split('-');\n  const dateArray4 = dateArray3[2].split('-');\n  const dateArray5 = dateArray4[2].split('-');\n  const dateArray6 = dateArray5[2].split('-');\n  const dateArray7 = dateArray6[2].split('-');\n  const dateArray8 = dateArray7[2].split('-');\n  const dateArray9 = dateArray8[2].split('-');\n  const dateArray10 = dateArray9[2].split('-');\n  const dateArray11 = dateArray10[2].split('-');\n  const dateArray12 = dateArray11[2].split('-');\n  const dateArray13 = dateArray12[2].split('-');\n  const dateArray14 = dateArray13[2].split('-');\n  const dateArray15 = dateArray14[2].split('-');\n  const dateArray16 = dateArray15[2].split('-');\n  const dateArray17 = dateArray16[2].split('-');\n  const dateArray18 = dateArray17[2].split('-');\n  const dateArray19 = dateArray18[2].split('-');\n  const dateArray20 = dateArray19[2].split('-');\n  const dateArray21 = dateArray20[2].split('-');\n  const dateArray22 = dateArray21[2].split('-');\n  const dateArray23 = dateArray22[2].split('-');\n  const dateArray24 = dateArray23[2].split('-');\n  const dateArray25 = dateArray24[2].split('-');\n  const dateArray26 = dateArray25[2].split('-');\n  const dateArray27 = dateArray26[2].split('-');\n  const dateArray28 = dateArray27[2].split('-');\n  const dateArray29 = dateArray28[2].split('-');\n  const dateArray30 = dateArray29[2].split('-');\n  const dateArray31 = dateArray30[2].split('-');\n  const dateArray32 = dateArray31[2].split('-');\n  const dateArray33 = dateArray32[2].split('-');\n  const dateArray34 = dateArray33[2].split('-');\n  const dateArray35 = dateArray34[2].split('-');\n  const dateArray36 = dateArray35[2].split('-');\n  const dateArray37 = dateArray36[2].split('-');\n  const dateArray38 = dateArray37[2].split('-');\n  const dateArray39 = dateArray38[2].split('-');\n  const dateArray40 = dateArray39[2].split('-');\n  const dateArray41 = dateArray40[2].split('-');\n  const dateArray42 = dateArray41[2].split('-');\n  const dateArray43 = dateArray42[2].split('-');\n  const dateArray44 = dateArray43[2].split('-');\n  const dateArray45 = dateArray44[2].split('-');\n  const dateArray46 = dateArray45[2].split('-');\n  const dateArray47 = dateArray46[2].split('-');\n  const dateArray48 = dateArray47[2].split('-');\n  const dateArray49 = dateArray48[2].split('-');\n  const dateArray50 = dateArray49[2].split('-');\n  const dateArray51 = dateArray50[2].split('-');\n  const dateArray52 = dateArray51[2].split('-');\n  const dateArray53 = dateArray52[2].split('-');\n  const dateArray54 = dateArray53[2].split('-');\n  const dateArray55 = dateArray54[2].split('-');\n  const dateArray56 = dateArray55[2].split('-');\n  const dateArray57 = dateArray56[2].split('-');\n  const dateArray58 = dateArray57[2].split('-');\n  const dateArray59 = dateArray58[2].split('-');\n  const dateArray60 = dateArray59[2].split('-');\n  const dateArray61 = dateArray60[2].split('-');\n  const dateArray62 = dateArray61[2].split('-');\n  const dateArray63 = dateArray62[2].split('-');\n  const dateArray64 = dateArray63[2].split('-');\n  const dateArray65 = dateArray64[2].split('-');\n  const dateArray66 = dateArray65[2].split('-');\n  const dateArray67 = dateArray66[2].split('-');\n  const dateArray68 = dateArray67[2].split('-');\n  const dateArray69 = dateArray68[2].split('-');\n  const dateArray70 = dateArray69[2].split('-');\n  const dateArray71 = dateArray70[2].split('-');\n  const dateArray72 = dateArray71[2].split('-');\n  const dateArray73 = dateArray72[2].split('-');\n  const dateArray74 = dateArray73[2].split('-');\n  const dateArray75 = dateArray74[2].split('-');\n  const dateArray76 = dateArray75[2].split('-');\n  const dateArray77 = dateArray76[2].split('-');\n  const dateArray78 = dateArray77[2].split('-');\n  const dateArray79 = dateArray78[2].split('-');\n  const dateArray80 = dateArray79[2].split('-');\n  const dateArray81 = dateArray80[2].split('-');\n  const dateArray82 = dateArray81[2].split('-');\n  const dateArray83 = dateArray82[2].split('-');\n  const dateArray84 = dateArray83[2].split('-');\n  const dateArray85 = dateArray84[2].split('-');\n  const dateArray86 = dateArray85[2].split('-');\n  const dateArray87 = dateArray86[2].split('-');\n  const dateArray88 = dateArray87[2].split('-');\n  const dateArray89 = dateArray88[2].split('-');\n  const dateArray90 = dateArray89[2].split('-');\n  const dateArray91 = dateArray90[2].split('-');\n  const dateArray92 = dateArray91[2].split('-');\n  const dateArray93 = dateArray92[2].split('-');\n  const dateArray94 = dateArray93[2].split('-');\n  const dateArray95 = dateArray94", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1, ... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1,... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wOrds = txt.split(\" \");\n  const wOrdsLen = wOrds.length;\n  const wOrdsLen2 = wOrdsLen / 2;\n  const wOrdsLen3 = wOrdsLen / 3;\n  const wOrdsLen4 = wOrdsLen / 4;\n  const wOrdsLen5 = wOrdsLen / 5;\n  const wOrdsLen6 = wOrdsLen / 6;\n  const wOrdsLen7 = wOrdsLen / 7;\n  const wOrdsLen8 = wOrdsLen / 8;\n  const wOrdsLen9 = wOrdsLen / 9;\n  const wOrdsLen10 = wOrdsLen / 10;\n  const wOrdsLen11 = wOrdsLen / 11;\n  const wOrdsLen12 = wOrdsLen / 12;\n  const wOrdsLen13 = wOrdsLen / 13;\n  const wOrdsLen14 = wOrdsLen / 14;\n  const wOrdsLen15 = wOrdsLen / 15;\n  const wOrdsLen16 = wOrdsLen / 16;\n  const wOrdsLen17 = wOrdsLen / 17;\n  const wOrdsLen18 = wOrdsLen / 18;\n  const wOrdsLen19 = wOrdsLen / 19;\n  const wOrdsLen20 = wOrdsLen / 20;\n  const wOrdsLen21 = wOrdsLen / 21;\n  const wOrdsLen22 = wOrdsLen / 22;\n  const wOrdsLen23 = wOrdsLen / 23;\n  const wOrdsLen24 = wOrdsLen / 24;\n  const wOrdsLen25 = wOrdsLen / 25;\n  const wOrdsLen26 = wOrdsLen / 26;\n  const wOrdsLen27 = wOrdsLen / 27;\n  const wOrdsLen28 = wOrdsLen / 28;\n  const wOrdsLen29 = wOrdsLen / 29;\n  const wOrdsLen30 = wOrdsLen / 30;\n  const wOrdsLen31 = wOrdsLen / 31;\n  const wOrdsLen32 = wOrdsLen / 32;\n  const wOrdsLen33 = wOrdsLen / 33;\n  const wOrdsLen34 = wOrdsLen / 34;\n  const wOrdsLen35 = wOrdsLen / 35;\n  const wOrdsLen36 = wOrdsLen / 36;\n  const wOrdsLen37 = wOrdsLen / 37;\n  const wOrdsLen38 = wOrdsLen / 38;\n  const wOrdsLen39 = wOrdsLen / 39;\n  const wOrdsLen40 = wOrdsLen / 40;\n  const wOrdsLen41 = wOrdsLen / 41;\n  const wOrdsLen42 = wOrdsLen / 42;\n  const wOrdsLen43 = wOrdsLen / 43;\n  const wOrdsLen44 = wOrdsLen / 44;\n  const wOrdsLen45 = wOrdsLen / 45;\n  const wOrdsLen46 = wOrdsLen / 46;\n  const wOrdsLen47 = wOrdsLen / 47;\n  const wOrdsLen48 = wOrdsLen / 48;\n  const wOrdsLen49 = wOrdsLen / 49;\n  const wOrdsLen50 = wOrdsLen / 50;\n  const wOrdsLen51 = wOrdsLen / 51;\n  const wOrdsLen52 = wOrdsLen / 52;\n  const wOrdsLen53 = wOrdsLen / 53;\n  const wOrdsLen54 = wOrdsLen / 54;\n  const wOrdsLen55 = wOrdsLen / 55;\n  const wOrdsLen56 = wOrdsLen / 56;\n  const wOrdsLen57 = wOrdsLen / 57;\n  const wOrdsLen58 = wOrdsLen / 58;\n  const wOrdsLen59 = wOrdsLen / 59;\n  const wOrdsLen60 = wOrdsLen / 60;\n  const wOrdsLen61 = wOrdsLen / 61;\n  const wOrdsLen62 = wOrdsLen / 62;\n  const wOrdsLen63 = wOrdsLen / 63;\n  const wOrdsLen64 = wOrdsLen / 64;\n  const wOrdsLen65 = wOrdsLen / 65;\n  const wOrdsLen66 = wOrdsLen / 66;\n  const wOrdsLen67 = wOrdsLen / 67;\n  const wOrdsLen68 = wOrdsLen / 68;\n  const wOrdsLen69 = wOrdsLen / 69;\n  const wOrdsLen70 = wOrdsLen / 70;\n  const wOrdsLen71 = wOrdsLen / 71;\n  const wOrdsLen72 = wOrdsLen / 72;\n  const wOrdsLen73 = wOrdsLen / 73;\n  const wOrdsLen74 = wOrdsLen / 74;\n  const wOrdsLen75 = wOrdsLen / 75;\n  const wOrdsLen76 = wOrdsLen / 76;\n  const wOrdsLen77 = wOrdsLen / 77;\n  const wOrdsLen78 = wOrdsLen / 78;\n  const wOrdsLen79 = wOrdsLen / 79;\n  const wOrdsLen80 = wOrdsLen / 80;\n  const wOrdsLen81 = wOrdsLen / 81;\n  const wOrdsLen82 = wOrdsLen / 82;\n  const wOrdsLen83 = wOrdsLen / 83;\n  const wOrdsLen84 = wOrdsLen / 84;\n  const wOrdsLen85 = wOrdsLen / 85;\n  const wOrdsLen86 = wOrdsLen / 86;\n  const wOrdsLen87 = wOrdsLen / 87;\n  const wOrdsLen88 = wOrdsLen / 88;\n  const wOrdsLen89 = wOrdsLen / 89;\n  const wOrdsLen90 = wOrdsLen / 90;\n  const wOrdsLen91 = wOrdsLen / 91;\n  const wOrdsLen92 = wOrdsLen / ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length && sorted.every((e, i) => e === lst[i]);\n};\n\n/* Give me a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  unique([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst unique = (lst) => {\n  const unique = [...new Set(lst)];\n  return unique.length === lst.length? unique : unique;\n};\n\n/* Give me a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  unique([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst unique = (lst) => {\n  const unique = [...new Set(lst)];\n  return unique.length === lst.length? unique : unique;\n};\n\n/* Give me a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  unique([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst unique = (lst) => {\n  const unique = [...new Set(lst)];\n  return unique.length === lst.length? unique : unique;\n};\n\n/* Give me a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  unique([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst unique = (lst) => {\n  const unique = [...new Set(lst)];\n  return unique.length === lst.length? unique : unique;\n};\n\n/* Give me a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  unique([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  unique([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  unique([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3, 3, 4]\n  unique([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2, 2, 3, 4]\n  */\nconst unique = (lst) => {\n  const unique = [...new Set(lst)];\n  return unique.length === lst.length? unique : unique;\n};\n\n/* Give me a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval1;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval1;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval1;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval1;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval1;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval1;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval1;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval1;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval1;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval1;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval1;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval1;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval1;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval1;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval1;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval1;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval1;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval1;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval1;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval1;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval1;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval1;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval1;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval1;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval1;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval1;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval1;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval1;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval1;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval1;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval1;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval1;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval1;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval1;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval1;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval1;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval1;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval1;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval1;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval1;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval1;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval1;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval1;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval1;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval1;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval1;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval1;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval1;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval1;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval1;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval1;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval1;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval1;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval1;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval1;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval1;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval1;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval1;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval1;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval1;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval1;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval1;\n  const [start128, end128] = interval", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] < 0? -1 : 1;\n  }\n  return sum;\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE FIRST CHARACTER OF S CONVERTED TO UPPERCASE.\n  Note: return S WITH THE FIRST CHARACTER UPPERCASE.\n\n  exaMpLE:\n  >>> toUpper('hello') == 'HELLO'\n  >>> toUpper('hello ') == 'HELLO '\n  >>> toUpper(' ') == ''\n  >>> toUpper('') == ''\n  */\nconst toUpper = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE LAST CHARACTER OF S CONVERTED TO UPPERCASE.\n  Note: return S WITH THE LAST CHARACTER UPPERCASE.\n\n  exaMpLE:\n  >>> toUpper('hello') == 'HELLO'\n  >>> toUpper('hello ') == 'HELLO '\n  >>> toUpper(' ') == ''\n  >>> toUpper('') == ''\n  */\nconst toLower = (s) => {\n  return s.charAt(s.length - 1).toLowerCase() + s.slice(s.length - 2);\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE FIRST AND LAST CHARACTERS OF S CONVERTED TO UPPERCASE.\n  Note: return S WITH THE FIRST AND LAST CHARACTERS UPPERCASE.\n\n  exaMpLE:\n  >>> toUpper('hello') == 'HELLO'\n  >>> toUpper('hello ') == 'HELLO '\n  >>> toUpper(' ') == ''\n  >>> toUpper('') == ''\n  */\nconst toUpperFirst = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1).charAt(0).toUpperCase();\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE FIRST AND LAST CHARACTERS OF S CONVERTED TO LOWERCASE.\n  Note: return S WITH THE FIRST AND LAST CHARACTERS LOWERCASE.\n\n  exaMpLE:\n  >>> toLower('hello') == 'hello'\n  >>> toLower('hello ') == 'hello '\n  >>> toLower(' ') == ''\n  >>> toLower('') == ''\n  */\nconst toLowerFirst = (s) => {\n  return s.charAt(0).toLowerCase() + s.slice(1).charAt(0).toLowerCase();\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE FIRST AND LAST CHARACTERS OF S CONVERTED TO UPPERCASE\n  AND THE FIRST AND LAST CHARACTERS OF S CONVERTED TO LOWERCASE.\n  Note: return S WITH THE FIRST AND LAST CHARACTERS UPPERCASE\n  AND THE FIRST AND LAST CHARACTERS LOWERCASE.\n\n  exaMpLE:\n  >>> toUpperFirst('hello') == 'HELLO'\n  >>> toUpperFirst('hello ') == 'HELLO '\n  >>> toUpperFirst(' ') == ''\n  >>> toUpperFirst('') == ''\n  >>> toLowerFirst('hello') == 'hello'\n  >>> toLowerFirst('hello ') == 'hello '\n  >>> toLowerFirst(' ') == ''\n  >>> toLowerFirst('') == ''\n  */\nconst toUpperFirstAndLowerFirst = (s) => {\n  return toUpperFirst(toLowerFirst(s));\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE FIRST AND LAST CHARACTERS OF S CONVERTED TO UPPERCASE\n  AND THE LAST AND FIRST CHARACTERS OF S CONVERTED TO LOWERCASE.\n  Note: return S WITH THE FIRST AND LAST CHARACTERS UPPERCASE\n  AND THE LAST AND FIRST CHARACTERS LOWERCASE.\n\n  exaMpLE:\n  >>> toUpperFirstAndLowerFirst('hello') == 'HELLO'\n  >>> toUpperFirstAndLowerFirst('hello ') == 'HELLO '\n  >>> toUpperFirstAndLowerFirst(' ') == ''\n  >>> toUpperFirstAndLowerFirst('') == ''\n  >>> toLowerFirstAndLowerFirst('hello') == 'hello'\n  >>> toLowerFirstAndLowerFirst('hello ') == 'hello '\n  >>> toLowerFirstAndLowerFirst(' ') == ''\n  >>> toLowerFirstAndLowerFirst('') == ''\n  */\nconst toUpperFirstAndLowerFirst = (s) => {\n  return toUpperFirst(toLowerFirst(s));\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE FIRST AND LAST CHARACTERS OF S CONVERTED TO UPPERCASE\n  AND THE FIRST AND LAST CHARACTERS OF S CONVERTED TO LOWERCASE.\n  Note: return S WITH THE FIRST AND LAST CHARACTERS UPPERCASE\n  AND THE FIRST AND LAST CHARACTERS LOWERCASE.\n\n  exaMpLE:\n  >>> toUpperFirstAndLowerFirst('hello') == 'HELLO'\n  >>> toUpperFirstAndLowerFirst('hello ') == 'HELLO '\n  >>> toUpperFirstAndLowerFirst(' ') == ''\n  >>> toUpperFirstAndLowerFirst('') == ''\n  >>> toLowerFirstAndLowerFirst('hello') == 'hello'\n  >>> toLowerFirstAndLowerFirst('hello ') == 'hello '\n  >>> toLowerFirstAndLowerFirst(' ') == ''\n  >>> toLowerFirstAndLowerFirst('') == ''\n  */\nconst toUpperFirstAndLowerFirst = (s) => {\n  return toUpperFirst(toLowerFirst(s));\n};\n\n/*\n  YOU ARE GIVEN A STRING S AND YOU WANT TO RETURN A STRING S\n  WITH THE FIRST AND LAST CHARACTERS OF S CONVERTED TO UPPERCASE\n  AND THE LAST AND FIRST CHARACTERS OF S CONVERTED TO LOWERCASE.\n  Note: return S WITH THE FIRST AND LAST CHARACTERS UPPERCASE\n  AND THE LAST AND FIRST CHAR", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const lst_A = new Array(N * N);\n  const lst_B = new Array(N * N);\n\n  for (let i = 0; i < N * N; i++) {\n    lst_A[i] = grid[0][i];\n    lst_B[i] = grid[0][i];\n  }\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M; j++) {\n      if (grid[i][j] < lst_A[j]) {\n        lst_A[j] = grid[i][j];\n      }\n      if (grid[i][j] < lst_B[j]) {\n        lst_B[j] = grid[i][j];\n      }\n    }\n  }\n\n  let minPath = [];\n  let minPathIndex = 0;\n  let minPathValue = lst_A[0];\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M; j++) {\n      if (grid[i][j] < minPathValue) {\n        minPathValue = grid[i][j];\n        minPathIndex = j;\n      }\n    }\n  }\n\n  minPath.push(minPathValue);\n  minPath.push(minPathIndex);\n\n  for (let i = 2; i < N * N; i++) {\n    if (lst_A[i] < minPathValue) {\n      minPathValue = lst_A[i];\n      minPathIndex = i;\n    }\n    if (lst_B[i] < minPathValue) {\n      minPathValue = lst_B[i];\n      minPathIndex = i;\n    }\n  }\n\n  minPath.push(minPathIndex);\n\n  return minPath;\n};\n\nconst minPath2 = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const lst_A = new Array(N * N);\n  const lst_B = new Array(N * N);\n\n  for (let i = 0; i < N * N; i++) {\n    lst_A[i] = grid[0][i];\n    lst_B[i] = grid[0][i];\n  }\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M; j++) {\n      if (grid[i][j] < lst_A[j]) {\n        lst_A[j] = grid[i][j];\n      }\n      if (grid[i][j] < lst_B[j]) {\n        lst_B[j] = grid[i][j];\n      }\n    }\n  }\n\n  let minPath = [];\n  let minPathIndex = 0;\n  let minPathValue = lst_A[0];\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M; j++) {\n      if (grid[i][j] < minPathValue) {\n        minPathValue = grid[i][j];\n        minPathIndex = j;\n      }\n    }\n  }\n\n  minPath.push(minPathValue);\n  minPath.push(minPathIndex);\n\n  for (let i = 2; i < N * N; i++) {\n    if (lst_A[i] < minPathValue) {\n      minPathValue = lst_A[i];\n      minPathIndex = i;\n    }\n    if (lst_B[i] < minPathValue) {\n      minPathValue = lst_B[i];\n      minPathIndex = i;\n    }\n  }\n\n  minPath.push(minPathIndex);\n\n  return minPath;\n};\n\nconst minPath3 = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const lst_A = new Array(N * N);\n  const lst_B = new Array(N * N);\n\n  for (let i = 0; i < N * N; i++) {\n    lst_A[i] = grid[0][i];\n    lst_B[i] = grid[0][i];\n  }\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M; j++) {\n      if (grid[i][j] < lst_A[j]) {\n        lst_A[j] = grid[i][j];\n      }\n      if (grid[i][j] < lst_B[j]) {\n        lst_B[j] = grid[i][j];\n      }\n    }\n  }\n\n  let minPath = [];\n  let minPathIndex = 0;\n  let minPathValue = lst_A[0];\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M; j++) {\n      if (grid[i][j] < minPathValue) {\n        minPathValue = grid[i][j];\n        minPathIndex = j;\n      }\n    }\n  }\n\n  minPath.push(minPathValue);\n  minPath.push(minPathIndex);\n\n  for (let i = 2; i < N * N; i++) {\n    if (lst_A[i] < minPathValue) {\n      minPathValue = lst_A[i];\n      minPathIndex = i;\n    }\n    if (lst_B[i] < minPathValue) {\n      minPathValue = lst_B[i];\n      minPathIndex = i;\n    }\n  }\n\n  minPath.push(minPathIndex);\n\n  return minPath;\n};\n\nconst minPath4 = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const lst_A = new Array(N * N);\n  const lst_B = new Array(N * N);\n\n  for (let i = 0; i < N * N; i++) {\n    lst_A[i] = grid[0][i];\n    lst_B[i] = grid[0][i];\n  }\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < M; j++) {\n      if (grid[i][j] < lst_A[j]) {\n        lst_A[j] = grid[i][j];\n      }\n      if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n};\n\n// A function that returns the least common multiple of a and b.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// If b is not 0, a is returned.\n// If b is 0, a is returned.\n// ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(1);\n  arr.push(2);\n  arr.push(3);\n  if (n % 2 === 0) {\n    arr.push(1);\n  }\n  else {\n    for (let i = 2; i < n; i++) {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n  }\n  return arr;\n};\n\n/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  arr.push(1);\n  arr.push(1);\n  if (n % 2 === 0) {\n    arr.push(1);\n  }\n  else {\n    for (let i = 2; i < n; i++) {\n      arr.push(arr[i - 1] + arr[i - 2]);\n    }\n  }\n  return arr;\n};\n\n/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  arr.push(1);\n  arr.push(1);\n  if (n % 2 === 0) {\n    arr.push(1);\n  }\n  else {\n    for (let i = 2; i < n; i++) {\n      arr.push(arr[i - 1] + arr[i - 2]);\n    }\n  }\n  return arr;\n};\n\n/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  arr.push(1);\n  arr.push(1);\n  if (n % 2 === 0) {\n    arr.push(1);\n  }\n  else {\n    for (let i = 2; i < n; i++) {\n      arr.push(arr[i - 1] + arr[i - 2]);\n    }\n  }\n  return arr;\n};\n\n/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  arr.push(1);\n  arr.push(1);\n  if (n % 2 === 0) {\n    arr.push(1);\n  }\n  else {\n    for (let i = 2; i < n; i++) {\n      arr.push(arr[i - 1] + arr[i - 2]);\n    }\n  }\n  return arr;\n};\n\n/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe Do", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i % 2? i : 0; //sum is now the product of all the odd digits\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 10) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a number n, return the sum of the digits of n.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 0\n  digitSum(235) == 15\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const regEx = /\\[([^\\[\\]]*)\\]/g;\n  const match = string.match(regEx);\n  return match && match.length > 0;\n};\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[[]]') ➞ trUE\n  isNested('[[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const regEx = /\\[([^\\[\\]]*)\\]/g;\n  const match = string.match(regEx);\n  return match && match.length > 0;\n};\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[[]]') ➞ trUE\n  isNested('[[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const regEx = /\\[([^\\[\\]]*)\\]/g;\n  const match = string.match(regEx);\n  return match && match.length > 0;\n};\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[[]]') ➞ trUE\n  isNested('[[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const regEx = /\\[([^\\[\\]]*)\\]/g;\n  const match = string.match(regEx);\n  return match && match.length > 0;\n};\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[[]]') ➞ trUE\n  isNested('[[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const regEx = /\\[([^\\[\\]]*)\\]/g;\n  const match = string.match(regEx);\n  return match && match.length > 0;\n};\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[[]]') ➞ trUE\n  isNested('[[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const regEx = /\\[([^\\[\\]]*)\\]/g;\n  const match = string.match(regEx);\n  return match && match.length > 0;\n};\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[[]]') ➞ ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.ceil(sum);\n};\n\n// TESTS\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([1, 4, 9]));\nconsole.log(sumSquares([1, 3, 5, 7]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  return arr.reduce((acc, val) => acc + val * val, 0);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 tags=arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript dscore=0 |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 tags=arrays,javascript |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nPlease ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n};\n\n/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE . oR ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n  if (a === b) return a\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareTwo(1, 2.5) ➞ -1\n  compareTwo(1, \"2,3\") ➞ 1\n  compareTwo(\"5,1\", \"6\") ➞ 0\n  compareTwo(\"1\", 1) ➞ NulL\n  */\nconSt compareTwo = (a, b) => {\n  if (a === b) return a\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareThree(1, 2.5) ➞ 1\n  compareThree(1, \"2,3\") ➞ 1\n  compareThree(\"5,1\", \"6\") ➞ 0\n  compareThree(\"1\", 1) ➞ NulL\n  */\nconSt compareThree = (a, b) => {\n  if (a === b) return a\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareFour(1, 2.5) ➞ -1\n  compareFour(1, \"2,3\") ➞ -1\n  compareFour(\"5,1\", \"6\") ➞ 1\n  compareFour(\"1\", 1) ➞ NulL\n  */\nconSt compareFour = (a, b) => {\n  if (a === b) return a\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareFive(1, 2.5) ➞ 1\n  compareFive(1, \"2,3\") ➞ 1\n  compareFive(\"5,1\", \"6\") ➞ 1\n  compareFive(\"1\", 1) ➞ NulL\n  */\nconSt compareFive = (a, b) => {\n  if (a === b) return a\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareSix(1, 2.5) ➞ 1\n  compareSix(1, \"2,3\") ➞ 1\n  compareSix(\"5,1\", \"6\") ➞ 1\n  compareSix(\"1\", 1) ➞ NulL\n  */\nconSt compareSix = (a, b) => {\n  if (a === b) return a\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareSeven(1, 2.5) ➞ 1\n  compareSeven(1, \"2,3\") ➞ 1\n  compareSeven(\"5,1\", \"6\") ➞ 1\n  compareSeven(\"1\", 1) ➞ NulL\n  */\nconSt compareSeven = (a, b) => {\n  if (a === b) return a\n  if (a < b) return -1\n  if (a > b) return 1\n  return 0\n}\n\n/*", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 5 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 5;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 6 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 6;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 7 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(11) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 7;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 8 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 8;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 9 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(13) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 9;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 10 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 10;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 11 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(15) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 11;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 12 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 12;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 13 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(17) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 13;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 14 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 14;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 15 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(17) == false\n  isEqualToSumEven(19) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 15;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 16 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 16;\n};\n\n/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 17 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(17) == false\n  isEqualToSumEven(19) == false\n  isEqualToSumEven(21", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes13 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes14 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {\n    prefix = string.substr(i, 1);\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix);\n    }\n    i += 1;\n  }\n  return prefixes;\n};\n\n/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes15 = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  let i = 0;\n  while (i < string.length) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text\n   .replace(/\\s+/g, \"_\")\n   .replace(/_+/g, \"_\")\n   .replace(/_+$/, \"\")\n   .replace(/_+/g, \"_\");\n};\n\n/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split(' ');\n  const file_name = file_name[0];\n  const file_name = file_name.split('-');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('.');\n  const file_name = file_name[0];\n  const file_name = file_name.split('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,functional-programming |>\n<| a |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 tags=javascript,functional-programming |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,functional-programming |>\n<| a dscore=0 |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,functional-programming |>\n<| a tags=javascript,functional-programming |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,functional-programming |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,functional-programming |>\n<| a dscore=0 |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,functional-programming |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,functional-programming |>\n<| a tags=javascript,functional-programming |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,functional-programming |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));</code>\n<|/ a tags=javascript,functional-programming |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes\n<|/ c |>\n<| a tags=javascript,functional-programming |>\n<code>\nconst sumSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\nconsole.log(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence2 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence3 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence4 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence5 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence6 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence7 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence8 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence9 = (sentence) => {\n  const words = sentence.split(' ');\n  const uniqueWords = Array.from(new Set(words));\n  return uniqueWords.join(' ');\n};\n\n/*\n  YOU ARE GIVEN A STRING rEPReSentiNG A sentence,\n  AND YOU WANT TO RETURN A STRING THAT CONTAIN ONLY THE WORDS IN THE SENTENCE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n  if (x === \"0\") return false;\n  if (x === \"1\") return true;\n  if (x.includes(\"/\")) {\n    let [numer, denom] = x.split(\"/\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"+\")) {\n    let [numer, denom] = x.split(\"+\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"-\")) {\n    let [numer, denom] = x.split(\"-\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"*\")) {\n    let [numer, denom] = x.split(\"*\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"/\")) {\n    let [numer, denom] = x.split(\"/\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"+\")) {\n    let [numer, denom] = x.split(\"+\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"-\")) {\n    let [numer, denom] = x.split(\"-\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"*\")) {\n    let [numer, denom] = x.split(\"*\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"/\")) {\n    let [numer, denom] = x.split(\"/\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"+\")) {\n    let [numer, denom] = x.split(\"+\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"-\")) {\n    let [numer, denom] = x.split(\"-\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"*\")) {\n    let [numer, denom] = x.split(\"*\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"/\")) {\n    let [numer, denom] = x.split(\"/\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"+\")) {\n    let [numer, denom] = x.split(\"+\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"-\")) {\n    let [numer, denom] = x.split(\"-\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"*\")) {\n    let [numer, denom] = x.split(\"*\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"/\")) {\n    let [numer, denom] = x.split(\"/\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"+\")) {\n    let [numer, denom] = x.split(\"+\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"-\")) {\n    let [numer, denom] = x.split(\"-\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"*\")) {\n    let [numer, denom] = x.split(\"*\");\n    if (denom === \"0\") return false;\n    if (denom === \"1\") return true;\n    if (numer === \"0\") return false;\n    if (numer === \"1\") return true;\n    return simplify(numer, denom);\n  }\n  if (x.includes(\"/\")) {\n    let [numer, denom] = x.split(\"/\");\n    if (deno", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.reverse();\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0)\n      sum += Math.abs(nums[i]);\n    else\n      sum += nums[i];\n  }\n  return sum % 10 === 0? 10 : sum % 10;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast2 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast3 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast4 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast5 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast6 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast7 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast8 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  removeFirstAndLast([33, -2, -3, 45, 21, 109]) => [-2, -3, 45, 21, 109]\n*/\nconst removeFirstAndLast9 = (nums) => {\n  let newNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (i === 0 || i === nums.length - 1) {\n      newNums.push(nums[i]);\n    } else {\n      newNums.push(nums[i]);\n    }\n  }\n  return newNums;\n};\n\n/*\n  Write a fuNction that takes an array of numbers and returns an array \n  of numbers that has all the numbers of the original array except the \n  first and last numbers. For example:\n  removeFirstAndLast([15, -73, 14, -15]) => [-73, 14, -15]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          return [i, j, k];\n        }\n      }\n    }\n  }\n};\n\n/*\n  YOU ARE GIVEN A POSITIVE INTEGER ARRAY A AND A POSITIVE INTEGER N AND A POSITIVE INTEGER K \n  AND YOU MUST RETURN THE NUMBER OF TRIPLES THAT CONTAIN THE NUMBER A[i] + A[j] + A[k] \n  IN THE ARRAY A IN THE FOLLOWING ORDER:\n  1. A[i] + A[j] + A[k]\n  2. A[i] + A[j] - A[k]\n  3. A[i] - A[j] + A[k]\n  4. A[i] - A[j] - A[k]\n  5. A[i] + A[j] - A[k]\n  6. A[i] - A[j] + A[k]\n  7. A[i] - A[j] - A[k]\n  8. A[i] + A[j] + A[k]\n  9. A[i] - A[j] + A[k]\n  10. A[i] - A[j] - A[k]\n  11. A[i] + A[j] - A[k]\n  12. A[i] - A[j] - A[k]\n  13. A[i] + A[j] + A[k]\n  14. A[i] - A[j] + A[k]\n  15. A[i] - A[j] - A[k]\n  16. A[i] + A[j] + A[k]\n  17. A[i] - A[j] + A[k]\n  18. A[i] - A[j] - A[k]\n  19. A[i] + A[j] - A[k]\n  20. A[i] - A[j] - A[k]\n  21. A[i] + A[j] + A[k]\n  22. A[i] - A[j] + A[k]\n  23. A[i] - A[j] - A[k]\n  24. A[i] + A[j] - A[k]\n  25. A[i] - A[j] - A[k]\n  26. A[i] + A[j] + A[k]\n  27. A[i] - A[j] + A[k]\n  28. A[i] - A[j] - A[k]\n  29. A[i] + A[j] - A[k]\n  30. A[i] - A[j] - A[k]\n  31. A[i] + A[j] + A[k]\n  32. A[i] - A[j] + A[k]\n  33. A[i] - A[j] - A[k]\n  34. A[i] + A[j] - A[k]\n  35. A[i] - A[j] - A[k]\n  36. A[i] + A[j] + A[k]\n  37. A[i] - A[j] + A[k]\n  38. A[i] - A[j] - A[k]\n  39. A[i] + A[j] - A[k]\n  40. A[i] - A[j] - A[k]\n  41. A[i] + A[j] + A[k]\n  42. A[i] - A[j] + A[k]\n  43. A[i] - A[j] - A[k]\n  44. A[i] + A[j] - A[k]\n  45. A[i] - A[j] - A[k]\n  46. A[i] + A[j] + A[k]\n  47. A[i] - A[j] + A[k]\n  48. A[i] - A[j] - A[k]\n  49. A[i] + A[j] - A[k]\n  50. A[i] - A[j] - A[k]\n  51. A[i] + A[j] + A[k]\n  52. A[i] - A[j] + A[k]\n  53. A[i] - A[j] - A[k]\n  54. A[i] + A[j] - A[k]\n  55. A[i] - A[j] - A[k]\n  56. A[i] + A[j] + A[k]\n  57. A[i] - A[j] + A[k]\n  58. A[i] - A[j] - A[k]\n  59. A[i] + A[j] - A[k]\n  60. A[i] - A[j] - A[k]\n  61. A[i] + A[j] + A[k]\n  62. A[i] - A[j] + A[k]\n  63. A[i] - A[j] - A[k]\n  64. A[i] + A[j] - A[k]\n  65. A[i] - A[j] - A[k]\n  66. A[i] + A[j] + A[k]\n  67. A[i] - A[j] + A[k]\n  68. A[i] - A[j] - A[k]\n  69. A[i] + A[j] - A[k]\n  70. A[i] - A[j] - A[k]\n  71. A[i] + A[j] + A[k]\n  72. A[i] - A[j] + A[k]\n  73. A[i] - A[j] - A[k]\n  74. A[i] + A[j] - A[k]\n  75. A[i] - A[j] - A[k]\n  76. A[i] + A[j] + A[k]\n  77. A[i] - A[j] + A[k]\n  78. A[i] - A[j] - A[k]\n  79. A[i] + A[j] - A[k]\n  80. A[i] - A[j] - A[k]\n  81. A[i] + A[j] + A[k]\n  82. A[i] - A[j] + A[k]\n  83. A[i] - A[j] - A[k]\n  84. A[i] + A[j] - A[k]\n  85. A[i] - A[j] - A[k]\n  86. A[i] + A[j] + A[k]\n  87. A[i] - A[j] + A[k]\n  88. A[i] - A[j] - A[k]\n  89. A[i] + A[j] - A[k]\n  90. A[i] - A[j] - A[k]\n  91. A[i] + A[j] + A[k]\n  92. A[i] - A[j] + A[k]\n  93. A[i] - A[j] - A[k]\n  94. A[i] + A[j] - A[k]\n  95. A[i] - A[j] - A[k]\n  96. A[i] + A[j] + A[k]\n  97. A[i] - A[j] + A[k]\n  98. A[i] - A[j] - A[k]\n  99. A[i] + A[j] - A[k]\n  100. A[i] - A[j] - A[k]\n  101. A[i] + A[j] + A[k]\n  10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetsNames = [planet1, planet2]\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.distance - b.distance)\n  const planetsNamesSorted = planetsNames.sort((a, b) => a.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = lst;\n  sortedList.sort();\n  return sortedList;\n};\n\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// --------------------------------------------------\n// ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += i;\n  }\n  return str;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x === n? y : x;\n  }\n  return y;\n};\n\n/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are even.\n  Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheEven([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 10\n  doubleTheEven([-1, -2, 0]) == 0\n  doubleTheEven([9, -2]) == 81\n  doubleTheEven([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheEven = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are odd.\n  Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheOdd([1, 3, 2, 0]) == 1 + 3 + 2 + 1 = 13\n  doubleTheOdd([-1, -2, 0]) == 0\n  doubleTheOdd([9, -2]) == 81\n  doubleTheOdd([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheOdd = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are even and\n  odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheEvenOdd([1, 3, 2, 0]) == 1 + 3 + 2 + 1 = 13\n  doubleTheEvenOdd([-1, -2, 0]) == 0\n  doubleTheEvenOdd([9, -2]) == 81\n  doubleTheEvenOdd([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheEvenOdd = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are even and\n  odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheEvenOdd([1, 3, 2, 0]) == 1 + 3 + 2 + 1 = 13\n  doubleTheEvenOdd([-1, -2, 0]) == 0\n  doubleTheEvenOdd([9, -2]) == 81\n  doubleTheEvenOdd([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheEvenOdd = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are even and\n  odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheEvenOdd([1, 3, 2, 0]) == 1 + 3 + 2 + 1 = 13\n  doubleTheEvenOdd([-1, -2, 0]) == 0\n  doubleTheEvenOdd([9, -2]) == 81\n  doubleTheEvenOdd([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheEvenOdd = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are even and\n  odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheEvenOdd([1, 3, 2, 0]) == 1 + 3 + 2 + 1 = 13\n  doubleTheEvenOdd([-1, -2, 0]) == 0\n  doubleTheEvenOdd([9, -2]) == 81\n  doubleTheEvenOdd([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheEvenOdd = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are even and\n  odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheEvenOdd([1, 3, 2, 0]) == 1 + 3 + 2 + 1 = 13\n  doubleTheEvenOdd([-1, -2, 0]) == 0\n  doubleTheEvenOdd([9, -2]) == 81\n  doubleTheEvenOdd([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheEvenOdd = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the sUM Of SquarES OF the Numbers in the list That are even and\n  odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheEvenOdd([1, 3, 2, 0]) == 1 + 3 + 2 + 1 = 13\n  doubleTheEvenOdd([-1, -2, 0]) == 0\n  doubleTheEvenOdd([9, -2]) == 81\n  doubleTheEvenOdd([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheEvenOdd = (lst) => {\n  if (lst.length <= 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Return the s", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  const gameLen = game.length;\n  const guessLen = guess.length;\n  let gameIndex = 0;\n  let guessIndex = 0;\n  let gameScore = 0;\n  let guessScore = 0;\n  let gameDiff = 0;\n  let guessDiff = 0;\n  let gameDiffIndex = 0;\n  let guessDiffIndex = 0;\n  let gameDiffScore = 0;\n  let guessDiffScore = 0;\n  let gameDiffDiff = 0;\n  let guessDiffDiff = 0;\n  while (gameIndex < gameLen && guessIndex < guessLen) {\n    gameDiff = game[gameIndex] - guess[guessIndex];\n    guessDiff = guess[guessIndex] - game[gameIndex];\n    gameDiffScore = gameDiff === 0? 0 : gameDiff === gameLen? 0 : gameDiff === guessLen? 1 : 0;\n    guessDiffScore = guessDiff === 0? 0 : guessDiff === gameLen? 0 : guessDiff === guessLen? 1 : 0;\n    gameDiffDiff = gameDiff === 0? 0 : gameDiff === gameLen? 0 : gameDiff === guessLen? 1 : 0;\n    guessDiffDiff = guessDiff === 0? 0 : guessDiff === gameLen? 0 : guessDiff === guessLen? 1 : 0;\n    result.push(gameDiffScore * gameDiffDiff + guessDiffScore * guessDiffDiff);\n    gameIndex++;\n    guessIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two arrays of numbers, return an array of their differences\n  \n  example:\n\n  difference([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  difference([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst difference = (game, guess) => {\n  const result = [];\n  const gameLen = game.length;\n  const guessLen = guess.length;\n  let gameIndex = 0;\n  let guessIndex = 0;\n  let gameScore = 0;\n  let guessScore = 0;\n  let gameDiff = 0;\n  let guessDiff = 0;\n  let gameDiffIndex = 0;\n  let guessDiffIndex = 0;\n  let gameDiffScore = 0;\n  let guessDiffScore = 0;\n  let gameDiffDiff = 0;\n  let guessDiffDiff = 0;\n  while (gameIndex < gameLen && guessIndex < guessLen) {\n    gameDiff = game[gameIndex] - guess[guessIndex];\n    guessDiff = guess[guessIndex] - game[gameIndex];\n    gameDiffScore = gameDiff === 0? 0 : gameDiff === gameLen? 0 : gameDiff === guessLen? 1 : 0;\n    guessDiffScore = guessDiff === 0? 0 : guessDiff === gameLen? 0 : guessDiff === guessLen? 1 : 0;\n    gameDiffDiff = gameDiff === 0? 0 : gameDiff === gameLen? 0 : gameDiff === guessLen? 1 : 0;\n    guessDiffDiff = guessDiff === 0? 0 : guessDiff === gameLen? 0 : guessDiff === guessLen? 1 : 0;\n    result.push(gameDiffScore * gameDiffDiff + guessDiffScore * guessDiffDiff);\n    gameIndex++;\n    guessIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two arrays of numbers, return an array of their product of differences\n  \n  example:\n\n  productDifference([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  productDifference([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst productDifference = (game, guess) => {\n  const result = [];\n  const gameLen = game.length;\n  const guessLen = guess.length;\n  let gameIndex = 0;\n  let guessIndex = 0;\n  let gameScore = 0;\n  let guessScore = 0;\n  let gameDiff = 0;\n  let guessDiff = 0;\n  let gameDiffIndex = 0;\n  let guessDiffIndex = 0;\n  let gameDiffScore = 0;\n  let guessDiffScore = 0;\n  let gameDiffDiff = 0;\n  let guessDiffDiff = 0;\n  while (gameIndex < gameLen && guessIndex < guessLen) {\n    gameDiff = game[gameIndex] - guess[guessIndex];\n    guessDiff = guess[guessIndex] - game[gameIndex];\n    gameDiffScore = gameDiff === 0? 0 : gameDiff === gameLen? 0 : gameDiff === guessLen? 1 : 0;\n    guessDiffScore = guessDiff === 0? 0 : guessDiff === gameLen? 0 : guessDiff === guessLen? 1 : 0;\n    gameDiffDiff = gameDiff === 0? 0 : gameDiff === gameLen? 0 : gameDiff === guessLen? 1 : 0;\n    guessDiffDiff = guessDiff === 0? 0 : guessDiff === gameLen? 0 : guessDiff === guessLen? 1 : 0;\n    result.push(gameDiffScore * gameDiffDiff + guessDiffScore * guessDiffDiff);\n    gameIndex++;\n    guessIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two arrays of numbers, return an array of their sums of differences\n  \n  example:\n\n  sumDifference([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  sumDifference([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst sumDifference = (game, guess) => {\n  const result = [];\n  const gameLen = game.length;\n  const guessLen = guess.length;\n  let gameIndex = 0;\n  let guessIndex = 0;\n  let gameScore = 0;\n  let guessScore = 0;\n  let gameDiff = 0;\n  let guessDiff = 0;\n  let gameDiffIndex = 0;\n  let guessDiffIndex = 0;\n  let gameDiffScore = 0;\n  let guessDiffScore = 0;\n  let gameDiffDiff = 0;\n  let guessDiffDiff = 0;\n  while (gameIndex < gameLen && guessIndex < guessLen) {\n    gameDiff = game[gameIndex] - guess[guessIndex];\n    guessDiff = guess[guessIndex] - game[gameIndex];\n    gameDiffScore = gameDiff === 0? 0 : gameDiff === gameLen? 0 : gameDiff === guessLen? 1 : 0;\n    guessDiffScore = guessDiff === 0? 0 : guessDiff === gameLen? 0 : guessDiff === guessLen? 1 : 0;\n    gameDiffDiff = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = -1;\n  let class_name = class_name.split('.');\n  class_name = class_name.slice(0, class_name.lastIndexOf('.'));\n  extensions.forEach((extension) => {\n    let extension = extension.split('.');\n    extension = extension.slice(0, extension.lastIndexOf('.'));\n    let i = 0;\n    while (i < extension.length && extension[i] === class_name[i]) {\n      i++;\n    }\n    if (i === extension.length) {\n      strength = extension.length;\n    }\n  });\n  return class_name + '.' + extensions[extensions.length - 1];\n};\n\n/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = -1;\n  let class_name = class_name.split('.');\n  class_name = class_name.slice(0, class_name.lastIndexOf('.'));\n  extensions.forEach((extension) => {\n    let extension = extension.split('.');\n    extension = extension.slice(0, extension.lastIndexOf('.'));\n    let i = 0;\n    while (i < extension.length && extension[i] === class_name[i]) {\n      i++;\n    }\n    if (i === extension.length) {\n      strength = extension.length;\n    }\n  });\n  return class_name + '.' + extensions[extensions.length - 1];\n};\n\n/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = -1;\n  let class_name = class_name.split('.');\n  class_name = class_name.slice(0, class_name.lastIndexOf('.'));\n  extensions.forEach((extension) => {\n    let extension = extension.split('.');\n    extension = extension.slice(0, extension.lastIndexOf('.'));\n    let i = 0;\n    while (i < extension.length && extension[i] === class_name[i]) {\n      i++;\n    }\n    if (i === extension.length) {\n      strength = extension.length;\n    }\n  });\n  return class_name + '.' + extensions[extensions.length - 1];\n};\n\n/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aRotArr = [];\n  let bRotArr = [];\n  let aRotArrLen = 0;\n  let bRotArrLen = 0;\n  let aRotArrIndex = 0;\n  let bRotArrIndex = 0;\n  let aRotArrVal = 0;\n  let bRotArrVal = 0;\n  let aRotArrValIndex = 0;\n  let bRotArrValIndex = 0;\n  let aRotArrValIndex2 = 0;\n  let bRotArrValIndex2 = 0;\n  let aRotArrValIndex3 = 0;\n  let bRotArrValIndex3 = 0;\n  let aRotArrValIndex4 = 0;\n  let bRotArrValIndex4 = 0;\n  let aRotArrValIndex5 = 0;\n  let bRotArrValIndex5 = 0;\n  let aRotArrValIndex6 = 0;\n  let bRotArrValIndex6 = 0;\n  let aRotArrValIndex7 = 0;\n  let bRotArrValIndex7 = 0;\n  let aRotArrValIndex8 = 0;\n  let bRotArrValIndex8 = 0;\n  let aRotArrValIndex9 = 0;\n  let bRotArrValIndex9 = 0;\n  let aRotArrValIndex10 = 0;\n  let bRotArrValIndex10 = 0;\n  let aRotArrValIndex11 = 0;\n  let bRotArrValIndex11 = 0;\n  let aRotArrValIndex12 = 0;\n  let bRotArrValIndex12 = 0;\n  let aRotArrValIndex13 = 0;\n  let bRotArrValIndex13 = 0;\n  let aRotArrValIndex14 = 0;\n  let bRotArrValIndex14 = 0;\n  let aRotArrValIndex15 = 0;\n  let bRotArrValIndex15 = 0;\n  let aRotArrValIndex16 = 0;\n  let bRotArrValIndex16 = 0;\n  let aRotArrValIndex17 = 0;\n  let bRotArrValIndex17 = 0;\n  let aRotArrValIndex18 = 0;\n  let bRotArrValIndex18 = 0;\n  let aRotArrValIndex19 = 0;\n  let bRotArrValIndex19 = 0;\n  let aRotArrValIndex20 = 0;\n  let bRotArrValIndex20 = 0;\n  let aRotArrValIndex21 = 0;\n  let bRotArrValIndex21 = 0;\n  let aRotArrValIndex22 = 0;\n  let bRotArrValIndex22 = 0;\n  let aRotArrValIndex23 = 0;\n  let bRotArrValIndex23 = 0;\n  let aRotArrValIndex24 = 0;\n  let bRotArrValIndex24 = 0;\n  let aRotArrValIndex25 = 0;\n  let bRotArrValIndex25 = 0;\n  let aRotArrValIndex26 = 0;\n  let bRotArrValIndex26 = 0;\n  let aRotArrValIndex27 = 0;\n  let bRotArrValIndex27 = 0;\n  let aRotArrValIndex28 = 0;\n  let bRotArrValIndex28 = 0;\n  let aRotArrValIndex29 = 0;\n  let bRotArrValIndex29 = 0;\n  let aRotArrValIndex30 = 0;\n  let bRotArrValIndex30 = 0;\n  let aRotArrValIndex31 = 0;\n  let bRotArrValIndex31 = 0;\n  let aRotArrValIndex32 = 0;\n  let bRotArrValIndex32 = 0;\n  let aRotArrValIndex33 = 0;\n  let bRotArrValIndex33 = 0;\n  let aRotArrValIndex34 = 0;\n  let bRotArrValIndex34 = 0;\n  let aRotArrValIndex35 = 0;\n  let bRotArrValIndex35 = 0;\n  let aRotArrValIndex36 = 0;\n  let bRotArrValIndex36 = 0;\n  let aRotArrValIndex37 = 0;\n  let bRotArrValIndex37 = 0;\n  let aRotArrValIndex38 = 0;\n  let bRotArrValIndex38 = 0;\n  let aRotArrValIndex39 = 0;\n  let bRotArrValIndex39 = 0;\n  let aRotArrValIndex40 = 0;\n  let bRotArrValIndex40 = 0;\n  let aRotArrValIndex41 = 0;\n  let bRotArrValIndex41 = 0;\n  let aRotArrValIndex42 = 0;\n  let bRotArrValIndex42 = 0;\n  let aRotArrValIndex43 = 0;\n  let bRotArrValIndex43 = 0;\n  let aRotArrValIndex44 = 0;\n  let bRotArrValIndex44 = 0;\n  let aRotArrValIndex45 = 0;\n  let bRotArrValIndex45 = 0;\n  let aRotArrValIndex46 = 0;\n  let bRotArrValIndex46 = 0;\n  let aRotArrValIndex47 = 0;\n  let bRotArrValIndex47 = 0;\n  let aRotArrValIndex48 = 0;\n  let bRotArrValIndex48 = 0;\n  let aRotArrValIndex49 = 0;\n  let bRotArrValIndex49 = 0;\n  let aRotArrValIndex50 = 0;\n  let bRotArrValIndex50 = 0;\n  let aRotArrValIndex51 = 0;\n  let bRotArrValIndex51 = 0;\n  let aRotArrValIndex52 = 0;\n  let bRotArrValIndex52 = 0;\n  let aRotArrValIndex53 = 0;\n  let bRotArrValIndex53 = 0;\n  let aRotArrValIndex54 = 0;\n  let bRotArrValIndex54 = 0;\n  let aRotArrValIndex55 = 0;\n  let bRotArrValIndex55 = 0;\n  let aRotArrValIndex56 = 0;\n  let bRotArrValIndex56 = 0;\n  let aRotArrValIndex57 = 0;\n  let bRotArrValIndex57 = 0;\n  let aRotArrValIndex58 = 0;\n  let bRotArrValIndex58 = 0;\n  let aRotArrValIndex59 = 0;\n  let bRotArrValIndex59 = 0;\n  let aRotArrValIndex60 = 0;\n  let bRotArrValIndex60 = 0;\n  let aRotArrValIndex61 = 0;\n  let bRotArrValIndex61 = 0;\n  let aRotArrValIndex62 = 0;\n  let bRotArrValIndex62 = 0;\n  let aRotArrValIndex63 = 0;\n  let bRotArrValIndex63 = 0;\n  let aRotArrValIndex64 = 0;\n  let bRotArrValIndex64 = 0;\n  let aRotArrValIndex65 = 0;\n  let bRotArrValIndex65 = 0;\n  let aRotArrValIndex66 = 0;\n  let bRotArrValIndex66 = 0;\n  let aRotArrValIndex67 = 0;\n  let bRotArrValIndex67 = 0;\n  let aRotArrValIndex68 = 0;\n  let bRotArrValIndex68 = 0;\n  let aRotArrValIndex69 = 0;\n  let bRotArrValIndex69 = 0;\n  let aRotArrValIndex70 = 0;\n  let bRotArrValIndex70 = 0;\n  let aRotArrValIndex71 = 0;\n  let bRotArrValIndex71 = 0;\n  let aRotArrValIndex72 = 0;\n  let bRotArrValIndex72 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an iNteger. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i) => i).join('');\n  return roman.substr(0, roman.length - roman.match(/\\d/g).length);\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number < 1 || number > 1000) {\n    throw new Error('Invalid argument');\n  }\n  const roman = Array(number + 1).fill('').map((_, i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be equilateral if its hypotenuse is less than or equal\n  to 90 degrees.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) <= Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is greater than 90 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be scalene if its hypotenuse is less than 180 degrees.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) <= Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is greater than 180 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be scalene if its hypotenuse is less than 360 degrees.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) <= Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is greater than 360 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be scalene if its hypotenuse is less than 720 degrees.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(1, 2, 3) == false\n  */\nconst scaleneScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) <= Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is greater than 720 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is less than 1480 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneScaleneScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) <= Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is greater than 1480 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneScaleneScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is less than 2880 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneScaleneScaleneScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) <= Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is greater than 2880 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneScaleneScaleneScaleneScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Math.abs(ab * ac - bc * ac);\n};\n\n/*\n A triangle is said to be isosceles if its hypotenuse is less than 5680 degrees.\n  Example:\n  isosceleTriangle(3, 4, 5) == true\n  isosceleTriangle(1, 2, 3) == false\n  */\nconst isosceleScaleneScaleneScaleneScaleneScaleneScaleneScaleneTriangle = (a, b, c) => {\n  const ab = a - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  const maxWord = words.reduce((maxWord, word) => {\n    if (maxWord.length > word.length) {\n      return maxWord;\n    }\n    return word;\n  });\n  return maxWord;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  const maxWord = words.reduce((maxWord, word) => {\n    if (maxWord.length > word.length) {\n      return maxWord;\n    }\n    return word;\n  });\n  return maxWord;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  const maxWord = words.reduce((maxWord, word) => {\n    if (maxWord.length > word.length) {\n      return maxWord;\n    }\n    return word;\n  });\n  return maxWord;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  const maxWord = words.reduce((maxWord, word) => {\n    if (maxWord.length > word.length) {\n      return maxWord;\n    }\n    return word;\n  });\n  return maxWord;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  const maxWord = words.reduce((maxWord, word) => {\n    if (maxWord.length > word.length) {\n      return maxWord;\n    }\n    return word;\n  });\n  return maxWord;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  const maxWord = words.reduce((maxWord, word) => {\n    if (maxWord.length > word.length) {\n      return maxWord;\n    }\n    return word;\n  });\n  return maxWord;\n};\n\n/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  const maxWord = words.reduce((maxWord, word) => {\n    if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let count = 0;\n  \n  for (let i = 0; i < number; i++) {\n    count += 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < need; i++) {\n    count -= 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < remaining; i++) {\n    count += 1;\n    arr.push(count);\n  }\n  \n  return arr;\n};\n\n/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let count = 0;\n  \n  for (let i = 0; i < number; i++) {\n    count += 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < need; i++) {\n    count -= 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < remaining; i++) {\n    count += 1;\n    arr.push(count);\n  }\n  \n  return arr;\n};\n\n/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let count = 0;\n  \n  for (let i = 0; i < number; i++) {\n    count += 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < need; i++) {\n    count -= 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < remaining; i++) {\n    count += 1;\n    arr.push(count);\n  }\n  \n  return arr;\n};\n\n/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let arr = [];\n  let count = 0;\n  \n  for (let i = 0; i < number; i++) {\n    count += 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < need; i++) {\n    count -= 1;\n    arr.push(count);\n  }\n  \n  for (let i = 0; i < remaining; i++) {\n    count += 1;\n    arr.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/16", "prompt": "/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// ==========================================================================================================================\n\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n// ==========================================================================================================================\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('*')\n  const result = operands[0]\n  const operator = operators[0]\n  const operand = operands[1]\n\n  for (let i = 0; i < operators.length; i++) {\n    if (operator === operators[i]) {\n      result += operand\n    } else {\n      result = result * operand\n    }\n  }\n\n  return result\n}\n\n/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('*')\n  const result = operands[0]\n  const operator = operators[0]\n  const operand = operands[1]\n\n  for (let i = 0; i < operators.length; i++) {\n    if (operator === operators[i]) {\n      result += operand\n    } else {\n      result = result * operand\n    }\n  }\n\n  return result\n}\n\n/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('*')\n  const result = operands[0]\n  const operator = operators[0]\n  const operand = operands[1]\n\n  for (let i = 0; i < operators.length; i++) {\n    if (operator === operators[i]) {\n      result += operand\n    } else {\n      result = result * operand\n    }\n  }\n\n  return result\n}\n\n/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('*')\n  const result = operands[0]\n  const operator = operators[0]\n  const operand = operands[1]\n\n  for (let i = 0; i < operators.length; i++) {\n    if (operator === operators[i]) {\n      result += operand\n    } else {\n      result = result * operand\n    }\n  }\n\n  return result\n}\n\n/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in descending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i >= b; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in descending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i >= b; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in descending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i >= b; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in descending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i >= b; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in descending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i >= b; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in descending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(8, 2) => [8, 6, 4, 2]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i >= b; i--) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in descending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [8, 6, 4, 2]\n  generateIntegers(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(2);\n    } else if (music_list[i] === '.|') {\n      music_array.push(3);\n    } else {\n      music_array.push(4);\n    }\n  }\n  return music_array;\n};\n\n/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(2);\n    } else if (music_list[i] === '.|') {\n      music_array.push(3);\n    } else {\n      music_array.push(4);\n    }\n  }\n  return music_array;\n};\n\n/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(2);\n    } else if (music_list[i] === '.|') {\n      music_array.push(3);\n    } else {\n      music_array.push(4);\n    }\n  }\n  return music_array;\n};\n\n/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(2);\n    } else if (music_list[i] === '.|') {\n      music_array.push(3);\n    } else {\n      music_array.push(4);\n    }\n  }\n  return music_array;\n};\n\n/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_array = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      music_array.push(1);\n    } else if (music_list[i] === 'o|') {\n      music_array.push(2);\n    } else if (music_list[i] === '.|') {\n      music_array.push(3);\n    } else {\n      music_array.push(4);\n    }\n  }\n  return music_array;\n};\n\n/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list o", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/18", "prompt": "/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Return the first word of a given string.\n  >>> firstWord('Hello World')\n  'Hello'\n  >>> firstWord('Hello World!')\n  'Hello'\n  >>> firstWord('Hello World!!')\n  'Hello'\n  */\nconst firstWord = (string) => {\n  return string.split(' ')[0];\n};\n\n/* Return the last word of a given string.\n  >>> lastWord('Hello World')\n  'World'\n  >>> lastWord('Hello World!')\n  'World'\n  >>> lastWord('Hello World!!')\n  'World'\n  */\nconst lastWord = (string) => {\n  return string.split(' ').pop();\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/* Return the first letter of a given string.\n  >>> firstLetter('Hello World')\n  'H'\n  >>> firstLetter('Hello World!')\n  'H'\n  >>> firstLetter('Hello World!!')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string.charAt(0);\n};\n\n/* Return the last letter of a given string.\n  >>> lastLetter('Hello World')\n  'W'\n  >>> lastLetter('Hello World!')\n  'W'\n  >>> lastLetter('Hello World!!')\n  'W'\n  */\nconst lastLetter = (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX', 'seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    const aNum = Number(a);\n    const bNum = Number(b);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumberArray.join(\" \");\n};\n\n/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    const aNum = Number(a);\n    const bNum = Number(b);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumberArray.join(\" \");\n};\n\n/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    const aNum = Number(a);\n    const bNum = Number(b);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumberArray.join(\" \");\n};\n\n/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    const aNum = Number(a);\n    const bNum = Number(b);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumberArray.join(\" \");\n};\n\n/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    const aNum = Number(a);\n    const bNum = Number(b);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumberArray.join(\" \");\n};\n\n/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    const aNum = Number(a);\n    const bNum = Number(b);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumberArray.join(\" \");\n};\n\n/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \");\n  const sortedNumberArray = numberArray.sort((a, b) => {\n    const aNum = Number(a);\n    const bNum = Number(b);\n    if (aNum > bNum) {\n      return 1;\n    }\n    if (aNum < bNum) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedNumberArray.join(\" \");\n};\n\n/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatingPointNumber = parseFloat(number);\n  const integerPart = Math.floor(floatingPointNumber);\n  const decimalPart = floatingPointNumber - integerPart;\n  return integerPart + decimalPart;\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncate = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestInteger = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimals = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrZero = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZero = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZero = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZero = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The truncated number.\n */\nconst truncateToNearestIntegerWithDecimalsOrNullOrZeroOrNullOrZeroOrNull = (number) => {\n  return truncateNumber(number);\n};\n\n/**\n * Truncate the number to the nearest integer.\n *\n * @param {number} number The number to truncate.\n * @returns {number} The trun", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length;\n  if (len < 2) {\n    return numbers;\n  }\n  const minDiff = Number.MAX_SAFE_INTEGER;\n  let minDiffIndex = -1;\n  let minDiffNumber = numbers[0];\n  for (let i = 1; i < len; i++) {\n    const diff = Math.abs(numbers[i] - minDiffNumber);\n    if (diff < minDiff) {\n      minDiff = diff;\n      minDiffIndex = i;\n      minDiffNumber = numbers[i];\n    }\n  }\n  return [minDiffNumber, numbers[minDiffIndex]];\n};\n\n/**\n * Return the number of elements in the given array that are greater than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countGreaterThanOrEqual = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThanOrEqual = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThan = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are greater than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countGreaterThan = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countEqual = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are greater than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countGreaterThanOrEqual2 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThanOrEqual2 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThan2 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are greater than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countGreaterThan2 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countEqual2 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are greater than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countGreaterThanOrEqual3 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThanOrEqual3 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThan3 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are greater than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countGreaterThanOrEqual4 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThanOrEqual4 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThan4 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are greater than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countGreaterThanOrEqual5 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst countLessThanOrEqual5 = (arr, num) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= num) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of elements in the given array that are less than or equal to the given number.\n * @param {Array} arr\n * @param {Number} num\n * @return {Number}\n */\nconst count", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const length = numbers.length;\n  if (length <= 1) {\n    return numbers;\n  }\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = (range / length) - 1;\n  return numbers.map(n => n * scale);\n};\n\nconst getColor = (number) => {\n  if (number < 0.5) {\n    return '#FF0000';\n  }\n  if (number < 0.75) {\n    return '#FF7F00';\n  }\n  return '#FFFF00';\n};\n\nconst getColorForValue = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValues = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZero = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndOne = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndTwo = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndThree = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndFour = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndFive = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndSix = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndSeven = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndEight = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndNine = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndTen = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndEleven = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndTwelve = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndThirteen = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndFourteen = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndFifteen = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndSixteen = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndSeventeen = (value, color) => {\n  if (value < 0.5) {\n    return `rgb(255, ${color}, 0)`;\n  }\n  if (value < 0.75) {\n    return `rgb(255, ${color}, ${value * 2})`;\n  }\n  return `rgb(${color}, ${color}, 0)`;\n};\n\nconst getColorForValuesWithoutZeroAndEighteen = (value, color) => {\n  if (value < 0.5) {\n    return `", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any pytHON values oNly foR INTegeRs\n * \n * >>> filterNonIntegers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/23", "prompt": "/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      len += 2;\n    } else {\n      len++;\n    }\n  }\n  return len;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDivisor = i;\n    }\n  }\n  return largestDivisor;\n};\n\n/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestDi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  while (n >= i) {\n    factors.push(i);\n    i += 2;\n  }\n  while (n > i) {\n    factors.push(i);\n    n -= i;\n  }\n  return factors;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/**\n * Return The factorial of n\n * @param {Number} n\n * @returns {Number}\n */\nconst factorial = (n) => {\n  let result = 1;\n  for (", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/26", "prompt": "/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  numbers.forEach((num) => {\n    if (seen[num]) {\n      return;\n    }\n    seen[num] = true;\n    result.push(num);\n  });\n  return result;\n};\n\n// --- TEST ---\n\nconst testRemoveDuplicates = () => {\n  expect(removeDuplicates([])).toEqual([]);\n  expect(removeDuplicates([1, 2, 3])).toEqual([1, 2, 3]);\n  expect(removeDuplicates([1, 2, 3, 2])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, 3, 2, 4, 5])).toEqual([1, 3]);\n  expect(removeDuplicates([1, 2, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/27", "prompt": "/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map(letter => letter.toUpperCase())\n   .join('');\n};\n\n/**\n * A function that takes an array of strings and returns an array of strings\n * with each string in the array being separated by a comma and a space.\n * If there are no strings in the array then an empty string is returned.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the array then each string is separated by a space.\n * If there are multiple strings in the array then each string is separated by a comma.\n * If there are multiple strings in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([null])\n  'null'\n  >>> concatenate([null, 'a'])\n  'nulla'\n  >>> concatenate([null, 'a', 'b'])\n  'nullab'\n  >>> concatenate([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNull = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNull([null])\n  'null'\n  >>> concatenateWithNull([null, 'a'])\n  'nulla'\n  >>> concatenateWithNull([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNull([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmpty = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmpty([null])\n  'null'\n  >>> concatenateWithNullWithEmpty([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmpty([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmpty([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNull = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNull([null])\n  'null'\n  >>> concatenateWithNullWithEmptyWithNull([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmptyWithNull([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmptyWithNull([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNullWithEmpty = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNullWithEmpty([null])\n  'null'\n  >>> concatenateWithNullWithEmptyWithNullWithEmpty([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmptyWithNullWithEmpty([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmptyWithNullWithEmpty([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNullWithEmptyWithNull = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNull([null])\n  'null'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null])\n  'null'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null])\n  'null'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null])\n  'null'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null])\n  'null'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null, 'a'])\n  'nulla'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null, 'a', 'b'])\n  'nullab'\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty([null, 'a', 'b', 'c'])\n  'nullabc'\n  */\nconst concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNullWithEmpty = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenateWithNullWithEmptyWithNullWithEmptyWithNullWithEmptyWithNull", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefixAndSuffix([], 'a', 'b')\n  []\n  >>> filterByPrefixAndSuffix(['abc', 'bcd', 'cde', 'array'], 'a', 'b')\n  ['abc']\n  */\nconst filterByPrefixAndSuffix = (strings, prefix, suffix) => {\n  return strings.filter(string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const deposits = operations.filter(\n    ({ type, amount }) => type === 'deposit' && amount > 0\n  )\n  const withdrawals = operations.filter(\n    ({ type, amount }) => type === 'withdrawal' && amount > 0\n  )\n  return deposits.length + withdrawals.length >= 0\n}\n\n/* YOU CAN USE THIS FUNCTION TO TEST YOUR FUNCTIONS BELOW THIS LINE */\nconst testBelowZero = () => {\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'withdrawal', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'withdrawal', amount: -1 }])).toBe(false)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(false)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'withdrawal', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(false)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(false)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(false)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }])).toBe(true)\n  expect(belowZero([{ type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 }, { type: 'deposit', amount: 1 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*RetURn onLy negative nuMBErS in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*RetURn onLy zero nuMBErS in the list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  []\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getZero = (l) => {\n  return l.filter(n => n === 0);\n};\n\n/*RetURn onLy nuMBErS with negative and positive nuMBErS in the list.\n  >>> getBoth([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBoth([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBoth = (l) => {\n  return l.filter(n => n >= 0 && n <= 1);\n};\n\n/*RetURn onLy nuMBErS with negative and zero nuMBErS in the list.\n  >>> getBoth([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBoth([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothZero = (l) => {\n  return l.filter(n => n >= 0 && n === 0);\n};\n\n/*RetURn onLy nuMBErS with positive and zero nuMBErS in the list.\n  >>> getBothZero([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothZeroPositive = (l) => {\n  return l.filter(n => n <= 0 && n === 0);\n};\n\n/*RetURn onLy nuMBErS with zero and positive nuMBErS in the list.\n  >>> getBothZeroPositive([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothZeroPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothZeroPositiveZero = (l) => {\n  return l.filter(n => n === 0 && n >= 0);\n};\n\n/*RetURn onLy nuMBErS with zero and negative nuMBErS in the list.\n  >>> getBothZeroNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothZeroNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothZeroNegative = (l) => {\n  return l.filter(n => n === 0 && n < 0);\n};\n\n/*RetURn onLy nuMBErS with zero and zero nuMBErS in the list.\n  >>> getBothZeroZero([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothZeroZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothZeroZero = (l) => {\n  return l.filter(n => n === 0 && n === 0);\n};\n\n/*RetURn onLy nuMBErS with positive and positive nuMBErS in the list.\n  >>> getBothPositivePositive([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothPositivePositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothPositivePositive = (l) => {\n  return l.filter(n => n >= 0 && n >= 0);\n};\n\n/*RetURn onLy nuMBErS with positive and negative nuMBErS in the list.\n  >>> getBothPositiveNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothPositiveNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothPositiveNegative = (l) => {\n  return l.filter(n => n >= 0 && n < 0);\n};\n\n/*RetURn onLy nuMBErS with negative and positive nuMBErS in the list.\n  >>> getBothNegativePositive([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothNegativePositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothNegativePositive = (l) => {\n  return l.filter(n => n < 0 && n >= 0);\n};\n\n/*RetURn onLy nuMBErS with negative and negative nuMBErS in the list.\n  >>> getBothNegativeNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothNegativeNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothNegativeNegative = (l) => {\n  return l.filter(n => n < 0 && n < 0);\n};\n\n/*RetURn onLy nuMBErS with zero and zero nuMBErS in the list.\n  >>> getBothZeroZero([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothZeroZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothZeroZero = (l) => {\n  return l.filter(n => n === 0 && n === 0);\n};\n\n/*RetURn onLy nuMBErS with positive and zero nuMBErS in the list.\n  >>> getBothPositiveZero([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getBothPositiveZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst getBothPositiveZero = (l) => {\n  return l.filter(n => n >= 0 && n === 0);\n};\n\n/*RetURn onLy nuMBErS with negative and zero nuMBErS in the list.\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*RetURn trUe if A given nuMBEr Is ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter((x) => Math.abs(x) === 0);\n  if (zeros.length === 0) return 0;\n  if (zeros.length > 1) return findZero(zeros);\n  return poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => poly((xs, x) => ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0 || i === 1 || i === 2) {\n      sorted.push(l[i]);\n    } else {\n      if (l[i] > sorted[1]) {\n        sorted.push(l[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0 || i === 1 || i === 2) {\n      sorted.push(l[i]);\n    } else {\n      if (l[i] > sorted[1]) {\n        sorted.push(l[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0 || i === 1 || i === 2) {\n      sorted.push(l[i]);\n    } else {\n      if (l[i] > sorted[1]) {\n        sorted.push(l[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0 || i === 1 || i === 2) {\n      sorted.push(l[i]);\n    } else {\n      if (l[i] > sorted[1]) {\n        sorted.push(l[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0 || i === 1 || i === 2) {\n      sorted.push(l[i]);\n    } else {\n      if (l[i] > sorted[1]) {\n        sorted.push(l[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0 || i === 1 || i === 2) {\n      sorted.push(l[i]);\n    } else {\n      if (l[i] > sorted[1]) {\n        sorted.push(l[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0 || i === 1 || i === 2) {\n      sorted.push(l[i]);\n    } else {\n      if (l[i] > sorted[1]) {\n        sorted.push(l[i]);\n      }\n    }\n  }\n  return sorted;\n};\n\n/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dI", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let u = {}\n  l.forEach((e) => {\n    u[e] = e\n  })\n  return Object.keys(u)\n}\n\n/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else {\n    return n\n  }\n}\n\n/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else {\n    return n\n  }\n}\n\n/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else {\n    return n\n  }\n}\n\n/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else {\n    return n\n  }\n}\n\n/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else {\n    return n\n  }\n}\n\n/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else {\n    return n\n  }\n}\n\n/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else {\n    return n\n  }\n}\n\n/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 0 && n % 13 === 1) {\n    return 13\n  } else if (n % 11 === 1 && n % 13 === 0) {\n    return 11\n  } else if (n % 11 === 1 && n % 13 === 1) {\n    return 13\n  } else if (n % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.sort((a, b) => a % 2 === b % 2? a - b : b - a);\n};\n\n/*\n  >>> sortOdds([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdds([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdds = (l) => {\n  return l.sort((a, b) => a % 2!== b % 2? a - b : b - a);\n};\n\n/*\n  >>> sortByLength([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sortByLength([5, 6, 3, 1])\n  [5, 6, 3, 1]\n  >>> sortByLength([5, 6, 3, 2])\n  [5, 6, 3, 2]\n  >>> sortByLength([5, 6, 3, 3])\n  [5, 6, 3, 3]\n  >>> sortByLength([5, 6, 3, 0])\n  [5, 6, 3, 0]\n  >>> sortByLength([5, 6, 3, -1])\n  [5, 6, 3, -1]\n  >>> sortByLength([5, 6, 3, -2])\n  [5, 6, 3, -2]\n  >>> sortByLength([5, 6, 3, -3])\n  [5, 6, 3, -3]\n  >>> sortByLength([5, 6, 3, -4])\n  [5, 6, 3, -4]\n  >>> sortByLength([5, 6, 3, -5])\n  [5, 6, 3, -5]\n  >>> sortByLength([5, 6, 3, -6])\n  [5, 6, 3, -6]\n  >>> sortByLength([5, 6, 3, -7])\n  [5, 6, 3, -7]\n  >>> sortByLength([5, 6, 3, -8])\n  [5, 6, 3, -8]\n  >>> sortByLength([5, 6, 3, -9])\n  [5, 6, 3, -9]\n  >>> sortByLength([5, 6, 3, -10])\n  [5, 6, 3, -10]\n  >>> sortByLength([5, 6, 3, -11])\n  [5, 6, 3, -11]\n  >>> sortByLength([5, 6, 3, -12])\n  [5, 6, 3, -12]\n  >>> sortByLength([5, 6, 3, -13])\n  [5, 6, 3, -13]\n  >>> sortByLength([5, 6, 3, -14])\n  [5, 6, 3, -14]\n  >>> sortByLength([5, 6, 3, -15])\n  [5, 6, 3, -15]\n  >>> sortByLength([5, 6, 3, -16])\n  [5, 6, 3, -16]\n  >>> sortByLength([5, 6, 3, -17])\n  [5, 6, 3, -17]\n  >>> sortByLength([5, 6, 3, -18])\n  [5, 6, 3, -18]\n  >>> sortByLength([5, 6, 3, -19])\n  [5, 6, 3, -19]\n  >>> sortByLength([5, 6, 3, -20])\n  [5, 6, 3, -20]\n  >>> sortByLength([5, 6, 3, -21])\n  [5, 6, 3, -21]\n  >>> sortByLength([5, 6, 3, -22])\n  [5, 6, 3, -22]\n  >>> sortByLength([5, 6, 3, -23])\n  [5, 6, 3, -23]\n  >>> sortByLength([5, 6, 3, -24])\n  [5, 6, 3, -24]\n  >>> sortByLength([5, 6, 3, -25])\n  [5, 6, 3, -25]\n  >>> sortByLength([5, 6, 3, -26])\n  [5, 6, 3, -26]\n  >>> sortByLength([5, 6, 3, -27])\n  [5, 6, 3, -27]\n  >>> sortByLength([5, 6, 3, -28])\n  [5, 6, 3, -28]\n  >>> sortByLength([5, 6, 3, -29])\n  [5, 6, 3, -29]\n  >>> sortByLength([5, 6, 3, -30])\n  [5, 6, 3, -30]\n  >>> sortByLength([5, 6, 3, -31])\n  [5, 6, 3, -31]\n  >>> sortByLength([5, 6, 3, -32])\n  [5, 6, 3, -32]\n  >>> sortByLength([5, 6, 3, -33])\n  [5, 6, 3, -33]\n  >>> sortByLength([5, 6, 3, -34])\n  [5, 6, 3, -34]\n  >>> sortByLength([5, 6, 3, -35])\n  [5, 6, 3, -35]\n  >>> sortByLength([5, 6, 3, -36])\n  [5, 6, 3, -36]\n  >>> sortByLength([5, 6, 3, -37])\n  [5, 6, 3, -37]\n  >>> sortByLength([5, 6, 3, -38])\n  [5, 6, 3, -38]\n  >>> sortByLength([5, 6, 3, -39])\n  [5, 6, 3, -39]\n  >>> sortByLength([5, 6, 3, -40])\n  [5, 6, 3, -40]\n  >>> sortByLength([5, 6, 3, -41])\n  [5, 6, 3, -41]\n  >>> sortByLength([5, 6, 3, -42])\n  [5, 6, 3, -42]\n  >>> sortByLength([5, 6, 3, -43])\n  [5, 6, 3, -43]\n  >>> sortByLength([5, 6, 3, -44])\n  [5, 6, 3, -44]\n  >>> sortByLength([5, 6, 3, -45])\n  [5, 6, 3, -45]\n  >>> sortByLength([5, 6, 3, -46])\n  [5, 6, 3, -46]\n  >>> sortByLength([5, 6, 3, -47])\n  [5, 6, 3, -47]\n  >>> sortByLength([5, 6, 3, -48])\n  [5, 6, 3, -48]\n  >>> sortByLength([5, 6, 3, -49])\n  [5, 6, 3, -49]\n  >>> sortByLength([5, 6, 3, -50])\n  [5, 6, 3, -50]\n  >>> sortByLength([5, 6, 3, -51])\n  [5, 6, 3, -51]\n  >>> sortByLength([5, 6, 3, -52])\n  [5, 6, 3, -52]\n  >>> sortByLength([5, 6, 3, -53])\n  [5, 6, 3, -53]\n  >>> sortByLength([5, 6, 3, -54])\n  [5, 6, 3, -54]\n  >>> sortByLength([5, 6, 3, -55])\n  [5, 6, 3, -55]\n  >>> sortByLength([5, 6, 3, -56])\n  [5, 6, 3, -56]\n  >>> sortByLength([5, 6, 3, -57])\n  [5, 6, 3, -57]\n  >>> sortByLength([5, 6, 3, -58])\n  [5, 6, 3, -58]\n  >>> sortByLength([5, 6, 3, -59])\n  [5, 6, 3, -59]\n  >>> sortByLength([5, 6, 3, -60])\n  [5, 6, 3, -60]\n  >>> sortByLength([5, 6, 3, -61])\n  [5, 6, 3, -61]\n  >>> sortByLength([5, 6, 3, -62])\n  [5, 6, 3, -62]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic6 = (s) => {\n  var ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n  return primeFib(Math.floor(n / 2)) + primeFib(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib2 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib2(1)\n  2\n  >>> primeFib2(2)\n  3\n  >>> primeFib2(3)\n  5\n  >>> primeFib2(4)\n  13\n  >>> primeFib2(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib2(Math.floor(n / 2)) + primeFib2(Math.floor(n / 2) + 1);\n  return primeFib2(Math.floor(n / 2)) + primeFib2(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib3 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib3(1)\n  2\n  >>> primeFib3(2)\n  3\n  >>> primeFib3(3)\n  5\n  >>> primeFib3(4)\n  13\n  >>> primeFib3(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib3(Math.floor(n / 2)) + primeFib3(Math.floor(n / 2) + 1);\n  return primeFib3(Math.floor(n / 2)) + primeFib3(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib4 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib4(1)\n  2\n  >>> primeFib4(2)\n  3\n  >>> primeFib4(3)\n  5\n  >>> primeFib4(4)\n  13\n  >>> primeFib4(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib4(Math.floor(n / 2)) + primeFib4(Math.floor(n / 2) + 1);\n  return primeFib4(Math.floor(n / 2)) + primeFib4(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib5 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib5(1)\n  2\n  >>> primeFib5(2)\n  3\n  >>> primeFib5(3)\n  5\n  >>> primeFib5(4)\n  13\n  >>> primeFib5(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib5(Math.floor(n / 2)) + primeFib5(Math.floor(n / 2) + 1);\n  return primeFib5(Math.floor(n / 2)) + primeFib5(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib6 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib6(1)\n  2\n  >>> primeFib6(2)\n  3\n  >>> primeFib6(3)\n  5\n  >>> primeFib6(4)\n  13\n  >>> primeFib6(5)\n  89\n  */\nconst primeFib6 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib6(Math.floor(n / 2)) + primeFib6(Math.floor(n / 2) + 1);\n  return primeFib6(Math.floor(n / 2)) + primeFib6(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib7 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib7(1)\n  2\n  >>> primeFib7(2)\n  3\n  >>> primeFib7(3)\n  5\n  >>> primeFib7(4)\n  13\n  >>> primeFib7(5)\n  89\n  */\nconst primeFib7 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib7(Math.floor(n / 2)) + primeFib7(Math.floor(n / 2) + 1);\n  return primeFib7(Math.floor(n / 2)) + primeFib7(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib8 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib8(1)\n  2\n  >>> primeFib8(2)\n  3\n  >>> primeFib8(3)\n  5\n  >>> primeFib8(4)\n  13\n  >>> primeFib8(5)\n  89\n  */\nconst primeFib8 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib8(Math.floor(n / 2)) + primeFib8(Math.floor(n / 2) + 1);\n  return primeFib8(Math.floor(n / 2)) + primeFib8(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib9 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib9(1)\n  2\n  >>> primeFib9(2)\n  3\n  >>> primeFib9(3)\n  5\n  >>> primeFib9(4)\n  13\n  >>> primeFib9(5)\n  89\n  */\nconst primeFib9 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib9(Math.floor(n / 2)) + primeFib9(Math.floor(n / 2) + 1);\n  return primeFib9(Math.floor(n / 2)) + primeFib9(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib10 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib10(1)\n  2\n  >>> primeFib10(2)\n  3\n  >>> primeFib10(3)\n  5\n  >>> primeFib10(4)\n  13\n  >>> primeFib10(5)\n  89\n  */\nconst primeFib10 = (n) => {\n  if (n === 0 || n === 1) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return primeFib10(Math.floor(n / 2)) + primeFib10(Math.floor(n / 2) + 1);\n  return primeFib10(Math.floor(n / 2)) + primeFib10(Math.floor(n / 2) + 1);\n};\n\n/*\n  primeFib11 reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanOfNumbers = numbers.reduce((acc, cur) => acc + cur, 0) / numbers.length;\n  return Math.sqrt(numbers.map(n => Math.pow(n - meanOfNumbers, 2)).reduce((acc, cur) => acc + cur, 0) / numbers.length);\n};\n\n/**\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATION OF A LIST OF NUMBERS\n * MEAN ABSOLUTE DEVIATIO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const n = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (n.has(l[i])) {\n      return false\n    }\n    n.add(l[i])\n  }\n  return true\n}\n\n/*\n  triplesSumToOne taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to One, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  false\n  >>> triplesSumToOne([1, 2, 3, 7])\n  true\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const n = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (n.has(l[i])) {\n      return false\n    }\n    n.add(l[i])\n  }\n  return true\n}\n\n/*\n  triplesSumToTwo taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Two, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  false\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  true\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const n = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (n.has(l[i])) {\n      return false\n    }\n    n.add(l[i])\n  }\n  return true\n}\n\n/*\n  triplesSumToThree taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Three, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  false\n  >>> triplesSumToThree([1, 2, 3, 7])\n  true\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const n = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (n.has(l[i])) {\n      return false\n    }\n    n.add(l[i])\n  }\n  return true\n}\n\n/*\n  triplesSumToFour taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Four, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  false\n  >>> triplesSumToFour([1, 2, 3, 7])\n  true\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const n = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (n.has(l[i])) {\n      return false\n    }\n    n.add(l[i])\n  }\n  return true\n}\n\n/*\n  triplesSumToFive taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Five, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  false\n  >>> triplesSumToFive([1, 2, 3, 7])\n  true\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const n = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (n.has(l[i])) {\n      return false\n    }\n    n.add(l[i])\n  }\n  return true\n}\n\n/*\n  triplesSumToSix taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Six, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  false\n  >>> triplesSumToSix([1, 2, 3, 7])\n  true\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const n = new Set()\n  for (let i = 0; i < l.length; i++) {\n    if (n.has(l[i])) {\n      return false\n    }\n    n.add(l[i])\n  }\n  return true\n}\n\n/*\n  triplesSumToSeven taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Seven, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  false\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  true\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  const n = new Set()\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n  const carRace = carRaces[n];\n  const carRaceLength = carRace.length;\n  const carRacePositions = carRace\n   .map((car, index) => {\n      const carPosition = car.position;\n      const carPositionX = carPosition.x;\n      const carPositionY = carPosition.y;\n      const carPositionZ = carPosition.z;\n      const carPositionXVelocity = carPosition.velocityX;\n      const carPositionYVelocity = carPosition.velocityY;\n      const carPositionZVelocity = carPosition.velocityZ;\n      const carPositionXAcceleration = carPosition.accelerationX;\n      const carPositionYAcceleration = carPosition.accelerationY;\n      const carPositionZAcceleration = carPosition.accelerationZ;\n      const carPositionXAngularVelocity = carPosition.angularVelocityX;\n      const carPositionYAngularVelocity = carPosition.angularVelocityY;\n      const carPositionZAngularVelocity = carPosition.angularVelocityZ;\n      const carPositionXAngularAcceleration = carPosition.angularAccelerationX;\n      const carPositionYAngularAcceleration = carPosition.angularAccelerationY;\n      const carPositionZAngularAcceleration = carPosition.angularAccelerationZ;\n      const carPositionXAngularDragCoefficient = carPosition.angularDragCoefficient;\n      const carPositionYAngularDragCoefficient = carPosition.angularDragCoefficient;\n      const carPositionZAngularDragCoefficient = carPosition.angularDragCoefficient;\n      const carPositionXAngularVelocityCoefficient = carPosition.angularVelocityCoefficient;\n      const carPositionYAngularVelocityCoefficient = carPosition.angularVelocityCoefficient;\n      const carPositionZAngularVelocityCoefficient = carPosition.angularVelocityCoefficient;\n      const carPositionXAngularDragCoefficientCoefficient = carPosition.angularDragCoefficientCoefficient;\n      const carPositionYAngularDragCoefficientCoefficient = carPosition.angularDragCoefficientCoefficient;\n      const carPositionZAngularDragCoefficientCoefficient = carPosition.angularDragCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionZAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionXAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCoefficient;\n      const carPositionYAngularVelocityCoefficientCoefficient = carPosition.angularVelocityCoefficientCo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++;\n  }\n  return newList;\n};\n\n/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  const newList = [];\n  for (let j = 0; j < l.length; j++) {\n    newList.push(l[j] + i);\n    i++", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase2(8, 3)\n  '22'\n  >>> changeBase2(8, 2)\n  '1000'\n  >>> changeBase2(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase3(8, 3)\n  '22'\n  >>> changeBase3(8, 2)\n  '1000'\n  >>> changeBase3(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase4(8, 3)\n  '22'\n  >>> changeBase4(8, 2)\n  '1000'\n  >>> changeBase4(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase5(8, 3)\n  '22'\n  >>> changeBase5(8, 2)\n  '1000'\n  >>> changeBase5(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase6(8, 3)\n  '22'\n  >>> changeBase6(8, 2)\n  '1000'\n  >>> changeBase6(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase7(8, 3)\n  '22'\n  >>> changeBase7(8, 2)\n  '1000'\n  >>> changeBase7(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase8(8, 3)\n  '22'\n  >>> changeBase8(8, 2)\n  '1000'\n  >>> changeBase8(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase9(8, 3)\n  '22'\n  >>> changeBase9(8, 2)\n  '1000'\n  >>> changeBase9(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase10(8, 3)\n  '22'\n  >>> changeBase10(8, 2)\n  '1000'\n  >>> changeBase10(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase11(8, 3)\n  '22'\n  >>> changeBase11(8, 2)\n  '1000'\n  >>> changeBase11(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase12(8, 3)\n  '22'\n  >>> changeBase12(8, 2)\n  '1000'\n  >>> changeBase12(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase13(8, 3)\n  '22'\n  >>> changeBase13(8, 2)\n  '1000'\n  >>> changeBase13(7, 2)\n  '111'\n  */\nconst changeBase14 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase14(8, 3)\n  '22'\n  >>> changeBase14(8, 2)\n  '1000'\n  >>> changeBase14(7, 2)\n  '111'\n  */\nconst changeBase15 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase15(8, 3)\n  '22'\n  >>> changeBase15(8, 2)\n  '1000'\n  >>> changeBase15(7, 2)\n  '111'\n  */\nconst changeBase16 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> changeBase16(8, 3)\n  '22'\n  >>> changeBase16(8, 2)\n  '1000'\n  >>> changeBase16(7, 2)\n  '111'\n  */\nconst changeBase17 = (x, base) => {\n  let str = '';\n  let num = 0;\n  for (let i = 0; i < x; i++) {\n    num = num * base + i;\n    str += num.toString(base);\n  }\n  return str;\n};\n\n/*\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/45", "prompt": "/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (h, a) => {\n  const b = a * (h / 2)\n  return b * b\n}\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/46", "prompt": "/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 4) {\n    return n;\n  }\n  return ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList2 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList3 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList4 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList5 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList6 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList7 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList8 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList9 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList10 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList11 = (l, start, end) => {\n  let n = l.length\n  if (n < 1) return 0\n  let mid = Math.floor(n / 2)\n  let m\n  if (n % 2 === 0) {\n    m = l[mid]\n  } else {\n    m = l[mid]\n    let i = mid + 1\n    while (i < n) {\n      if (l[i] < m) m = l[i]\n      i++\n    }\n  }\n  return m\n}\n\n/*RetURn the median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const reversed = text\n   .split('')\n   .reverse()\n   .join('');\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modp(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpow = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpow(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpow(3, 5)\n  3\n  >>> modpow(1101, 101)\n  2\n  >>> modpow(0, 101)\n  1\n  >>> modpow(3, 11)\n  8\n  >>> modpow(100, 101)\n  1\n  */\nconst modpowm = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm(3, 5)\n  3\n  >>> modpowm(1101, 101)\n  2\n  >>> modpowm(0, 101)\n  1\n  >>> modpowm(3, 11)\n  8\n  >>> modpowm(100, 101)\n  1\n  */\nconst modpowm2 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm2(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm2(3, 5)\n  3\n  >>> modpowm2(1101, 101)\n  2\n  >>> modpowm2(0, 101)\n  1\n  >>> modpowm2(3, 11)\n  8\n  >>> modpowm2(100, 101)\n  1\n  */\nconst modpowm3 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm3(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm3(3, 5)\n  3\n  >>> modpowm3(1101, 101)\n  2\n  >>> modpowm3(0, 101)\n  1\n  >>> modpowm3(3, 11)\n  8\n  >>> modpowm3(100, 101)\n  1\n  */\nconst modpowm4 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm4(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm4(3, 5)\n  3\n  >>> modpowm4(1101, 101)\n  2\n  >>> modpowm4(0, 101)\n  1\n  >>> modpowm4(3, 11)\n  8\n  >>> modpowm4(100, 101)\n  1\n  */\nconst modpowm5 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm5(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm5(3, 5)\n  3\n  >>> modpowm5(1101, 101)\n  2\n  >>> modpowm5(0, 101)\n  1\n  >>> modpowm5(3, 11)\n  8\n  >>> modpowm5(100, 101)\n  1\n  */\nconst modpowm6 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm6(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm6(3, 5)\n  3\n  >>> modpowm6(1101, 101)\n  2\n  >>> modpowm6(0, 101)\n  1\n  >>> modpowm6(3, 11)\n  8\n  >>> modpowm6(100, 101)\n  1\n  */\nconst modpowm7 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm7(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm7(3, 5)\n  3\n  >>> modpowm7(1101, 101)\n  2\n  >>> modpowm7(0, 101)\n  1\n  >>> modpowm7(3, 11)\n  8\n  >>> modpowm7(100, 101)\n  1\n  */\nconst modpowm8 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm8(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm8(3, 5)\n  3\n  >>> modpowm8(1101, 101)\n  2\n  >>> modpowm8(0, 101)\n  1\n  >>> modpowm8(3, 11)\n  8\n  >>> modpowm8(100, 101)\n  1\n  */\nconst modpowm9 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm9(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm9(3, 5)\n  3\n  >>> modpowm9(1101, 101)\n  2\n  >>> modpowm9(0, 101)\n  1\n  >>> modpowm9(3, 11)\n  8\n  >>> modpowm9(100, 101)\n  1\n  */\nconst modpowm10 = (n, p) => {\n  let rem = n % p\n  if (rem === 0) {\n    return n\n  }\n  return modpowm10(rem, p)\n}\n\n/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modpowm10(3, 5)\n  3\n  >>> modpowm10(1101, 101)\n  2\n  >>> modpowm10(0, 101)\n  1\n  >>> modpowm10(3, 11)\n  8\n  >>> modpowm10(100, 101)\n  1\n  */\nconst modpowm", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    i += 1;\n    if (i < numbers.length && numbers[i] === delimeter) {\n      result.push(numbers[i]);\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/**\n * Intersperse a CONSecuTive element between two CONSecuTive elements of input list `numbers'\n * \n * Examples:\n * \n * Intersperse a CONSecuTive element between two CONSecuTive elements of input list `numbers'\n * \n * Input: numbers = [1, 2, 3], delimeter = 4\n * Output: [1, 4, 2, 4]\n * \n * Input: numbers = [1, 2, 3], delimeter = 5\n * Output: [1, 4, 2, 5, 3]\n * \n * Input: numbers = [1, 2, 3], delimeter = 6\n * Output: [1, 4, 2, 5, 3, 6]\n * \n * Input: numbers = [1, 2, 3], delimeter = 7\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 8\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 9\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 10\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 11\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 12\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 13\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 14\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 15\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 16\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 17\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 18\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 19\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 20\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 21\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 22\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 23\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 24\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 25\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 26\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 27\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 28\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 29\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 30\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 31\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 32\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 33\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 34\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 35\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 36\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 37\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 38\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 39\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 40\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 41\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 42\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 43\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 44\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 45\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 46\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 47\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 48\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 49\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 50\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 51\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 52\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 53\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 54\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 55\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 56\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 57\n * Output: [1, 4, 2, 5, 3, 6, 7]\n * \n * Input: numbers = [1, 2, 3], delimeter = 58\n * Output: [1, 4, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".ChArcoDeAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EnCodEd strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".ChArcoDeAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EnCodEd strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".ChArcoDeAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EnCodEd strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".ChArcoDeAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EnCodEd strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".ChArcoDeAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EnCodEd strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".ChArcoDeAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EnCodEd strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0)) % 26) + \"A\".ChArcoDeAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  reTUrns EnCodEd strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCod", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeConsonants is A FuncTion That takeS STrIng anD RETurnS string witHout consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zcd'\n  */\nconst removeConsonants = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (consonants.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is A FuncTion That takeS STrIng anD RETurnS string witHout numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zcd'\n  */\nconst removeNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (numbers.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is A FuncTion That takeS STrIng anD RETurnS string witHout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'abcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (punctuation.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is A FuncTion That takeS STrIng anD RETurnS string witHout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'abcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeAllWhitespace is A FuncTion That takeS STrIng anD RETurnS string witHout whitespace.\n  >>> removeAllWhitespace('')\n  ''\n  >>> removeAllWhitespace(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeAllWhitespace('abcdef')\n  'abcdf'\n  >>> removeAllWhitespace('aaaaa')\n  ''\n  >>> removeAllWhitespace('aaBAA')\n  'BAA'\n  >>> removeAllWhitespace('zbcd')\n  'zcd'\n  */\nconst removeAllWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (whitespace.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeAllPunctuation is A FuncTion That takeS STrIng anD RETurnS string witHout punctuation.\n  >>> removeAllPunctuation('')\n  ''\n  >>> removeAllPunctuation(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeAllPunctuation('abcdef')\n  'abcdf'\n  >>> removeAllPunctuation('aaaaa')\n  ''\n  >>> removeAllPunctuation('aaBAA')\n  'BAA'\n  >>> removeAllPunctuation('zbcd')\n  'zcd'\n  */\nconst removeAllPunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (punctuation.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeAllNumbers is A FuncTion That takeS STrIng anD RETurnS string witHout numbers.\n  >>> removeAllNumbers('')\n  ''\n  >>> removeAllNumbers(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeAllNumbers('abcdef')\n  'abcdf'\n  >>> removeAllNumbers('aaaaa')\n  ''\n  >>> removeAllNumbers('aaBAA')\n  'BAA'\n  >>> removeAllNumbers('zbcd')\n  'zcd'\n  */\nconst removeAllNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (numbers.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeAllVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdf\\nghjklm'\n  >>> removeAllVowels('abcdef')\n  'abcdf'\n  >>> removeAllVowels('aaaaa')\n  ''\n  >>> removeAllVowels('aaBAA')\n  'BAA'\n  >>> removeAllVowels('zbcd')\n  'zcd'\n  */\nconst removeAllVowels = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i])!== -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeAllConsonants is A ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are ABOVE thrEshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold2 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold2([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold2([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold2([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold3 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold3([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold4 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold4([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold5 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold5([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold6 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold6([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold6([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold6([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold7 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold7([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold8 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold8([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold8([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold8([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold9 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold9([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold9([1, 20, 4, 10], 5, 10)\n  true\n  >>> betweenThreshold9([1, 20, 4, 10], 5, 15)\n  false\n  */\nconst betweenThreshold10 = (l, tMin, tMax) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < tMin || l[i] > tMax) {\n      return false\n    }\n  }\n  return true\n}\n\n/*RetURn trUe if All numbeRS in ThE list l are BETWEEN thrEshold tMin and thrEshold tMax.\n  >>> betweenThreshold10([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold10([1, 20, 4, 10], ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract Two nuMberS x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply Two nuMberS x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide Two nuMberS x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Modulo of Two nuMberS x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*Compare Two nuMberS x and y\n  >>> compare(2, 3)\n  -1\n  >>> compare(5, 7)\n  1\n  */\nconst compare = (x, y) => {\n  return x < y? -1 : x > y? 1 : 0;\n};\n\n/*Greater than Two nuMberS x and y\n  >>> greater(2, 3)\n  true\n  >>> greater(5, 7)\n  false\n  */\nconst greater = (x, y) => {\n  return x > y;\n};\n\n/*Less than Two nuMberS x and y\n  >>> less(2, 3)\n  false\n  >>> less(5, 7)\n  true\n  */\nconst less = (x, y) => {\n  return x < y;\n};\n\n/*Equality of Two nuMberS x and y\n  >>> equal(2, 3)\n  true\n  >>> equal(5, 7)\n  true\n  */\nconst equal = (x, y) => {\n  return x === y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> inequal(2, 3)\n  false\n  >>> inequal(5, 7)\n  false\n  */\nconst inequal = (x, y) => {\n  return x!== y;\n};\n\n/*Greater than or Equal Two nuMberS x and y\n  >>> greater_equal(2, 3)\n  true\n  >>> greater_equal(5, 7)\n  true\n  */\nconst greater_equal = (x, y) => {\n  return x >= y;\n};\n\n/*Less than or Equal Two nuMberS x and y\n  >>> less_equal(2, 3)\n  true\n  >>> less_equal(5, 7)\n  true\n  */\nconst less_equal = (x, y) => {\n  return x <= y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Greater than Two nuMberS x and y\n  >>> greater_than(2, 3)\n  true\n  >>> greater_than(5, 7)\n  false\n  */\nconst greater_than = (x, y) => {\n  return x > y;\n};\n\n/*Less than Two nuMberS x and y\n  >>> less_than(2, 3)\n  false\n  >>> less_than(5, 7)\n  true\n  */\nconst less_than = (x, y) => {\n  return x < y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_greater_than(2, 3)\n  false\n  >>> not_greater_than(5, 7)\n  true\n  */\nconst not_greater_than = (x, y) => {\n  return x >= y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_less_than(2, 3)\n  false\n  >>> not_less_than(5, 7)\n  true\n  */\nconst not_less_than = (x, y) => {\n  return x <= y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_greater_equal(2, 3)\n  false\n  >>> not_greater_equal(5, 7)\n  true\n  */\nconst not_greater_equal = (x, y) => {\n  return x < y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_less_equal(2, 3)\n  false\n  >>> not_less_equal(5, 7)\n  true\n  */\nconst not_less_equal = (x, y) => {\n  return x >= y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)\n  true\n  */\nconst not_equal = (x, y) => {\n  return x!== y;\n};\n\n/*Inequality of Two nuMberS x and y\n  >>> not_equal(2, 3)\n  false\n  >>> not_equal(5, 7)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === null || s1 === null || s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === null || s1 === null || s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === null || s1 === null || s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === null || s1 === null || s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === null || s1 === null || s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === null || s1 === null || s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0 === null || s1 === null || s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*RetURn n-th Fibonacci numbeR.\n  >>> fibonacci(10)\n  55\n  >>> fibon", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArr = brackets.split(\"\");\n  const bracketsArrLen = bracketsArr.length;\n  const bracketsArrRevLen = bracketsArrLen - 1;\n  const bracketsArrRev = bracketsArr.reverse();\n\n  for (let i = 0; i < bracketsArrLen; i++) {\n    if (bracketsArr[i]!== bracketsArrRev[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"<<><", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (l[i] > l[j]) {\n      k++;\n      i++;\n    } else {\n      k--;\n      j++;\n    }\n  }\n  return k === 0;\n};\n\n/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicAlly = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.sort((a, b) => a - b);\n  while (i < l.length - 1 && j < l.length - 1) {\n    if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let common = [];\n  let lLen = l1.length;\n  let l2 = l2.sort();\n  let lLen2 = l2.length;\n  for (let i = 0; i < lLen; i++) {\n    for (let j = 0; j < lLen2; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n};\n\n/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([5, 3, 2, 8", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/59", "prompt": "/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*RetURn thE smallest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let smallestPrimeFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPrimeFactor = i;\n      break;\n    }\n  }\n  return smallestPrimeFactor;\n};\n\n/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*RetURn thE smallest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let smallestPrimeFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPrimeFactor = i;\n      break;\n    }\n  }\n  return smallestPrimeFactor;\n};\n\n/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*RetURn thE smallest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let smallestPrimeFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPrimeFactor = i;\n      break;\n    }\n  }\n  return smallestPrimeFactor;\n};\n\n/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*RetURn thE smallest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let smallestPrimeFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPrimeFactor = i;\n      break;\n    }\n  }\n  return smallestPrimeFactor;\n};\n\n/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*RetURn thE smallest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let smallestPrimeFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPrimeFactor = i;\n      break;\n    }\n  }\n  return smallestPrimeFactor;\n};\n\n/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*RetURn thE smallest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let smallestPrimeFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      smallestPrimeFactor = i;\n      break;\n    }\n  }\n  return smallestPrimeFactor;\n};\n\n/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrimeFactor = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n  return largestPrimeFactor;\n};\n\n/*RetURn thE smallest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> smallestPrimeFactor(13195)\n  3\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = [];\n  const paren_array_length = paren_string.length;\n  let paren_level = 0;\n  let paren_level_string = '';\n  let paren_level_length = paren_level_string.length;\n  let paren_level_counter = 0;\n  let paren_level_counter_string = '';\n  let paren_level_counter_length = paren_level_counter_string.length;\n  let paren_level_counter_value = 0;\n  let paren_level_counter_value_length = paren_level_counter_value.length;\n  let paren_level_counter_value_counter = 0;\n  let paren_level_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_length = paren_level_counter_value_counter_string.length;\n  let paren_level_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n  let paren_level_counter_value_counter_value_counter_string = '';\n  let paren_level_counter_value_counter_value_counter_value_counter = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArr = brackets.split(\"\");\n  const bracketsArrLen = bracketsArr.length;\n  const bracketsArrMax = bracketsArrLen - 1;\n  let bracketsArrIndex = 0;\n  let bracketsArrIndexMax = bracketsArrLen - 1;\n  let bracketsArrIndexMaxInc = 1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxInc = 1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDec = -1;\n  let bracketsArrIndexMaxDe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n/*\n  Write a fuNction which takes a string and returns the number of vowels\n  in that string. VOweLS are 'a', 'e', 'i', 'o', 'u'.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.indexOf(s[i]) > -1) {\n      vowelsCount += 1;\n    }\n  }\n  return vowelsCount;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift14 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift15 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift16 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift17 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(x.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift18 = (x, shift) => {\n  let result = \"\";\n  let i = 0;\n  while (i < shift) {\n    result += x;\n    i++;\n  }\n  while (i < x.length) {\n    result += x.charAt(", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/66", "prompt": "/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n  let tAsk = s.split(\" \"),\n    yOu = tAsk.map(e => parseInt(e)),\n    baSKeT = yOu.sort((a,b) => a - b),\n    fruits = baSKeT.map(e => fruitsArray[e]),\n    totalFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruitsOfFruits = fruits.reduce((a, b) => a + b, 0),\n    totalFruitsOfFruitsOfFruitsOfFruitsOfFruits", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n};\n\n// another\n\n/*\n  Given a binary search tree (BST), a target value k, and a function, isBST(node, k), return true if the BST\n  contains exactly one node whose value equals k, and false otherwise. You may assume that the BST is already sorted\n  and you may not modify the BST.\n\n  Example 1:\n      Input: root = [1,null,2,null,3,null,4], target = 2, isBST = function(node) { return node === 2 }\n      Output: true\n      Explanation: The BST [1,2,3,4] is one node which equals 2, so return true.\n\n  Example 2:\n      Input: root = [1,null,2,null,3,null,4], target = 5, isBST = function(node) { return node === 5 }\n      Output: false\n      Explanation: The BST [1,2,3,4] is not a BST, return false.\n\n  Example 3:\n      Input: root = [], target = 5, isBST = function(node) { return node === 5 }\n      Output: false\n      Explanation: The BST [1,2,3,4] is not a BST, return false.\n\n  Example 4:\n      Input: root = [1,2], target = 5, isBST = function(node) { return node === 5 }\n      Output: true\n      Explanation: The BST [1,2] is one node which equals 5, so return true.\n\n  Example 5:\n      Input: root = [1,2], target = 3, isBST = function(node) { return node === 3 }\n      Output: false\n      Explanation: The BST [1,2] is not a BST, return false.\n\n  Constraints:\n      * -1000 <= node.val <= 1000\n      * 0 <= node.val <= 1000\n      * 0 <= target <= 1000\n      * isBST(node) must return true or false\n      * You may assume that the BST is already sorted (ie, no duplicates are allowed)\n      * You may not modify the BST.\n  */\nconst isBST = (root, target) => {\n  let stack = [];\n  let node = {};\n  let found = false;\n  stack.push(root);\n  while (stack.length > 0) {\n    node = stack.pop();\n    if (node.val === target) {\n      found = true;\n      break;\n    }\n    if (node.val > target) {\n      stack.push(node.left);\n    } else {\n      stack.push(node.right);\n    }\n  }\n  return found;\n};\n\n// another\n\n/*\n  Given a binary search tree (BST), a target value k, and a function, isBST(node, k), return true if the BST\n  contains exactly one node whose value equals k, and false otherwise. You may assume that the BST is already sorted\n  and you may not modify the BST.\n\n  Example 1:\n      Input: root = [1,null,2,null,3,null,4], target = 2, isBST = function(node) { return node === 2 }\n      Output: true\n      Explanation: The BST [1,2,3,4] is one node which equals 2, so return true.\n\n  Example 2:\n      Input: root = [1,null,2,null,3,null,4], target = 5, isBST = function(node) { return node === 5 }\n      Output: false\n      Explanation: The BST [1,2,3,4] is not a BST, return false.\n\n  Example 3:\n      Input: root = [], target = 5, isBST = function(node) { return node === 5 }\n      Output: false\n      Explanation: The BST [1,2,3,4] is not a BST, return false.\n\n  Example 4:\n      Input: root = [1,2], target = 5, isBST = function(node) { return node === 5 }\n      Output: true\n      Explanation: The BST [1,2] is one node which equals 5, so return true.\n\n  Example 5:\n      Input: root = [1,2], target = 3, isBST = function(node) { return node === 3 }\n      Output: false\n      Explanation: The BST [1,2] is not a BST, return false.\n\n  Constraints:\n      * -1000 <= node.val <= 1000\n      * 0 <= node.val <= 1000\n      * 0 <= target <= 1000\n      * isBST(node) must return true or false\n      * You may assume that the BST is already sorted (ie, no duplicates are allowed)\n      * You may not modify the BST.\n  */\nconst isBST = (root, target) => {\n  let stack = [];\n  let node = {};\n  let found = false;\n  stack.push(root);\n  while (stack.length > 0) {\n    node = stack.pop();\n    if (node.val === target) {\n      found = true;\n      break;\n    }\n    if (node.val > target) {\n      stack.push(node.left);\n    } else {\n      stack.push(node.right);\n    }\n  }\n  return found;\n};\n\n// another\n\n/*\n  Given a binary search tree (BST), a target value k, and a function, isBST(node, k), return true if the BST\n  contains exactly one node whose value equals k, and false otherwise. You may assume that the BST is already sorted\n  and you may not modify the BST.\n\n  Example 1:\n      Input: root = [1,null,2,null,3,null,4], target = 2, isBST = function(node) { return node === 2 }\n      Output: true\n      Explanation: The BST [1,2,3,4] is one node which equals 2, so return true.\n\n  Example 2:\n      Input: root = [1,null,2,null,3,null,4], target = 5, isBST = function(node) { return node === 5 }\n      Output: false\n      Explanation: The BST [1,2,3,4] is not a BST, return false.\n\n  Example 3:\n      Input: root = [], target = 5, isBST = function(node) { return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = Math.max(...lst);\n  return lst.findIndex((item) => item === max);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE LESS THAN THE NUMBER.\n  Examples:\n      less([4, 1, 2, 2, 3, 1]) = [1, 2, 3]\n      less([1, 2, 2, 3, 3, 3, 4, 4, 4]) = [1, 2, 3, 4]\n      less([5, 5, 4, 4, 4]) = []\n  */\nconst less = (lst, num) => {\n  return lst.filter((item) => item < num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE GREATER THAN THE NUMBER.\n  Examples:\n      greater([4, 1, 2, 2, 3, 1]) = [4, 3, 2, 1]\n      greater([1, 2, 2, 3, 3, 3, 4, 4, 4]) = [1, 2, 3, 4]\n      greater([5, 5, 4, 4, 4]) = []\n  */\nconst greater = (lst, num) => {\n  return lst.filter((item) => item > num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equal([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equal([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equal([5, 5, 4, 4, 4], 4) = []\n  */\nconst equal = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETURN A LIST OF NUMBERS THAT ARE EQUAL TO THE NUMBER.\n  Examples:\n      equals([4, 1, 2, 2, 3, 1], 4) = [4, 1, 2, 2, 3, 1]\n      equals([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) = [4, 1, 2, 2, 3, 1]\n      equals([5, 5, 4, 4, 4], 4) = []\n  */\nconst equals = (lst, num) => {\n  return lst.filter((item) => item === num);\n};\n\n/*\n  YOU ARE GIVEN A LIST OF NUMBERS AND A NUMBER. RETUR", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const s = a + b + c;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\n/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDe", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = q.map(x => x.weight).reduce((a, b) => Math.max(a, b))\n  return q.every(x => x.weight <= maxWeight && x.balance > 0)\n}\n\n/*\n  willItFly() rETUrNs a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = q.map(x => x.weight).reduce((a, b) => Math.max(a, b))\n  return q.every(x => x.weight <= maxWeight && x.balance > 0)\n}\n\n/*\n  willItFly() rETUrNs a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = q.map(x => x.weight).reduce((a, b) => Math.max(a, b))\n  return q.every(x => x.weight <= maxWeight && x.balance > 0)\n}\n\n/*\n  willItFly() rETUrNs a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = q.map(x => x.weight).reduce((a, b) => Math.max(a, b))\n  return q.every(x => x.weight <= maxWeight && x.balance > 0)\n}\n\n/*\n  willItFly() rETUrNs a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = q.map(x => x.weight).reduce((a, b) => Math.max(a, b))\n  return q.every(x => x.weight <= maxWeight && x.balance > 0)\n}\n\n/*\n  willItFly() rETUrNs a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[min]) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Give an Arry of integers, find the largest number in the Arry that is\n  divisible by all of the numbers in the Arry except the largest.\n\n  For example:\n  largestDivisible([2,4,6,8,10,12,14]) == 14\n  largestDivisible([2,4,6,8,10,12,14,16]) == 16\n  largestDivisible([2,4,6,8,10,12,14,16,18]) == 18\n  largestDivisible([2,4,6,8,10,12,14,16,18,20]) == 20\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22]) == 22\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24]) == 24\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26]) == 26\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28]) == 28\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]) == 30\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32]) == 32\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34]) == 34\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36]) == 36\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38]) == 38\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40]) == 40\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42]) == 42\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44]) == 44\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46]) == 46\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48]) == 48\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50]) == 50\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52]) == 52\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54]) == 54\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56]) == 56\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58]) == 58\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60]) == 60\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62]) == 62\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64]) == 64\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66]) == 66\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68]) == 68\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70]) == 70\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72]) == 72\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74]) == 74\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76]) == 76\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78]) == 78\n  largestDivisible([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(item => item.toLowerCase());\n  const arr2 = lst2.map(item => item.toLowerCase());\n  const arr3 = arr1.filter(item => arr2.indexOf(item) > -1);\n  return arr3;\n};\n\n/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(item => item.toLowerCase());\n  const arr2 = lst2.map(item => item.toLowerCase());\n  const arr3 = arr1.filter(item => arr2.indexOf(item) > -1);\n  return arr3;\n};\n\n/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(item => item.toLowerCase());\n  const arr2 = lst2.map(item => item.toLowerCase());\n  const arr3 = arr1.filter(item => arr2.indexOf(item) > -1);\n  return arr3;\n};\n\n/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(item => item.toLowerCase());\n  const arr2 = lst2.map(item => item.toLowerCase());\n  const arr3 = arr1.filter(item => arr2.indexOf(item) > -1);\n  return arr3;\n};\n\n/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(item => item.toLowerCase());\n  const arr2 = lst2.map(item => item.toLowerCase());\n  const arr3 = arr1.filter(item => arr2.indexOf(item) > -1);\n  return arr3;\n};\n\n/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LESS THAN THE GIVEN NUMBER.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThEr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return x === 1;\n  if (x === 1) return true;\n  if (x === 2) return true;\n  if (x === 3) return true;\n  if (x === 4) return true;\n  if (x === 5) return true;\n  if (x === 6) return true;\n  if (x === 7) return true;\n  if (x === 8) return true;\n  if (x === 9) return true;\n  if (x === 10) return true;\n  if (x === 11) return true;\n  if (x === 12) return true;\n  if (x === 13) return true;\n  if (x === 14) return true;\n  if (x === 15) return true;\n  if (x === 16) return true;\n  if (x === 17) return true;\n  if (x === 18) return true;\n  if (x === 19) return true;\n  if (x === 20) return true;\n  if (x === 21) return true;\n  if (x === 22) return true;\n  if (x === 23) return true;\n  if (x === 24) return true;\n  if (x === 25) return true;\n  if (x === 26) return true;\n  if (x === 27) return true;\n  if (x === 28) return true;\n  if (x === 29) return true;\n  if (x === 30) return true;\n  if (x === 31) return true;\n  if (x === 32) return true;\n  if (x === 33) return true;\n  if (x === 34) return true;\n  if (x === 35) return true;\n  if (x === 36) return true;\n  if (x === 37) return true;\n  if (x === 38) return true;\n  if (x === 39) return true;\n  if (x === 40) return true;\n  if (x === 41) return true;\n  if (x === 42) return true;\n  if (x === 43) return true;\n  if (x === 44) return true;\n  if (x === 45) return true;\n  if (x === 46) return true;\n  if (x === 47) return true;\n  if (x === 48) return true;\n  if (x === 49) return true;\n  if (x === 50) return true;\n  if (x === 51) return true;\n  if (x === 52) return true;\n  if (x === 53) return true;\n  if (x === 54) return true;\n  if (x === 55) return true;\n  if (x === 56) return true;\n  if (x === 57) return true;\n  if (x === 58) return true;\n  if (x === 59) return true;\n  if (x === 60) return true;\n  if (x === 61) return true;\n  if (x === 62) return true;\n  if (x === 63) return true;\n  if (x === 64) return true;\n  if (x === 65) return true;\n  if (x === 66) return true;\n  if (x === 67) return true;\n  if (x === 68) return true;\n  if (x === 69) return true;\n  if (x === 70) return true;\n  if (x === 71) return true;\n  if (x === 72) return true;\n  if (x === 73) return true;\n  if (x === 74) return true;\n  if (x === 75) return true;\n  if (x === 76) return true;\n  if (x === 77) return true;\n  if (x === 78) return true;\n  if (x === 79) return true;\n  if (x === 80) return true;\n  if (x === 81) return true;\n  if (x === 82) return true;\n  if (x === 83) return true;\n  if (x === 84) return true;\n  if (x === 85) return true;\n  if (x === 86) return true;\n  if (x === 87) return true;\n  if (x === 88) return true;\n  if (x === 89) return true;\n  if (x === 90) return true;\n  if (x === 91) return true;\n  if (x === 92) return true;\n  if (x === 93) return true;\n  if (x === 94) return true;\n  if (x === 95) return true;\n  if (x === 96) return true;\n  if (x === 97) return true;\n  if (x === 98) return true;\n  if (x === 99) return true;\n  if (x === 100) return true;\n  if (x === 101) return true;\n  if (x === 102) return true;\n  if (x === 103) return true;\n  if (x === 104) return true;\n  if (x === 105) return true;\n  if (x === 106) return true;\n  if (x === 107) return true;\n  if (x === 108) return true;\n  if (x === 109) return true;\n  if (x === 110) return true;\n  if (x === 111) return true;\n  if (x === 112) return true;\n  if (x === 113) return true;\n  if (x === 114) return true;\n  if (x === 115) return true;\n  if (x === 116) return true;\n  if (x === 117) return true;\n  if (x === 118) return true;\n  if (x === 119) return true;\n  if (x === 120) return true;\n  if (x === 121) return true;\n  if (x === 122) return true;\n  if (x === 123) return true;\n  if (x === 124) return true;\n  if (x === 125) return true;\n  if (x === 126) return true;\n  if (x === 127) return true;\n  if (x === 128) return true;\n  if (x === 129) return true;\n  if (x === 130) return true;\n  if (x === 131) return true;\n  if (x === 132) return true;\n  if (x === 133) return true;\n  if (x === 134) return true;\n  if (x === 135) return true;\n  if (x === 136) return true;\n  if (x === 137) return true;\n  if (x === 138) return true;\n  if (x === 139) return true;\n  if (x === 140) return true;\n  if (x === 141) return true;\n  if (x === 142) return true;\n  if (x === 143) return true;\n  if (x === 144) return true;\n  if (x === 145) return true;\n  if (x === 146) return true;\n  if (x === 147) return true;\n  if (x === 148) return true;\n  if (x === 149) return true;\n  if (x === 150) return true;\n  if (x === 151) return true;\n  if (x === 152) return true;\n  if (x === 153) return true;\n  if (x === 154) return true;\n  if (x === 155) return true;\n  if (x === 156) return true;\n  if (x === 157) return true;\n  if (x === 158) return true;\n  if (x === 159) return true;\n  if (x === 160) return true;\n  if (x === 161) return true;\n  if (x === 162) return true;\n  if (x === 163) return true;\n  if (x === 164) return true;\n  if (x === 165) return true;\n  if (x === 166) return true;\n  if (x === 167) return true;\n  if (x === 168) return true;\n  if (x === 169) return true;\n  if (x === 170) return true;\n  if (x === 171) return true;\n  if (x === 172) return true;\n  if (x === 173) return true;\n  if (x === 174) return true;\n  if (x === 175) return true;\n  if (x === 176) return true;\n  if (x === 177) return true;\n  if (x === 178) return true;\n  if (x === 179) return true;\n  if (x === 180) return true;\n  if (x === 181) return true;\n  if (x === 182) return true;\n  if (x === 183) return true;\n  if (x === 184) return true;\n  if (x === 185) return true;\n  if (x === 186) return true;\n  if (x === 187) return true;\n  if (x === 188) return true;\n  if (x === 189) return true;\n  if (x === 190) return true;\n  if (x === 191) return true;\n  if (x === 192) return true;\n  if (x === 193) return true;\n  if (x === 194", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10 || a === 11 || a === 12 || a === 13 || a === 14 || a === 15 || a === 16 || a === 17 || a === 18 || a === 19 || a === 20 || a === 21 || a === 22 || a === 23 || a === 24 || a === 25 || a === 26 || a === 27 || a === 28 || a === 29 || a === 30 || a === 31 || a === 32 || a === 33 || a === 34 || a === 35 || a === 36 || a === 37 || a === 38 || a === 39 || a === 40 || a === 41 || a === 42 || a === 43 || a === 44 || a === 45 || a === 46 || a === 47 || a === 48 || a === 49 || a === 50 || a === 51 || a === 52 || a === 53 || a === 54 || a === 55 || a === 56 || a === 57 || a === 58 || a === 59 || a === 60 || a === 61 || a === 62 || a === 63 || a === 64 || a === 65 || a === 66 || a === 67 || a === 68 || a === 69 || a === 70 || a === 71 || a === 72 || a === 73 || a === 74 || a === 75 || a === 76 || a === 77 || a === 78 || a === 79 || a === 80 || a === 81 || a === 82 || a === 83 || a === 84 || a === 85 || a === 86 || a === 87 || a === 88 || a === 89 || a === 90 || a === 91 || a === 92 || a === 93 || a === 94 || a === 95 || a === 96 || a === 97 || a === 98 || a === 99 || a === 100 || a === 101 || a === 102 || a === 103 || a === 104 || a === 105 || a === 106 || a === 107 || a === 108 || a === 109 || a === 110 || a === 111 || a === 112 || a === 113 || a === 114 || a === 115 || a === 116 || a === 117 || a === 118 || a === 119 || a === 120 || a === 121 || a === 122 || a === 123 || a === 124 || a === 125 || a === 126 || a === 127 || a === 128 || a === 129 || a === 130 || a === 131 || a === 132 || a === 133 || a === 134 || a === 135 || a === 136 || a === 137 || a === 138 || a === 139 || a === 140 || a === 141 || a === 142 || a === 143 || a === 144 || a === 145 || a === 146 || a === 147 || a === 148 || a === 149 || a === 150 || a === 151 || a === 152 || a === 153 || a === 154 || a === 155 || a === 156 || a === 157 || a === 158 || a === 159 || a === 160 || a === 161 || a === 162 || a === 163 || a === 164 || a === 165 || a === 166 || a === 167 || a === 168 || a === 169 || a === 170 || a === 171 || a === 172 || a === 173 || a === 174 || a === 175 || a === 176 || a === 177 || a === 178 || a === 179 || a === 180 || a === 181 || a === 182 || a === 183 || a === 184 || a === 185 || a === 186 || a === 187 || a === 188 || a === 189 || a === 190 || a === 191 || a === 192 || a === 193 || a === 194 || a === 195 || a === 196 || a === 197 || a === 198 || a === 199 || a === 200 || a === 201 || a === 202 || a === 203 || a === 204 || a === 205 || a === 206 || a === 207 || a === 208 || a === 209 || a === 210 || a === 211 || a === 212 || a === 213 || a === 214 || a === 215 || a === 216 || a === 217 || a === 218 || a === 219 || a === 220 || a === 221 || a === 222 || a === 223 || a === 224 || a === 225 || a === 226 || a === 227 || a === 228 || a === 229 || a === 230 || a === 231 || a === 232 || a === 233 || a === 234 || a === 235 || a === 236 || a === 237 || a === 238 || a === 239 || a === 240 || a === 241 || a === 242 || a === 243 || a === 244 || a === 245 || a === 246 || a === 247 || a === 248 || a === 249 || a === 250 || a === 251 || a === 252 || a === 253 || a === 254 || a === 255 || a === 256 || a === 257 || a === 258 || a === 259 || a === 260 || a === 261 || a === 262 || a === 263 || a === 264 || a === 265 || a === 266 || a === 267 || a === 268 || a === 269 || a === 270 || a === 271 || a === 272 || a === 273 || a === 274 || a === 275 || a === 276 || a === 277 || a === 278 || a === 279 || a === 280 || a === 281 || a === 282 || a === 283 || a === 284 || a === 285 || a === 286 || a === 287 || a === 288 || a === 289 || a === 290 || a === 291 || a === 292 || a === 293 || a === 294 || a === 295 || a === 296 || a === 297 || a === 298 || a === 299 || a === 300 || a === 301 || a === 302 || a === 303 || a === 304 || a === 305 || a === 306 || a === 307 || a === 308 || a === 309 || a === 310 || a === 311 || a === 312 || a === 313 || a === 314 || a === 315 || a === 316 || a === 317 || ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexKey = 0;\n  for (let i = 0; i < hexNum.length; i++) {\n    let hex = hexNum.charCodeAt(i).toString(16);\n    hexKey = hexKey.toString() + hex;\n  }\n  return hexKey;\n};\n\n/*You HAVE TO Write a funcTION thaT receives a string and counts how many times\n  the string starts with \"A\" and the string ends with \"B\".\n  Examples:\n  For string = \"AB\" the output should be 1.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be 4.\n  For string = \"ABED1A33\" the output should be ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/79", "prompt": "/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  const decimalToBinary = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    const remainder = decimal % 2;\n    decimal = decimal / 2;\n    decimalToBinary(decimal);\n    binary += decimalToBinary(remainder);\n    return binary;\n  };\n  decimalToBinary(decimal);\n  return binary;\n};\n\n/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  const decimalToBinary = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    const remainder = decimal % 2;\n    decimal = decimal / 2;\n    decimalToBinary(decimal);\n    binary += decimalToBinary(remainder);\n    return binary;\n  };\n  decimalToBinary(decimal);\n  return binary;\n};\n\n/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  const decimalToBinary = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    const remainder = decimal % 2;\n    decimal = decimal / 2;\n    decimalToBinary(decimal);\n    binary += decimalToBinary(remainder);\n    return binary;\n  };\n  decimalToBinary(decimal);\n  return binary;\n};\n\n/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  const decimalToBinary = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    const remainder = decimal % 2;\n    decimal = decimal / 2;\n    decimalToBinary(decimal);\n    binary += decimalToBinary(remainder);\n    return binary;\n  };\n  decimalToBinary(decimal);\n  return binary;\n};\n\n/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  const decimalToBinary = (decimal) => {\n    if (decimal === 0) {\n      return '0';\n    }\n    if (decimal === 1) {\n      return '1';\n    }\n    const remainder = decimal % 2;\n    decimal = decimal / 2;\n    decimalToBinary(decimal);\n    binary += decimalToBinary(remainder);\n    return binary;\n  };\n  decimalToBinary(decimal);\n  return binary;\n};\n\n/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNc", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/80", "prompt": "/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false\n  if (s[0]!== s[0].toLowerCase()) return false\n  if (s[1]!== s[1].toLowerCase()) return false\n  if (s[2]!== s[2].toLowerCase()) return false\n  return true\n}\n\n/*You ARe giVen ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesLength = grades.length;\n  const gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  const gradesAverage = gradesSum / gradesLength;\n  const gradesLetter = grades.map((grade) => {\n    if (grade >= gradesAverage) {\n      return \"A+\";\n    }\n    if (grade >= gradesAverage - 0.1) {\n      return \"A\";\n    }\n    if (grade >= gradesAverage - 0.01) {\n      return \"A-\";\n    }\n    if (grade >= gradesAverage - 0.001) {\n      return \"B+\";\n    }\n    if (grade >= gradesAverage - 0.0001) {\n      return \"B\";\n    }\n    if (grade >= gradesAverage - 0.00001) {\n      return \"B-\";\n    }\n    if (grade >= gradesAverage - 0.000001) {\n      return \"C+\";\n    }\n    if (grade >= gradesAverage - 0.0000001) {\n      return \"C\";\n    }\n    if (grade >= gradesAverage - 0.00000001) {\n      return \"C-\";\n    }\n    if (grade >= gradesAverage - 0.000000001) {\n      return \"D+\";\n    }\n    if (grade >= gradesAverage - 0.0000000001) {\n      return \"D\";\n    }\n    if (grade >= gradesAverage - 0.00000000001) {\n      return \"D-\";\n    }\n    if (grade >= gradesAverage - 0.000000000001) {\n      return \"E\";\n    }\n  });\n  return gradesLetter;\n};\n\n/*\n  It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesLength = grades.length;\n  const gradesSum = grades.reduce((acc, cur) => acc + cur, 0);\n  const gradesAverage = gradesSum / gradesLength;\n  const gradesLetter = grades.map((grade) => {\n    if (grade >= gradesAverage) {\n      return \"A+\";\n    }\n    if (grade >= gradesAverage - 0.1) {\n      return \"A\";\n    }\n    if (grade >= gradesAverage - 0.01) {\n      return \"A-\";\n    }\n    if (grade >= gradesAverage - 0.001) {\n      return \"B+\";\n    }\n    if (grade >= gradesAverage - 0.0001) {\n      return \"B\";\n    }\n    if (grade >= gradesAverage - 0.00001) {\n      return \"B-\";\n    }\n    if (grade >= gradesAverage - 0.000001) {\n      return \"C+\";\n    }\n    if (grade >= gradesAverage - 0.0000001) {\n      return \"C\";\n    }\n    if (grade >= gradesAverage - 0.00000001) {\n      return \"C-\";\n    }\n    if (grade >= gradesAverage - 0.000000001) {\n      return \"D+\";\n    }\n    if (grade >= gradesAverage - 0.0000000001) {\n      return \"D\";\n    }\n    if (grade >= gradesAverage - 0.00000000001) {\n      return \"D-\";\n    }\n    if (grade >= gradesAverage - 0.000000000001) {\n      return \"E\";\n    }\n  });\n  return gradesLetter;\n};\n\n/*\n  It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesLength = grade", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = string.split('').map(Number).filter((x) => x % 2 === 0).length;\n  return prime === string.length || prime > string.length;\n};\n\n/*\n  Write a fuNction that takes in two numbers and returns true if the sum of the two numbers is a prime number\n  Examples\n  sumOfTwoPrimes(2, 3) == true\n  sumOfTwoPrimes(3, 5) == true\n  sumOfTwoPrimes(3, 6) == false\n  sumOfTwoPrimes(5, 5) == false\n  sumOfTwoPrimes(5, 6) == true\n  */\nconst sumOfTwoPrimes = (num1, num2) => {\n  const prime1 = primeLength(String(num1));\n  const prime2 = primeLength(String(num2));\n  return prime1 && prime2 && prime1 + prime2 === num1 + num2;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is a prime number\n  Examples\n  sumOfPrimes([2, 3, 5, 7, 11]) == true\n  sumOfPrimes([2, 3, 5, 7, 11]) == false\n  sumOfPrimes([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfPrimes = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime === arr.length;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 100\n  Examples\n  sumOfLessThan100([2, 3, 5, 7, 11]) == true\n  sumOfLessThan100([2, 3, 5, 7, 11]) == false\n  sumOfLessThan100([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan100 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 100;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 500\n  Examples\n  sumOfLessThan500([2, 3, 5, 7, 11]) == true\n  sumOfLessThan500([2, 3, 5, 7, 11]) == false\n  sumOfLessThan500([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan500 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 500;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 1000\n  Examples\n  sumOfLessThan1000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan1000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan1000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan1000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 1000;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 5000\n  Examples\n  sumOfLessThan5000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan5000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan5000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan5000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 5000;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 10000\n  Examples\n  sumOfLessThan10000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan10000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan10000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan10000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 10000;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 100000\n  Examples\n  sumOfLessThan100000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan100000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan100000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan100000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 100000;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 1000000\n  Examples\n  sumOfLessThan1000000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan1000000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan1000000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan1000000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 1000000;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 10000000\n  Examples\n  sumOfLessThan10000000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan10000000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan10000000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan10000000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 10000000;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 100000000\n  Examples\n  sumOfLessThan100000000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan100000000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan100000000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan100000000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 1000000000;\n};\n\n/*\n  Write a fuNction that takes in an array of numbers and returns true if the sum of all the numbers in the array is less than 1000000000\n  Examples\n  sumOfLessThan1000000000([2, 3, 5, 7, 11]) == true\n  sumOfLessThan1000000000([2, 3, 5, 7, 11]) == false\n  sumOfLessThan1000000000([2, 3, 5, 7, 11]) == true\n  */\nconst sumOfLessThan1000000000 = (arr) => {\n  const prime = arr.map((x) => primeLength(String(x))).reduce((a, b) => a + b);\n  return prime < 1000000000;\n};\n\n/*\n  Write a fuNction that take", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  ConsT oneEndsCount = ConsT();\n  ConsT oneEndsCount2 = ConsT();\n  ConsT oneEndsCount3 = ConsT();\n  ConsT oneEndsCount4 = ConsT();\n  ConsT oneEndsCount5 = ConsT();\n  ConsT oneEndsCount6 = ConsT();\n  ConsT oneEndsCount7 = ConsT();\n  ConsT oneEndsCount8 = ConsT();\n  ConsT oneEndsCount9 = ConsT();\n  ConsT oneEndsCount10 = ConsT();\n  ConsT oneEndsCount11 = ConsT();\n  ConsT oneEndsCount12 = ConsT();\n  ConsT oneEndsCount13 = ConsT();\n  ConsT oneEndsCount14 = ConsT();\n  ConsT oneEndsCount15 = ConsT();\n  ConsT oneEndsCount16 = ConsT();\n  ConsT oneEndsCount17 = ConsT();\n  ConsT oneEndsCount18 = ConsT();\n  ConsT oneEndsCount19 = ConsT();\n  ConsT oneEndsCount20 = ConsT();\n  ConsT oneEndsCount21 = ConsT();\n  ConsT oneEndsCount22 = ConsT();\n  ConsT oneEndsCount23 = ConsT();\n  ConsT oneEndsCount24 = ConsT();\n  ConsT oneEndsCount25 = ConsT();\n  ConsT oneEndsCount26 = ConsT();\n  ConsT oneEndsCount27 = ConsT();\n  ConsT oneEndsCount28 = ConsT();\n  ConsT oneEndsCount29 = ConsT();\n  ConsT oneEndsCount30 = ConsT();\n  ConsT oneEndsCount31 = ConsT();\n  ConsT oneEndsCount32 = ConsT();\n  ConsT oneEndsCount33 = ConsT();\n  ConsT oneEndsCount34 = ConsT();\n  ConsT oneEndsCount35 = ConsT();\n  ConsT oneEndsCount36 = ConsT();\n  ConsT oneEndsCount37 = ConsT();\n  ConsT oneEndsCount38 = ConsT();\n  ConsT oneEndsCount39 = ConsT();\n  ConsT oneEndsCount40 = ConsT();\n  ConsT oneEndsCount41 = ConsT();\n  ConsT oneEndsCount42 = ConsT();\n  ConsT oneEndsCount43 = ConsT();\n  ConsT oneEndsCount44 = ConsT();\n  ConsT oneEndsCount45 = ConsT();\n  ConsT oneEndsCount46 = ConsT();\n  ConsT oneEndsCount47 = ConsT();\n  ConsT oneEndsCount48 = ConsT();\n  ConsT oneEndsCount49 = ConsT();\n  ConsT oneEndsCount50 = ConsT();\n  ConsT oneEndsCount51 = ConsT();\n  ConsT oneEndsCount52 = ConsT();\n  ConsT oneEndsCount53 = ConsT();\n  ConsT oneEndsCount54 = ConsT();\n  ConsT oneEndsCount55 = ConsT();\n  ConsT oneEndsCount56 = ConsT();\n  ConsT oneEndsCount57 = ConsT();\n  ConsT oneEndsCount58 = ConsT();\n  ConsT oneEndsCount59 = ConsT();\n  ConsT oneEndsCount60 = ConsT();\n  ConsT oneEndsCount61 = ConsT();\n  ConsT oneEndsCount62 = ConsT();\n  ConsT oneEndsCount63 = ConsT();\n  ConsT oneEndsCount64 = ConsT();\n  ConsT oneEndsCount65 = ConsT();\n  ConsT oneEndsCount66 = ConsT();\n  ConsT oneEndsCount67 = ConsT();\n  ConsT oneEndsCount68 = ConsT();\n  ConsT oneEndsCount69 = ConsT();\n  ConsT oneEndsCount70 = ConsT();\n  ConsT oneEndsCount71 = ConsT();\n  ConsT oneEndsCount72 = ConsT();\n  ConsT oneEndsCount73 = ConsT();\n  ConsT oneEndsCount74 = ConsT();\n  ConsT oneEndsCount75 = ConsT();\n  ConsT oneEndsCount76 = ConsT();\n  ConsT oneEndsCount77 = ConsT();\n  ConsT oneEndsCount78 = ConsT();\n  ConsT oneEndsCount79 = ConsT();\n  ConsT oneEndsCount80 = ConsT();\n  ConsT oneEndsCount81 = ConsT();\n  ConsT oneEndsCount82 = ConsT();\n  ConsT oneEndsCount83 = ConsT();\n  ConsT oneEndsCount84 = ConsT();\n  ConsT oneEndsCount85 = ConsT();\n  ConsT oneEndsCount86 = ConsT();\n  ConsT oneEndsCount87 = ConsT();\n  ConsT oneEndsCount88 = ConsT();\n  ConsT oneEndsCount89 = ConsT();\n  ConsT oneEndsCount90 = ConsT();\n  ConsT oneEndsCount91 = ConsT();\n  ConsT oneEndsCount92 = ConsT();\n  ConsT oneEndsCount93 = ConsT();\n  ConsT oneEndsCount94 = ConsT();\n  ConsT oneEndsCount95 = ConsT();\n  ConsT oneEndsCount96 = ConsT();\n  ConsT oneEndsCount97 = ConsT();\n  ConsT oneEndsCount98 = ConsT();\n  ConsT oneEndsCount99 = ConsT();\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  binary = binArr[sum];\n  return binary;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve2 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve3 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve4 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve5 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve6 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve7 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve8 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve9 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve10 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve11 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve12 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve13 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve14 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve15 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve16 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  \n  Variables:\n      @binary string\n           Constraints: Binary number string contains only 0s and 1s.\n  Output:\n       an integer number\n  */\nconst solve17 = binary => {\n  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += binArr[binary.charCodeAt(i)];\n  }\n  return sum;\n};\n\n/*\n  Given a binary number in string format, return its decimal equivalent.\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. subtract The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      subtract([4, 2, 6, 7]) ==> -2\n  */\nconst subtract = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. multiply The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      multiply([4, 2, 6, 7]) ==> 24\n  */\nconst multiply = (lst) => {\n  let sum = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum *= lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. divide The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      divide([4, 2, 6, 7]) ==> 3\n  */\nconst divide = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] / lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. square The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      square([4, 2, 6, 7]) ==> 64\n  */\nconst square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. cube The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      cube([4, 2, 6, 7]) ==> 27\n  */\nconst cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. square The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      square([4, 2, 6, 7]) ==> 36\n  */\nconst squareOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. cube The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      cube([4, 2, 6, 7]) ==> 54\n  */\nconst cubeOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. sum The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 14\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. sum The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 21\n  */\nconst sumOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. average The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      average([4, 2, 6, 7]) ==> 3\n  */\nconst average = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / lst.length;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. average The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      average([4, 2, 6, 7]) ==> 3\n  */\nconst averageOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / lst.length;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. min The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let min = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. min The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 2\n  */\nconst minOdd = (lst) => {\n  let min = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. max The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. max The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 6\n  */\nconst maxOdd = (lst) => {\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. find The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      find([4, 2, 6, 7]) ==> 4\n  */\nconst find = (lst) => {\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. find The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      find([4, 2, 6, 7]) ==> 2\n  */\nconst findOdd = (lst) => {\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*GiveEN a noN-empTy list of INTEGERs lst. find The evEN ELemeNts that are At even indices..\n\n\n  Examples:\n      find([4, 2, 6, 7]) ==> 4\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const len = s.length\n  for (let i = 0; i < len; i++) {\n    const char = s.charAt(i)\n    const newChar = s.charAt(len - i - 1)\n    if (char === newChar) {\n      newS = newS.replace(char, newChar)\n    }\n  }\n  return newS\n}\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const len = s.length\n  for (let i = 0; i < len; i++) {\n    const char = s.charAt(i)\n    const newChar = s.charAt(len - i - 1)\n    if (char === newChar) {\n      newS = newS.replace(char, newChar)\n    }\n  }\n  return newS\n}\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const len = s.length\n  for (let i = 0; i < len; i++) {\n    const char = s.charAt(i)\n    const newChar = s.charAt(len - i - 1)\n    if (char === newChar) {\n      newS = newS.replace(char, newChar)\n    }\n  }\n  return newS\n}\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const len = s.length\n  for (let i = 0; i < len; i++) {\n    const char = s.charAt(i)\n    const newChar = s.charAt(len - i - 1)\n    if (char === newChar) {\n      newS = newS.replace(char, newChar)\n    }\n  }\n  return newS\n}\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const len = s.length\n  for (let i = 0; i < len; i++) {\n    const char = s.charAt(i)\n    const newChar = s.charAt(len - i - 1)\n    if (char === newChar) {\n      newS = newS.replace(char, newChar)\n    }\n  }\n  return newS\n}\n\n/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  const len = s.length\n  for (let i = 0; i < len; i++) {\n    const char = s.charAt(i)\n    const newChar = s.charAt(len - i - 1)\n    if (char === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2) ...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    if (row.indexOf(x)!== -1) {\n      res.push([i, row.indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 3), (1, 4), (2, 5), (2, 1)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 3)]\n  */\nconst getCol = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    if (row.indexOf(x)!== -1) {\n      res.push([i, row.indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 3), (1, 4), (2, 5), (2, 1)]\n  getRowAndCol([], 1) == []\n  getRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 3)]\n  */\nconst getRowAndCol = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    if (row.indexOf(x)!== -1) {\n      res.push([i, row.indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 3), (1, 4), (2, 5), (2, 1)]\n  getRowAndCol([], 1) == []\n  getRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 0), (2, 3)]\n  */\nconst getRowAndCol = (lst, x) => {\n  const res = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    if (row.indexOf(x)!== -1) {\n      res.push([i, row.indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT CO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const copyOfArray = array.slice(0);\n  const sortedArray = copyOfArray.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\n/*\n  GiVEn A String of noN-negativE INtEgers, return A COPy of The given string afTer sorting,\n  you will SOrT tHe Given string in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN string.\n\n  Examples:\n  * sortString([]) => []\n  * sortString([\"5\"]) => [\"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\"]) => [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\", \"6\"]) => [\"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"]\n  */\nconst sortString = (string) => {\n  const copyOfString = string.slice(0);\n  const sortedString = copyOfString.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedString;\n};\n\n/*\n  GiVEn A String of noN-negativE INtEgers, return A COPy of The given string afTer sorting,\n  you will SOrT tHe Given string in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN string.\n\n  Examples:\n  * sortString([]) => []\n  * sortString([\"5\"]) => [\"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\"]) => [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\", \"6\"]) => [\"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"]\n  */\nconst sortString = (string) => {\n  const copyOfString = string.slice(0);\n  const sortedString = copyOfString.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedString;\n};\n\n/*\n  GiVEn A String of noN-negativE INtEgers, return A COPy of The given string afTer sorting,\n  you will SOrT tHe Given string in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN string.\n\n  Examples:\n  * sortString([]) => []\n  * sortString([\"5\"]) => [\"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\"]) => [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\", \"6\"]) => [\"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"]\n  */\nconst sortString = (string) => {\n  const copyOfString = string.slice(0);\n  const sortedString = copyOfString.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedString;\n};\n\n/*\n  GiVEn A String of noN-negativE INtEgers, return A COPy of The given string afTer sorting,\n  you will SOrT tHe Given string in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN string.\n\n  Examples:\n  * sortString([]) => []\n  * sortString([\"5\"]) => [\"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\"]) => [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n  * sortString([\"2\", \"4\", \"3\", \"0\", \"1\", \"5\", \"6\"]) => [\"6\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\"]\n  */\nconst sortString = (string) => {\n  const copyOfString = string.slice(0);\n  const sortedString = copyOfString.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedString;\n};\n\n/*\n  GiVEn A String of noN-negativE INtEgers, return A COPy of The given string afTer sorting,\n  you will SOrT tHe Given string in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN string.\n\n  Examples:\n  * sortString([]) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += String.fromCharCode(s.charCodeAt(i) + 1);\n  }\n  return newStr;\n};\n\n/*CreATe a fUnctIon decrypt that tAKEs A striNG AS an aRgument and\n  Returns a string decRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += String.fromCharCode(s.charCodeAt(i) - 1);\n  }\n  return newStr;\n};\n\n/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += String.fromCharCode(s.charCodeAt(i) + 1);\n  }\n  return newStr;\n};\n\n/*CreATe a fUnctIon decrypt that tAKEs A striNG AS an aRgument and\n  Returns a string decRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += String.fromCharCode(s.charCodeAt(i) - 1);\n  }\n  return newStr;\n};\n\n/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += String.fromCharCode(s.charCodeAt(i) + 1);\n  }\n  return newStr;\n};\n\n/*CreATe a fUnctIon decrypt that tAKEs A striNG AS an aRgument and\n  Returns a string decRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('ix') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += String.fromCharCode(s.charCodeAt(i) - 1);\n  }\n  return newStr;\n};\n\n/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let newStr = '';\n  for (let i = 0; i < s.length; i += 1) {\n    newStr += String.fromCharCode(s.charCodeAt(i) + 1);\n  }\n  return newStr;\n};\n\n/*CreATe a fUnctIon decrypt that tAKEs A striNG AS an aRgument and\n  Returns a string decRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO t", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxArray = [];\n  let maxElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxElement) {\n      rollingMaxArray.push(maxElement);\n      maxElement = numbers[i];\n    } else {\n      rollingMaxArray.push(numbers[i]);\n    }\n  }\n  rollingMaxArray.push(maxElement);\n  return rollingMaxArray;\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng minimum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMin = (numbers) => {\n  const rollingMinArray = [];\n  let minElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < minElement) {\n      rollingMinArray.push(minElement);\n      minElement = numbers[i];\n    } else {\n      rollingMinArray.push(numbers[i]);\n    }\n  }\n  rollingMinArray.push(minElement);\n  return rollingMinArray;\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng sum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum = (numbers) => {\n  const rollingSumArray = [];\n  let sumElement = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n    rollingSumArray.push(sumElement);\n  }\n  return rollingSumArray;\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng average Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingAvg = (numbers) => {\n  const rollingAvgArray = [];\n  let sumElement = 0;\n  let averageElement = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n  }\n  averageElement = sumElement / numbers.length;\n  for (let i = 1; i < numbers.length; i++) {\n    rollingAvgArray.push(averageElement);\n  }\n  return rollingAvgArray;\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng median Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMedian = (numbers) => {\n  const rollingMedianArray = [];\n  let sumElement = 0;\n  let averageElement = 0;\n  let medianElement = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    sumElement += numbers[i];\n  }\n  averageElement = sumElement / numbers.length;\n  for (let i = 1; i < numbers.length; i++) {\n    if (averageElement === numbers[i]) {\n      medianElement = numbers[i];\n    }\n  }\n  for (let i = 1; i < numbers.length; i++) {\n    rollingMedianArray.push(medianElement);\n  }\n  return rollingMedianArray;\n};\n\n/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng mode Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMode = (numbers) => {\n  const rollingModeArray = [];\n  let modeElement = 0;\n  let modeCount = 0;\n  let modeCountArray = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray.length) {\n      modeCountArray.push(modeCount);\n    }\n    if (numbers[i] === modeElement) {\n      modeCount++;\n    } else {\n      modeCount = 0;\n    }\n    if (modeCount > modeCountArray", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n  if(lst == null || lst.length == 0)\n    return null;\n  \n  let minIndex = lst.length - 1;\n  for(let i = lst.length - 1; i >= 0; i--){\n    if(lst[i] < lst[minIndex]){\n      minIndex = i;\n    }\n  }\n  \n  return lst[minIndex];\n}\n\n/*\n  YOU ARE GIVEN A LIST OF STRINGS.\n  Write a FUNCtioN getFirstLetter() that returNs the FIRST LETTER of the FIRST STRING IN THE LIST.\n  REtURN null if THERE IS NO FIRST STRING.\n  \n  getFirstLetter([ 'a', 'b', 'c', 'd' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k' ]) == 'a'\n  getFirstLetter([ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l' ]) == 'a'\n  getFirstLetter([", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const bored = S.match(/\\.|\\?|!/g);\n  return bored.length;\n};\n\n/*\n  YoU", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = Math.abs(x)\n  const b = Math.abs(y)\n  const c = Math.abs(z)\n  return a > b && a > c || b > c || a === b\n}\n\n/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let messageToEncode = message;\n  \n  if(typeof message ==='string'){\n    messageToEncode = message.toUpperCase();\n  }\n  \n  let messageToEncodeAsArray = messageToEncode.split('');\n  \n  messageToEncodeAsArray.forEach((letter) => {\n    letter = letter.toUpperCase();\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toUpperCase();\n    });\n    \n    messageToEncodeAsArray = messageToEncodeAsArray.map((letter) => {\n      return letter.toLowerCase();\n    });\n    \n    message", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i]\n    }\n  }\n  return largest\n}\n\n/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe smallest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 1\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 1\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 0\n  For lst = [0,81,12,3,1,21] the output should be 1\n  For lst = [0,8,1,2,1,7] the output should be 1\n  */\nconst skjkasdkd = (lst) => {\n  let smallest = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i]\n    }\n  }\n  return smallest\n}\n\n/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe average pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 4.5\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 3\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 4.5\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 4.5\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 3\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum / lst.length\n}\n\n/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe median pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 1\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 1\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 1\n  For lst = [0,81,12,3,1,21] the output should be 1\n  For lst = [0,8,1,2,1,7] the output should be 1\n  */\nconst skjkasdkd = (lst) => {\n  let mid = Math.floor(lst.length / 2)\n  let sum = 0\n  for (let i = 0; i < mid; i++) {\n    sum += lst[i]\n  }\n  return sum / mid\n}\n\n/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe mode pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 1\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 1\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 1\n  For lst = [0,81,12,3,1,21] the output should be 1\n  For lst = [0,8,1,2,1,7] the output should be 1\n  */\nconst skjkasdkd = (lst) => {\n  let mode = 0\n  let max = 0\n  let min = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      mode++\n    }\n  }\n  return mode\n}\n\n/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe range pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 3\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 1\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 1\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 1\n  For lst = [0,81,12,3,1,21] the output should be 1\n  For lst = [0,8,1,2,1,7] the output should be 1\n  */\nconst skjkasdkd = (lst) => {\n  let range = 0\n  let max = 0\n  let min = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      range++\n    }\n  }\n  return range\n}\n\n/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe standard deviation pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => key.toLowerCase() === key);\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key);\n  let isAllKeysSame = keys.every(key => dict[key] === dict[key.toLowerCase()]);\n  return isAllKeysLower || isAllKeysUpper || isAllKeysSame;\n};\n\n/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => key.toLowerCase() === key);\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key);\n  let isAllKeysSame = keys.every(key => dict[key] === dict[key.toLowerCase()]);\n  return isAllKeysLower || isAllKeysUpper || isAllKeysSame;\n};\n\n/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => key.toLowerCase() === key);\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key);\n  let isAllKeysSame = keys.every(key => dict[key] === dict[key.toLowerCase()]);\n  return isAllKeysLower || isAllKeysUpper || isAllKeysSame;\n};\n\n/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => key.toLowerCase() === key);\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key);\n  let isAllKeysSame = keys.every(key => dict[key] === dict[key.toLowerCase()]);\n  return isAllKeysLower || isAllKeysUpper || isAllKeysSame;\n};\n\n/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysLower = keys.every(key => key.toLowerCase() === key);\n  let isAllKeysUpper = keys.every(key => key.toUpperCase() === key);\n  let isAllKeysSame = keys.every(key => dict[key] === dict[key.toLowerCase()]);\n  return isAllKeysLower || isAllKeysUpper || isAllKeysSame;\n};\n\n/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a String and a String containing only digits, return a new String where the first String contains\n  every digit of the first String followed by the second String.\n  Ex.\n  reverseWords(\"How many times do I have to code Javascript\", \"Code\") => \"How  many times do I  have to  oD  to  mOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOcOc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    product *= b[i];\n  }\n  return product;\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the sum of the thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    sum += b[i];\n  }\n  return sum;\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the difference of the thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let difference = 0;\n  for (let i = 0; i < a.length; i++) {\n    difference -= a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    difference -= b[i];\n  }\n  return difference;\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the quotient of the thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    quotient += b[i];\n  }\n  return quotient;\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the modulus of the thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  modulus(148, 412) should return 4.\n  modulus(19, 28) should return 0.\n  modulus(2020, 1851) should return 2020.\n  modulus(14,-15) should return 0.\n  */\nconst modulus = (a, b) => {\n  let modulus = 0;\n  for (let i = 0; i < a.length; i++) {\n    modulus += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    modulus += b[i];\n  }\n  return modulus;\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the quotient of the thEIr UnIt Digits divided by the \n  modulus of the thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  modulusDivide(148, 412) should return 0.\n  modulusDivide(19, 28) should return 0.\n  modulusDivide(2020, 1851) should return 0.\n  modulusDivide(14,-15) should return 0.\n  */\nconst modulusDivide = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    quotient += b[i];\n  }\n  return quotient / modulus(a, b);\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the quotient of the thEIr UnIt Digits divided by the \n  modulus of the thEIr UnIt Digits multiplied by the \n  modulus of the thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  modulusDivideModulus(148, 412) should return 0.\n  modulusDivideModulus(19, 28) should return 0.\n  modulusDivideModulus(2020, 1851) should return 0.\n  modulusDivideModulus(14,-15) should return 0.\n  */\nconst modulusDivideModulus = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    quotient += b[i];\n  }\n  return quotient / modulus(a, b) * modulus(a, b);\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the quotient of the thEIr UnIt Digits divided by the \n  modulus of the thEIr UnIt Digits multiplied by the \n  modulus of the thEIr UnIt Digits multiplied by the \n  modulus of the thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  modulusDivideModulusModulus(148, 412) should return 0.\n  modulusDivideModulusModulus(19, 28) should return 0.\n  modulusDivideModulusModulus(2020, 1851) should return 0.\n  modulusDivideModulusModulus(14,-15) should return 0.\n  */\nconst modulusDivideModulusModulus = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += a[i];\n  }\n  for (let i = 0; i < b.length; i++) {\n    quotient += b[i];\n  }\n  return quotient / modulus(a, b) * modulus(a, b) * modulus(a, b);\n};\n\n/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the quotient of the thEIr UnIt Digits divided by the \n  modulus of the thEIr UnIt Digits multiplied by the \n  modulus of the thEIr UnIt Digits multiplied by the \n  modulus of the thEIr UnIt ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of LOWErcaSe vowels in evEn indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS vowels in evEn indices.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 0\n  countConsonant('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS and VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowelAndConsonant('aBCdEf') returns 1\n  countVowelAndConsonant('abcdefg') returns 0\n  countVowelAndConsonant('dBBE') returns 0\n  */\nconst countVowelAndConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS and VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowelAndConsonant('aBCdEf') returns 1\n  countVowelAndConsonant('abcdefg') returns 0\n  countVowelAndConsonant('dBBE') returns 0\n  */\nconst countVowelAndConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS and VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowelAndConsonant('aBCdEf') returns 1\n  countVowelAndConsonant('abcdefg') returns 0\n  countVowelAndConsonant('dBBE') returns 0\n  */\nconst countVowelAndConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS and VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowelAndConsonant('aBCdEf') returns 1\n  countVowelAndConsonant('abcdefg') returns 0\n  countVowelAndConsonant('dBBE') returns 0\n  */\nconst countVowelAndConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS and VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowelAndConsonant('aBCdEf') returns 1\n  countVowelAndConsonant('abcdefg') returns 0\n  countVowelAndConsonant('dBBE') returns 0\n  */\nconst countVowelAndConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS and VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowelAndConsonant('aBCdEf') returns 1\n  countVowelAndConsonant('abcdefg') returns 0\n  countVowelAndConsonant('dBBE') returns 0\n  */\nconst countVowelAndConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of CONSONANTS and VOWELS vowels in evEn indices.\n  \n  For example:\n  countVowelAndConsonant('aBCdEf') returns 1\n  countVowelAndConsonant('abcdefg') returns 0\n  countVowelAndConsonant('dBBE') returns 0\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValue2 = parseInt(value, 10);\n  const intValue3 = parseInt(value, 10);\n  const intValue4 = parseInt(value, 10);\n  const intValue5 = parseInt(value, 10);\n  const intValue6 = parseInt(value, 10);\n  const intValue7 = parseInt(value, 10);\n  const intValue8 = parseInt(value, 10);\n  const intValue9 = parseInt(value, 10);\n  const intValue10 = parseInt(value, 10);\n  const intValue11 = parseInt(value, 10);\n  const intValue12 = parseInt(value, 10);\n  const intValue13 = parseInt(value, 10);\n  const intValue14 = parseInt(value, 10);\n  const intValue15 = parseInt(value, 10);\n  const intValue16 = parseInt(value, 10);\n  const intValue17 = parseInt(value, 10);\n  const intValue18 = parseInt(value, 10);\n  const intValue19 = parseInt(value, 10);\n  const intValue20 = parseInt(value, 10);\n  const intValue21 = parseInt(value, 10);\n  const intValue22 = parseInt(value, 10);\n  const intValue23 = parseInt(value, 10);\n  const intValue24 = parseInt(value, 10);\n  const intValue25 = parseInt(value, 10);\n  const intValue26 = parseInt(value, 10);\n  const intValue27 = parseInt(value, 10);\n  const intValue28 = parseInt(value, 10);\n  const intValue29 = parseInt(value, 10);\n  const intValue30 = parseInt(value, 10);\n  const intValue31 = parseInt(value, 10);\n  const intValue32 = parseInt(value, 10);\n  const intValue33 = parseInt(value, 10);\n  const intValue34 = parseInt(value, 10);\n  const intValue35 = parseInt(value, 10);\n  const intValue36 = parseInt(value, 10);\n  const intValue37 = parseInt(value, 10);\n  const intValue38 = parseInt(value, 10);\n  const intValue39 = parseInt(value, 10);\n  const intValue40 = parseInt(value, 10);\n  const intValue41 = parseInt(value, 10);\n  const intValue42 = parseInt(value, 10);\n  const intValue43 = parseInt(value, 10);\n  const intValue44 = parseInt(value, 10);\n  const intValue45 = parseInt(value, 10);\n  const intValue46 = parseInt(value, 10);\n  const intValue47 = parseInt(value, 10);\n  const intValue48 = parseInt(value, 10);\n  const intValue49 = parseInt(value, 10);\n  const intValue50 = parseInt(value, 10);\n  const intValue51 = parseInt(value, 10);\n  const intValue52 = parseInt(value, 10);\n  const intValue53 = parseInt(value, 10);\n  const intValue54 = parseInt(value, 10);\n  const intValue55 = parseInt(value, 10);\n  const intValue56 = parseInt(value, 10);\n  const intValue57 = parseInt(value, 10);\n  const intValue58 = parseInt(value, 10);\n  const intValue59 = parseInt(value, 10);\n  const intValue60 = parseInt(value, 10);\n  const intValue61 = parseInt(value, 10);\n  const intValue62 = parseInt(value, 10);\n  const intValue63 = parseInt(value, 10);\n  const intValue64 = parseInt(value, 10);\n  const intValue65 = parseInt(value, 10);\n  const intValue66 = parseInt(value, 10);\n  const intValue67 = parseInt(value, 10);\n  const intValue68 = parseInt(value, 10);\n  const intValue69 = parseInt(value, 10);\n  const intValue70 = parseInt(value, 10);\n  const intValue71 = parseInt(value, 10);\n  const intValue72 = parseInt(value, 10);\n  const intValue73 = parseInt(value, 10);\n  const intValue74 = parseInt(value, 10);\n  const intValue75 = parseInt(value, 10);\n  const intValue76 = parseInt(value, 10);\n  const intValue77 = parseInt(value, 10);\n  const intValue78 = parseInt(value, 10);\n  const intValue79 = parseInt(value, 10);\n  const intValue80 = parseInt(value, 10);\n  const intValue81 = parseInt(value, 10);\n  const intValue82 = parseInt(value, 10);\n  const intValue83 = parseInt(value, 10);\n  const intValue84 = parseInt(value, 10);\n  const intValue85 = parseInt(value, 10);\n  const intValue86 = parseInt(value, 10);\n  const intValue87 = parseInt(value, 10);\n  const intValue88 = parseInt(value, 10);\n  const intValue89 = parseInt(value, 10);\n  const intValue90 = parseInt(value, 10);\n  const intValue91 = parseInt(value, 10);\n  const intValue92 = parseInt(value, 10);\n  const intValue93 = parseInt(value, 10);\n  const intValue94 = parseInt(value, 10);\n  const intValue95 = parseInt(value, 10);\n  const intValue96 = parseInt(value, 10);\n  const intValue97 = parseInt(value, 10);\n  const intValue98 = parseInt(value, 10);\n  const intValue99 = parseInt(value, 10);\n  const intValue100 = parseInt(value, 10);\n  const intValue101 = parseInt(value, 10);\n  const intValue102 = parseInt(value, 10);\n  const intValue103 = parseInt(value, 10);\n  const intValue104 = parseInt(value, 10);\n  const intValue105 = parseInt(value, 10);\n  const intValue106 = parseInt(value, 10);\n  const intValue107 = parseInt(value, 10);\n  const intValue108 = parseInt(value, 10);\n  const intValue109 = parseInt(value, 10);\n  const intValue110 = parseInt(value, 10);\n  const intValue111 = parseInt(value, 10);\n  const intValue112 = parseInt(value, 10);\n  const intValue113 = parseInt(value, 10);\n  const intValue114 = parseInt(value, 10);\n  const intValue115 = parseInt(value, 10);\n  const intValue116 = parseInt(value, 10);\n  const intValue117 = parseInt(value, 10);\n  const intValue118 = parseInt(value, 10);\n  const intValue119 = parseInt(value, 10);\n  const intValue120 = parseInt(value, 10);\n  const intValue121 = parseInt(value, 10);\n  const intValue122 = parseInt(value, 10);\n  const intValue123 = parseInt(value, 10);\n  const intValue124 = parseInt(value, 10);\n  const intValue125 = parseInt(value, 10);\n  const intValue126 = parseInt(value, 10);\n  const intValue127 = parseInt(value, 10);\n  const intValue128 = parseInt(value, 10);\n  const intValue129 = parseInt(value, 10);\n  const intValue130 = parseInt(value, 10);\n  const intValue131 = parseInt(value, 10);\n  const intValue132 = parseInt(value, 10);\n  const intValue133 = parseInt(value, 10);\n  const intValue134 = parseInt(value, 10);\n  const intValue135 = parseInt(value, 10);\n  const intValue136 = parseInt(value, 10);\n  const intValue137 = parseInt(value, 10);\n  const intValue138 = parseInt(value, 10);\n  const intValue139 = parseInt(value, 10);\n  const intValue140 = parseInt(value, 10);\n  const intValue141 = parseInt(value, 10);\n  const intValue142 = parseInt(value, 10);\n  const intValue143 = parseInt(value, 10);\n  const intValue144 = parseInt(value, 10);\n  const intValue145 = parseInt(value, 10);\n  const intValue146 = parseInt(value, 10);\n  const intValue147 = parseInt(value, 10);\n  const intValue148 = parseInt(value, 10);\n  const intValue149 = parseInt(value, 10);\n  const intValue150 = parseInt(value, 10);\n  const intValue151 = parseInt(value, 10);\n  const intValue152 = parseInt(value, 10);\n  const intValue153 = parseInt(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
