{"task_id": "JavaScript/0", "prompt": "/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && lastElementClosestToThreshold;\n};\n\n/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && lastElementClosestToThreshold;\n};\n\n/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && lastElementClosestToThreshold;\n};\n\n/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && lastElementClosestToThreshold;\n};\n\n/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && lastElementClosestToThreshold;\n};\n\n/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && lastElementClosestToThreshold;\n};\n\n/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && lastElementClosestToThreshold;\n};\n\n/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const firstElement = sortedNumbers[0];\n  const lastElement = sortedNumbers[sortedNumbers.length - 1];\n  const firstElementClosestToLast = firstElement - lastElement;\n  const lastElementClosestToFirst = lastElement - firstElement;\n  const firstElementClosestToThreshold = firstElementClosestToLast < threshold;\n  const lastElementClosestToThreshold = lastElementClosestToFirst < threshold;\n  return firstElementClosestToThreshold && last", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let current_group_open = false;\n  let current_group_closed = false;\n  let current_group_open_brace = false;\n  let current_group_closed_brace = false;\n  let current_group_open_brace_or_closed_brace = false;\n  let current_group_open_brace_or_closed_brace_or_space = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_comma_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_comma_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_semicolon_or_equal_or_comma = false;\n  let current_group_open_brace_or_closed_brace_or_space_or_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if  gniven strig is apalindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Test if  gniven strig is apalindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let rev = string.split('').reverse ();\n let prefix = string.split('').reverse ().slice (0, string.length);\n let postfix = string.split('').reverse ().slice (string.length);\n let palindrome = prefix + rev + postfix;\n return palindrome;\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let rev = string.split('').reverse ();\n let prefix = string.split('').reverse ().slice (0, string.length);\n let postfix = string.split('').reverse ().slice (string.length);\n let palindrome = prefix + rev + postfix;\n return palindrome;\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let rev = string.split('').reverse ();\n let prefix = string.split('').reverse ().slice (0, string.length);\n let postfix = string.split('').reverse ().slice (string.length);\n let palindrome = prefix + rev + postfix;\n return palindrome;\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let rev = string.split('').reverse ();\n let prefix = string.split('').reverse ().slice (0, string.length);\n let postfix = string.split('').reverse ().slice (string.length);\n let palindrome = prefix + rev + postfix;\n return palindrome;\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let rev = string.split('').reverse ();\n let prefix = string.split('').reverse ().slice (0, string.length);\n let postfix = string.split('').reverse ().slice (string.length);\n let palindrome = prefix + rev + postfix;\n return palindrome;\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let rev = string.split('').reverse ();\n let prefix = string.split('').reverse ().slice (0, string.length);\n let postfix = string.split('').reverse ().slice (string.length);\n let palindrome = prefix + rev + postfix;\n return palindrome;\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givena  positive integer n , you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even .\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = [];\n  for (let i = 0; i < n; i++) {\n    p.push(i);\n  }\n  return p;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x , y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x, y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x === y - 1) {\n    return y;\n  }\n  if (y === x - 1) {\n    return x;\n  }\n  if (y === x + 1) {\n    return y;\n  }\n  if (y === x + 2) {\n    return x;\n  }\n  if (y === x - 2) {\n    return y;\n  }\n  if (y === x - 3) {\n    return x;\n  }\n  if (y === x + 3) {\n    return y;\n  }\n  if (y === x - 4) {\n    return x;\n  }\n  if (y === x + 4) {\n    return y;\n  }\n  if (y === x - 5) {\n    return x;\n  }\n  if (y === x + 5) {\n    return y;\n  }\n  if (y === x - 6) {\n    return x;\n  }\n  if (y === x + 6) {\n    return y;\n  }\n  if (y === x - 7) {\n    return x;\n  }\n  if (y === x + 7) {\n    return y;\n  }\n  if (y === x - 8) {\n    return x;\n  }\n  if (y === x + 8) {\n    return y;\n  }\n  if (y === x - 9) {\n    return x;\n  }\n  if (y === x + 9) {\n    return y;\n  }\n  if (y === x - 10) {\n    return x;\n  }\n  if (y === x + 10) {\n    return y;\n  }\n  if (y === x - 11) {\n    return x;\n  }\n  if (y === x + 11) {\n    return y;\n  }\n  if (y === x - 12) {\n    return x;\n  }\n  if (y === x + 12) {\n    return y;\n  }\n  if (y === x - 13) {\n    return x;\n  }\n  if (y === x + 13) {\n    return y;\n  }\n  if (y === x - 14) {\n    return x;\n  }\n  if (y === x + 14) {\n    return y;\n  }\n  if (y === x - 15) {\n    return x;\n  }\n  if (y === x + 15) {\n    return y;\n  }\n  return -1;\n};\n\n/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x, y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x === y - 1) {\n    return y;\n  }\n  if (y === x - 1) {\n    return x;\n  }\n  if (y === x + 1) {\n    return y;\n  }\n  if (y === x + 2) {\n    return x;\n  }\n  if (y === x - 2) {\n    return y;\n  }\n  if (y === x - 3) {\n    return x;\n  }\n  if (y === x + 3) {\n    return y;\n  }\n  if (y === x - 4) {\n    return x;\n  }\n  if (y === x + 4) {\n    return y;\n  }\n  if (y === x - 5) {\n    return x;\n  }\n  if (y === x + 5) {\n    return y;\n  }\n  if (y === x - 6) {\n    return x;\n  }\n  if (y === x + 6) {\n    return y;\n  }\n  if (y === x - 7) {\n    return x;\n  }\n  if (y === x + 7) {\n    return y;\n  }\n  if (y === x - 8) {\n    return x;\n  }\n  if (y === x + 8) {\n    return y;\n  }\n  if (y === x - 9) {\n    return x;\n  }\n  if (y === x + 9) {\n    return y;\n  }\n  if (y === x - 10) {\n    return x;\n  }\n  if (y === x + 10) {\n    return y;\n  }\n  if (y === x - 11) {\n    return x;\n  }\n  if (y === x + 11) {\n    return y;\n  }\n  if (y === x - 12) {\n    return x;\n  }\n  if (y === x + 12) {\n    return y;\n  }\n  if (y === x - 13) {\n    return x;\n  }\n  if (y === x + 13) {\n    return y;\n  }\n  if (y === x - 14) {\n    return x;\n  }\n  if (y === x + 14) {\n    return y;\n  }\n  if (y === x - 15) {\n    return x;\n  }\n  if (y === x + 15) {\n    return y;\n  }\n  return -1;\n};\n\n/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x, y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x === y - 1) {\n    return y;\n  }\n  if (y === x - 1) {\n    return x;\n  }\n  if (y === x + 1) {\n    return y;\n  }\n  if (y === x + 2) {\n    return x;\n  }\n  if (y === x - 2) {\n    return y;\n  }\n  if (y === x - 3) {\n    return x;\n  }\n  if (y === x + 3) {\n    return y;\n  }\n  if (y === x - 4) {\n    return x;\n  }\n  if (y === x + 4) {\n    return y;\n  }\n  if (y === x - 5) {\n    return x;\n  }\n  if (y === x + 5) {\n    return y;\n  }\n  if (y === x - 6) {\n    return x;\n  }\n  if (y === x + 6) {\n    return y;\n  }\n  if (y === x - 7) {\n    return x;\n  }\n  if (y === x + 7) {\n    return y;\n  }\n  if (y === x - 8) {\n    return x;\n  }\n  if (y === x + 8) {\n    return y;\n  }\n  if (y === x - 9) {\n    return x;\n  }\n  if (y === x + 9) {\n    return y;\n  }\n  if (y === x - 10) {\n    return x;\n  }\n  if (y === x + 10) {\n    return y;\n  }\n  if (y === x - 11) {\n    return x;\n  }\n  if (y === x + 11) {\n    return y;\n  }\n  if (y === x - 12) {\n    return x;\n  }\n  if (y === x + 12) {\n    return y;\n  }\n  if (y === x - 13) {\n    return x;\n  }\n  if (y === x + 13) {\n    return y;\n  }\n  if (y === x - 14) {\n    return x;\n  }\n  if (y === x + 14) {\n    return y;\n  }\n  if (y === x - 15) {\n    return x;\n  }\n  if (y === x + 15) {\n    return y;\n  }\n  return -1;\n};\n\n/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x, y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You aregiven two positiveintegers n and m, and your task is to compute the averageof  theintegers from n throu ghm (includi ng n and m). \n Round the answer to the nearest integer an d convert thatto b inary.  If n is greater thanm,return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven two positiveintegers n and m, and your task is to compute the averageof  theintegers from n throu ghm (includi ng n and m). \n Round the answer to the nearest integer an d convert thatto b inary.  If n is greater thanm,return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const binary = `${n}${m}`;\n  const binaryLength = binary.length;\n  const binaryLength = binaryLength - 1;\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const binaryLength = binaryLength.substr(0, binaryLength.length - 1);\n  const binaryLength = parseInt(binaryLength, 2);\n  const binaryLength = binaryLength.toString(2);\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = []\n  for (let i = 0; i < x.length; i++) {\n    if (u.indexOf(x[i]) === -1) {\n      u.push(x[i])\n    }\n  }\n  return u\n}\n\n/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu r", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givena n array of integers , sort the integers that are between 1 and9 inclu si ve,\n  reve rse t he resulting array, a ndthen repla ce each digit b y its corresponding name from\n  \"One\", \"Two \", \"Three\", \"Four\",  \"Five\" , \"Six\", \"Seven\", \"Eigh t\",  \"Nine\" .\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array of integers, sort the integers that are between 1 and9 inclu si ve,\n  reve rse t he resulting array, a ndthen repla ce each digit b y its corresponding name from\n  \"One\", \"Two \", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eigh t\",  \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let temp = [];\n  let temp2 = [];\n  let temp3 = [];\n  let temp4 = [];\n  let temp5 = [];\n  let temp6 = [];\n  let temp7 = [];\n  let temp8 = [];\n  let temp9 = [];\n  let temp10 = [];\n  let temp11 = [];\n  let temp12 = [];\n  let temp13 = [];\n  let temp14 = [];\n  let temp15 = [];\n  let temp16 = [];\n  let temp17 = [];\n  let temp18 = [];\n  let temp19 = [];\n  let temp20 = [];\n  let temp21 = [];\n  let temp22 = [];\n  let temp23 = [];\n  let temp24 = [];\n  let temp25 = [];\n  let temp26 = [];\n  let temp27 = [];\n  let temp28 = [];\n  let temp29 = [];\n  let temp30 = [];\n  let temp31 = [];\n  let temp32 = [];\n  let temp33 = [];\n  let temp34 = [];\n  let temp35 = [];\n  let temp36 = [];\n  let temp37 = [];\n  let temp38 = [];\n  let temp39 = [];\n  let temp40 = [];\n  let temp41 = [];\n  let temp42 = [];\n  let temp43 = [];\n  let temp44 = [];\n  let temp45 = [];\n  let temp46 = [];\n  let temp47 = [];\n  let temp48 = [];\n  let temp49 = [];\n  let temp50 = [];\n  let temp51 = [];\n  let temp52 = [];\n  let temp53 = [];\n  let temp54 = [];\n  let temp55 = [];\n  let temp56 = [];\n  let temp57 = [];\n  let temp58 = [];\n  let temp59 = [];\n  let temp60 = [];\n  let temp61 = [];\n  let temp62 = [];\n  let temp63 = [];\n  let temp64 = [];\n  let temp65 = [];\n  let temp66 = [];\n  let temp67 = [];\n  let temp68 = [];\n  let temp69 = [];\n  let temp70 = [];\n  let temp71 = [];\n  let temp72 = [];\n  let temp73 = [];\n  let temp74 = [];\n  let temp75 = [];\n  let temp76 = [];\n  let temp77 = [];\n  let temp78 = [];\n  let temp79 = [];\n  let temp80 = [];\n  let temp81 = [];\n  let temp82 = [];\n  let temp83 = [];\n  let temp84 = [];\n  let temp85 = [];\n  let temp86 = [];\n  let temp87 = [];\n  let temp88 = [];\n  let temp89 = [];\n  let temp90 = [];\n  let temp91 = [];\n  let temp92 = [];\n  let temp93 = [];\n  let temp94 = [];\n  let temp95 = [];\n  let temp96 = [];\n  let temp97 = [];\n  let temp98 = [];\n  let temp99 = [];\n  let temp100 = [];\n  let temp101 = [];\n  let temp102 = [];\n  let temp103 = [];\n  let temp104 = [];\n  let temp105 = [];\n  let temp106 = [];\n  let temp107 = [];\n  let temp108 = [];\n  let temp109 = [];\n  let temp110 = [];\n  let temp111 = [];\n  let temp112 = [];\n  let temp113 = [];\n  let temp114 = [];\n  let temp115 = [];\n  let temp116 = [];\n  let temp117 = [];\n  let temp118 = [];\n  let temp119 = [];\n  let temp120 = [];\n  let temp121 = [];\n  let temp122 = [];\n  let temp123 = [];\n  let temp124 = [];\n  let temp125 = [];\n  let temp126 = [];\n  let temp127 = [];\n  let temp128 = [];\n  let temp129 = [];\n  let temp130 = [];\n  let temp131 = [];\n  let temp132 = [];\n  let temp133 = [];\n  let temp134 = [];\n  let temp135 = [];\n  let temp136 = [];\n  let temp137 = [];\n  let temp138 = [];\n  let temp139 = [];\n  let temp140 = [];\n  let temp141 = [];\n  let temp142 = [];\n  let temp143 = [];\n  let temp144 = [];\n  let temp145 = [];\n  let temp146 = [];\n  let temp147 = [];\n  let temp148 = [];\n  let temp149 = [];\n  let temp150 = [];\n  let temp151 = [];\n  let temp152 = [];\n  let temp153 = [];\n  let temp154 = [];\n  let temp155 = [];\n  let temp156 = [];\n  let temp157 = [];\n  let temp158 = [];\n  let temp159 = [];\n  let temp160 = [];\n  let temp161 = [];\n  let temp162 = [];\n  let temp163 = [];\n  let temp164 = [];\n  let temp165 = [];\n  let temp166 = [];\n  let temp167 = [];\n  let temp168 = [];\n  let temp169 = [];\n  let temp170 = [];\n  let temp171 = [];\n  let temp172 = [];\n  let temp173 = [];\n  let temp174 = [];\n  let temp175 = [];\n  let temp176 = [];\n  let temp177 = [];\n  let temp178 = [];\n  let temp179 = [];\n  let temp180 = [];\n  let temp181 = [];\n  let temp182 = [];\n  let temp183 = [];\n  let temp184 = [];\n  let temp185 = [];\n  let temp186 = [];\n  let temp187 = [];\n  let temp188 = [];\n  let temp189 = [];\n  let temp190 = [];\n  let temp191 = [];\n  let temp192 = [];\n  let temp193 = [];\n  let temp194 = [];\n  let temp195 = [];\n  let temp196 = [];\n  let temp197 = [];\n  let temp198 = [];\n  let temp199 = [];\n  let temp200 = [];\n  let temp201 = [];\n  let temp202 = [];\n  let temp203 = [];\n  let temp204 = [];\n  let temp205 = [];\n  let temp206 = [];\n  let temp207 = [];\n  let temp208 = [];\n  let temp209 = [];\n  let temp210 = [];\n  let temp211 = [];\n  let temp212 = [];\n  let temp213 = [];\n  let temp214 = [];\n  let temp215 = [];\n  let temp216 = [];\n  let temp217 = [];\n  let temp218 = [];\n  let temp219 = [];\n  let temp220 = [];\n  let temp221 = [];\n  let temp222 = [];\n  let temp223 = [];\n  let temp224 = [];\n  let temp225 = [];\n  let temp226 = [];\n  let temp227 = [];\n  let temp228 = [];\n  let temp229 = [];\n  let temp230 = [];\n  let temp231 = [];\n  let temp232 = [];\n  let temp233 = [];\n  let temp234 = [];\n  let temp235 = [];\n  let temp236 = [];\n  let temp237 = [];\n  let temp238 = [];\n  let temp239 = [];\n  let temp240 = [];\n  let temp241 = [];\n  let temp242 = [];\n  let temp243 = [];\n  let temp244 = [];\n  let temp245 = [];\n  let temp246 = [];\n  let temp247 = [];\n  let temp248 = [];\n  let temp249", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 *  ... * i) .\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fsize = Math.ceil(n);\n  const o = [];\n  for (let i = 1; i <= fsize; i++) {\n    o.push(i);\n  }\n  return o;\n};\n\n/* Impleme nt the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givena  positive integer n , return a tuple that has the number ofeven and o dd \n  integer  pali ndromes that fall wit hin  the range (1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, return a tuple that has the number ofeven and o dd \n  integer  pali ndromes that fall wit hin  the range (1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [evenPalindrome, oddPalindrome];\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than or equal to n \n  that form a palindrome.\n\n  Example 1:\n\n      Input: 5\n      Output: [1, 3, 5]\n      Explanation: \n      5 is a palindrome.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 3, 4, 6, 12]\n      Explanation: \n      12 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [...Array(n)].map((_, i) => i + 1).filter((_, i) => i <= n / 2 && evenPalindrome % 2 === 0 && oddPalindrome % 2 === 0);\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than or equal to n \n  that form a palindrome.\n\n  Example 1:\n\n      Input: 5\n      Output: [1, 3, 5]\n      Explanation: \n      5 is a palindrome.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 3, 4, 6, 12]\n      Explanation: \n      12 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [...Array(n)].map((_, i) => i + 1).filter((_, i) => i <= n / 2 && evenPalindrome % 2 === 0 && oddPalindrome % 2 === 0);\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than or equal to n \n  that form a palindrome.\n\n  Example 1:\n\n      Input: 5\n      Output: [1, 3, 5]\n      Explanation: \n      5 is a palindrome.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 3, 4, 6, 12]\n      Explanation: \n      12 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [...Array(n)].map((_, i) => i + 1).filter((_, i) => i <= n / 2 && evenPalindrome % 2 === 0 && oddPalindrome % 2 === 0);\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than or equal to n \n  that form a palindrome.\n\n  Example 1:\n\n      Input: 5\n      Output: [1, 3, 5]\n      Explanation: \n      5 is a palindrome.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 3, 4, 6, 12]\n      Explanation: \n      12 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [...Array(n)].map((_, i) => i + 1).filter((_, i) => i <= n / 2 && evenPalindrome % 2 === 0 && oddPalindrome % 2 === 0);\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than or equal to n \n  that form a palindrome.\n\n  Example 1:\n\n      Input: 5\n      Output: [1, 3, 5]\n      Explanation: \n      5 is a palindrome.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 3, 4, 6, 12]\n      Explanation: \n      12 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }\n  return [...Array(n)].map((_, i) => i + 1).filter((_, i) => i <= n / 2 && evenPalindrome % 2 === 0 && oddPalindrome % 2 === 0);\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than or equal to n \n  that form a palindrome.\n\n  Example 1:\n\n      Input: 5\n      Output: [1, 3, 5]\n      Explanation: \n      5 is a palindrome.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 3, 4, 6, 12]\n      Explanation: \n      12 is a palindrome.\n\n  Note:\n      1. 1 <= n <= 10^9\n      2. 1 <= n <= 10^9\n      3. n is always odd.\n*/\nconst palindrome = (n) => {\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindrome++;\n    } else {\n      oddPalindrome++;\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e .g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We havean array 'arr'of N  integers arr[1], arr[2], ..., arr[N].The\n number sin the arr ay wi ll be randomly ordere d.Your taskis to determine  if\n  it is possible to get an array sorted  in non-decreasingorder b y performing \n  the fol low ing ope rationon the given array:\n      You are allowed to perform  ri ght s hift oper ation any number of times.\n  \n  One right shift operatio n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*We havean array 'arr'of N  integers arr[1], arr[2],..., arr[N].The\n number sin the arr ay wi ll be randomly ordere d.Your taskis to determine  if\n  it is possible to get an array sorted  in non-decreasingorder b y performing \n  the fol low ing ope rationon the given array:\n      You are allowed to perform  ri ght s hift oper ation any number of times.\n  \n  One right shift operatio n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let lastElement = sortedArr.pop();\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== lastElement) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform ri ght\n  s hift oper ation any number of times.\n  One right shift operation n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveAllBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveAllBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveAllBall = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== sortedArr[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform ri ght\n  s hift oper ation any number of times.\n  One right shift operation n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveAllBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveAllBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveAllBalls = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== sortedArr[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform ri ght\n  s hift oper ation any number of times.\n  One right shift operation n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveAllBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveAllBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveAllBalls = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== sortedArr[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform ri ght\n  s hift oper ation any number of times.\n  One right shift operation n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveAllBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveAllBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveAllBalls = (arr) => {\n  let sortedArr = arr.sort((a, b) => a - b);\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== sortedArr[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given an array arr of N integers. You are allowed to perform ri ght\n  s hift oper ation any number of times.\n  One right shift operation n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/11", "prompt": "/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X OR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X OR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '0'\n  */\nconst stringXand = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] & b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  NOT on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '111'\n  */\nconst stringNot = (a) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ 1);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] & b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  OR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '01'\n  */\nconst stringOr = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] | b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  XNOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '010'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  NOT on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '010'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  NOT on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '010'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  NOT on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '010'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  NOT on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '010'\n  */\nconst stringXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  NOT on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '011'\n  */\nconst stringXnor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let dic = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (dic[letter]) {\n      dic[letter]++;\n    } else {\n      dic[letter] = 1;\n    }\n  }\n  return dic;\n};\n\n/*Given a string, return a string with the letters reversed.\n  Example:\n  reverseString('a b c a b') == 'b a c b a'\n  reverseString('') == ''\n  reverseString('a b c a b c a b') == 'b a c b a c b a'\n  reverseString('a b c a b c a b c a b') == 'b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b') == 'b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a c b a'\n  reverseString('a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n W e are given two str ings s and c, you have to deleted all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n W e are given two str ings s and c, you have to deleted all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      result.push(s.charAt(i));\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*Task\n W e are given two str ings s and c, you have to delete all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      result.push(s.charAt(i));\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*Task\n W e are given two str ings s and c, you have to delete all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      result.push(s.charAt(i));\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*Task\n W e are given two str ings s and c, you have to delete all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      result.push(s.charAt(i));\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*Task\n W e are given two str ings s and c, you have to delete all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      result.push(s.charAt(i));\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*Task\n W e are given two str ings s and c, you have to delete all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      result.push(s.charAt(i));\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*Task\n W e are given two str ings s and c, you have to delete all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i)!== c.charAt(0)) {\n      result.push(s.charAt(i));\n    }\n  }\n  return result.reverse().join('');\n};\n\n/*Task\n W e are given two str ings s and c, you have to delete all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let oddCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfOddDigits = str.replace(/\\d/g, '').length;\n    oddCountArr.push(`the number of odd elements ${numOfOddDigits} the str${numOfOddDigits}${str.length} of the ${str.length}nput.`);\n  }\n  return oddCountArr;\n};\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of evendelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of evendigitsin the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfEvenDigits = str.replace(/\\d/g, '').length;\n    evenCountArr.push(`the number of even elements ${numOfEvenDigits} the str${numOfEvenDigits}${str.length} of the ${str.length}nput.`);\n  }\n  return evenCountArr;\n};\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of zerodelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of zerodigitsin the i'th string of the input.\n\n  >>> zeroCount(['1234567'])\n  [\"the number of zero elements 4n the str4ng 4 of the 4nput.\"]\n  >>> zeroCount(['3',\"11111111\"])\n  [\"the number of zero elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of zero elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst zeroCount = (lst) => {\n  let zeroCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfZeroDigits = str.replace(/\\d/g, '').length;\n    zeroCountArr.push(`the number of zero elements ${numOfZeroDigits} the str${numOfZeroDigits}${str.length} of the ${str.length}nput.`);\n  }\n  return zeroCountArr;\n};\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of onedelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of onedigitsin the i'th string of the input.\n\n  >>> oneCount(['1234567'])\n  [\"the number of one elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oneCount(['3',\"11111111\"])\n  [\"the number of one elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of one elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oneCount = (lst) => {\n  let oneCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfOneDigits = str.replace(/\\d/g, '').length;\n    oneCountArr.push(`the number of one elements ${numOfOneDigits} the str${numOfOneDigits}${str.length} of the ${str.length}nput.`);\n  }\n  return oneCountArr;\n};\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of twodelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of twodigitsin the i'th string of the input.\n\n  >>> twoCount(['1234567'])\n  [\"the number of two elements 4n the str4ng 4 of the 4nput.\"]\n  >>> twoCount(['3',\"11111111\"])\n  [\"the number of two elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of two elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst twoCount = (lst) => {\n  let twoCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfTwoDigits = str.replace(/\\d/g, '').length;\n    twoCountArr.push(`the number of two elements ${numOfTwoDigits} the str${numOfTwoDigits}${str.length} of the ${str.length}nput.`);\n  }\n  return twoCountArr;\n};\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of threedelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of threedigitsin the i'th string of the input.\n\n  >>> threeCount(['1234567'])\n  [\"the number of three elements 4n the str4ng 4 of the 4nput.\"]\n  >>> threeCount(['3',\"11111111\"])\n  [\"the number of three elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of three elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst threeCount = (lst) => {\n  let threeCountArr = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let numOfThreeDigits = str.replace(/\\d/g, '').length;\n    threeCountArr.push(`the number of three elements ${numOfThreeDigits} the str${numOfThreeDigits}${str.length} of the ${str.length}nput.`);\n  }\n  return threeCountArr;\n};\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of fourdelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of fourdigitsin the i'th string of the input.\n\n  >>> fourCount(['1234567'])\n  [\"the number of four elements 4n the str4ng 4 of the 4nput.\"]\n  >>> fourCount(['3',\"11111111\"])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givena n array of integers  nums, findthe minimum sum of any non-empty sub-a rr ay\n  ofnu ms.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array of integers  nums, findthe minimum sum of any non-empty sub-a rr ay\n  ofnu ms.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values along the path to the root\n  results in the given sum.\n  Note: For this problem, a path is a chain of nodes that includes the starting node s\n  root and does not contain any nodes equal to s or any child of s.\n*/\nconst hasPathSum = (root, sum) => {\n  if (!root) {\n    return false;\n  }\n  if (root.val === sum) {\n    return true;\n  }\n  if (root.val > sum) {\n    return hasPathSum(root.left, sum) || hasPathSum(root.right, sum);\n  }\n  return false;\n};\n\n/*\n  Given a binary tree and a sum, find if the tree has a root\n  such that adding up all the values ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are  given a rectangula r grid of wells. Each row represents a single well ,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a rectangula r grid of wells. Each row represents a single well,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => row.map((_, j) => 0));\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (buckets[i][j] >= capacity) {\n        buckets[i][j] = 0;\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are  given a rectangula r grid of wells. Each row represents a single well,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => row.map((_, j) => 0));\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (buckets[i][j] >= capacity) {\n        buckets[i][j] = 0;\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are  given a rectangula r grid of wells. Each row represents a single well,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => row.map((_, j) => 0));\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (buckets[i][j] >= capacity) {\n        buckets[i][j] = 0;\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are  given a rectangula r grid of wells. Each row represents a single well,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map((row, i) => row.map((_, j) => 0));\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (buckets[i][j] >= capacity) {\n        buckets[i][j] = 0;\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are  given a rectangula r grid of wells. Each row represents a single well,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this  Kata, you have tosort an array of non-negative integers according t o  number o f one s in their binary rep res entation i n ascending ord er.\n  For similar number of ones, sort base d on decimal value. \n\n  Itmust be implemented lik e t his:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this  Kata, you have tosort an array of non-negative integers according t o  number o f one s in their binary rep res entation i n ascending ord er.\n  For similar number of ones, sort base d on decimal value. \n\n  Itmust be implemented lik e t his:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArray = arr.sort((a, b) => a - b);\n  let sortedArray2 = arr.sort((a, b) => b - a);\n  return sortedArray.concat(sortedArray2);\n};\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort((a, b) => a - b);\n//   let sortedArray2 = arr.sort((a, b) => b - a);\n//   return sortedArray.concat(sortedArray2);\n// };\n\n// const sortArray = (arr) => {\n//   let sortedArray = arr.sort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given astring s and anatu ral number n, you have been tasked to implement \n a  functionthatreturns a list of all  wo rds from s tring s that co ntain exactly \n  n consonants, in order the se words appear inthe str ing s.\n  If the strings i s empty then the function should return an empty list.\n  Note: you  ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given astring s and anatu ral number n, you have been tasked to implement \n a  functionthatreturns a list of all  wo rds from s tring s that co ntain exactly \n  n consonants, in order the se words appear inthe str ing s.\n  If the strings i s empty then the function should return an empty list.\n  Note: you  ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) ==='') {\n      i++;\n    } else {\n      if (s.charAt(i) === n) {\n        list.push(s.substr(i, n));\n        i += n;\n      } else {\n        i++;\n      }\n    }\n  }\n  return list;\n};\n\n/*Given a string, you have been tasked to implement a function that returns a \n string that contains the first n characters of the string in reverse order.\n  If the string s is empty then the function should return an empty string.\n  Note: you ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  reverseString(\"Mary had a little lamb\", 4) ==> \"lamb had a little\"\n  reverseString(\"Mary had a little lamb\", 3) ==> \"Mary had a little\"\n  reverseString(\"simple white space\", 2) ==> \"\"\n  reverseString(\"Hello world\", 4) ==> \"world Hello\"\n  reverseString(\"Uncle sam\", 3) ==> \"sam Uncle\"\n  */\nconst reverseString = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) ==='') {\n      i++;\n    } else {\n      if (s.charAt(i) === n) {\n        list.push(s.substr(i, n));\n        i += n;\n      } else {\n        i++;\n      }\n    }\n  }\n  return list.reverse().join('');\n};\n\n/*Given a string, you have been tasked to implement a function that returns a \n string that contains the first n characters of the string in reverse order.\n  If the string s is empty then the function should return an empty string.\n  Note: you ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  reverseString(\"Mary had a little lamb\", 4) ==> \"lamb had a little\"\n  reverseString(\"Mary had a little lamb\", 3) ==> \"Mary had a little\"\n  reverseString(\"simple white space\", 2) ==> \"\"\n  reverseString(\"Hello world\", 4) ==> \"world Hello\"\n  reverseString(\"Uncle sam\", 3) ==> \"sam Uncle\"\n  */\nconst reverseString = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) ==='') {\n      i++;\n    } else {\n      if (s.charAt(i) === n) {\n        list.push(s.substr(i, n));\n        i += n;\n      } else {\n        i++;\n      }\n    }\n  }\n  return list.reverse().join('');\n};\n\n/*Given a string, you have been tasked to implement a function that returns a \n string that contains the first n characters of the string in reverse order.\n  If the string s is empty then the function should return an empty string.\n  Note: you ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  reverseString(\"Mary had a little lamb\", 4) ==> \"lamb had a little\"\n  reverseString(\"Mary had a little lamb\", 3) ==> \"Mary had a little\"\n  reverseString(\"simple white space\", 2) ==> \"\"\n  reverseString(\"Hello world\", 4) ==> \"world Hello\"\n  reverseString(\"Uncle sam\", 3) ==> \"sam Uncle\"\n  */\nconst reverseString = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) ==='') {\n      i++;\n    } else {\n      if (s.charAt(i) === n) {\n        list.push(s.substr(i, n));\n        i += n;\n      } else {\n        i++;\n      }\n    }\n  }\n  return list.reverse().join('');\n};\n\n/*Given a string, you have been tasked to implement a function that returns a \n string that contains the first n characters of the string in reverse order.\n  If the string s is empty then the function should return an empty string.\n  Note: you ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  reverseString(\"Mary had a little lamb\", 4) ==> \"lamb had a little\"\n  reverseString(\"Mary had a little lamb\", 3) ==> \"Mary had a little\"\n  reverseString(\"simple white space\", 2) ==> \"\"\n  reverseString(\"Hello world\", 4) ==> \"world Hello\"\n  reverseString(\"Uncle sam\", 3) ==> \"sam Uncle\"\n  */\nconst reverseString = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) ==='') {\n      i++;\n    } else {\n      if (s.charAt(i) === n) {\n        list.push(s.substr(i, n));\n        i += n;\n      } else {\n        i++;\n      }\n    }\n  }\n  return list.reverse().join('');\n};\n\n/*Given a string, you have been tasked to implement a function that returns a \n string that contains the first n characters of the string in reverse order.\n  If the string s is empty then the function should return an empty string.\n  Note: you ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  reverseString(\"Mary had a little lamb\", 4) ==> \"lamb had a little\"\n  reverseString(\"Mary had a little lamb\", 3) ==> \"Mary had a little\"\n  reverseString(\"simple white space\", 2) ==> \"\"\n  reverseString(\"Hello world\", 4) ==> \"world Hello\"\n  reverseString(\"Uncle sam\", 3) ==> \"sam Uncle\"\n  */\nconst reverseString = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(i) ==='') {\n      i++;\n    } else {\n      if (s.charAt(i) === n) {\n        list.push(s.substr(i, n));\n        i += n;\n      } else {\n        i++;\n      }\n    }\n  }\n  return list.reverse().join('');\n};\n\n/*Given a string, you have been tasked to implement a function that returns a \n string that contains the first n characters of the string in reverse order.\n  If the string s is empty then the function should return an empty string.\n  Note: you ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  reverseString(\"Mary had a little lamb\", 4) ==> \"lamb had a little\"\n  reverseString(\"Mary had a little lamb\", 3) ==> \"Mary had a little\"\n  reverseString(\"simple white space\", 2) ==> \"\"\n  reverseString(\"Hello world\", 4) ==> \"world Hello\"\n  reverseString(\"Uncle sam\", 3) ==> \"sam Uncle\"\n  */\nconst reverseString = (s, n) => {\n  let list = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s.charAt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/118", "prompt": "/*You aregiven a word. Yourtask is to find the closest vowel that stands betw ee n \n  two c onson ants from the right s ide  of the wo rd (case sensit ive).\n  \n  Vowels in the beginning and endi ng doesn't count. R eturn e mpty string if you didn 't  findanyvowel met the above condition. \n\n You may assume thatthe give n stringcontains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a word. Yourtask is to find the closest vowel that stands betw ee n \n  two c onson ants from the right s ide  of the wo rd (case sensit ive).\n  \n  Vowels in the beginning and endi ng doesn't count. R eturn e mpty string if you didn 't  findanyvowel met the above condition. \n\n You may assume thatthe give n stringcontains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountArr = [];\n  let vowelsCountArrIndex = 0;\n  let vowelsCountArrIndex2 = 0;\n  let vowelsCountArrIndex3 = 0;\n  let vowelsCountArrIndex4 = 0;\n  let vowelsCountArrIndex5 = 0;\n  let vowelsCountArrIndex6 = 0;\n  let vowelsCountArrIndex7 = 0;\n  let vowelsCountArrIndex8 = 0;\n  let vowelsCountArrIndex9 = 0;\n  let vowelsCountArrIndex10 = 0;\n  let vowelsCountArrIndex11 = 0;\n  let vowelsCountArrIndex12 = 0;\n  let vowelsCountArrIndex13 = 0;\n  let vowelsCountArrIndex14 = 0;\n  let vowelsCountArrIndex15 = 0;\n  let vowelsCountArrIndex16 = 0;\n  let vowelsCountArrIndex17 = 0;\n  let vowelsCountArrIndex18 = 0;\n  let vowelsCountArrIndex19 = 0;\n  let vowelsCountArrIndex20 = 0;\n  let vowelsCountArrIndex21 = 0;\n  let vowelsCountArrIndex22 = 0;\n  let vowelsCountArrIndex23 = 0;\n  let vowelsCountArrIndex24 = 0;\n  let vowelsCountArrIndex25 = 0;\n  let vowelsCountArrIndex26 = 0;\n  let vowelsCountArrIndex27 = 0;\n  let vowelsCountArrIndex28 = 0;\n  let vowelsCountArrIndex29 = 0;\n  let vowelsCountArrIndex30 = 0;\n  let vowelsCountArrIndex31 = 0;\n  let vowelsCountArrIndex32 = 0;\n  let vowelsCountArrIndex33 = 0;\n  let vowelsCountArrIndex34 = 0;\n  let vowelsCountArrIndex35 = 0;\n  let vowelsCountArrIndex36 = 0;\n  let vowelsCountArrIndex37 = 0;\n  let vowelsCountArrIndex38 = 0;\n  let vowelsCountArrIndex39 = 0;\n  let vowelsCountArrIndex40 = 0;\n  let vowelsCountArrIndex41 = 0;\n  let vowelsCountArrIndex42 = 0;\n  let vowelsCountArrIndex43 = 0;\n  let vowelsCountArrIndex44 = 0;\n  let vowelsCountArrIndex45 = 0;\n  let vowelsCountArrIndex46 = 0;\n  let vowelsCountArrIndex47 = 0;\n  let vowelsCountArrIndex48 = 0;\n  let vowelsCountArrIndex49 = 0;\n  let vowelsCountArrIndex50 = 0;\n  let vowelsCountArrIndex51 = 0;\n  let vowelsCountArrIndex52 = 0;\n  let vowelsCountArrIndex53 = 0;\n  let vowelsCountArrIndex54 = 0;\n  let vowelsCountArrIndex55 = 0;\n  let vowelsCountArrIndex56 = 0;\n  let vowelsCountArrIndex57 = 0;\n  let vowelsCountArrIndex58 = 0;\n  let vowelsCountArrIndex59 = 0;\n  let vowelsCountArrIndex60 = 0;\n  let vowelsCountArrIndex61 = 0;\n  let vowelsCountArrIndex62 = 0;\n  let vowelsCountArrIndex63 = 0;\n  let vowelsCountArrIndex64 = 0;\n  let vowelsCountArrIndex65 = 0;\n  let vowelsCountArrIndex66 = 0;\n  let vowelsCountArrIndex67 = 0;\n  let vowelsCountArrIndex68 = 0;\n  let vowelsCountArrIndex69 = 0;\n  let vowelsCountArrIndex70 = 0;\n  let vowelsCountArrIndex71 = 0;\n  let vowelsCountArrIndex72 = 0;\n  let vowelsCountArrIndex73 = 0;\n  let vowelsCountArrIndex74 = 0;\n  let vowelsCountArrIndex75 = 0;\n  let vowelsCountArrIndex76 = 0;\n  let vowelsCountArrIndex77 = 0;\n  let vowelsCountArrIndex78 = 0;\n  let vowelsCountArrIndex79 = 0;\n  let vowelsCountArrIndex80 = 0;\n  let vowelsCountArrIndex81 = 0;\n  let vowelsCountArrIndex82 = 0;\n  let vowelsCountArrIndex83 = 0;\n  let vowelsCountArrIndex84 = 0;\n  let vowelsCountArrIndex85 = 0;\n  let vowelsCountArrIndex86 = 0;\n  let vowelsCountArrIndex87 = 0;\n  let vowelsCountArrIndex88 = 0;\n  let vowelsCountArrIndex89 = 0;\n  let vowelsCountArrIndex90 = 0;\n  let vowelsCountArrIndex91 = 0;\n  let vowelsCountArrIndex92 = 0;\n  let vowelsCountArrIndex93 = 0;\n  let vowelsCountArrIndex94 = 0;\n  let vowelsCountArrIndex95 = 0;\n  let vowelsCountArrIndex96 = 0;\n  let vowelsCountArrIndex97 = 0;\n  let vowelsCountArrIndex98 = 0;\n  let vowelsCountArrIndex99 = 0;\n  let vowelsCountArrIndex100 = 0;\n  let vowelsCountArrIndex101 = 0;\n  let vowelsCountArrIndex102 = 0;\n  let vowelsCountArrIndex103 = 0;\n  let vowelsCountArrIndex104 = 0;\n  let vowelsCountArrIndex105 = 0;\n  let vowelsCountArrIndex106 = 0;\n  let vowelsCountArrIndex107 = 0;\n  let vowelsCountArrIndex108 = 0;\n  let vowelsCountArrIndex109 = 0;\n  let vowelsCountArrIndex110 = 0;\n  let vowelsCountArrIndex111 = 0;\n  let vowelsCountArrIndex112 = 0;\n  let vowelsCountArrIndex113 = 0;\n  let vowelsCountArrIndex114 = 0;\n  let vowelsCountArrIndex115 = 0;\n  let vowelsCountArrIndex116 = 0;\n  let vowelsCountArrIndex117 = 0;\n  let vowelsCountArrIndex118 = 0;\n  let vowelsCountArrIndex119 = 0;\n  let vowelsCountArrIndex120 = 0;\n  let vowelsCountArrIndex121 = 0;\n  let vowelsCountArrIndex122 = 0;\n  let vowelsCountArrIndex123 = 0;\n  let vowelsCountArrIndex124 = 0;\n  let vowelsCountArrIndex125 = 0;\n  let vowelsCountArrIndex126 = 0;\n  let vowelsCountArrIndex127 = 0;\n  let vowelsCountArrIndex128 = 0;\n  let vowelsCountArrIndex129 = 0;\n  let vowelsCountArrIndex130 = 0;\n  let vowelsCountArrIndex131 = 0;\n  let vowelsCountArrIndex132 = 0;\n  let vowelsCountArrIndex133 = 0;\n  let vowelsCountArrIndex134 = 0;\n  let vowelsCountArrIndex135 = 0;\n  let vowelsCountArrIndex136 = 0;\n  let vowelsCountArrIndex137 = 0;\n  let vowelsCountArrIndex138 = 0;\n  let vowelsCountArrIndex139 = 0;\n  let vowelsCountArrIndex140 = 0;\n  let vowelsCountArrIndex141 = 0;\n  let vowelsCountArrIndex142 = 0;\n  let vowelsCountArrIndex143 = 0;\n  let vowelsCountArrIndex144 = 0;\n  let vowelsCountArrIndex145 = 0;\n  let vowelsCountArrIndex146 = 0;\n  let vowelsCountArrIndex147 = 0;\n  let vowelsCountArrIndex148 = 0;\n  let vowelsCountArrIndex149 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are  given a list of tw o strings, both strings consist of open  parenthe se s '(' or c loseparentheses ')' only. \n Your job i s to check if i t is possible to concatenate the two string s in\n  some order,that th e resulting string will  be  good. Astring S is considered to be good if and only if all pa ren these s in S\n are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You are  given a list of tw o strings, both strings consist of open  parenthe se s '(' or c loseparentheses ')' only. \n Your job i s to check if i t is possible to concatenate the two string s in\n  some order,that th e resulting string will  be  good. Astring S is considered to be good if and only if all pa ren these s in S\n are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    let str = lst[0];\n    let str2 = lst[1];\n    let stack = [];\n    let stack2 = [];\n    let stack3 = [];\n    let stack4 = [];\n    let stack5 = [];\n    let stack6 = [];\n    let stack7 = [];\n    let stack8 = [];\n    let stack9 = [];\n    let stack10 = [];\n    let stack11 = [];\n    let stack12 = [];\n    let stack13 = [];\n    let stack14 = [];\n    let stack15 = [];\n    let stack16 = [];\n    let stack17 = [];\n    let stack18 = [];\n    let stack19 = [];\n    let stack20 = [];\n    let stack21 = [];\n    let stack22 = [];\n    let stack23 = [];\n    let stack24 = [];\n    let stack25 = [];\n    let stack26 = [];\n    let stack27 = [];\n    let stack28 = [];\n    let stack29 = [];\n    let stack30 = [];\n    let stack31 = [];\n    let stack32 = [];\n    let stack33 = [];\n    let stack34 = [];\n    let stack35 = [];\n    let stack36 = [];\n    let stack37 = [];\n    let stack38 = [];\n    let stack39 = [];\n    let stack40 = [];\n    let stack41 = [];\n    let stack42 = [];\n    let stack43 = [];\n    let stack44 = [];\n    let stack45 = [];\n    let stack46 = [];\n    let stack47 = [];\n    let stack48 = [];\n    let stack49 = [];\n    let stack50 = [];\n    let stack51 = [];\n    let stack52 = [];\n    let stack53 = [];\n    let stack54 = [];\n    let stack55 = [];\n    let stack56 = [];\n    let stack57 = [];\n    let stack58 = [];\n    let stack59 = [];\n    let stack60 = [];\n    let stack61 = [];\n    let stack62 = [];\n    let stack63 = [];\n    let stack64 = [];\n    let stack65 = [];\n    let stack66 = [];\n    let stack67 = [];\n    let stack68 = [];\n    let stack69 = [];\n    let stack70 = [];\n    let stack71 = [];\n    let stack72 = [];\n    let stack73 = [];\n    let stack74 = [];\n    let stack75 = [];\n    let stack76 = [];\n    let stack77 = [];\n    let stack78 = [];\n    let stack79 = [];\n    let stack80 = [];\n    let stack81 = [];\n    let stack82 = [];\n    let stack83 = [];\n    let stack84 = [];\n    let stack85 = [];\n    let stack86 = [];\n    let stack87 = [];\n    let stack88 = [];\n    let stack89 = [];\n    let stack90 = [];\n    let stack91 = [];\n    let stack92 = [];\n    let stack93 = [];\n    let stack94 = [];\n    let stack95 = [];\n    let stack96 = [];\n    let stack97 = [];\n    let stack98 = [];\n    let stack99 = [];\n    let stack100 = [];\n    let stack101 = [];\n    let stack102 = [];\n    let stack103 = [];\n    let stack104 = [];\n    let stack105 = [];\n    let stack106 = [];\n    let stack107 = [];\n    let stack108 = [];\n    let stack109 = [];\n    let stack110 = [];\n    let stack111 = [];\n    let stack112 = [];\n    let stack113 = [];\n    let stack114 = [];\n    let stack115 = [];\n    let stack116 = [];\n    let stack117 = [];\n    let stack118 = [];\n    let stack119 = [];\n    let stack120 = [];\n    let stack121 = [];\n    let stack122 = [];\n    let stack123 = [];\n    let stack124 = [];\n    let stack125 = [];\n    let stack126 = [];\n    let stack127 = [];\n    let stack128 = [];\n    let stack129 = [];\n    let stack130 = [];\n    let stack131 = [];\n    let stack132 = [];\n    let stack133 = [];\n    let stack134 = [];\n    let stack135 = [];\n    let stack136 = [];\n    let stack137 = [];\n    let stack138 = [];\n    let stack139 = [];\n    let stack140 = [];\n    let stack141 = [];\n    let stack142 = [];\n    let stack143 = [];\n    let stack144 = [];\n    let stack145 = [];\n    let stack146 = [];\n    let stack147 = [];\n    let stack148 = [];\n    let stack149 = [];\n    let stack150 = [];\n    let stack151 = [];\n    let stack152 = [];\n    let stack153 = [];\n    let stack154 = [];\n    let stack155 = [];\n    let stack156 = [];\n    let stack157 = [];\n    let stack158 = [];\n    let stack159 = [];\n    let stack160 = [];\n    let stack161 = [];\n    let stack162 = [];\n    let stack163 = [];\n    let stack164 = [];\n    let stack165 = [];\n    let stack166 = [];\n    let stack167 = [];\n    let stack168 = [];\n    let stack169 = [];\n    let stack170 = [];\n    let stack171 = [];\n    let stack172 = [];\n    let stack173 = [];\n    let stack174 = [];\n    let stack175 = [];\n    let stack176 = [];\n    let stack177 = [];\n    let stack178 = [];\n    let stack179 = [];\n    let stack180 = [];\n    let stack181 = [];\n    let stack182 = [];\n    let stack183 = [];\n    let stack184 = [];\n    let stack185 = [];\n    let stack186 = [];\n    let stack187 = [];\n    let stack188 = [];\n    let stack189 = [];\n    let stack190 = [];\n    let stack191 = [];\n    let stack192 = [];\n    let stack193 = [];\n    let stack194 = [];\n    let stack195 = [];\n    let stack196 = [];\n    let stack197 = [];\n    let stack198 = [];\n    let stack199 = [];\n    let stack200 = [];\n    let stack201 = [];\n    let stack202 = [];\n    let stack203 = [];\n    let stack204 = [];\n    let stack205 = [];\n    let stack206 = [];\n    let stack207 = [];\n    let stack208 = [];\n    let stack209 = [];\n    let stack210 = [];\n    let stack211 = [];\n    let stack212 = [];\n    let stack213 = [];\n    let stack214 = [];\n    let stack215 = [];\n    let stack216 = [];\n    let stack217 = [];\n    let stack218 = [];\n    let stack219 = [];\n    let stack220 = [];\n    let stack221 = [];\n    let stack222 = [];\n    let stack223 = [];\n    let stack224 = [];\n    let stack225 = [];\n    let stack226 = [];\n    let stack227 = [];\n    let stack228 = [];\n    let stack229 = [];\n    let stack230 = [];\n    let stack231 = [];\n    let stack232 = [];\n    let stack233 = [];\n    let stack234 = [];\n    let stack235 = [];\n    let stack236 = [];\n    let stack237 = [];\n    let stack238 = [];\n    let stack239 = [];\n    let stack240 = [];\n    let stack241 = [];\n    let stack242 = [];\n    let stack243 = [];\n    let stack244 = [];\n    let stack245 = [];\n    let stack246 = [];\n    let stack247 = [];\n    let stack248 = [];\n    let stack249 = [];\n    let stack250 = [];\n    let stack251 = [];\n    let stack252 = [];\n    let stack253 = [];\n    let stack254 = [];\n    let stack255 = [];\n    let stack256 = [];\n    let stack257", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out oflist of strings, re turn the longest one. Return the first onein case  o f multiple \n  st rings of the same len gth . Return n ull in case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Out oflist of strings, re turn the longest one. Return the first onein case  o f multiple \n  st rings of the same len gth. Return n ull in case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, return the first character of the string\nconst firstChar = (str) => {\n  return str[0]\n}\n\n// Given a string, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givena n array arr ofinte gers and a positive integer k, return asorted lis t\n  of leng th kwith the maximum k nu mbe rsin arr. \n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array arr ofinte gers and a positive integer k, return asorted lis t\n  of leng th kwith the maximum k nu mbe rsin arr. \n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[index]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k largest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [5, 6]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [5, 3]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 0\n      Output: []\n\n  Note:\n      1. 1 <= k <= len(arr)\n      2. 1 <= arr[i] <= 10^5\n*/\nconst kthLargest = (arr, k) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (index === k) {\n      break;\n    }\n    result.push(arr[index]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k smallest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 0\n      Output: []\n\n  Note:\n      1. 1 <= k <= len(arr)\n      2. 1 <= arr[i] <= 10^5\n*/\nconst kthSmallest = (arr, k) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (index === k) {\n      break;\n    }\n    result.push(arr[index]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k largest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 0\n      Output: []\n\n  Note:\n      1. 1 <= k <= len(arr)\n      2. 1 <= arr[i] <= 10^5\n*/\nconst kthLargestReverse = (arr, k) => {\n  const result = [];\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (index === k) {\n      break;\n    }\n    result.push(arr[index]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k smallest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 0\n      Output: []\n\n  Note:\n      1. 1 <= k <= len(arr)\n      2. 1 <= arr[i] <= 10^5\n*/\nconst kthSmallestReverse = (arr, k) => {\n  const result = [];\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (index === k) {\n      break;\n    }\n    result.push(arr[index]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k largest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 0\n      Output: []\n\n  Note:\n      1. 1 <= k <= len(arr)\n      2. 1 <= arr[i] <= 10^5\n*/\nconst kthLargestSortedArray = (arr, k) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (index === k) {\n      break;\n    }\n    result.push(arr[i]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k smallest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 0\n      Output: []\n\n  Note:\n      1. 1 <= k <= len(arr)\n      2. 1 <= arr[i] <= 10^5\n*/\nconst kthSmallestSortedArray = (arr, k) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (index === k) {\n      break;\n    }\n    result.push(arr[i]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k largest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 0\n      Output: []\n\n  Note:\n      1. 1 <= k <= len(arr)\n      2. 1 <= arr[i] <= 10^5\n*/\nconst kthLargestSortedArrayReverse = (arr, k) => {\n  const result = [];\n  let index = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (index === k) {\n      break;\n    }\n    result.push(arr[i]);\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given an array arr of positive integers and an integer k, \n  return a new array with the k smallest elements taken from the array. \n  \n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 2\n      Output: [1, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 4, 2], k = 1\n      Output: [1, 5]\n\n  Example 3:\n\n      Input", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givena  non-empty array of  integers arr and an integer k, return\n the sum o fthe elemen ts wi th at most two digits  fr omthe fir st k elements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  non-empty array of  integers arr and an integer k, return\n the sum o fthe elemen ts wi th at most two digits  fr omthe fir st k elements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [5, 7, 3]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst largestAndSum = (arr) => {\n  let largest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [largest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [1, 3, 5]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst smallestAndSum = (arr) => {\n  let smallest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [smallest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [5, 7, 3]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst largestAndSum = (arr) => {\n  let largest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [largest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [1, 3, 5]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst smallestAndSum = (arr) => {\n  let smallest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [smallest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [5, 7, 3]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst largestAndSum = (arr) => {\n  let largest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [largest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [1, 3, 5]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst smallestAndSum = (arr) => {\n  let smallest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [smallest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [5, 7, 3]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst largestAndSum = (arr) => {\n  let largest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [largest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [1, 3, 5]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst smallestAndSum = (arr) => {\n  let smallest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [smallest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the largest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the exact same number of elements as the given array. \n  \n  Example:\n\n      Input: [1, 5, 3, 2]\n      Output: [5, 7, 3]\n  \n  Constraints:\n      1. 0 <= arr[i] <= 1000\n      2. arr has distinct elements\n  */\nconst largestAndSum = (arr) => {\n  let largest = arr[0];\n  let sum = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n    sum += arr[i];\n  }\n  return [largest, sum];\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the smallest number in the array followed by the\n  sum of the other numbers in the array. The returned array should\n  have the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givena  positive integer n , return a sorted list that has the oddnumbers in  c ollatz seq uence .\n\n  The Collatz conj ect ure is a c onjecture in ma thematics that concerns a sequence defined  as follows: start  with a ny positive integer n.The n eachterm is obtained from the \n  previous term as follows: if t heprevi ous termis even, the next term is one halfof \n  the previous te rm. If the previous term is odd, the next termis 3 times theprevious\n  term plus 1. The conjecture is that  no matter what value of n, thesequence will a lways re ach 1.\n\n Note: \n      1. Collatz (1) is [1].\n      2.returned l ists orted i n increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, return a sorted list that has the oddnumbers in  c ollatz seq uence.\n\n  The Collatz conj ect ure is a c onjecture in ma thematics that concerns a sequence defined  as follows: start  with a ny positive integer n.The n eachterm is obtained from the \n  previous term as follows: if t heprevi ous termis even, the next term is one halfof \n  the previous te rm. If the previous term is odd, the next termis 3 times theprevious\n  term plus 1. The conjecture is that  no matter what value of n, thesequence will a lways re ach 1.\n\n Note: \n      1. Collatz (1) is [1].\n      2.returned l ists orted i n increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let prev = 0;\n  let next = 1;\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      prev = next;\n      next = next * 2 + 1;\n    } else {\n      next = next * 2 + 1;\n    }\n    arr.push(prev);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the number of steps to reach a positive integer power of n.\n\n  For example:\n  powersOfTwo(3) returns 1 since 2^3 = 8\n  powersOfTwo(5) returns 3 since 2^5 = 32\n  powersOfTwo(9) returns 2 since 2^9 = 512\n  powersOfTwo(10) returns 4 since 2^10 = 1024\n  powersOfTwo(20) returns 6 since 2^20 = 2048\n  powersOfTwo(25) returns 9 since 2^25 = 10240\n  powersOfTwo(30) returns 10 since 2^30 = 102400\n  powersOfTwo(100) returns 100 since 2^100 = 102400000\n  powersOfTwo(200) returns 200 since 2^200 = 102400000000\n  powersOfTwo(300) returns 300 since 2^300 = 10240000000000\n  powersOfTwo(1000) returns 1000 since 2^1000 = 1024000000000000\n  powersOfTwo(2000) returns 2000 since 2^2000 = 102400000000000000\n  powersOfTwo(3000) returns 3000 since 2^3000 = 1024000000000000000\n  powersOfTwo(10000) returns 10000 since 2^10000 = 10240000000000000000\n  powersOfTwo(20000) returns 20000 since 2^20000 = 1024000000000000000000\n  powersOfTwo(30000) returns 30000 since 2^30000 = 1024000000000000000000000\n  powersOfTwo(100000) returns 100000 since 2^100000 = 1024000000000000000000000000\n  powersOfTwo(200000) returns 200000 since 2^200000 = 102400000000000000000000000000\n  powersOfTwo(300000) returns 300000 since 2^300000 = 102400000000000000000000000000000\n  powersOfTwo(1000000) returns 1000000 since 2^1000000 = 1024000000000000000000000000000000\n  powersOfTwo(2000000) returns 2000000 since 2^2000000 = 10240000000000000000000000000000000\n  powersOfTwo(3000000) returns 3000000 since 2^3000000 = 10240000000000000000000000000000000\n  powersOfTwo(10000000) returns 10000000 since 2^10000000 = 1024000000000000000000000000000000\n  powersOfTwo(20000000) returns 20000000 since 2^20000000 = 10240000000000000000000000000000000\n  powersOfTwo(30000000) returns 30000000 since 2^30000000 = 10240000000000000000000000000000000\n  powersOfTwo(100000000) returns 100000000 since 2^100000000 = 1024000000000000000000000000000000\n  powersOfTwo(200000000) returns 200000000 since 2^200000000 = 10240000000000000000000000000000000\n  powersOfTwo(300000000) returns 300000000 since 2^300000000 = 10240000000000000000000000000000000\n  powersOfTwo(1000000000) returns 1000000000 since 2^1000000000 = 1024000000000000000000000000000000\n  powersOfTwo(2000000000) returns 2000000000 since 2^2000000000 = 10240000000000000000000000000000000\n  powersOfTwo(3000000000) returns 3000000000 since 2^3000000000 = 10240000000000000000000000000000000\n  powersOfTwo(10000000000) returns 10000000000 since 2^10000000000 = 1024000000000000000000000000000000\n  powersOfTwo(20000000000) returns 20000000000 since 2^20000000000 = 10240000000000000000000000000000000\n  powersOfTwo(300000000000) returns 300000000000 since 2^300000000000 = 10240000000000000000000000000000000\n  powersOfTwo(1000000000000) returns 1000000000000 since 2^1000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(2000000000000) returns 2000000000000 since 2^2000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(30000000000000) returns 30000000000000 since 2^30000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(100000000000000) returns 100000000000000 since 2^100000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(200000000000000) returns 200000000000000 since 2^200000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(300000000000000) returns 300000000000000 since 2^300000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(10000000000000000) returns 10000000000000000 since 2^10000000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(2000000000000000) returns 2000000000000000 since 2^2000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(3000000000000000) returns 3000000000000000 since 2^3000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(1000000000000000000) returns 1000000000000000000 since 2^1000000000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(200000000000000000) returns 200000000000000000 since 2^200000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(300000000000000000) returns 300000000000000000 since 2^300000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(10000000000000000000) returns 10000000000000000000 since 2^10000000000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(20000000000000000000) returns 20000000000000000000 since 2^20000000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(30000000000000000000) returns 30000000000000000000 since 2^30000000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(1000000000000000000000) returns 1000000000000000000000 since 2^1000000000000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(200000000000000000000) returns 200000000000000000000 since 2^200000000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(300000000000000000000) returns 300000000000000000000 since 2^300000000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(10000000000000000000000) returns 10000000000000000000000 since 2^10000000000000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(20000000000000000000000) returns 20000000000000000000000 since 2^20000000000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(30000000000000000000000) returns 30000000000000000000000 since 2^30000000000000000000000 = 10240000000000000000000000000000000\n  powersOfTwo(1000000000000000000000000) returns 1000000000000000000000000 since 2^1000000000000000000000000 = 1024000000000000000000000000000000\n  powersOfTwo(200000000000000000000000) returns 200000000000000000000000 since 2^200000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have  to write a functio n which validates a given date string and\n return strue ifth e dat e is valid otherwisefal se.\n  Thedate is valid i f all of the following rules are satisfied: \n  1. The datestri ng is n ot empty.\n  2. The numb erof days isnot less than 1 or higher than 31 days for months 1,3,5 ,7, 8,10, 12. And t he number of days isnot less than1 or higher than 30 d ays for months 4,6,9,11. And, the numberof day s is not less than 1 or higher than 29 for the month 2.\n  3.The months should not be less th an 1 or higherthan 12. \n  4. Thedate should be in the f ormat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have  to write a functio n which validates a given date string and\n return strue ifth e dat e is valid otherwisefal se.\n  Thedate is valid i f all of the following rules are satisfied: \n  1. The datestri ng is n ot empty.\n  2. The numb erof days isnot less than 1 or higher than 31 days for months 1,3,5,7, 8,10, 12. And t he number of days isnot less than1 or higher than 30 d ays for months 4,6,9,11. And, the numberof day s is not less than 1 or higher than 29 for the month 2.\n  3.The months should not be less th an 1 or higherthan 12. \n  4. Thedate should be in the f ormat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst validDate = (date) => {\n  // Write your code here\n}\n\n// Write your code here\n\nconst ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Givena  string of words, r eturn a list of words split on whitespace,if no w hi tespaces e xists  in the text you\n  sh oul d split on commas ',' ifno commas exists you should return the numb er of lower-case le tters w ith odd order in the\n alp habet,ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  string of words, r eturn a list of words split on whitespace,if no w hi tespaces e xists  in the text you\n  sh oul d split on commas ',' ifno commas exists you should return the numb er of lower-case le tters w ith odd order in the\n alp habet,ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/* Given a string, return a new string with all the words reversed.\n  Examples\n  reverseWords(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWords(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWords(\"abcdef\") == 3\n  */\nconst reverseWords = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on whitespace.\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (txt) => {\n  const words = splitWords(txt);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word) {\n      result.push(word.split('').reverse().join(''));\n    }\n  }\n  return result.join(' ');\n};\n\n/* Given a string, return a new string with all the words reversed, splitting on commas and whitespace (including spaces).\n  Examples\n  reverseWordsSplit(\"Hello world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"Hello,world!\") ➞ \"!dlrow olleH\"\n  reverseWordsSplit(\"abcdef\") == 3\n  */\nconst reverseWordsSplit = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/126", "prompt": "/* Givena  list of numbers, r eturn whether or not they are sorted\n  in ascendin gorder. Iflisthas more than 1 dupli cat e of the s ame\n  number, r eturn false. Assume no negative numbers and  only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  list of numbers, r eturn whether or not they are sorted\n  in ascendin gorder. Iflisthas more than 1 dupli cat e of the s ame\n  number, r eturn false. Assume no negative numbers and  only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = true;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] > lst[j]) {\n        sorted = false;\n        break;\n      }\n    }\n  }\n  return sorted;\n};\n\n/* Given a list, return a list containing all the numbers in the\n  list that are less than the number in the list at position i.\n  Examples\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  listOfNumbers([1, 2, 3, 4, 5]) ➞ [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/127", "prompt": "/*You aregiven two intervals ,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    [start1, start2] = [start2, start1];\n  }\n  if (end1 < end2) {\n    [end1, end2] = [end2, end1];\n  }\n  if (start1 > end2) {\n    [start1, end2] = [end2, start1];\n  }\n  if (start2 === end2) {\n    return [\"NO\"];\n  }\n  if (start1 === end1) {\n    return [\"NO\"];\n  }\n  const [start1Start, start1End] = [start1, end1];\n  const [start2Start, start2End] = [start2, end2];\n  let [start1StartInt, start1EndInt] = [start1Start, start1End];\n  let [start2StartInt, start2EndInt] = [start2Start, start2End];\n  if (start1StartInt > start2StartInt) {\n    [start1StartInt, start2StartInt] = [start2StartInt, start1StartInt];\n  }\n  if (start1EndInt < start2EndInt) {\n    [start1EndInt, start2EndInt] = [start2EndInt, start1EndInt];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt === start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt === start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt === start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt === start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt === start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt === start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt > start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt === start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt < start2StartInt && start1EndInt > start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt < start2EndInt) {\n    return [\"NO\"];\n  }\n  if (start1StartInt === start2StartInt && start1EndInt > start2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0 .\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * signs[i]\n  }\n  return sum\n}\n\n/*\n  You are  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givena  grid with N rows a nd N columns (N >= 2) and a positive integer k, \n e ach cell o f the  grid contains a valu e.Every inte ger in the rang e [1, N * N]\n  inclusive appears exactly on ce on the cells ofthe gri d.\n\n  You have to findthe  minimu m pathof length k in the grid. You can start\n  from any ce ll, andin each s tep you can move to any of the neighbor cells,\n  in othe r words, you can go to cells which sharean edg e with you current\n  cell.\n  Please note that a path of lengt h k means visiting exactly k cel ls (not\n  neces sarily d istinct).  You CANNOT go off the grid.\n  A path A (of  length k)  isc onsider edless than a path B (of len gth k) if  after making the ordered lists  ofthe valueson the ce llsthat A and B go \n  through (let's callthem lst_A and lst_B), lst_A is lexicogra phically less\n  than lst_B, in ot her words, t he reexist an  integer indexi (1 <= i <= k)\n  such that ls t_A[i] < lst_B[i] and for any j(1 <=j < i) w e have\n  lst_A[j ] = lst_B[j].\n  It is gu aranteed that the answeris unique.\n  Return an ordered list of the values on the cells thatthe  minimum path go thr ou gh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  grid with N rows a nd N columns (N >= 2) and a positive integer k, \n e ach cell o f the  grid contains a valu e.Every inte ger in the rang e [1, N * N]\n  inclusive appears exactly on ce on the cells ofthe gri d.\n\n  You have to findthe  minimu m pathof length k in the grid. You can start\n  from any ce ll, andin each s tep you can move to any of the neighbor cells,\n  in othe r words, you can go to cells which sharean edg e with you current\n  cell.\n  Please note that a path of lengt h k means visiting exactly k cel ls (not\n  neces sarily d istinct).  You CANNOT go off the grid.\n  A path A (of  length k)  isc onsider edless than a path B (of len gth k) if  after making the ordered lists  ofthe valueson the ce llsthat A and B go \n  through (let's callthem lst_A and lst_B), lst_A is lexicogra phically less\n  than lst_B, in ot her words, t he reexist an  integer indexi (1 <= i <= k)\n  such that ls t_A[i] < lst_B[i] and for any j(1 <=j < i) w e have\n  lst_A[j ] = lst_B[j].\n  It is gu aranteed that the answeris unique.\n  Return an ordered list of the values on the cells thatthe  minimum path go thr ou gh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = Math.pow(N + 1, k);\n  const path = [];\n  const visited = [];\n  const ans = [];\n  const helper = (i, j, k) => {\n    if (visited[i][j] || grid[i][j] === 0) return;\n    visited[i][j] = true;\n    path.push(grid[i][j]);\n    if (i === N - 1 && j === N - 1 && k === N - 1) ans.push(path.slice());\n    if (i === N - 1 && j === N - 1 && k < N - 1) helper(i, j, k + 1);\n    if (i < N - 1 && j === N - 1 && k < N - 1) helper(i + 1, j, k + 1);\n    if (i < N - 1 && j === N - 1 && k > 0) helper(i + 1, j, k - 1);\n    if (i < N - 1 && j < N - 1 && k > 0) helper(i + 1, j + 1, k - 1);\n    if (i < N - 1 && j < N - 1 && k < N - 1) helper(i + 1, j + 1, k + 1);\n    if (i < N - 1 && j > 0 && k < N - 1) helper(i + 1, j, k + 1);\n    if (i < N - 1 && j > 0 && k > 0) helper(i + 1, j - 1, k - 1);\n    if (i < N - 1 && j > 0 && k > 0) helper(i + 1, j - 1, k + 1);\n    if (i < N - 1 && j < N - 1 && k > 0) helper(i + 1, j + 1, k - 1);\n    if (i < N - 1 && j < N - 1 && k < N - 1) helper(i + 1, j + 1, k + 1);\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      helper(i, j, k);\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n      15\n*/\nconst trapezoidArea = (m, n) => {\n  const trapezoidArea = m * n;\n  return trapezoidArea;\n};\n\n/*\n  Given a 2D grid map of m rows and n columns. Find the area of trapezoid\n  formed by given start and end points.\n\n  Example:\n\n      Input:\n      3\n      1 2 3\n      4 5 6\n      7 8 9\n      Output:\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Returna greatest common d ivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returna greatest common d ivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n\n  return greatestCommonDivisor(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * If b is 0, the result is a\n * \n * If b is 1, the result is a\n * \n * If b is 2, the result is a * 2\n * \n * If b is negative, the result is a * b % a\n * \n * If b is positive, the result is a * b % a + a\n * \n * If b is even, the result is a * b % a + a\n * \n * If b is odd, the result is a * b % a\n * \n * If b is NaN, the result is NaN\n * \n * If b is Infinity, the result is Infinity\n * \n * If b is -Infinity, the result is -Infinity\n * \n * If b is less than 0, the result is -Infinity\n * \n * If b is greater than 0, the result is -Infinity\n * \n * If b is less than or equal to 0, the result is -Infinity\n * \n * If b is greater than or equal to 0, the result is -Infinity\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to +Infinity, the result is +Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to 0, the result is 0\n * \n * If b is equal to 1, the result is a\n * \n * If b is equal to 2, the result is a * 2\n * \n * If b is equal to Infinity, the result is Infinity\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n * If b is equal to NaN, the result is NaN\n * \n * If b is equal to -0, the result is -0\n * \n * If b is equal to +0, the result is +0\n * \n * If b is equal to -Infinity, the result is -Infinity\n * \n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone  knows Fibonacci se quence, it was studied deeply by mathematicians in    the last  coup le centuries. However , w hat people don't know isTribonacci sequence.\n  Tribonacci sequenceis defined by the r ecurren ce:\n  tri(1) = 3\n  tri( n)= 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + t ri( n+ 1 ), if n i s odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Everyone  knows Fibonacci se quence, it was studied deeply by mathematicians in    the last  coup le centuries. However, w hat people don't know isTribonacci sequence.\n  Tribonacci sequenceis defined by the r ecurren ce:\n  tri(1) = 3\n  tri( n)= 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + t ri( n+ 1 ), if n i s odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n === 1) {\n    arr.push(1);\n    return arr;\n  }\n  if (n === 2) {\n    arr.push(3);\n    return arr;\n  }\n  if (n % 2 === 0) {\n    arr.push(tri(n - 1) + tri(n - 2));\n    return arr;\n  }\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  return arr;\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth number of the Fibonacci sequence.\n  Examples:\n  fib(3) = 1\n  fib(5) = 2\n  fib(10) = 3\n  fib(15) = 3\n  fib(20) = 3\n  fib(21) = 3\n  fib(30) = 3\n  fib(35) = 3\n  fib(40) = 3\n  fib(45) = 3\n  fib(50) = 3\n  fib(55) = 3\n  fib(60) = 3\n  fib(65) = 3\n  fib(70) = 3\n  fib(75) = 3\n  fib(80) = 3\n  fib(85) = 3\n  fib(90) = 3\n  fib(95) = 3\n  fib(100) = 3\n  fib(105) = 3\n  fib(110) = 3\n  fib(115) = 3\n  fib(120) = 3\n  fib(125) = 3\n  fib(130) = 3\n  fib(135) = 3\n  fib(140) = 3\n  fib(145) = 3\n  fib(150) = 3\n  fib(155) = 3\n  fib(160) = 3\n  fib(165) = 3\n  fib(170) = 3\n  fib(175) = 3\n  fib(180) = 3\n  fib(185) = 3\n  fib(190) = 3\n  fib(195) = 3\n  fib(200) = 3\n  fib(205) = 3\n  fib(210) = 3\n  fib(215) = 3\n  fib(220) = 3\n  fib(225) = 3\n  fib(230) = 3\n  fib(235) = 3\n  fib(240) = 3\n  fib(245) = 3\n  fib(250) = 3\n  fib(255) = 3\n  fib(265) = 3\n  fib(270) = 3\n  fib(275) = 3\n  fib(280) = 3\n  fib(285) = 3\n  fib(290) = 3\n  fib(295) = 3\n  fib(300) = 3\n  fib(305) = 3\n  fib(310) = 3\n  fib(315) = 3\n  fib(320) = 3\n  fib(325) = 3\n  fib(330) = 3\n  fib(335) = 3\n  fib(340) = 3\n  fib(345) = 3\n  fib(350) = 3\n  fib(355) = 3\n  fib(360) = 3\n  fib(365) = 3\n  fib(370) = 3\n  fib(375) = 3\n  fib(380) = 3\n  fib(385) = 3\n  fib(390) = 3\n  fib(395) = 3\n  fib(400) = 3\n  fib(405) = 3\n  fib(410) = 3\n  fib(415) = 3\n  fib(420) = 3\n  fib(425) = 3\n  fib(430) = 3\n  fib(435) = 3\n  fib(440) = 3\n  fib(445) = 3\n  fib(450) = 3\n  fib(455) = 3\n  fib(460) = 3\n  fib(465) = 3\n  fib(470) = 3\n  fib(475) = 3\n  fib(480) = 3\n  fib(485) = 3\n  fib(490) = 3\n  fib(495) = 3\n  fib(500) = 3\n  fib(505) = 3\n  fib(510) = 3\n  fib(515) = 3\n  fib(520) = 3\n  fib(525) = 3\n  fib(530) = 3\n  fib(535) = 3\n  fib(540) = 3\n  fib(545) = 3\n  fib(550) = 3\n  fib(555) = 3\n  fib(560) = 3\n  fib(565) = 3\n  fib(570) = 3\n  fib(575) = 3\n  fib(580) = 3\n  fib(585) = 3\n  fib(590) = 3\n  fib(595) = 3\n  fib(600) = 3\n  fib(605) = 3\n  fib(610) = 3\n  fib(615) = 3\n  fib(620) = 3\n  fib(625) = 3\n  fib(630) = 3\n  fib(635) = 3\n  fib(640) = 3\n  fib(645) = 3\n  fib(650) = 3\n  fib(655) = 3\n  fib(660) = 3\n  fib(665) = 3\n  fib(670) = 3\n  fib(675) = 3\n  fib(680) = 3\n  fib(685) = 3\n  fib(690) = 3\n  fib(695) = 3\n  fib(700) = 3\n  fib(705) = 3\n  fib(710) = 3\n  fib(715) = 3\n  fib(720) = 3\n  fib(725) = 3\n  fib(730) = 3\n  fib(735) = 3\n  fib(740) = 3\n  fib(745) = 3\n  fib(750) = 3\n  fib(755) = 3\n  fib(760) = 3\n  fib(765) = 3\n  fib(770) = 3\n  fib(775) = 3\n  fib(780) = 3\n  fib(785) = 3\n  fib(790) = 3\n  fib(795) = 3\n  fib(800) = 3\n  fib(805) = 3\n  fib(810) = 3\n  fib(815) = 3\n  fib(820) = 3\n  fib(825) = 3\n  fib(830) = 3\n  fib(835) = 3\n  fib(840) = 3\n  fib(845) = 3\n  fib(850) = 3\n  fib(855) = 3\n  fib(860) = 3\n  fib(865) = 3\n  fib(870) = 3\n  fib(875) = 3\n  fib(880) = 3\n  fib(885)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given apositive integer n,  return theproduct of the odd digits.\n Return 0if  all digit s are  even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given apositive integer n,  return theproduct of the odd digits.\n Return 0if  all digit s are  even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i += 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the digits of n.\n Return 0 if  n is 0.\n  For example:\n  digitSum(1)  == 1\n  digitSum(4)  == 3\n  digitSum(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/*Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let stack = []\n  let openingBrackets = 0\n  let closingBrackets = 0\n  for(let i = 0; i < string.length; i++){\n    if(string[i] == '['){\n      openingBrackets++\n      stack.push(string[i])\n    }\n    if(string[i] == ']'){\n      closingBrackets++\n      if(openingBrackets == closingBrackets){\n        if(stack.length == 0){\n          return true\n        }else{\n          return false\n        }\n      }\n      stack.pop()\n    }\n  }\n  return false\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let stack = []\n  let openingBrackets = 0\n  let closingBrackets = 0\n  for(let i = 0; i < string.length; i++){\n    if(string[i] == '['){\n      openingBrackets++\n      stack.push(string[i])\n    }\n    if(string[i] == ']'){\n      closingBrackets++\n      if(openingBrackets == closingBrackets){\n        if(stack.length == 0){\n          return true\n        }else{\n          return false\n        }\n      }\n      stack.pop()\n    }\n  }\n  return false\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let stack = []\n  let openingBrackets = 0\n  let closingBrackets = 0\n  for(let i = 0; i < string.length; i++){\n    if(string[i] == '['){\n      openingBrackets++\n      stack.push(string[i])\n    }\n    if(string[i] == ']'){\n      closingBrackets++\n      if(openingBrackets == closingBrackets){\n        if(stack.length == 0){\n          return true\n        }else{\n          return false\n        }\n      }\n      stack.pop()\n    }\n  }\n  return false\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let stack = []\n  let openingBrackets = 0\n  let closingBrackets = 0\n  for(let i = 0; i < string.length; i++){\n    if(string[i] == '['){\n      openingBrackets++\n      stack.push(string[i])\n    }\n    if(string[i] == ']'){\n      closingBrackets++\n      if(openingBrackets == closingBrackets){\n        if(stack.length == 0){\n          return true\n        }else{\n          return false\n        }\n      }\n      stack.pop()\n    }\n  }\n  return false\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let stack = []\n  let openingBrackets = 0\n  let closingBrackets = 0\n  for(let i = 0; i < string.length; i++){\n    if(string[i] == '['){\n      openingBrackets++\n      stack.push(string[i])\n    }\n    if(string[i] == ']'){\n      closingBrackets++\n      if(openingBrackets == closingBrackets){\n        if(stack.length == 0){\n          return true\n        }else{\n          return false\n        }\n      }\n      stack.pop()\n    }\n  }\n  return false\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let stack = []\n  let openingBrackets = 0\n  let closingBrackets = 0\n  for(let i = 0; i < string.length; i++){\n    if(string[i] == '['){\n      open", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/133", "prompt": "/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f'\n}\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f'\n}\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f'\n}\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f'\n}\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f'\n}\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f'\n}\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r' || lastChar === '\\v' || lastChar === '\\f'\n}\n\n/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Createa  function which ret urns the smallest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Createa  function which ret urns the smallest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Createa  function which ret urns the smallest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Createa  function which ret urns the smallest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Createa  function which ret urns the smallest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Createa  function which ret urns the smallest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let minIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Createa  function which ret urns the largest index of an ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Createa function that tak es integers, floats, or strings representing\n  rea lnumbers, a nd re turns the larger vari abl e in its g iven variable t ype.\n  Return null if the values are equal. \n  Note: If a realnumberis represented as a str ing , the f loating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n co mpare One(1, \"2 ,3\") ➞\"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne (\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b)=> {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Createa function that tak es integers, floats, or strings representing\n  rea lnumbers, a nd re turns the larger vari abl e in its g iven variable t ype.\n  Return null if the values are equal. \n  Note: If a realnumberis represented as a str ing, the f loating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n co mpare One(1, \"2,3\") ➞\"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne (\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b)=> {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === 4;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive oddnumbe rs\n  Example\n  isEqualToSum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Braz ilian factorial isdefined as:  brazilian_factorial(n) = n! * (n-1)!  *  (n-2)!*... *  1!\n  where n > 0\n\n For  example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Braz ilian factorial isdefined as:  brazilian_factorial(n) = n! * (n-1)!  *  (n-2)!*... *  1!\n  where n > 0\n\n For  example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Function: factorial\n  Return the factorial of a number.\n  Example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/14", "prompt": "/* Returnlist of all prefixe s from shortest to longest of the inputstring\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returnlist of all prefixe s from shortest to longest of the inputstring\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      prefixes.push(char);\n      continue;\n    }\n    const nextChar = string.charAt(i + 1);\n    if (char === nextChar) {\n      prefixes.push(char);\n      i++;\n      continue;\n    }\n    const nextNextChar = string.charAt(i + 2);\n    if (char === nextNextChar && nextChar === nextNextChar.toUpperCase()) {\n      prefixes.push(char);\n      i += 2;\n      continue;\n    }\n    const nextNextNextChar = string.charAt(i + 3);\n    if (char === nextNextNextChar && nextChar === nextNextNextChar && nextNextChar === nextNextChar.toUpperCase()) {\n      prefixes.push(char);\n      i += 3;\n      continue;\n    }\n    const nextNextNextNextChar = string.charAt(i + 4);\n    if (char === nextNextNextNextChar && nextChar === nextNextNextNextChar && nextNextChar === nextNextNextChar.toUpperCase()) {\n      prefixes.push(char);\n      i += 4;\n      continue;\n    }\n    const nextNextNextNextNextChar = string.charAt(i + 5);\n    if (char === nextNextNextNextNextChar && nextChar === nextNextNextNextNextChar && nextNextChar === nextNextNextNextChar.toUpperCase()) {\n      prefixes.push(char);\n      i += 5;\n      continue;\n    }\n  }\n  return prefixes;\n};\n\n/* Return all suffixes of s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      suffixes.push(char);\n      continue;\n    }\n    const nextChar = string.charAt(i - 1);\n    if (char === nextChar) {\n      suffixes.push(char);\n      i--;\n      continue;\n    }\n    const nextNextChar = string.charAt(i - 2);\n    if (char === nextNextChar && nextChar === nextNextChar.toUpperCase()) {\n      suffixes.push(char);\n      i--;\n      continue;\n    }\n    const nextNextNextChar = string.charAt(i - 3);\n    if (char === nextNextNextChar && nextChar === nextNextNextChar && nextNextChar === nextNextChar.toUpperCase()) {\n      suffixes.push(char);\n      i--;\n      continue;\n    }\n    const nextNextNextNextChar = string.charAt(i - 4);\n    if (char === nextNextNextNextChar && nextChar === nextNextNextNextChar && nextNextChar === nextNextNextChar.toUpperCase()) {\n      suffixes.push(char);\n      i--;\n      continue;\n    }\n    const nextNextNextNextNextChar = string.charAt(i - 5);\n    if (char === nextNextNextNextNextChar && nextChar === nextNextNextNextNextChar && nextNextChar === nextNextNextNextChar.toUpperCase()) {\n      suffixes.push(char);\n      i--;\n      continue;\n    }\n  }\n  return suffixes;\n};\n\n/* Return all substrings of s from shortest to longest of the inputstring\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc', 'bc', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      continue;\n    }\n    const nextChar = string.charAt(i + 1);\n    if (char === nextChar) {\n      substrings.push(char);\n      i++;\n      continue;\n    }\n    const nextNextChar = string.charAt(i + 2);\n    if (char === nextNextChar && nextChar === nextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 2;\n      continue;\n    }\n    const nextNextNextChar = string.charAt(i + 3);\n    if (char === nextNextNextChar && nextChar === nextNextNextChar && nextNextChar === nextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 3;\n      continue;\n    }\n    const nextNextNextNextChar = string.charAt(i + 4);\n    if (char === nextNextNextNextChar && nextChar === nextNextNextNextChar && nextNextChar === nextNextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 4;\n      continue;\n    }\n    const nextNextNextNextNextChar = string.charAt(i + 5);\n    if (char === nextNextNextNextNextChar && nextChar === nextNextNextNextNextChar && nextNextChar === nextNextNextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 5;\n      continue;\n    }\n  }\n  return substrings;\n};\n\n/* Return all substrings of s from shortest to longest of the inputstring\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc', 'bc', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      continue;\n    }\n    const nextChar = string.charAt(i + 1);\n    if (char === nextChar) {\n      substrings.push(char);\n      i++;\n      continue;\n    }\n    const nextNextChar = string.charAt(i + 2);\n    if (char === nextNextChar && nextChar === nextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 2;\n      continue;\n    }\n    const nextNextNextChar = string.charAt(i + 3);\n    if (char === nextNextNextChar && nextChar === nextNextNextChar && nextNextChar === nextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 3;\n      continue;\n    }\n    const nextNextNextNextChar = string.charAt(i + 4);\n    if (char === nextNextNextNextChar && nextChar === nextNextNextNextChar && nextNextChar === nextNextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 4;\n      continue;\n    }\n    const nextNextNextNextNextChar = string.charAt(i + 5);\n    if (char === nextNextNextNextNextChar && nextChar === nextNextNextNextNextChar && nextNextChar === nextNextNextNextChar.toUpperCase()) {\n      substrings.push(char);\n      i += 5;\n      continue;\n    }\n  }\n  return substrings;\n};\n\n/* Return all substrings of s from shortest to longest of the inputstring\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc', 'b', 'bc', 'c', 'abc', 'bc', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === char.toUpperCase()) {\n      substrings.push(char);\n      continue;\n    }\n    const nextChar = string.charAt(i + 1);\n    if (char === nextChar) {\n      substrings.push(char);\n      i++;\n      continue;\n    }\n    const nextNextChar = string.charAt(i + 2);\n    if (char === nextNextChar && nextCh", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givena  string text, repla ce all spaces in it with underscores, \n and if ast ring has m ore t han 2 consecutive spa ces ,   thenreplace all con secutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  string text, repla ce all spaces in it with underscores, \n and if ast ring has m ore t han 2 consecutive spa ces,   thenreplace all con secutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  if(text.length <= 2){\n    return text;\n  }\n  \n  newText = newText.replace(/\\s+/g, \"_\");\n  newText = newText.replace(/\\s+$/, \"\");\n  \n  return newText;\n}\n\n/*\n  Given a string, return a new string with all the words \n  separated by spaces.\n  \n  splitWords(\"Hello World\") == \"Hello World\"\n  splitWords(\"Hello   World\") == \"Hello World\"\n  splitWords(\"Hello   World  \") == \"Hello World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World  \") == \"Hello   World\"\n  splitWords(\"Hello   World", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Createa  function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid , and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name .\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty , and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe' , 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Createa  function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid, and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name.\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name = file_name;\n  let file_name = file_name.split('.');\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 || lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// TESTS\nconst tests = [\n  [[], 0],\n  [[1, 2, 3], 6],\n  [[-1, -5, 2, -1, -5], -126],\n];\n\ntests.forEach(([lst, expected]) => {\n  const actual = sumSquares(lst);\n  console.assert(actual === expected, `sumSquares(${JSON.stringify(lst)})\n  should return ${expected}, but instead returned ${actual}`);\n});</code>\n<|/ a tags=arrays,javascript |>\n<| c |>\nThanks for your answer. Your code works perfectly fine. But, can you please explain me the logic behind this code? I am not able to understand it.\n<|/ c |>\n<| c |>\nI added some comments to the code so you can understand it better. Hope it helps.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>\nfunction sumOfSquares(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n}\n\nfunction sumOfCubes(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n}\n\nfunction sumOfDivisors(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimes(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors2(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors3(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors4(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors5(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors6(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors7(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors8(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors9(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors10(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors11(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors12(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors13(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors14(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors15(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors16(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction sumOfPrimeDivisors17(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] % 3 === 0 || arr[i] % 4 === 0) {\n        sum += arr[i];\n      }\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = checkIfPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst checkIfPrime = (length) => {\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport { wordsInSentence }\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = checkIfPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst checkIfPrime = (length) => {\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport { wordsInSentence }\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = checkIfPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst checkIfPrime = (length) => {\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport { wordsInSentence }\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = checkIfPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst checkIfPrime = (length) => {\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport { wordsInSentence }\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = checkIfPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst checkIfPrime = (length) => {\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport { wordsInSentence }\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = checkIfPrime(word.length)\n    if (isPrime) {\n      newWords.push(word)\n    }\n  }\n  return newWords.join(' ')\n}\n\nconst checkIfPrime = (length) => {\n  for (let i = 2; i < length; i++) {\n    if (length % i === 0) {\n      return false\n    }\n  }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let xNum = parseFloat(x);\n  let nNum = parseFloat(n);\n  let xDeno = parseInt(x.split(\"/\")[1]);\n  let nDeno = parseInt(n.split(\"/\")[1]);\n  if (xNum === 0 || nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  if (xDeno == nDeno) {\n    return true;\n  }\n  if (xDeno == nDeno + 1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let xNum = parseFloat(x);\n  let nNum = parseFloat(n);\n  let xDeno = parseInt(x.split(\"/\")[1]);\n  let nDeno = parseInt(n.split(\"/\")[1]);\n  if (xNum === 0 || nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  if (xDeno == nDeno) {\n    return true;\n  }\n  if (xDeno == nDeno + 1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let xNum = parseFloat(x);\n  let nNum = parseFloat(n);\n  let xDeno = parseInt(x.split(\"/\")[1]);\n  let nDeno = parseInt(n.split(\"/\")[1]);\n  if (xNum === 0 || nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  if (xDeno == nDeno) {\n    return true;\n  }\n  if (xDeno == nDeno + 1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let xNum = parseFloat(x);\n  let nNum = parseFloat(n);\n  let xDeno = parseInt(x.split(\"/\")[1]);\n  let nDeno = parseInt(n.split(\"/\")[1]);\n  if (xNum === 0 || nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  if (xDeno == nDeno) {\n    return true;\n  }\n  if (xDeno == nDeno + 1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let xNum = parseFloat(x);\n  let nNum = parseFloat(n);\n  let xDeno = parseInt(x.split(\"/\")[1]);\n  let nDeno = parseInt(n.split(\"/\")[1]);\n  if (xNum === 0 || nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  if (xDeno == nDeno) {\n    return true;\n  }\n  if (xDeno == nDeno + 1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let xNum = parseFloat(x);\n  let nNum = parseFloat(n);\n  let xDeno = parseInt(x.split(\"/\")[1]);\n  let nDeno = parseInt(n.split(\"/\")[1]);\n  if (xNum === 0 || nNum === 0) {\n    return false;\n  }\n  if (xNum === nNum) {\n    return true;\n  }\n  if (xNum < nNum) {\n    return false;\n  }\n  if (xDeno == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writea  function which sor ts the given list of integers\n  in ascending order  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list .\n  For e xample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function which sor ts the given list of integers\n  in ascending order  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      index = i;\n    }\n  }\n  return nums.sort((a, b) => {\n    return a - b;\n  });\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumber = (num) => {\n  let reversedNum = 0;\n  while (num > 0) {\n    reversedNum *= 10;\n    reversedNum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reversedNum *= 10;\n    reversedNum += nums[i];\n  }\n  return reversedNum;\n};\n\n/*\n  Write a function which takes a number as input\n  and returns the number in reverse order.\n  >>> reverseNumber(123)\n  321\n  >>> reverseNumber(0)\n  0\n*/\nconst reverseNumbers = (nums) => {\n  let reversedNum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    reverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are even  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 2 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 4\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are even  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 2 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 6\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are even  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 2 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 6\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are even  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 2 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 6\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are even  (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 2 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 6\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % 10!== 0 && nums[i] % 10 === nums[i - 1] % 10) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[i] < a[j] + a[k]) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[i] < a[j] + a[k]) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[i] < a[j] + a[k]) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[i] < a[j] + a[k]) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[i] < a[j] + a[k]) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[i] < a[j] + a[k]) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      for (let k = j; k <= n; k++) {\n        if (a[i] < a[j] + a[k]) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/148", "prompt": "/* Therea re eight planets in  our solar system: the closerst to the Sun  is Me rc ury, the n ext o ne is Venus, then Ear th,  Mars, Jup iter, Saturn,\n Uranus, Neptune.\n  Write a function that t akes two planet nam es as s trings planet1 and plan et2 .\n  The function should return a tuple containing all planets whos e o rbits  are\n  lo cated between the orbit of planet1and the orbit of plan et2, sorted by\n  the proximity to the sun.\n  Th e function should return an empty tuple if planet1 or planet2 \n  are not correct planet names. \n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Therea re eight planets in  our solar system: the closerst to the Sun  is Me rc ury, the n ext o ne is Venus, then Ear th,  Mars, Jup iter, Saturn,\n Uranus, Neptune.\n  Write a function that t akes two planet nam es as s trings planet1 and plan et2.\n  The function should return a tuple containing all planets whos e o rbits  are\n  lo cated between the orbit of planet1and the orbit of plan et2, sorted by\n  the proximity to the sun.\n  Th e function should return an empty tuple if planet1 or planet2 \n  are not correct planet names. \n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1orbit = orbit(planet1)\n  let planet2orbit = orbit(planet2)\n  let planet1orbitorbit = orbit(planet1orbit)\n  let planet2orbitorbit = orbit(planet2orbit)\n  let planet1orbitorbitorbit = orbit(planet1orbitorbit)\n  let planet2orbitorbitorbit = orbit(planet2orbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2orbitorbitorbitorbit = orbit(planet2orbitorbitorbit)\n  let planet1orbitorbitorbitorbit = orbit(planet1orbitorbitorbit)\n  let planet2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it ,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers ,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort();\n  return sortedList;\n};\n\n/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort();\n  return sortedList;\n};\n\n/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort();\n  return sortedList;\n};\n\n/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort();\n  return sortedList;\n};\n\n/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort();\n  return sortedList;\n};\n\n/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort();\n  return sortedList;\n};\n\n/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabeti", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Returna string containing  space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returna string containing  space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence('0')\n  '0'\n  >>> stringSequence('5')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += i +'';\n  }\n  return result;\n};\n\n/* Return an string containing space-delimited numbers starting from 0 upto n in cl ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simpleprogram which should return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 1) {\n    return x;\n  }\n  if (n === 2) {\n    return y;\n  }\n  if (n % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Givena  list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers .\n  doubleTheDifference([1, 3, 2, 0]) == 1+ 9 + 0 + 0 = 10\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe rence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1+ 9 + 0 + 0 = 10\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe rence = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// doubleTheDifference([9, -2]) == 81\n// doubleTheDifference([0 ])== 0\n// doubleTheDifference([1, 3, 2, 0]) == 1+ 9 + 0 + 0 = 10\n// doubleTheDifference([-1, -2, 0 ])== 0\n\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(double", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I thinkw e all rememberthat  feeling when the result of some long-awaited\n  ev en t is final ly kn own. The feelings and  th oughts you have at that m oment are\n  definitely worth noting down an d comparing.\n Your  task i s to determine if a per son  correc tlyguessed the results of a number ofmatches.\n  You are g ive ntwo  arrays o f scores and guessesof equal length, where each index s hows a match. \n  Return an array of thesame le ngth denoting how far off each guess was. If they have guesse d correctly,  the value is 0, a nd if not, thevalue is  the absolute difference betweenthe guess and the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I thinkw e all rememberthat  feeling when the result of some long-awaited\n  ev en t is final ly kn own. The feelings and  th oughts you have at that m oment are\n  definitely worth noting down an d comparing.\n Your  task i s to determine if a per son  correc tlyguessed the results of a number ofmatches.\n  You are g ive ntwo  arrays o f scores and guessesof equal length, where each index s hows a match. \n  Return an array of thesame le ngth denoting how far off each guess was. If they have guesse d correctly,  the value is 0, a nd if not, thevalue is  the absolute difference betweenthe guess and the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [];\n  const guesses = [];\n  for (let i = 0; i < game.length; i++) {\n    guesses.push(guess[i]);\n    scores.push(game[i] - guess[i]);\n  }\n  return [...guesses,...scores];\n};\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their squares.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their cubes.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their differences.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their averages.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their sums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their products.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their minimums.\n\n// 👽 Exercise: Write a function that takes in an array of numbers and returns an array of their maximums.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will  be given the nameof a class (a string) and a list of extensions.\n Th e extensio ns ar e to be used to loadadd itional cl asses to the cl ass. The\n  strength of the extension is asfollows: Let CAP be  the nu mber of the uppercase\n le tters i n the extension's name, and let SM be the number of lowerca selette rs\n  in t he extension's name,the strength is given by the fracti on CAP - SM.\n  You should find the strongest ex tension and return a string in this\n  format: ClassName.Stron gestExtensionName.\n  If there ar e two or more e xtension s with the same strength, you sho uld\n  choose the onethat comes  firs t in th e list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will  be given the nameof a class (a string) and a list of extensions.\n Th e extensio ns ar e to be used to loadadd itional cl asses to the cl ass. The\n  strength of the extension is asfollows: Let CAP be  the nu mber of the uppercase\n le tters i n the extension's name, and let SM be the number of lowerca selette rs\n  in t he extension's name,the strength is given by the fracti on CAP - SM.\n  You should find the strongest ex tension and return a string in this\n  format: ClassName.Stron gestExtensionName.\n  If there ar e two or more e xtension s with the same strength, you sho uld\n  choose the onethat comes  firs t in th e list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = null;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_strength = extension.charAt(0).toUpperCase() + extension.slice(1).length;\n    if (extension_strength > strongest) {\n      strongest = extension_strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Given a class name and a string containing an extension name, return the\n  extension name in the given class.\n  Example:\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNGSliCes' return 'SErviNGSliCes'.\n  Given'my_class' and 'Slices' return 'Slices'.\n  Given'my_class' and 'SErviNG", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let count = 0;\n  while (i >= 0 && j >= 0) {\n    if (a[i] === b[j]) {\n      count++;\n      i--;\n      j--;\n    } else if (a[i] > b[j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return count === b.length;\n};\n\n/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let count = 0;\n  while (i >= 0 && j >= 0) {\n    if (a[i] === b[j]) {\n      count++;\n      i--;\n      j--;\n    } else if (a[i] > b[j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return count === b.length;\n};\n\n/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let count = 0;\n  while (i >= 0 && j >= 0) {\n    if (a[i] === b[j]) {\n      count++;\n      i--;\n      j--;\n    } else if (a[i] > b[j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return count === b.length;\n};\n\n/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let count = 0;\n  while (i >= 0 && j >= 0) {\n    if (a[i] === b[j]) {\n      count++;\n      i--;\n      j--;\n    } else if (a[i] > b[j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return count === b.length;\n};\n\n/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let count = 0;\n  while (i >= 0 && j >= 0) {\n    if (a[i] === b[j]) {\n      count++;\n      i--;\n      j--;\n    } else if (a[i] > b[j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return count === b.length;\n};\n\n/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let count = 0;\n  while (i >= 0 && j >= 0) {\n    if (a[i] === b[j]) {\n      count++;\n      i--;\n      j--;\n    } else if (a[i] > b[j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return count === b.length;\n};\n\n/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let i = a.length - 1;\n  let j = b.length - 1;\n  let count = 0;\n  while (i >= 0 && j >= 0) {\n    if (a[i] === b[j]) {\n      count++;\n      i--;\n      j--;\n    } else if (a[i] > b[j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return count === b.length;\n};\n\n/*You aregiven 2 words.Youne", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givena  positive integer,obtain its roman numeral equivalent as a string,\n a nd returnit in  lowercase.\n  Restric tio ns: 1 <= n um <= 1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer,obtain its roman numeral equivalent as a string,\n a nd returnit in  lowercase.\n  Restric tio ns: 1 <= n um <= 1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let romanNum = number;\n  while (romanNum > 0) {\n    roman = romans[romanNum % 10] + roman;\n    romanNum = Math.floor(romanNum / 10);\n  }\n  return roman;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n  for (let i = 0; i < romanNumString.length; i++) {\n    romanNum += romans[romanNumString[i]];\n  }\n  return romanNum;\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restric tio ns: 1 <= n <= 1000\n\n  E xamples:\n  >>> intToRoman('vi') -> '486'\n  >>> intToRoman('clii') -> 'XLII'\n  >>> intToRoman('cdxxvi') -> 'CXXVI'\n  */\nconst intToRoman = (roman) => {\n  let romanNum = 0;\n  let romanNumString = roman;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Givent he lengths of the t hree sides of a triangle. Return true if the three \n sides for m a r ight-angled triangle,  fa lse otherw ise.\n  A right- angled triangle is a triangle in which oneangle is rightangl e or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n Givent he lengths of the t hree sides of a triangle. Return true if the three \n sides for m a r ight-angled triangle,  fa lse otherw ise.\n  A right- angled triangle is a triangle in which oneangle is rightangl e or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab >= 0 && bc >= 0 && ac >= 0;\n};\n\n/*\n Given a number n and an array of positive integers a. Return the number \n formed by adding up the numbers in the array whose corresponding \n positions satisfy the condition that a[i] <= n and a[i] >= 0.\n  Example:\n  sumOfArraysLessThanN(3, [4, 1, 2]) == 6\n  sumOfArraysLessThanN(3, [4, 1, 3]) == 3\n  sumOfArraysLessThanN(3, [4, 1, 4]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 5]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 6]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 7]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 8]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 9]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 10]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 11]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 12]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 13]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 14]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 15]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 16]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 17]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 18]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 19]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 20]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 21]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 22]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 23]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 24]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 25]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 26]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 27]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 28]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 29]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 30]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 31]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 32]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 33]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 34]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 35]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 36]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 37]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 38]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 39]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 40]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 41]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 42]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 43]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 44]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 45]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 46]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 47]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 48]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 49]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 50]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 51]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 52]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 53]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 54]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 55]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 56]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 57]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 58]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 59]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 60]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 61]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 62]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 63]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 64]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 65]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 66]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 67]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 68]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 69]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 70]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 71]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 72]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 73]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 74]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 75]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 76]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 77]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 78]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 79]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 80]) == 4\n  sumOfArraysLessThanN(3, [4, 1, 81]) == 4\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let num = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        num++;\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let num = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        num++;\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let num = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        num++;\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let num = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        num++;\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let num = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        num++;\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let num = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        num++;\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let num = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === words[i][j].toUpperCase()) {\n        num++;\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'rea hungry rabbit, an d you already have eaten a certain number of carro ts ,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'rea hungry rabbit, an d you already have eaten a certain number of carro ts,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrotsLeft = 0;\n  let totalCarrots = number;\n  let totalCarrotsNeeded = need;\n  while (carrotsLeft < totalCarrotsNeeded) {\n    carrotsLeft += totalCarrots;\n    totalCarrots -= carrotsLeft;\n  }\n  if (carrotsLeft < totalCarrotsNeeded) {\n    totalCarrots = carrotsLeft;\n  }\n  return [totalCarrots, carrotsLeft];\n};\n\n/*\n  You're  hungry rabbit, an d you already have eaten a certain number of carro ts,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrotsLeft = 0;\n  let totalCarrots = number;\n  let totalCarrotsNeeded = need;\n  while (carrotsLeft < totalCarrotsNeeded) {\n    carrotsLeft += totalCarrots;\n    totalCarrots -= carrotsLeft;\n  }\n  if (carrotsLeft < totalCarrotsNeeded) {\n    totalCarrots = carrotsLeft;\n  }\n  return [totalCarrots, carrotsLeft];\n};\n\n/*\n  You're  hungry rabbit, an d you already have eaten a certain number of carro ts,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrotsLeft = 0;\n  let totalCarrots = number;\n  let totalCarrotsNeeded = need;\n  while (carrotsLeft < totalCarrotsNeeded) {\n    carrotsLeft += totalCarrots;\n    totalCarrots -= carrotsLeft;\n  }\n  if (carrotsLeft < totalCarrotsNeeded) {\n    totalCarrots = carrotsLeft;\n  }\n  return [totalCarrots, carrotsLeft];\n};\n\n/*\n  You're  hungry rabbit, an d you already have eaten a certain number of carro ts,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrotsLeft = 0;\n  let totalCarrots = number;\n  let totalCarrotsNeeded = need;\n  while (carrotsLeft < totalCarrotsNeeded) {\n    carrotsLeft += totalCarrots;\n    totalCarrots -= carrotsLeft;\n  }\n  if (carrotsLeft < totalCarrotsNeeded) {\n    totalCarrots = carrotsLeft;\n  }\n  return [totalCarrots, carrotsLeft];\n};\n\n/*\n  You're  hungry rabbit, an d you already have eaten a certain number of carro ts,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/16", "prompt": "/* Givena  string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersInString('xyzXYZ')\n  3\n  >>> countDistinctCharactersInString('Jerry')\n  4\n  */\nconst countDistinctCharactersInString = (string) => {\n  let distinctCharacterCount = 0;\n  \n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    \n    if (distinctCharacterCount < character.length) {\n      distinctCharacterCount = character.length;\n    }\n  }\n  \n  return distinctCharacterCount;\n}\n\n/* Given a string, find out how many distinct characters are in that string \n  >>> countDistinctCharactersIn", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givent wo lists operator,and operand. The first list has basic algebra oper at ions, and\n  th e second list is a li stofinteger s. Use the twogiven lists to build the algebric \n  expres sion and return the  evalua tion of this expression .\n  The b asic algebra operations:\n  Addition ( + ) \n  Subtraction (- )   M ultiplica tion (* ) \n  Floor division ( // ) \n  Exponentiation (** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givent wo lists operator,and operand. The first list has basic algebra oper at ions, and\n  th e second list is a li stofinteger s. Use the twogiven lists to build the algebric \n  expres sion and return the  evalua tion of this expression.\n  The b asic algebra operations:\n  Addition ( + ) \n  Subtraction (- )   M ultiplica tion (* ) \n  Floor division ( // ) \n  Exponentiation (** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  operand.forEach((item, index) => {\n    if (index === 0) {\n      result += item;\n    } else {\n      result += operator[index - 1] * item;\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers squared. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 4, 9, 16]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doSquare = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item * item);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers cubed. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 8, 27, 64]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doCub = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item * item * item);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers divided by 2. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 2, 0.5, 1.5]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doDivide = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item / 2);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers multiplied by 2. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [2, 4, 6, 8]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doMultiply = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item * 2);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers added together. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 3, 6, 10]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doAdd = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item + item);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers subtracted from 1. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, -2, 3, -4]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doSubtract = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item - 1);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers divided by 3. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 2.5, 3, 2.75]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doDivideByThree = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item / 3);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers multiplied by 3. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 3, 9, 27]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doMultiplyByThree = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item * 3);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers added together. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 3, 6, 10]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doAddByThree = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item + item);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers subtracted from 1. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, -2, 3, -4]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doSubtractByThree = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item - 1);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers divided by 5. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 2.5, 5, 2.8]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doDivideByFive = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item / 5);\n  });\n  return result;\n};\n\n/*\n  Given a list with integers, return a new list with integers multiplied by 5. \n  Example:\n  array = [1, 2, 3, 4]\n  => array = [1, 3, 9, 27]\n  Note:\n      Do not mutate the original array.\n      Do not use map or reduce.\n      Do not use for or while loops.\n      Do not use recursion.\n*/\nconst doMultiplyByFive = (array) => {\n  let result = [];\n  array.forEach((item) => {\n    result.push(item * 5);\n  });\n  return result;\n};\n\n/*\n  Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/161", "prompt": "/*You aregiven a strings.\n if s[i] isa letter, reverse its case from lowerto  upper orviseversa, \n  otherwise k eep  it as itis.\n  If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a strings.\n if s[i] isa letter, reverse its case from lowerto  upper orviseversa, \n  otherwise k eep  it as itis.\n  If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let k = s.split(\"\").reverse().join(\"\");\n  k = k.replace(/[^a-zA-Z]/g, \"\"); \n  k = k.replace(/[a-z]/g, m => m.toUpperCase());\n  k = k.replace(/[A-Z]/g, m => m.toLowerCase());\n  return k;\n}\n\n/*You aregiven a strings.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givena  string 'text', ret urn its md5hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  string 'text', ret urn its md5hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md5.update(urn);\n  return md5.digest();\n};\n\n/*\n  Given a urn string 'urn', return its md5hash equivalent string.\n  If 'urn' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5Urn('urn:uuid:123e4567-e89b-12d3-a456-426655440000') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Urn = (urn) => {\n  const md5 = new Md5();\n  md", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givent wo positive integer s a and b, return the even digits between a\n  andb,  in ascend ing o rder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givent wo positive integer s a and b, return the even digits between a\n  andb,  in ascend ing o rder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a number n and an integer k, return the k digits of the number in ascend\n  order.\n\n  For example:\n  generateNumbers(1234, 2) => [12, 34]\n  generateNumbers(1234, 3) => [12, 34, 56]\n  generateNumbers(1234, 4) => [12, 34, 56, 78]\n  generateNumbers(1234, 5) => [12, 34, 56, 78, 90]\n  generateNumbers(1234, 6) => [12, 34, 56, 78, 90, 123]\n  generateNumbers(1234, 7) => [12, 34, 56, 78, 90, 123, 144]\n  generateNumbers(1234, 8) => [12, 34, 56, 78, 90, 123, 144, 168]\n  generateNumbers(1234, 9) => [12, 34, 56, 78, 90, 123, 144, 168, 192]\n  generateNumbers(1234, 10) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234]\n  generateNumbers(1234, 11) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266]\n  generateNumbers(1234, 12) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290]\n  generateNumbers(1234, 13) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324]\n  generateNumbers(1234, 14) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366]\n  generateNumbers(1234, 15) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398]\n  generateNumbers(1234, 16) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420]\n  generateNumbers(1234, 17) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452]\n  generateNumbers(1234, 18) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483]\n  generateNumbers(1234, 19) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504]\n  generateNumbers(1234, 20) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528]\n  generateNumbers(1234, 21) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550]\n  generateNumbers(1234, 22) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572]\n  generateNumbers(1234, 23) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594]\n  generateNumbers(1234, 24) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615]\n  generateNumbers(1234, 25) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646]\n  generateNumbers(1234, 26) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678]\n  generateNumbers(1234, 27) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709]\n  generateNumbers(1234, 28) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709, 739]\n  generateNumbers(1234, 29) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709, 739, 770]\n  generateNumbers(1234, 30) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709, 739, 770, 801]\n  generateNumbers(1234, 31) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709, 739, 770, 801, 823]\n  generateNumbers(1234, 32) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709, 739, 770, 801, 823, 856]\n  generateNumbers(1234, 33) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709, 739, 770, 801, 823, 856, 898]\n  generateNumbers(1234, 34) => [12, 34, 56, 78, 90, 123, 144, 168, 192, 234, 266, 290, 324, 366, 398, 420, 452, 483, 504, 528, 550, 572, 594, 615, 646, 678, 709, 739, 770, 801, 823, 856, 898, 929]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Inputt o this function isa string representing musical notes in a special A SC II format. \n  Yo ur task is to parse t his  string an d return list o f integers corresponding to how many beatsdoes each\n  not las t.\n\n  H ere is a legend:\n  'o'- w hole no te,lasts four beats  'o|' - half note, lasts two beats\n '.| '- q uater not e, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputt o this function isa string representing musical notes in a special A SC II format. \n  Yo ur task is to parse t his  string an d return list o f integers corresponding to how many beatsdoes each\n  not las t.\n\n  H ere is a legend:\n  'o'- w hole no te,lasts four beats  'o|' - half note, lasts two beats\n '.| '- q uater not e, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_array = [];\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    if (music_note === 'o') {\n      music_notes_array.push(0);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '.') {\n      music_notes_array.push(2);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {\n      music_notes_array.push(1);\n    } else if (music_note === '|') {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find ho w many times agive n substringcan be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Find ho w many times agive n substringcan be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring appears in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four' , 'five', 'six' , 'seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberArray = numbers.split(\" \");\n  let sortedArray = numberArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with letter s sorte d from smallest to larg est \n  >>> sortLetters('three one five')\n  'one three five'\n  */\nconst sortLetters = (letters) => {\n  let letterArray = letters.split(\" \");\n  let sortedArray = letterArray.sort((a, b) => a - b);\n  return sortedArray.join(\" \");\n};\n\n/* Inputi s space-delimited  string of letters from 'a' to 'z'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Givena  positive floatingpoint number, it can be decomposed into  and inte ge r part (la rgest  integer smaller than  gi ven number ) and decimals  (leftover part always smaller than 1).\n\n Return the decimal  part o f the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  positive floatingpoint number, it can be decomposed into  and inte ge r part (la rgest  integer smaller than  gi ven number ) and decimals  (leftover part always smaller than 1).\n\n Return the decimal  part o f the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumber = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixed = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumberToFixedTo = (number, decimals = 2) => {\n  const [int, dec] = number.toString().split('.');\n  return parseInt(int, 10) % 1 === 0? parseInt(int, 10) : dec;\n};\n\n/**\n * Return the number rounded to a specified number of decimal places.\n * If no argument is given, the default is 2.\n * >>> roundNumber(3.14159265, 2)\n  3.142\n */\nconst roundNumber", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* From asupplied list of nu mbers (of length at least two) select and return t wo  that arethe c losest to each\n  othe r a ndreturnthem in order ( smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From asupplied list of nu mbers (of length at least two) select and return t wo  that arethe c losest to each\n  othe r a ndreturnthem in order ( smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestElements = [];\n  let currentClosest = 0;\n  let currentClosestDistance = sortedNumbers[0];\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    const distance = sortedNumbers[i] - currentClosestDistance;\n    if (distance < currentClosestDistance) {\n      currentClosest = i;\n      currentClosestDistance = distance;\n    }\n  }\n  closestElements.push(currentClosestDistance, currentClosest);\n  return closestElements;\n};\n\n/**\n * Returns the closest element to the given number in the given list.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are equally close, returns the smallest number.\n * If two numbers are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Givenl ist of numbers(ofat least two elements), apply a linear transform t othat list, \n  su ch that the smallestnum ber will b ecome 0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givenl ist of numbers(ofat least two elements), apply a linear transform t othat list, \n  su ch that the smallestnum ber will b ecome 0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let smallestNum = numbers[0];\n  let largestNum = numbers[0];\n  numbers.forEach((num) => {\n    if (num < smallestNum) {\n      smallestNum = num;\n    }\n    if (num > largestNum) {\n      largestNum = num;\n    }\n  });\n  const scale = (largestNum - smallestNum) / (numbers.length - 1);\n  return numbers.map((num) => num * scale);\n};\n\n/**\n * Given a list and a number n, return a new list with the nth element removed\n * \n * >>> removeNthFromList([], 1)\n * []\n * >>> removeNthFromList([1, 2, 3], 1)\n * [1, 2]\n * >>> removeNthFromList([1, 2, 3], 2)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 3)\n * [1, 2]\n * >>> removeNthFromList([1, 2, 3], 4)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 5)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 6)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 7)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 8)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 9)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 10)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 11)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 12)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 13)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 14)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 15)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 16)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 17)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 18)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 19)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 20)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 21)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 22)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 23)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 24)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 25)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 26)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 27)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 28)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 29)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 30)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 31)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 32)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 33)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 34)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 35)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 36)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 37)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 38)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 39)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 40)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 41)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 42)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 43)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 44)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 45)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 46)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 47)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 48)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 49)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 50)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 51)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 52)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 53)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 54)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 55)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 56)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 57)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 58)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 59)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 60)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 61)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 62)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 63)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 64)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 65)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 66)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 67)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 68)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 69)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 70)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 71)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 72)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 73)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 74)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 75)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 76)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 77)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 78)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 79)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 80)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 81)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 82)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 83)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 84)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 85)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 86)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 87)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 88)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 89)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 90)\n * [1, 3]\n * >>> removeNthFromList([1, 2, 3], 91)\n * [1, 3]\n * >>> remove", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filtergiven list of any p ython values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filtergiven list of any p ython values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value)\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [undefined]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'undefined'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[]]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value)\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for dates\n  >>> filterDates(['a', 3.14, 5])\n  [new Date('1970-01-01T00:00:00.000Z')]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [new Date('1970-01-01T00:00:00.000Z')]\n  */\nconst filterDates = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [3.14]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [undefined]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [undefined]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'undefined'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[]]\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value)\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for dates\n  >>> filterDates(['a', 3.14, 5])\n  [new Date('1970-01-01T00:00:00.000Z')]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [new Date('1970-01-01T00:00:00.000Z')]\n  */\nconst filterDates = (values) => {\n  return values.filter((value) => {\n    return value instanceof Date\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [3.14]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for null\n  >>> filterNulls(['a', 3.14, 5])\n  [null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => {\n    return value === null\n  })\n}\n\n/**\n * Filtergiven list of any p ython values only for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Returnlength of given str ing\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returnlength of given str ing\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length = length + 1;\n    }\n  }\n  return length;\n};\n\n/* Return true if given str ing\n  >>> isString('')\n  true\n  >>> isString('abc')\n  false\n  */\nconst isString = (string) => {\n  return typeof string ==='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */\nconst isNotString = (string) => {\n  return typeof string!=='string';\n};\n\n/* Return true if given str ing\n  >>> isNotString('')\n  false\n  >>> isNotString('abc')\n  true\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/24", "prompt": "/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisor = i;\n    }\n  }\n  return minDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,smaller  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisor = i;\n    }\n  }\n  return maxDivisor;\n};\n\n/* For ag iven number n,find  the smallest number that divides n evenly,larger  t han n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = 1;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Returnlist of prime facto rs of giveninteger in the order from smallest tola rgest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returnlist of prime facto rs of giveninteger in the order from smallest tola rgest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factorCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];\n  let factorNumber = 0;\n  let factorNumberCount = 0;\n  let factorNumbers = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n      if (numbers[i] === newArray[j]) {\n        count++;\n      }\n    }\n    if (count > 1) {\n      newArray.push(numbers[i]);\n    }\n  }\n  return newArray;\n};\n\n/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let newArray = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let count = 0;\n    for (let j = 0; j < newArray.length; j++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/27", "prompt": "/* For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .split('')\n   .map((char) => {\n      return char.toUpperCase() === char? char.toLowerCase() : char.toUpperCase();\n    })\n   .join('');\n};\n\n/**\n * Get the first character of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstChar = (string) => {\n  return string.charAt(0);\n};\n\n/**\n * Get the last character of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastChar = (string) => {\n  return string.charAt(string.length - 1);\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetter = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetter = (string) => {\n  return string.charAt(string.length - 1).toLowerCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpper = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterLower = (string) => {\n  return string.charAt(0).toLowerCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterLower = (string) => {\n  return string.charAt(string.length - 1).toLowerCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperLower = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperLower = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpper = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperLower = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperLower = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpper = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperLower = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperLower = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperUpper = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperLower = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperLower = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperUpper = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperUpperLower = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperLower = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperUpperUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperUpper = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperUpperLower = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperLower = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst firstLetterUpperUpperUpperUpperUpper = (string) => {\n  return string.charAt(0).toUpperCase();\n};\n\n/**\n * Get the last letter of a string\n * \n * @param {string} string - A string\n * @returns {string} - A string\n */\nconst lastLetterUpperUpperUpperUpper = (string) => {\n  return string.charAt(string.length - 1).toUpperCase();\n};\n\n/**\n * Get the first letter of a string\n * \n * @param {string} string - A string\n * @returns {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concate nate list of string s into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Concate nate list of string s into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n/**\n * Return true if a value is an object\n * @param {*} value\n * @returns {boolean}\n */\nconst isObject = value => {\n  return typeof value === 'object' &&!Array.isArray(value);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isArray = value => {\n  return Array.isArray(value);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isString = value => {\n  return typeof value ==='string';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isNumber = value => {\n  return typeof value === 'number';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isBoolean = value => {\n  return typeof value === 'boolean';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isNull = value => {\n  return value === null;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isUndefined = value => {\n  return typeof value === 'undefined';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isDate = value => {\n  return value instanceof Date;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isRegExp = value => {\n  return value instanceof RegExp;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isError = value => {\n  return value instanceof Error;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isSymbol = value => {\n  return typeof value ==='symbol';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isMap = value => {\n  return value instanceof Map;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isWeakMap = value => {\n  return value instanceof WeakMap;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isSet = value => {\n  return value instanceof Set;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isWeakSet = value => {\n  return value instanceof WeakSet;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromise = value => {\n  return value && typeof value.then === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isIterable = value => {\n  return value && typeof value[Symbol.iterator] === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isGenerator = value => {\n  return typeof value === 'function' &&!!value.constructor[Symbol.iterator];\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isGeneratorFunction = value => {\n  return isGenerator(value) && isGeneratorFunction(value.constructor);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isAsyncFunction = value => {\n  return isGenerator(value) && isAsyncFunction(value.constructor);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isAsyncGeneratorFunction = value => {\n  return isAsyncGenerator(value) && isAsyncGeneratorFunction(value.constructor);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isAsyncIterable = value => {\n  return isAsyncGenerator(value) && isAsyncIterable(value.constructor);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isIterableIterator = value => {\n  return isIterable(value) && isIterableIterator(value.constructor);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isAsyncIterableIterator = value => {\n  return isAsyncIterable(value) && isAsyncIterableIterator(value.constructor);\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isTypedArray = value => {\n  return value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array || value instanceof Uint16Array || value instanceof Int16Array || value instanceof Uint32Array || value instanceof Int32Array || value instanceof Float32Array || value instanceof Float64Array;\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLike = value => {\n  return value && typeof value.then === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeObject = value => {\n  return value && typeof value.then === 'function' && typeof value.catch === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeArray = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeMap = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function' && typeof value.get === 'function' && typeof value.set === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeSet = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function' && typeof value.get === 'function' && typeof value.add === 'function' && typeof value.remove === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeMap = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function' && typeof value.get === 'function' && typeof value.set === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeSet = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function' && typeof value.get === 'function' && typeof value.add === 'function' && typeof value.remove === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeMap = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function' && typeof value.get === 'function' && typeof value.set === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeSet = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function' && typeof value.get === 'function' && typeof value.add === 'function' && typeof value.remove === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */\nconst isPromiseLikeMap = value => {\n  return value && typeof value[Symbol.asyncIterator] === 'function' && typeof value.get === 'function' && typeof value.set === 'function';\n};\n\n/**\n * Return true if a value is an array\n * @param {*} value\n * @returns {boolean}\n */", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filteran input list of st rings only for ones that start with a given prefix .\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filteran input list of st rings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filters an input list of st rings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filters an input list of st rings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det e", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Returno nly positive number s in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returno nly positive number s in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0).sort((a, b) => a - b)\n}\n\n/*Returno nly negative number s in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0).sort((a, b) => b - a)\n}\n\n/*Returno nly number s in the list.\n  >>> getNumber([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getNumber([-5, -3, -2, -3, -9, 0, 123, 1])\n  [-5, -3, -2, -3, -9, 0, 123, 1]\n  */\nconst getNumber = (l) => {\n  return l.filter(x =>!isNaN(x)).sort((a, b) => a - b)\n}\n\n/*Returno nly string s in the list.\n  >>> getString([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  ['5', '3', '2', '3', '9', '123', '1']\n  >>> getString([-5, -3, -2, -3, -9, 0, 123, 1])\n  ['-5', '-3', '-2', '-3', '-9', '0', '123', '1']\n  */\nconst getString = (l) => {\n  return l.filter(x => typeof x ==='string').sort((a, b) => a - b)\n}\n\n/*Returno nly boolean s in the list.\n  >>> getBoolean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [true, false, false, false, false, false, false, false, false, true]\n  >>> getBoolean([-5, -3, -2, -3, -9, 0, 123, 1])\n  [true, false, false, false, false, false, false, false, false, true]\n  */\nconst getBoolean = (l) => {\n  return l.filter(x => typeof x === 'boolean').sort((a, b) => a - b)\n}\n\n/*Returno nly object s in the list.\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [{ a: 5, b: 3 }, { a: 2, b: 3 }, { a: 3, b: 3 }, { a: 9, b: 3 }, { a: 123, b: 3 }, { a: 1 }, { a: -10 }]\n  >>> getObject([-5, -3, -2, -3, -9, 0, 123, 1])\n  [{ a: -5, b: -3 }, { a: -2, b: -3 }, { a: -3, b: -3 }, { a: -9, b: -3 }, { a: 0, b: -3 }, { a: 123, b: -3 }, { a: 1 }, { a: 1 }]\n  */\nconst getObject = (l) => {\n  return l.filter(x => typeof x === 'object').sort((a, b) => a - b)\n}\n\n/*Returno nly array s in the list.\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getArray([-5, -3, -2, -3, -9, 0, 123, 1])\n  [-5, -3, -2, -3, -9, 0, 123, 1]\n  */\nconst getArray = (l) => {\n  return l.filter(x => Array.isArray(x)).sort((a, b) => a - b)\n}\n\n/*Returno nly date s in the list.\n  >>> getDate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [Fri May 03 2019 00:00:00 GMT+0300 (GMT+03:00), Thu May 02 2019 00:00:00 GMT+0300 (GMT+03:00), Sat May 01 2019 00:00:00 GMT+0300 (GMT+03:00), Sun May 10 2019 00:00:00 GMT+0300 (GMT+03:00), Mon May 09 2019 00:00:00 GMT+0300 (GMT+03:00), Tue May 08 2019 00:00:00 GMT+0300 (GMT+03:00), Wed May 07 2019 00:00:00 GMT+0300 (GMT+03:00), Thu May 06 2019 00:00:00 GMT+0300 (GMT+03:00)]\n  >>> getDate([-5, -3, -2, -3, -9, 0, 123, 1])\n  [Fri May 03 2019 00:00:00 GMT+0300 (GMT+03:00), Thu May 02 2019 00:00:00 GMT+0300 (GMT+03:00), Sat May 01 2019 00:00:00 GMT+0300 (GMT+03:00), Sun May 10 2019 00:00:00 GMT+0300 (GMT+03:00), Mon May 09 2019 00:00:00 GMT+0300 (GMT+03:00), Tue May 08 2019 00:00:00 GMT+0300 (GMT+03:00), Wed May 07 2019 00:00:00 GMT+0300 (GMT+03:00), Thu May 06 2019 00:00:00 GMT+0300 (GMT+03:00)]\n  */\nconst getDate = (l) => {\n  return l.filter(x => x instanceof Date).sort((a, b) => a - b)\n}\n\n/*Returno nly function s in the list.\n  >>> getFunction([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ƒ, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/31", "prompt": "/*Returnt rue if a givennumb er is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt rue if a givennumb er is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 + .... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  } , 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  }, 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : 1);  }, 0);\n  else return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : -1);  }, 0);\n}\n/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  }, 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : 1);  }, 0);\n  else return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : -1);  }, 0);\n}\n/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  }, 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : 1);  }, 0);\n  else return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : -1);  }, 0);\n}\n/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  }, 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : 1);  }, 0);\n  else return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : -1);  }, 0);\n}\n/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  }, 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : 1);  }, 0);\n  else return xs.reduce((prev, item, index) = > {\n    return prev  + item  * (index === 0? 0 : -1);  }, 0);\n}\n/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 4 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortSixth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 6 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortEighth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighth = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 8 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortNinth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNinth = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTenth = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortEleventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleventh = (l) => {\n  const l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 11 === 0) {\n      l2.push(l[i]);\n    }\n  }\n  return l2.sort((a, b) => a - b);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortTwelfth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwelfth([5, 6, 3, 4, 8, 9, 2])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Returns orted unique elemen ts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returns orted unique elemen ts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    a.push(l[i])\n    u[l[i]] = 1\n  }\n  return a\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  false\n  */\nconst all = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returns true if any elemnts in list are in set\n  >>> any([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> any([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst any = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i])!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst allIn = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returns true if any elemnts in list are in set\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst anyIn = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i])!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> allEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> allEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst allEq = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i])!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Returns true if any elemnts in list are in set\n  >>> anyEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> anyEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst anyEq = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> allSame([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> allSame([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst allSame = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i])!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Returns true if any elemnts in list are in set\n  >>> anySame([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> anySame([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst anySame = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> allSameIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> allSameIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst allSameIn = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i])!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Returns true if any elemnts in list are in set\n  >>> anySameIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> anySameIn([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst anySameIn = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> allSameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> allSameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst allSameEq = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i])!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Returns true if any elemnts in list are in set\n  >>> anySameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> anySameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst anySameEq = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> allSameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> allSameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst allSameEq = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i])!== -1) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Returns true if any elemnts in list are in set\n  >>> anySameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> anySameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst anySameEq = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returns true if all elemnts in list are in set\n  >>> allSameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9})\n  true\n  >>> allSameEq([5, 3, 5, 2, 3, 3, 9, 0, 123], {5, 3, 9}, {5, 3, 9})\n  true\n  */\nconst allSameEq = (l,...set) => {\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Returnm aximum elementin t he list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnm aximum elementin t he list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -27\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> avgElement([1, 2, 3])\n  2\n  >>> avgElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst avgElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> medianElement([1, 2, 3])\n  2\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst medianElement = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let m1 = l[mid];\n  let m2 = l[mid];\n  for (let i = mid + 1; i < l.length; i++) {\n    if (l[i] < m1) {\n      m1 = l[i];\n    }\n    if (l[i] > m2) {\n      m2 = l[i];\n    }\n  }\n  return m1;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l) => {\n  let mode = 0;\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Returnm aximum elementin t he list.\n  >>> modeElement([1, 2, 3])\n  1\n  >>> modeElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst modeElement = (l", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Returnt he number of timesthe digit 7appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt he number of timesthe digit 7appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0 || n % 13 === 0) return 0;\n  if (n % 11 === 1) return 1;\n  if (n % 13 === 1) return 2;\n  return 3;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n whichar e divisibl ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return odd.concat(even);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortEvenOdd = (l) => {\n  const even = l.filter((e, i) => i % 2 === 0);\n  const odd = l.filter((e, i) => i % 2 === 1);\n  return even.concat(odd);\n};\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns  encoded string bycycling groups of three characters.\n  */\nconst enc od eCyclic=(s) = > {\n  var groups = [] , g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup .leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2 .join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nc onst dec odeCyclic= (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns  encoded string bycycling groups of three characters.\n  */\nconst enc od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nc onst dec odeCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst enc od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst enc od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst enc od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst enc od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst enc od eCyclic= ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFi b returns n-thnumb er that is a Fibonacci number and it's also prime. \n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFi b returns n-thnumb er that is a Fibonacci number and it's also prime. \n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  primeSum returns sum of all prime numbers from 1 to n. \n  >>> primeSum(1)\n  2\n  >>> primeSum(2)\n  3\n  >>> primeSum(3)\n  5\n  >>> primeSum(4)\n  13\n  >>> primeSum(5)\n  89\n  */\nconst primeSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (primeFib(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanValue = mean(numbers);\n  const deviations = numbers.map((number) => {\n    return Math.pow(number - meanValue, 2);\n  });\n  return deviations.reduce((sum, deviation) => {\n    return sum + deviation;\n  }, 0) / deviations.length;\n};\n\n/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 0;\n  };\n  const isTriple = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 3;\n  };\n  return l.every(sumToZero) && l.every(isTriple);\n};\n\n/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 0;\n  };\n  const isTriple = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 3;\n  };\n  return l.every(sumToZero) && l.every(isTriple);\n};\n\n/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 0;\n  };\n  const isTriple = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 3;\n  };\n  return l.every(sumToZero) && l.every(isTriple);\n};\n\n/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 0;\n  };\n  const isTriple = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 3;\n  };\n  return l.every(sumToZero) && l.every(isTriple);\n};\n\n/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 0;\n  };\n  const isTriple = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 3;\n  };\n  return l.every(sumToZero) && l.every(isTriple);\n};\n\n/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 0;\n  };\n  const isTriple = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 3;\n  };\n  return l.every(sumToZero) && l.every(isTriple);\n};\n\n/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 0;\n  };\n  const isTriple = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n      sum += l[i];\n    }\n    return sum === 3;\n  };\n  return l.every(sumToZero) && l.every(isTriple);\n};\n\n/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine  a road that'sa pe rfectly straight infinitely long line.\n ncars ar edrivingle ft to  right;  simultaneous ly,  adiffere nt set of n car s\n  are driving right to left.   The two se ts of cars start ou t being  very far from\n  each o the r.  All cars move in the same speed.  Two cars are said to collide \n whena car tha t's moving left to right hits a car that's moving rightto left.\n  However, the cars are infinitely stu rdy and strong; as a result, they continue moving\n in theirtrajectory as if they did not co llide.\n\n  Thisfunction  outputs thenumber of such colli sions.\n  */\nconst car RaceCollis ion=  (n) =>  {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine  a road that'sa pe rfectly straight infinitely long line.\n ncars ar edrivingle ft to  right;  simultaneous ly,  adiffere nt set of n car s\n  are driving right to left.   The two se ts of cars start ou t being  very far from\n  each o the r.  All cars move in the same speed.  Two cars are said to collide \n whena car tha t's moving left to right hits a car that's moving rightto left.\n  However, the cars are infinitely stu rdy and strong; as a result, they continue moving\n in theirtrajectory as if they did not co llide.\n\n  Thisfunction  outputs thenumber of such colli sions.\n  */\nconst car RaceCollis ion=  (n) =>  {\n  let car =   [\n    carpassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th e e are twodisti nct elements in the l ist  that\n  su m to zero, and", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Changen umerical base of in put number x to base.\n  return string representati on  after the  conv ersion.\n  base number s a reless th an 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Changen umerical base of in put number x to base.\n  return string representati on  after the  conv ersion.\n  base number s a reless th an 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = '', i;\n  for (i = base; i >= 1; i--) {\n    res += (x % i).toString();\n  }\n  return res;\n};\n\n/*\n  >>> changeBase('1001', 2)\n  '111'\n  >>> changeBase('1001', 3)\n  '1001'\n  >>> changeBase('1001', 4)\n  '100100'\n  >>> changeBase('1001', 5)\n  '10010000'\n  >>> changeBase('1001', 6)\n  '100100000'\n  >>> changeBase('1001', 7)\n  '1001000000'\n  >>> changeBase('1001', 8)\n  '100100000000'\n  >>> changeBase('1001', 9)\n  '1001000000000'\n  >>> changeBase('1001', 10)\n  '10010000000000'\n  >>> changeBase('1001', 11)\n  '100100000000000'\n  >>> changeBase('1001', 12)\n  '1001000000000000'\n  >>> changeBase('1001', 13)\n  '10010000000000000'\n  >>> changeBase('1001', 14)\n  '100100000000000000'\n  >>> changeBase('1001', 15)\n  '10010000000000000000'\n  >>> changeBase('1001', 16)\n  '1001000000000000000000'\n  >>> changeBase('1001', 17)\n  '10010000000000000000000'\n  >>> changeBase('1001', 18)\n  '100100000000000000000000'\n  >>> changeBase('1001', 19)\n  '1001000000000000000000000'\n  >>> changeBase('1001', 20)\n  '10010000000000000000000000'\n  >>> changeBase('1001', 21)\n  '1001000000000000000000000000'\n  >>> changeBase('1001', 22)\n  '10010000000000000000000000000'\n  >>> changeBase('1001', 23)\n  '100100000000000000000000000000'\n  >>> changeBase('1001', 24)\n  '1001000000000000000000000000000'\n  >>> changeBase('1001', 25)\n  '10010000000000000000000000000000'\n  >>> changeBase('1001', 26)\n  '100100000000000000000000000000000'\n  >>> changeBase('1001', 27)\n  '1001000000000000000000000000000000'\n  >>> changeBase('1001', 28)\n  '100100000000000000000000000000000000'\n  >>> changeBase('1001', 29)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 30)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 31)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 32)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 33)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 34)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 35)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 36)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 37)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 38)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 39)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 40)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 41)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 42)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 43)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 44)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 45)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 46)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 47)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 48)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 49)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 50)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 51)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 52)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 53)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 54)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 55)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 56)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 57)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 58)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 59)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 60)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 61)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 62)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 63)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 64)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 65)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 66)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 67)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 68)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 69)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 70)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 71)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 72)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 73)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 74)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 75)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 76)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 77)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 78)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 79)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 80)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 81)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 82)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 83)\n  '1001000000000000000000000000000000000'\n  >>> changeBase('1001', 84)\n  '1001000000000000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given le ngth of a sideandhigh returnarea for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given le ngth of a sideandhigh returnarea for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngle = (s, a) => {\n  return Math.sin(Math.PI / 180 * a) * s;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLength = (s, a) => {\n  return Math.sin(Math.PI / 180 * a) * s;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeight = (s, a, h) => {\n  return Math.sin(Math.PI / 180 * a) * s * h;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidth = (s, a, h, w) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepth = (s, a, h, w, d) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndArea = (s, a, h, w, d, a) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeter = (s, a, h, w, d, a, p) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndArea = (s, a, h, w, d, a, p, a) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeter = (s, a, h, w, d, a, p, a, p) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeterAndArea = (s, a, h, w, d, a, p, a, p, a) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p * a;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeter = (s, a, h, w, d, a, p, a, p, a, p) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p * a * p;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeter = (s, a, h, w, d, a, p, a, p, a, p, a) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p * a * p * a;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeterAndArea = (s, a, h, w, d, a, p, a, p, a, p, a, p) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p * a * p * a * p;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeter = (s, a, h, w, d, a, p, a, p, a, p, a, p, a) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p * a * p * a * p * a * p;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeterAndArea = (s, a, h, w, d, a, p, a, p, a, p, a, p, a, p) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p * a * p * a * p * a * p * a * p * a;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeterAndAreaAndPerimeter = (s, a, h, w, d, a, p, a, p, a, p, a, p, a, p, a, p) => {\n  return Math.sin(Math.PI / 180 * a) * s * h * w * d * a * p * a * p * a * p * a * p * a * p * a * p * a * p * a * p;\n};\n\n/*Given the length of a side and an angle,\n  returns the area of a triangle.\n  >>> triangleArea(5, 45)\n  7.5\n  */\nconst triangleAreaWithAngleAndLengthAndHeightAndWidthAndDepthAndAreaAndPerimeter", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4  number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib4(0) -> 0 \n fib4(1) -> 0\n  fib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) +fib4(n-2) + fib4(n- 3) + fi b4(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib4 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Fib4  number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib4(0) -> 0 \n fib4(1) -> 0\n  fib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) +fib4(n-2) + fib4(n- 3) + fi b4(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib4 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequencesimilar to the Fibonacci sequnece tha t' s definedas fo llows:\n  fib0(0) -> 0 \n fib0(1) -> 1\n  fib0(2) ->  1\n  fib0(3) -> 1\n  fib0(n) -> fib0(n-1) + fib0(n-2) + fib0(n- 3) + fib0(n-4) + fib0(n-5) + fib0(n-6) + fib0(n-7) + fib0(n-8) + fib0(n-9) + fib0(n-10) + fib0(n-11) + fib0(n-12) + fib0(n-13) + fib0(n-14) + fib0(n-15) + fib0(n-16) + fib0(n-17) + fib0(n-18) + fib0(n-19) + fib0(n-20) + fib0(n-21) + fib0(n-22) + fib0(n-23) + fib0(n-24) + fib0(n-25) + fib0(n-26) + fib0(n-27) + fib0(n-28) + fib0(n-29) + fib0(n-30) + fib0(n-31) + fib0(n-32) + fib0(n-33) + fib0(n-34) + fib0(n-35) + fib0(n-36) + fib0(n-37) + fib0(n-38) + fib0(n-39) + fib0(n-40) + fib0(n-41) + fib0(n-42) + fib0(n-43) + fib0(n-44) + fib0(n-45) + fib0(n-46) + fib0(n-47) + fib0(n-48) + fib0(n-49) + fib0(n-50) + fib0(n-51) + fib0(n-52) + fib0(n-53) + fib0(n-54) + fib0(n-55) + fib0(n-56) + fib0(n-57) + fib0(n-58) + fib0(n-59) + fib0(n-60) + fib0(n-61) + fib0(n-62) + fib0(n-63) + fib0(n-64) + fib0(n-65) + fib0(n-66) + fib0(n-67) + fib0(n-68) + fib0(n-69) + fib0(n-70) + fib0(n-71) + fib0(n-72) + fib0(n-73) + fib0(n-74) + fib0(n-75) + fib0(n-76) + fib0(n-77) + fib0(n-78) + fib0(n-79) + fib0(n-80) + fib0(n-81) + fib0(n-82) + fib0(n-83) + fib0(n-84) + fib0(n-85) + fib0(n-86) + fib0(n-87) + fib0(n-88) + fib0(n-89) + fib0(n-90) + fib0(n-91) + fib0(n-92) + fib0(n-93) + fib0(n-94) + fib0(n-95) + fib0(n-96) + fib0(n-97) + fib0(n-98) + fib0(n-99) + fib0(n-100) + fib0(n-101) + fib0(n-102) + fib0(n-103) + fib0(n-104) + fib0(n-105) + fib0(n-106) + fib0(n-107) + fib0(n-108) + fib0(n-109) + fib0(n-110) + fib0(n-111) + fib0(n-112) + fib0(n-113) + fib0(n-114) + fib0(n-115) + fib0(n-116) + fib0(n-117) + fib0(n-118) + fib0(n-119) + fib0(n-120) + fib0(n-121) + fib0(n-122) + fib0(n-123) + fib0(n-124) + fib0(n-125) + fib0(n-126) + fib0(n-127) + fib0(n-128) + fib0(n-129) + fib0(n-130) + fib0(n-131) + fib0(n-132) + fib0(n-133) + fib0(n-134) + fib0(n-135) + fib0(n-136) + fib0(n-137) + fib0(n-138) + fib0(n-139) + fib0(n-140) + fib0(n-141) + fib0(n-142) + fib0(n-143) + fib0(n-144) + fib0(n-145) + fib0(n-146) + fib0(n-147) + fib0(n-148) + fib0(n-149) + fib0(n-150) + fib0(n-151) + fib0(n-152) + fib0(n-153) + fib0(n-154) + fib0(n-155) + fib0(n-156) + fib0(n-157) + fib0(n-158) + fib0(n-159) + fib0(n-160) + fib0(n-161) + fib0(n-162) + fib0(n-163) + fib0(n-164) + fib0(n-165) + fib0(n-166) + fib0(n-167) + fib0(n-168) + fib0(n-169) + fib0(n-170) + fib0(n-171) + fib0(n-172) + fib0(n-173) + fib0(n-174) + fib0(n-175) + fib0(n-176) + fib0(n-177) + fib0(n-178) + fib0(n-179) + fib0(n-180) + fib0(n-181) + fib0(n-182) + fib0(n-183) + fib0(n-184) + fib0(n-185) + fib0(n-186) + fib0(n-187) + fib0(n-188) + fib0(n-189) + fib0(n-190) + fib0(n-191) + fib0(n-192) + fib0(n-193) + fib0(n-194) + fib0(n-195) + fib0(n-196) + fib0(n-197) + fib0(n-198) + fib0(n-199) + fib0(n-200) + fib0(n-201) + fib0(n-202) + fib0(n-203) + fib0(n-204) + fib0(n-205) + fib0(n-206) + fib0(n-207) + fib0(n-208) + fib0(n-209) + fib0(n-210) + fib0(n-211) + fib0(n-212) + fib0(n-213) + fib0(n-214) + fib0(n-215) + fib0(n-216) + fib0(n-217) + fib0(n-218) + fib0(n-219) + fib0(n-220) + fib0(n-221) + fib0(n-22", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/47", "prompt": "/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let l = l.sort((a, b) => a - b);\n  let mid = Math.floor(l.length / 2);\n  return l[mid];\n};\n\n/*Returnm the sum of the elements n the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  -60\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Returnm the product of the elements n the list l.\n  >>> product([3, 1, 2, 4, 5])\n  120\n  >>> product([-10, 4, 6, 1000, 10, 20])\n  -2400\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Returnm the mean of the elements n the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  5\n  */\nconst mean = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the standard deviation of the elements n the list l.\n  >>> stdev([3, 1, 2, 4, 5])\n  1.5811388300841898\n  >>> stdev([-10, 4, 6, 1000, 10, 20])\n  2.7755575615628914\n  */\nconst stdev = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return Math.sqrt(sum / (count - 1));\n};\n\n/*Returnm the variance of the elements n the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.5811388300841898\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  2.7755575615628914\n  */\nconst variance = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Returnm the coefficient of determination R^2 of the elements n the list l.\n  >>> rsquared([3, 1, 2, 4, 5])\n  0.9886286957704918\n  >>> rsquared([-10, 4, 6, 1000, 10, 20])\n  0.9886286957704918\n  */\nconst rsquared = (l) => {\n  let mean = mean(l);\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n   .join(\"\");\n  return text === reversed;\n};\n\n/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .replace(/[^a-z]/g, \"\")\n   .split(\"\")\n   .reverse()\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return2 ^n modulo p (be awa re of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return2 ^n modulo p (be awa re of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/5", "prompt": "/* Inserta number 'delimeter ' between every two consecutive elements of inputli st `number s'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inserta number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    result.push(numbers[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse2 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse2([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse3 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse3([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse4 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse4([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse5 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse5([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse6 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse6([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse7 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse7([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse8 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse8([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse9 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse9([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse10 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse10([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse11 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse11([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse12 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse12([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse13 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse13([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse14 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse14([1, 2, 3], 4)\n  [1, 4, 2,, 3, 3]\n  */\nconst intersperse15 = (inputli, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < inputli.length) {\n    result.push(inputli[i]);\n    result.push(delimeter);\n    result.push(inputli[i + 1]);\n    i += 2;\n  }\n  return result;\n};\n\n/* Inserts a number 'delimeter'between every two consecutive elements of inputli st ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns  encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s .split(\"\") .map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) + 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )) .join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns  encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) + 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = (s) => {\n  return  enco de Shi ft (s);\n}\n/*\n  returns encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeV owels is a function  that takesstring and returns string without vowe ls .\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeV owels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeConsonants is a function  that takesstring and returns string without consonants.\n  >>> removeConsonants('')\n  ''\n  >>> removeConsonants(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeConsonants('abcdef')\n  'abcdf'\n  >>> removeConsonants('aaaaa')\n  ''\n  >>> removeConsonants('aaBAA')\n  'BAA'\n  >>> removeConsonants('zbcd')\n  'zbc'\n  */\nconst removeConsonants = (text) => {\n  return text.replace(/[bcdfghjklmnpqrstvwxyz]/g, '');\n};\n\n/*\n  removeNumbers is a function  that takesstring and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removeNumbers('abcdef')\n  'abcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'BAA'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]/g, '');\n};\n\n/*\n  removePunctuation is a function  that takesstring and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdfghjklm'\n  >>> removePunctuation('abcdef')\n  'abcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbc'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.?]/g, '');\n};\n\n/*\n  removeWhitespace is a function  that takesstring and returns string without whitespace.\n  >>> removeWhitespace(' ')\n  ''\n  >>> removeWhitespace('  ')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n ' '\n  >>> removeWhitespace('  \\n')\n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/52", "prompt": "/*Returnt rue if all numbersin the listl are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt rue if all numbersin the listl are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold2 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold3([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold3([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold4([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold4([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold4 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold5([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold5([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold6([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold6([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold6 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold7([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold7([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold8([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold8([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold8 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold9([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold9([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold9 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold10([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold10([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold10 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold11([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold11([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold11 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold12([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold12([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold12 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold13([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold13([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold13 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold14([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold14([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold14 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tPlus) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Returnt rue if all numbersin the listl are between threshold and threshold + t.\n  >>> betweenThreshold15([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold15([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold15 = (l, t, tPlus) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add twonumbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Add twonumbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract twonumbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply twonumbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide twonumbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of twonumbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of twonumbers x and y\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = (number) => {\n  return Math.abs(number);\n};\n\n/*Get the sign of twonumbers x and y\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = (number) => {\n  return number > 0? 1 : -1;\n};\n\n/*Get the floor of twonumbers x and y\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the ceiling of twonumbers x and y\n  >>> ceil(-3)\n  -3\n  >>> ceil(3)\n  3\n  */\nconst ceil = (number) => {\n  return Math.ceil(number);\n};\n\n/*Get the rounded value of twonumbers x and y\n  >>> round(3.5)\n  4\n  >>> round(3.8)\n  4\n  >>> round(3.1)\n  4\n  >>> round(3.15)\n  4\n  >>> round(3.2)\n  4\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(3.15)\n  3\n  >>> trunc(3.2)\n  3\n  */\nconst trunc = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  3\n  >>> round(3.1)\n  3\n  >>> round(3.15)\n  3\n  >>> round(3.2)\n  3\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(3.15)\n  3\n  >>> trunc(3.2)\n  3\n  */\nconst trunc = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  3\n  >>> round(3.1)\n  3\n  >>> round(3.15)\n  3\n  >>> round(3.2)\n  3\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(3.15)\n  3\n  >>> trunc(3.2)\n  3\n  */\nconst trunc = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  3\n  >>> round(3.1)\n  3\n  >>> round(3.15)\n  3\n  >>> round(3.2)\n  3\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(3.15)\n  3\n  >>> trunc(3.2)\n  3\n  */\nconst trunc = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  3\n  >>> round(3.1)\n  3\n  >>> round(3.15)\n  3\n  >>> round(3.2)\n  3\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(3.15)\n  3\n  >>> trunc(3.2)\n  3\n  */\nconst trunc = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  3\n  >>> round(3.1)\n  3\n  >>> round(3.15)\n  3\n  >>> round(3.2)\n  3\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(3.15)\n  3\n  >>> trunc(3.2)\n  3\n  */\nconst trunc = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  3\n  >>> round(3.1)\n  3\n  >>> round(3.15)\n  3\n  >>> round(3.2)\n  3\n  */\nconst round = (number) => {\n  return Math.round(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> trunc(3.5)\n  3\n  >>> trunc(3.8)\n  3\n  >>> trunc(3.1)\n  3\n  >>> trunc(3.15)\n  3\n  >>> trunc(3.2)\n  3\n  */\nconst trunc = (number) => {\n  return Math.floor(number);\n};\n\n/*Get the floor of twonumbers x and y\n  >>> round(3.5)\n  3\n  >>> round(3.8)\n  3\n  >>> round(3.1)\n  3\n  >>> round(3.15)\n  3\n  >>> round(3.2)\n  3\n  */\nconst round = (number) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Returnn -th Fibonacci numbe r.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnn -th Fibonacci numbe r.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* bracket s is a string of \"< \" and \">\".\n return false if every openingbracket  h as a corre spond ing closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* bracket s is a string of \"< \" and \">\".\n return false if every openingbracket  h as a corre spond ing closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Return true if brackets is a string of \"< \" and \">\".\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('<');\n  const closingBrackets = brackets.split('>');\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i] === closingBrackets[i]) {\n      return false;\n    }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Returnt rue is list element s are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt rue is list element s are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return false;\n    }\n    if (current > first) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0])\n  true\n  >>> monotonic([4, 1])\n  false\n  */\nconst monotonic2 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic2([4, 1, 0, -10])\n  true\n  >>> monotonic2([4, 1, 0, 10])\n  false\n  >>> monotonic2([4, 1, 0])\n  true\n  >>> monotonic2([4, 1])\n  false\n  */\nconst monotonic3 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic3([4, 1, 0, -10])\n  true\n  >>> monotonic3([4, 1, 0, 10])\n  false\n  >>> monotonic3([4, 1, 0])\n  true\n  >>> monotonic3([4, 1])\n  false\n  */\nconst monotonic4 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic4([4, 1, 0, -10])\n  true\n  >>> monotonic4([4, 1, 0, 10])\n  false\n  >>> monotonic4([4, 1, 0])\n  true\n  >>> monotonic4([4, 1])\n  false\n  */\nconst monotonic5 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic5([4, 1, 0, -10])\n  true\n  >>> monotonic5([4, 1, 0, 10])\n  false\n  >>> monotonic5([4, 1, 0])\n  true\n  >>> monotonic5([4, 1])\n  false\n  */\nconst monotonic6 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic6([4, 1, 0, -10])\n  true\n  >>> monotonic6([4, 1, 0, 10])\n  false\n  >>> monotonic6([4, 1, 0])\n  true\n  >>> monotonic6([4, 1])\n  false\n  */\nconst monotonic7 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic7([4, 1, 0, -10])\n  true\n  >>> monotonic7([4, 1, 0, 10])\n  false\n  >>> monotonic7([4, 1, 0])\n  true\n  >>> monotonic7([4, 1])\n  false\n  */\nconst monotonic8 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic8([4, 1, 0, -10])\n  true\n  >>> monotonic8([4, 1, 0, 10])\n  false\n  >>> monotonic8([4, 1, 0])\n  true\n  >>> monotonic8([4, 1])\n  false\n  */\nconst monotonic9 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic9([4, 1, 0, -10])\n  true\n  >>> monotonic9([4, 1, 0, 10])\n  false\n  >>> monotonic9([4, 1, 0])\n  true\n  >>> monotonic9([4, 1])\n  false\n  */\nconst monotonic10 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic10([4, 1, 0, -10])\n  true\n  >>> monotonic10([4, 1, 0, 10])\n  false\n  >>> monotonic10([4, 1, 0])\n  true\n  >>> monotonic10([4, 1])\n  false\n  */\nconst monotonic11 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic11([4, 1, 0, -10])\n  true\n  >>> monotonic11([4, 1, 0, 10])\n  false\n  >>> monotonic11([4, 1, 0])\n  true\n  >>> monotonic11([4, 1])\n  false\n  */\nconst monotonic12 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monotonic12([4, 1, 0, -10])\n  true\n  >>> monotonic12([4, 1, 0, 10])\n  false\n  >>> monotonic12([4, 1, 0])\n  true\n  >>> monotonic12([4, 1])\n  false\n  */\nconst monotonic13 = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const first = l[0];\n  for (let i = 1; i < l.length; i++) {\n    const current = l[i];\n    if (current < first) {\n      return true;\n    }\n    if (current > first) {\n      return false;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> monot", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/58", "prompt": "/*Returns orted unique common  elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returns orted unique common  elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (const item of set1) {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  }\n  return common;\n};\n\n/*Returns orted unique common elements for two lists.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Returnt he largest prime fa ctor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt he largest prime fa ctor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let maxFactor = 1;\n  let factor = 2;\n  while (n > 1) {\n    if (n % factor === 0) {\n      maxFactor = factor;\n    }\n    factor++;\n    n--;\n  }\n  return maxFactor;\n};\n\n/*\n  Given a number n and a number k, return the number n / k. Assume k > n.\n  >>> divide(6, 2)\n  2\n  >>> divide(6, 3)\n  2\n  >>> divide(6, 4)\n  2\n  >>> divide(6, 5)\n  2\n  >>> divide(6, 6)\n  6\n  >>> divide(6, 7)\n  6\n  >>> divide(6, 8)\n  6\n  >>> divide(6, 9)\n  6\n  >>> divide(6, 10)\n  6\n  >>> divide(6, 11)\n  6\n  >>> divide(6, 12)\n  6\n  >>> divide(6, 13)\n  6\n  >>> divide(6, 14)\n  6\n  >>> divide(6, 15)\n  6\n  >>> divide(6, 16)\n  6\n  >>> divide(6, 17)\n  6\n  >>> divide(6, 18)\n  6\n  >>> divide(6, 19)\n  6\n  >>> divide(6, 20)\n  6\n  >>> divide(6, 21)\n  6\n  >>> divide(6, 22)\n  6\n  >>> divide(6, 23)\n  6\n  >>> divide(6, 24)\n  6\n  >>> divide(6, 25)\n  6\n  >>> divide(6, 26)\n  6\n  >>> divide(6, 27)\n  6\n  >>> divide(6, 28)\n  6\n  >>> divide(6, 29)\n  6\n  >>> divide(6, 30)\n  6\n  >>> divide(6, 31)\n  6\n  >>> divide(6, 32)\n  6\n  >>> divide(6, 33)\n  6\n  >>> divide(6, 34)\n  6\n  >>> divide(6, 35)\n  6\n  >>> divide(6, 36)\n  6\n  >>> divide(6, 37)\n  6\n  >>> divide(6, 38)\n  6\n  >>> divide(6, 39)\n  6\n  >>> divide(6, 40)\n  6\n  >>> divide(6, 41)\n  6\n  >>> divide(6, 42)\n  6\n  >>> divide(6, 43)\n  6\n  >>> divide(6, 44)\n  6\n  >>> divide(6, 45)\n  6\n  >>> divide(6, 46)\n  6\n  >>> divide(6, 47)\n  6\n  >>> divide(6, 48)\n  6\n  >>> divide(6, 49)\n  6\n  >>> divide(6, 50)\n  6\n  >>> divide(6, 51)\n  6\n  >>> divide(6, 52)\n  6\n  >>> divide(6, 53)\n  6\n  >>> divide(6, 54)\n  6\n  >>> divide(6, 55)\n  6\n  >>> divide(6, 56)\n  6\n  >>> divide(6, 57)\n  6\n  >>> divide(6, 58)\n  6\n  >>> divide(6, 59)\n  6\n  >>> divide(6, 60)\n  6\n  >>> divide(6, 61)\n  6\n  >>> divide(6, 62)\n  6\n  >>> divide(6, 63)\n  6\n  >>> divide(6, 64)\n  6\n  >>> divide(6, 65)\n  6\n  >>> divide(6, 66)\n  6\n  >>> divide(6, 67)\n  6\n  >>> divide(6, 68)\n  6\n  >>> divide(6, 69)\n  6\n  >>> divide(6, 70)\n  6\n  >>> divide(6, 71)\n  6\n  >>> divide(6, 72)\n  6\n  >>> divide(6, 73)\n  6\n  >>> divide(6, 74)\n  6\n  >>> divide(6, 75)\n  6\n  >>> divide(6, 76)\n  6\n  >>> divide(6, 77)\n  6\n  >>> divide(6, 78)\n  6\n  >>> divide(6, 79)\n  6\n  >>> divide(6, 80)\n  6\n  >>> divide(6, 81)\n  6\n  >>> divide(6, 82)\n  6\n  >>> divide(6, 83)\n  6\n  >>> divide(6, 84)\n  6\n  >>> divide(6, 85)\n  6\n  >>> divide(6, 86)\n  6\n  >>> divide(6, 87)\n  6\n  >>> divide(6, 88)\n  6\n  >>> divide(6, 89)\n  6\n  >>> divide(6, 90)\n  6\n  >>> divide(6, 91)\n  6\n  >>> divide(6, 92)\n  6\n  >>> divide(6, 93)\n  6\n  >>> divide(6, 94)\n  6\n  >>> divide(6, 95)\n  6\n  >>> divide(6, 96)\n  6\n  >>> divide(6, 97)\n  6\n  >>> divide(6, 98)\n  6\n  >>> divide(6, 99)\n  6\n  >>> divide(6, 100)\n  6\n  >>> divide(6, 101)\n  6\n  >>> divide(6, 102)\n  6\n  >>> divide(6, 103)\n  6\n  >>> divide(6, 104)\n  6\n  >>> divide(6, 105)\n  6\n  >>> divide(6, 106)\n  6\n  >>> divide(6, 107)\n  6\n  >>> divide(6, 108)\n  6\n  >>> divide(6, 109)\n  6\n  >>> divide(6, 110)\n  6\n  >>> divide(6, 111)\n  6\n  >>> divide(6, 112)\n  6\n  >>> divide(6, 113)\n  6\n  >>> divide(6, 114)\n  6\n  >>> divide(6, 115)\n  6\n  >>> divide(6, 116)\n  6\n  >>> divide(6, 117)\n  6\n  >>> divide(6, 118)\n  6\n  >>> divide(6, 119)\n  6\n  >>> divide(6, 120)\n  6\n  >>> divide(6, 121)\n  6\n  >>> divide(6, 122)\n  6\n  >>> divide(6, 123)\n  6\n  >>> divide(6, 124)\n  6\n  >>> divide(6, 125)\n  6\n  >>> divide(6, 126)\n  6\n  >>> divide(6, 127)\n  6\n  >>> divide(6, 128)\n  6\n  >>> divide(6, 129)\n  6\n  >>> divide(6, 130)\n  6\n  >>> divide(6, 131)\n  6\n  >>> divide(6, 132)\n  6\n  >>> divide(6, 133)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/6", "prompt": "/* Inputt o this function isa string represented multiple groups for nested pa re nthesesse parat ed by spaces.\n  For e ach  of the gr oup, output the  deepest level of nesting of parentheses.\n E.g. (()()) has ma ximum t wo levels of nesting wh ile  ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputt o this function isa string represented multiple groups for nested pa re nthesesse parat ed by spaces.\n  For e ach  of the gr oup, output the  deepest level of nesting of parentheses.\n E.g. (()()) has ma ximum t wo levels of nesting wh ile  ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.match(/[^()]+/g);\n  const paren_array_length = paren_array.length;\n  const paren_array_flat = paren_array.flat();\n  const paren_array_flat_length = paren_array_flat.length;\n  let paren_array_nested_level = 0;\n  let paren_array_nested_level_max = 0;\n  let paren_array_nested_level_max_index = 0;\n  let paren_array_nested_level_max_index2 = 0;\n  let paren_array_nested_level_max_index3 = 0;\n  let paren_array_nested_level_max_index4 = 0;\n  let paren_array_nested_level_max_index5 = 0;\n  let paren_array_nested_level_max_index6 = 0;\n  let paren_array_nested_level_max_index7 = 0;\n  let paren_array_nested_level_max_index8 = 0;\n  let paren_array_nested_level_max_index9 = 0;\n  let paren_array_nested_level_max_index10 = 0;\n  let paren_array_nested_level_max_index11 = 0;\n  let paren_array_nested_level_max_index12 = 0;\n  let paren_array_nested_level_max_index13 = 0;\n  let paren_array_nested_level_max_index14 = 0;\n  let paren_array_nested_level_max_index15 = 0;\n  let paren_array_nested_level_max_index16 = 0;\n  let paren_array_nested_level_max_index17 = 0;\n  let paren_array_nested_level_max_index18 = 0;\n  let paren_array_nested_level_max_index19 = 0;\n  let paren_array_nested_level_max_index20 = 0;\n  let paren_array_nested_level_max_index21 = 0;\n  let paren_array_nested_level_max_index22 = 0;\n  let paren_array_nested_level_max_index23 = 0;\n  let paren_array_nested_level_max_index24 = 0;\n  let paren_array_nested_level_max_index25 = 0;\n  let paren_array_nested_level_max_index26 = 0;\n  let paren_array_nested_level_max_index27 = 0;\n  let paren_array_nested_level_max_index28 = 0;\n  let paren_array_nested_level_max_index29 = 0;\n  let paren_array_nested_level_max_index30 = 0;\n  let paren_array_nested_level_max_index31 = 0;\n  let paren_array_nested_level_max_index32 = 0;\n  let paren_array_nested_level_max_index33 = 0;\n  let paren_array_nested_level_max_index34 = 0;\n  let paren_array_nested_level_max_index35 = 0;\n  let paren_array_nested_level_max_index36 = 0;\n  let paren_array_nested_level_max_index37 = 0;\n  let paren_array_nested_level_max_index38 = 0;\n  let paren_array_nested_level_max_index39 = 0;\n  let paren_array_nested_level_max_index40 = 0;\n  let paren_array_nested_level_max_index41 = 0;\n  let paren_array_nested_level_max_index42 = 0;\n  let paren_array_nested_level_max_index43 = 0;\n  let paren_array_nested_level_max_index44 = 0;\n  let paren_array_nested_level_max_index45 = 0;\n  let paren_array_nested_level_max_index46 = 0;\n  let paren_array_nested_level_max_index47 = 0;\n  let paren_array_nested_level_max_index48 = 0;\n  let paren_array_nested_level_max_index49 = 0;\n  let paren_array_nested_level_max_index50 = 0;\n  let paren_array_nested_level_max_index51 = 0;\n  let paren_array_nested_level_max_index52 = 0;\n  let paren_array_nested_level_max_index53 = 0;\n  let paren_array_nested_level_max_index54 = 0;\n  let paren_array_nested_level_max_index55 = 0;\n  let paren_array_nested_level_max_index56 = 0;\n  let paren_array_nested_level_max_index57 = 0;\n  let paren_array_nested_level_max_index58 = 0;\n  let paren_array_nested_level_max_index59 = 0;\n  let paren_array_nested_level_max_index60 = 0;\n  let paren_array_nested_level_max_index61 = 0;\n  let paren_array_nested_level_max_index62 = 0;\n  let paren_array_nested_level_max_index63 = 0;\n  let paren_array_nested_level_max_index64 = 0;\n  let paren_array_nested_level_max_index65 = 0;\n  let paren_array_nested_level_max_index66 = 0;\n  let paren_array_nested_level_max_index67 = 0;\n  let paren_array_nested_level_max_index68 = 0;\n  let paren_array_nested_level_max_index69 = 0;\n  let paren_array_nested_level_max_index70 = 0;\n  let paren_array_nested_level_max_index71 = 0;\n  let paren_array_nested_level_max_index72 = 0;\n  let paren_array_nested_level_max_index73 = 0;\n  let paren_array_nested_level_max_index74 = 0;\n  let paren_array_nested_level_max_index75 = 0;\n  let paren_array_nested_level_max_index76 = 0;\n  let paren_array_nested_level_max_index77 = 0;\n  let paren_array_nested_level_max_index78 = 0;\n  let paren_array_nested_level_max_index79 = 0;\n  let paren_array_nested_level_max_index80 = 0;\n  let paren_array_nested_level_max_index81 = 0;\n  let paren_array_nested_level_max_index82 = 0;\n  let paren_array_nested_level_max_index83 = 0;\n  let paren_array_nested_level_max_index84 = 0;\n  let paren_array_nested_level_max_index85 = 0;\n  let paren_array_nested_level_max_index86 = 0;\n  let paren_array_nested_level_max_index87 = 0;\n  let paren_array_nested_level_max_index88 = 0;\n  let paren_array_nested_level_max_index89 = 0;\n  let paren_array_nested_level_max_index90 = 0;\n  let paren_array_nested_level_max_index91 = 0;\n  let paren_array_nested_level_max_index92 = 0;\n  let paren_array_nested_level_max_index93 = 0;\n  let paren_array_nested_level_max_index94 = 0;\n  let paren_array_nested_level_max_index95 = 0;\n  let paren_array_nested_level_max_index96 = 0;\n  let paren_array_nested_level_max_index97 = 0;\n  let paren_array_nested_level_max_index98 = 0;\n  let paren_array_nested_level_max_index99 = 0;\n  let paren_array_nested_level_max_index100 = 0;\n  let paren_array_nested_level_max_index101 = 0;\n  let paren_array_nested_level_max_index102 = 0;\n  let paren_array_nested_level_max_index103 = 0;\n  let paren_array_nested_level_max_index104 = 0;\n  let paren_array_nested_level_max_index105 = 0;\n  let paren_array_nested_level_max_index106 = 0;\n  let paren_array_nested_level_max_index107 = 0;\n  let paren_array_nested_level_max_index108 = 0;\n  let paren_array_nested_level_max_index109 = 0;\n  let paren_array_nested_level_max_index110 = 0;\n  let paren_array_nested_level_max_index111 = 0;\n  let paren_array_nested_level_max_index112 = 0;\n  let paren_array_nested_level_max_index113 = 0;\n  let paren_array_nested_level_max_index114 = 0;\n  let paren_array_nested_level_max_index115 = 0;\n  let paren_array_nested_level_max_index116 = 0;\n  let paren_array_nested_level_max_index117 = 0;\n  let paren_array_nested_level_max_index118 = 0;\n  let paren_array_nested_level_max_index119 = 0;\n  let paren_array_nested_level_max_index120 = 0;\n  let paren_array_nested_level_max_index121 = 0;\n  let paren_array_nested_level_max_index122 = 0;\n  let paren_array_nested_level_max_index123 = 0;\n  let paren_array_nested_level_max_index124", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToNi s a function that s ums numbersfrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sumToNi s a function that s ums numbersfrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAreCorrect\n}\n\n/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(')\n  const closingBrackets = brackets.split(')')\n  const allOpeningBracketsAreCorrect = openingBrackets.every((openingBracket) => {\n    return closingBrackets.includes(openingBracket)\n  })\n  return allOpeningBracketsAre", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs repr esent coefficientsof a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2  +  ....\n  R eturn  derivative of this p oly nomial inthe same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs repr esent coefficientsof a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2  + ....\n  R eturn  derivative of this p oly nomial inthe same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = xs[i + 1] - xs[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new Array(n)\n  for (let i = 0; i < n; ++i) {\n    d[i] = p[i + 1] - p[i]\n  }\n  return d\n}\n\n/* \n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial([1, 2, 3])\n  [2, 6]\n  */\nconst derivative_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial_of_polynomial = (p) => {\n  const n = p.length\n  const d = new ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibF ib number sequenceis a sequence similar to the Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The FibF ib number sequenceis a sequence similar to the Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*The Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fib", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write afunction vowelsCoun t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction vowelsCoun t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write afunction vowelsCount t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular  shift the digits o f the integer x, shift the digits rightbyshift\n a nd returnthe r esult as a string.\n Ifshift > nu mber of digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Circular  shift the digits o f the integer x, shift the digits rightbyshift\n a nd returnthe r esult as a string.\n Ifshift > nu mber of digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  if (shift < 0) return str; // shift < 0\n  let result = \"\";\n  for (let i = 0; i < str.length; i += shift) {\n    result += str.charAt(i);\n  }\n  return result;\n};\n\n/*\n Return the number of digits in x.\n >>> countDigits(123)\n 3\n >>> countDigits(-123)\n 3\n >>> countDigits(0)\n 0\n >>> countDigits(1234)\n 4\n >>> countDigits(-1234)\n 4\n >>> countDigits(12345)\n 5\n >>> countDigits(-12345)\n 5\n >>> countDigits(123456789)\n 6\n >>> countDigits(-123456789)\n 6\n >>> countDigits(1234567890)\n 7\n >>> countDigits(-1234567890)\n 7\n >>> countDigits(12345678901)\n 8\n >>> countDigits(-12345678901)\n 8\n >>> countDigits(1234567890123)\n 9\n >>> countDigits(-1234567890123)\n 9\n >>> countDigits(12345678901234)\n 10\n >>> countDigits(-12345678901234)\n 10\n >>> countDigits(123456789012345)\n 11\n >>> countDigits(-123456789012345)\n 11\n >>> countDigits(1234567890123456)\n 12\n >>> countDigits(-1234567890123456)\n 12\n >>> countDigits(1234567890123456789)\n 13\n >>> countDigits(-1234567890123456789)\n 13\n >>> countDigits(12345678901234567890)\n 14\n >>> countDigits(-12345678901234567890)\n 14\n >>> countDigits(123456789012345678901)\n 15\n >>> countDigits(-123456789012345678901)\n 15\n >>> countDigits(12345678901234567890123)\n 16\n >>> countDigits(-12345678901234567890123)\n 16\n >>> countDigits(123456789012345678901234)\n 17\n >>> countDigits(-123456789012345678901234)\n 17\n >>> countDigits(1234567890123456789012345)\n 18\n >>> countDigits(-1234567890123456789012345)\n 18\n >>> countDigits(12345678901234567890123456)\n 19\n >>> countDigits(-12345678901234567890123456)\n 19\n >>> countDigits(12345678901234567890123456789)\n 20\n >>> countDigits(-12345678901234567890123456789)\n 20\n >>> countDigits(123456789012345678901234567890)\n 21\n >>> countDigits(-123456789012345678901234567890)\n 21\n >>> countDigits(1234567890123456789012345678901)\n 22\n >>> countDigits(-1234567890123456789012345678901)\n 22\n >>> countDigits(123456789012345678901234567890123)\n 23\n >>> countDigits(-123456789012345678901234567890123)\n 23\n >>> countDigits(1234567890123456789012345678901234)\n 24\n >>> countDigits(-1234567890123456789012345678901234)\n 24\n >>> countDigits(12345678901234567890123456789012345)\n 25\n >>> countDigits(-12345678901234567890123456789012345)\n 25\n >>> countDigits(123456789012345678901234567890123456)\n 26\n >>> countDigits(-123456789012345678901234567890123456)\n 26\n >>> countDigits(123456789012345678901234567890123456789)\n 27\n >>> countDigits(-123456789012345678901234567890123456789)\n 27\n >>> countDigits(1234567890123456789012345678901234567890)\n 28\n >>> countDigits(-1234567890123456789012345678901234567890)\n 28\n >>> countDigits(12345678901234567890123456789012345678901)\n 29\n >>> countDigits(-12345678901234567890123456789012345678901)\n 29\n >>> countDigits(1234567890123456789012345678901234567890123)\n 30\n >>> countDigits(-1234567890123456789012345678901234567890123)\n 30\n >>> countDigits(12345678901234567890123456789012345678901234)\n 31\n >>> countDigits(-12345678901234567890123456789012345678901234)\n 31\n >>> countDigits(123456789012345678901234567890123456789012345)\n 32\n >>> countDigits(-123456789012345678901234567890123456789012345)\n 32\n >>> countDigits(1234567890123456789012345678901234567890123456)\n 33\n >>> countDigits(-1234567890123456789012345678901234567890123456)\n 33\n >>> countDigits(1234567890123456789012345678901234567890123456789)\n 34\n >>> countDigits(-1234567890123456789012345678901234567890123456789)\n 34\n >>> countDigits(12345678901234567890123456789012345678901234567890)\n 35\n >>> countDigits(-12345678901234567890123456789012345678901234567890)\n 35\n >>> countDigits(123456789012345678901234567890123456789012345678901)\n 36\n >>> countDigits(-123456789012345678901234567890123456789012345678901)\n 36\n >>> countDigits(12345678901234567890123456789012345678901234567890123)\n 37\n >>> countDigits(-12345678901234567890123456789012345678901234567890123)\n 37\n >>> countDigits(123456789012345678901234567890123456789012345678901234)\n 38\n >>> countDigits(-123456789012345678901234567890123456789012345678901234)\n 38\n >>> countDigits(1234567890123456789012345678901234567890123456789012345)\n 39\n >>> countDigits(-1234567890123456789012345678901234567890123456789012345)\n 39\n >>> countDigits(12345678901234567890123456789012345678901234567890123456)\n 40\n >>> countDigits(-12345678901234567890123456789012345678901234567890123456)\n 40\n >>> countDigits(12345678901234567890123456789012345678901234567890123456789)\n 41\n >>> countDigits(-12345678901234567890123456789012345678901234567890123456789)\n 41\n >>> countDigits(123456789012345678901234567890123456789012345678901234567890)\n 42\n >>> countDigits(-123456789012345678901234567890123456789012345678901234567890)\n 42\n >>> countDigits(1234567890123456789012345678901234567890123456789012345678901)\n 43\n >>> countDigits(-1234567890123456789012345678901234567890123456789012345678901)\n 43\n >>> countDigits(123456789012345678901234567890123456789012345678901234567890123)\n 44\n >>> countDigits(-123456789012345678901234567890123456789012345678901234567890123)\n 44\n >>> countDigits(1234567890123456789012345678901234567890123456789012345678901234)\n 45\n >>> countDigits(-1234567890123456789012345678901234567890123456789012345678901234)\n 45\n >>> countDigits(12345678901234567890123456789012345678901234567890123456789012345)\n 46\n >>> countDigits(-12345678901234567890123456789012345678901234567890123456789012345)\n 46\n >>> countDigits(123456789012345678901234567890123456789012345678901234567890123456)\n 47\n >>> countDigits(-123456789012345678901234567890123456789012345678901234567890", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/66", "prompt": "/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  upper cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  upper cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  lower cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this  task, you will begiven a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this  task, you will begiven a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let rec aux x y z = if z > 0 then aux (x + y) z (z - 1) else x + y\n  aux 0 0 n\n}\n\n/*\n  In this  task, you will be given a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let rec aux x y z = if z > 0 then aux (x + y) z (z - 1) else x + y\n  aux 0 0 n\n}\n\n/*\n  In this  task, you will be given a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let rec aux x y z = if z > 0 then aux (x + y) z (z - 1) else x + y\n  aux 0 0 n\n}\n\n/*\n  In this  task, you will be given a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let rec aux x y z = if z > 0 then aux (x + y) z (z - 1) else x + y\n  aux 0 0 n\n}\n\n/*\n  In this  task, you will be given a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let rec aux x y z = if z > 0 then aux (x + y) z (z - 1) else x + y\n  aux 0 0 n\n}\n\n/*\n  In this  task, you will be given a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let rec aux x y z = if z > 0 then aux (x + y) z (z - 1) else x + y\n  aux 0 0 n\n}\n\n/*\n  In this  task, you will be given a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givenan array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest even val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex .\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no evenvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Givenan array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest even val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex.\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no evenvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenArr = arr.filter(item => item % 2 === 0);\n  const evenArrLength = evenArr.length;\n  if (evenArrLength === 0) {\n    return [];\n  }\n  const evenSmallestVal = evenArr.reduce((acc, cur) => Math.min(acc, cur), Infinity);\n  const evenSmallestIndex = evenArr.findIndex(item => item === evenSmallestVal);\n  return evenArr.filter((item, index) => item === evenSmallestVal)\n   .sort((a, b) => a - b)\n   .slice(0, evenArrLength);\n};\n\nexport { pluck, pick, pickRandom };\n\n/*\n  Given an array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest odd val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex.\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no oddvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddArr = arr.filter(item => item % 2!== 0);\n  const oddArrLength = oddArr.length;\n  if (oddArrLength === 0) {\n    return [];\n  }\n  const oddSmallestVal = oddArr.reduce((acc, cur) => Math.max(acc, cur), -Infinity);\n  const oddSmallestIndex = oddArr.findIndex(item => item === oddSmallestVal);\n  return oddArr.filter((item, index) => item === oddSmallestVal)\n   .sort((a, b) => b - a)\n   .slice(0, oddArrLength);\n};\n\nexport { pluckOdds };\n\n/*\n  Given an array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest odd val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex.\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no oddvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsRandom = (arr) => {\n  const oddArr = arr.filter(item => item % 2!== 0);\n  const oddArrLength = oddArr.length;\n  if (oddArrLength === 0) {\n    return [];\n  }\n  const oddSmallestVal = oddArr.reduce((acc, cur) => Math.max(acc, cur), -Infinity);\n  const oddSmallestIndex = oddArr.findIndex(item => item === oddSmallestVal);\n  return oddArr.filter((item, index) => item === oddSmallestVal)\n   .sort((a, b) => b - a)\n   .slice(0, oddArrLength);\n};\n\nexport { pluckOddsRandom };\n\n/*\n  Given an array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest odd val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex.\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no oddvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsRandomOdds = (arr) => {\n  const oddArr = arr.filter(item => item % 2!== 0);\n  const oddArrLength = oddArr.length;\n  if (oddArrLength === 0) {\n    return [];\n  }\n  const oddSmallestVal = oddArr.reduce((acc, cur) => Math.max(acc, cur), -Infinity);\n  const oddSmallestIndex = oddArr.findIndex(item => item === oddSm", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filteran input list of st rings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filteran input list of st rings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string => string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st rings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  const filteredStrings = strings.filter(\n    string =>!string.includes(substring)\n  );\n  return filteredStrings;\n};\n\n/* Filters an input list of st ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givenl ist of integers, re turn list in strange order.\n  Strange sorting, iswh en you sta rt wi th the minimum value, \n then maxim um of the remai ning integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givenl ist of integers, re turn list in strange order.\n  Strange sorting, iswh en you sta rt wi th the minimum value, \n then maxim um of the remai ning integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let minValue = lst[0];\n  let maxValue = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n    }\n    if (lst[i] > maxValue) {\n      maxValue = lst[i];\n    }\n  }\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      newList.push(minValue);\n    } else if (lst[i] > maxValue) {\n      newList.push(maxValue);\n    } else {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, return the number of times \n  the value appears in the list.\n\n  Examples:\n  countOccurrences([1, 4, 2, 3]) == 2\n  countOccurrences([5, 5, 5, 5]) == 3\n  countOccurrences([]) == 0\n  */\nconst countOccurrences = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences = (lst, value) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== value) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences2 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences3 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1] && lst[i]!== lst[i + 1]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences4 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1] && lst[i]!== lst[i + 1] && lst[i]!== lst[i + 2]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences5 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1] && lst[i]!== lst[i + 1] && lst[i]!== lst[i + 2] && lst[i]!== lst[i + 3]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences6 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1] && lst[i]!== lst[i + 1] && lst[i]!== lst[i + 2] && lst[i]!== lst[i + 3] && lst[i]!== lst[i + 4]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences7 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1] && lst[i]!== lst[i + 1] && lst[i]!== lst[i + 2] && lst[i]!== lst[i + 3] && lst[i]!== lst[i + 4] && lst[i]!== lst[i + 5]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences8 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1] && lst[i]!== lst[i + 1] && lst[i]!== lst[i + 2] && lst[i]!== lst[i + 3] && lst[i]!== lst[i + 4] && lst[i]!== lst[i + 5] && lst[i]!== lst[i + 6]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the value \n  from the list. \n\n  Examples:\n  removeAllOccurrences([1, 4, 2, 3], 2) == [1, 4, 3]\n  removeAllOccurrences([5, 5, 5, 5], 5) == [5, 5, 5]\n  removeAllOccurrences([], 5) == []\n  */\nconst removeAllOccurrences9 = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i - 1] && lst[i]!== lst[i + 1] && lst[i]!== lst[i + 2] && lst[i]!== lst[i + 3] && lst[i]!== lst[i + 4] && lst[i]!== lst[i + 5] && lst[i]!== lst[i + 6] && lst[i]!== lst[i + 7]) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a sorted list of integers, remove all instances of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givent he lengths of the t hree sides of a triangle. Return the area of\n  the  t rianglero unded  to 2 decimal pointsifthe threesides form a va lid triangle.\n  Otherwise return -1\n  Three  sides make a valid  triang le when the sum of anytwo  sidesis greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givent he lengths of the t hree sides of a triangle. Return the area of\n  the  t rianglero unded  to 2 decimal pointsifthe threesides form a va lid triangle.\n  Otherwise return -1\n  Three  sides make a valid  triang le when the sum of anytwo  sidesis greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return side1 + side2;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return 0;\n  }\n  return side1 + side2;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return 0;\n  }\n  return side1 + side2;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return 0;\n  }\n  return side1 + side2;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return 0;\n  }\n  return side1 + side2;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return 0;\n  }\n  return side1 + side2;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return 0;\n  }\n  return side1 + side2;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  if (side1 + side2 > side3) {\n    return 0;\n  }\n  return side1 + side2;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea9 = (a, b, c, d) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  const side4 = Math.abs(d - b);\n  if (side1 + side2 > side3 && side1 + side4 > side3) {\n    return side1 + side2 + side4;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea10 = (a, b, c, d, e) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  const side4 = Math.abs(d - b);\n  const side5 = Math.abs(e - c);\n  if (side1 + side2 > side3 && side1 + side4 > side3 && side1 + side5 > side3) {\n    return side1 + side2 + side4 + side5;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea11 = (a, b, c, d, e, f) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  const side4 = Math.abs(d - b);\n  const side5 = Math.abs(e - c);\n  const side6 = Math.abs(f - d);\n  if (side1 + side2 > side3 && side1 + side4 > side3 && side1 + side5 > side3 && side1 + side6 > side3) {\n    return side1 + side2 + side4 + side5 + side6;\n  }\n  return -1;\n};\n\n/*\n  Given the lengths of the sides of a triangle, return the area of the\n  triangle to 2 decimal points. If the sides form a right angled triangle\n  then return 0\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == 0\n  */\nconst triangleArea12 = (a, b, c, d, e, f, g) => {\n  const side1 = Math.abs(a - b);\n  const side2 = Math.abs(b - c);\n  const side3 = Math.abs(c - a);\n  const side4 = Math.abs(d - b);\n  const side5 = Math.abs(e - c);\n  const side6 = Math.abs(f - d);\n  const side7 = Math.abs(g - e);\n  if (side1 + side2 > side3 && side1 + side4 > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly2 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly3 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly4 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly5 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly6 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly7 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly8 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly9 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly10 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly11 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly12 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly13 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly14 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly15 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly16 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly17 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly18 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly19 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly20 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly21 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly22 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly23 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly24 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly25 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const maxWeight = w\n  const maxSum = q.reduce((acc, curr) => acc + curr, 0)\n  return maxSum < maxWeight\n}\n\nconst willItFly26 = (q, w) => {\n  if (q.length <= 1) {\n    return true\n  }\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givena n array arr ofinte gers, find the minimum number of elements that\n  n ee d to bech anged  to make the array pa lin dromic. Apalindromic arr ay is an array that\n  is read the same back wards and forwards.  In one  change, you can change  on e eleme nt to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array arr ofinte gers, find the minimum number of elements that\n  n ee d to bech anged  to make the array pa lin dromic. Apalindromic arr ay is an array that\n  is read the same back wards and forwards.  In one  change, you can change  on e eleme nt to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] - arr[i] < min) {\n        min = arr[j] - arr[i];\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search tree and key value as 7, return its node.\n  Given binary search tree and key value as 6, return its left child.\n  Given binary search tree and key value as 5, return its right child.\n  Given binary search tree and key value as 2, return its right child.\n  Given binary search tree and key value as 1, return its left child.\n  Given binary search tree and key value as 0, return its root node.\n  Given binary search tree and key value as -1, return null.\n  */\nconst searchTree = (root, key) => {\n  if (root == null) return null;\n  if (key < root.val) return searchTree(root.left, key);\n  if (key > root.val) return searchTree(root.right, key);\n  return root;\n};\n\n/*\n  Given a binary search tree and a key, find the node with key in the BST.\n\n  For example:\n  Given binary search ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars , return the first list .\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x)!== -1);\n};\n\n/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.filter(x => lst2.indexOf(x", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  a = a % 10;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 5) return true;\n  if (a === 7) return true;\n  if (a === 11) return true;\n  if (a === 13) return true;\n  if (a === 17) return true;\n  if (a === 19) return true;\n  if (a === 23) return true;\n  if (a === 29) return true;\n  if (a === 31) return true;\n  if (a === 37) return true;\n  if (a === 41) return true;\n  if (a === 43) return true;\n  if (a === 47) return true;\n  if (a === 53) return true;\n  if (a === 59) return true;\n  if (a === 61) return true;\n  if (a === 67) return true;\n  if (a === 71) return true;\n  if (a === 73) return true;\n  if (a === 79) return true;\n  if (a === 83) return true;\n  if (a === 89) return true;\n  if (a === 97) return true;\n  return false;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  a = a % 10;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 5) return true;\n  if (a === 7) return true;\n  if (a === 11) return true;\n  if (a === 13) return true;\n  if (a === 17) return true;\n  if (a === 19) return true;\n  if (a === 23) return true;\n  if (a === 29) return true;\n  if (a === 31) return true;\n  if (a === 37) return true;\n  if (a === 41) return true;\n  if (a === 43) return true;\n  if (a === 47) return true;\n  if (a === 53) return true;\n  if (a === 59) return true;\n  if (a === 61) return true;\n  if (a === 67) return true;\n  if (a === 71) return true;\n  if (a === 73) return true;\n  if (a === 79) return true;\n  if (a === 83) return true;\n  if (a === 89) return true;\n  if (a === 97) return true;\n  return false;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  a = a % 10;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 5) return true;\n  if (a === 7) return true;\n  if (a === 11) return true;\n  if (a === 13) return true;\n  if (a === 17) return true;\n  if (a === 19) return true;\n  if (a === 23) return true;\n  if (a === 29) return true;\n  if (a === 31) return true;\n  if (a === 37) return true;\n  if (a === 41) return true;\n  if (a === 43) return true;\n  if (a === 47) return true;\n  if (a === 53) return true;\n  if (a === 59) return true;\n  if (a === 61) return true;\n  if (a === 67) return true;\n  if (a === 71) return true;\n  if (a === 73) return true;\n  if (a === 79) return true;\n  if (a === 83) return true;\n  if (a === 89) return true;\n  if (a === 97) return true;\n  return false;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  a = a % 10;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 5) return true;\n  if (a === 7) return true;\n  if (a === 11) return true;\n  if (a === 13) return true;\n  if (a === 17) return true;\n  if (a === 19) return true;\n  if (a === 23) return true;\n  if (a === 29) return true;\n  if (a === 31) return true;\n  if (a === 37) return true;\n  if (a === 41) return true;\n  if (a === 43) return true;\n  if (a === 47) return true;\n  if (a === 53) return true;\n  if (a === 59) return true;\n  if (a === 61) return true;\n  if (a === 67) return true;\n  if (a === 71) return true;\n  if (a === 73) return true;\n  if (a === 79) return true;\n  if (a === 83) return true;\n  if (a === 89) return true;\n  if (a === 97) return true;\n  return false;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  a = a % 10;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 5) return true;\n  if (a === 7) return true;\n  if (a === 11) return true;\n  if (a === 13) return true;\n  if (a === 17) return true;\n  if (a === 19) return true;\n  if (a === 23) return true;\n  if (a === 29) return true;\n  if (a === 31) return true;\n  if (a === 37) return true;\n  if (a === 41) return true;\n  if (a === 43) return true;\n  if (a === 47) return true;\n  if (a === 53) return true;\n  if (a === 59) return true;\n  if (a === 61) return true;\n  if (a === 67) return true;\n  if (a === 71) return true;\n  if (a === 73) return true;\n  if (a === 79) return true;\n  if (a === 83) return true;\n  if (a === 89) return true;\n  if (a === 97) return true;\n  return false;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  a = a % 10;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 5) return true;\n  if (a === 7) return true;\n  if (a === 11) return true;\n  if (a === 13) return true;\n  if (a === 17) return true;\n  if (a === 19) return true;\n  if (a === 23) return true;\n  if (a === 29) return true;\n  if (a === 31) return true;\n  if (a === 37) return true;\n  if (a === 41) return true;\n  if (a === 43) return true;\n  if (a === 47) return true;\n  if (a === 53) return true;\n  if (a === 59) return true;\n  if (a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x * x, n / 2);\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is prime and false in other cases. \n x is a sim ple prime if n is prime and n is not divisible by any number between 2 and n\n  For example:\n  isPrime(2) => true\n  isPrime(5) => true\n  isPrime(7) => false\n  isPrime(11) => false\n  isPrime(13) => false\n  isPrime(17) => false\n  isPrime(19) => true\n  isPrime(23) => true\n  isPrime(29) => true\n  isPrime(31) => true\n  isPrime(37) => true\n  isPrime(43) => true\n  isPrime(47) => true\n  isPrime(53) => true\n  isPrime(59) => true\n  isPrime(61) => true\n  isPrime(67) => true\n  isPrime(71) => true\n  isPrime(73) => true\n  isPrime(79) => true\n  isPrime(83) => true\n  isPrime(89) => true\n  isPrime(97) => true\n  isPrime(101) => true\n  isPrime(103) => true\n  isPrime(107) => true\n  isPrime(109) => true\n  isPrime(113) => true\n  isPrime(127) => true\n  isPrime(131) => true\n  isPrime(137) => true\n  isPrime(139) => true\n  isPrime(141) => true\n  isPrime(147) => true\n  isPrime(151) => true\n  isPrime(157) => true\n  isPrime(159) => true\n  isPrime(163) => true\n  isPrime(167) => true\n  isPrime(173) => true\n  isPrime(179) => true\n  isPrime(181) => true\n  isPrime(191) => true\n  isPrime(193) => true\n  isPrime(197) => true\n  isPrime(199) => true\n  isPrime(203) => true\n  isPrime(209) => true\n  isPrime(211) => true\n  isPrime(217) => true\n  isPrime(223) => true\n  isPrime(227) => true\n  isPrime(229) => true\n  isPrime(233) => true\n  isPrime(239) => true\n  isPrime(241) => true\n  isPrime(251) => true\n  isPrime(257) => true\n  isPrime(263) => true\n  isPrime(269) => true\n  isPrime(271) => true\n  isPrime(277) => true\n  isPrime(281) => true\n  isPrime(283) => true\n  isPrime(293) => true\n  isPrime(297) => true\n  isPrime(303) => true\n  isPrime(309) => true\n  isPrime(313) => true\n  isPrime(317) => true\n  isPrime(323) => true\n  isPrime(329) => true\n  isPrime(331) => true\n  isPrime(337) => true\n  isPrime(343) => true\n  isPrime(349) => true\n  isPrime(351) => true\n  isPrime(359) => true\n  isPrime(367) => true\n  isPrime(373) => true\n  isPrime(379) => true\n  isPrime(381) => true\n  isPrime(387) => true\n  isPrime(393) => true\n  isPrime(399) => true\n  isPrime(401) => true\n  isPrime(409) => true\n  isPrime(413) => true\n  isPrime(419) => true\n  isPrime(423) => true\n  isPrime(429) => true\n  isPrime(433) => true\n  isPrime(441) => true\n  isPrime(449) => true\n  isPrime(457) => true\n  isPrime(461) => true\n  isPrime(461) => true\n  isPrime(471) => true\n  isPrime(471) => true\n  isPrime(491) => true\n  isPrime(491) => true\n  isPrime(511) => true\n  isPrime(511) => true\n  isPrime(531) => true\n  isPrime(531) => true\n  isPrime(541) => true\n  isPrime(541) => true\n  isPrime(571) => true\n  isPrime(571) => true\n  isPrime(599) => true\n  isPrime(599) => true\n  isPrime(601) => true\n  isPrime(601) => true\n  isPrime(617) => true\n  isPrime(617) => true\n  isPrime(631) => true\n  isPrime(631) => true\n  isPrime(651) => true\n  isPrime(651) => true\n  isPrime(673) => true\n  isPrime(673) => true\n  isPrime(691) => true\n  isPrime(691) => true\n  isPrime(709) => true\n  isPrime(709) => true\n  isPrime(737) => true\n  isPrime(737) => true\n  isPrime(767) => true\n  isPrime(767) => true\n  isPrime(797) => true\n  isPrime(797) => true\n  isPrime(831) => true\n  isPrime(831) => true\n  isPrime(859) => true\n  isPrime(859) => true\n  isPrime(883) => true\n  isPrime(883) => true\n  isPrime(907) => true\n  isPrime(907) => true\n  isPrime(923) => true\n  isPrime(923) => true\n  isPrime(929) => true\n  isPrime(929) => true\n  isPrime(937) => true\n  isPrime(937) => true\n  isPrime(953) => true\n  isPrime(953) => true\n  isPrime(959) => true\n  isPrime(959) => true\n  isPrime(967) => true\n  isPrime(967) => true\n  isPrime(971) => true\n  isPrime(971) => true\n  isPrime(977) => true\n  isPrime(977) => true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Writea  function thattake s an integer a and returns true\n  if this ingegeris  a cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thattake s an integer a and returns true\n  if this ingegeris  a cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have  been tasked to wri te a function that receives\n  a hexadecimal number  a s a string  andcounts the number ofhex adecimal\ndigits that ar e primes (prime number=== or a prime=== isa natural number\n greater  than 1 that is not a p rod uct oftwosmaller natural numbers).\n  Hexadecimal digits are 0===  1= == 2= == 3=== 4 === 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers are 2=== 3=== 5=== 7===11===13=== 17===...  So you have to determine a number of the fol lowing digits: 2=== 3=== 5=== 7= ==\n  B (=decima l 11)===  D (=decimal13).\n  Note: you may assume the input isalways cor rector empt y string===\n  and symbols A== =B===C===D ===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have  been tasked to wri te a function that receives\n  a hexadecimal number  a s a string  andcounts the number ofhex adecimal\ndigits that ar e primes (prime number=== or a prime=== isa natural number\n greater  than 1 that is not a p rod uct oftwosmaller natural numbers).\n  Hexadecimal digits are 0===  1= == 2= == 3=== 4 === 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers are 2=== 3=== 5=== 7===11===13=== 17===...  So you have to determine a number of the fol lowing digits: 2=== 3=== 5=== 7= ==\n  B (=decima l 11)===  D (=decimal13).\n  Note: you may assume the input isalways cor rector empt y string===\n  and symbols A== =B===C===D ===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArray = hexNum.split('');\n  let hexNumArrayLength = hexNumArray.length;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNumArrayLength = hexNumArrayLength;\n  let hexNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will  be given a numberin decimal form and your task is to convert it to binary for mat.The function should r etu rna strin g, with each ch aracter representing a binary\n  number. Eac h character inthestringwill be '0' or '1'.\n\n The re will beanextra couple of characters 'db'at the beginning and  at theend of th e string.\n  The extra characters are there to help withthe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will  be given a numberin decimal form and your task is to convert it to binary for mat.The function should r etu rna strin g, with each ch aracter representing a binary\n  number. Eac h character inthestringwill be '0' or '1'.\n\n The re will beanextra couple of characters 'db'at the beginning and  at theend of th e string.\n  The extra characters are there to help withthe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let remainder;\n  while (decimal > 0) {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = remainder + binary;\n  }\n  return binary;\n};\n\n/*\n Write a function that will convert a binary number to a decimal number.\n The function should take in a  binary number as a string and return the decimal number represented by the binary number.\n Examples:\n binaryToDecimal(\"11\") # returns 3\n binaryToDecimal(\"100\") # returns 16\n binaryToDecimal(\"101\") # returns 17\n binaryToDecimal(\"1010\") # returns 65536\n binaryToDecimal(\"1110\") # returns 4294967296\n */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + (parseInt(binary[i]) * (Math.pow(2, i)));\n  }\n  return decimal;\n};\n\n/*\n Write a function that will convert a decimal number to binary number.\n The function should take in a decimal number as a string and return the binary number represented by the decimal number.\n Examples:\n decimalToBinary(\"3\") # returns \"11\"\n decimalToBinary(\"16\") # returns \"100\"\n decimalToBinary(\"17\") # returns \"101\"\n decimalToBinary(\"65536\") # returns \"1110\"\n decimalToBinary(\"4294967296\") # returns \"1110\"\n */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + decimalToBinary(Math.floor(decimal / 2));\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary;\n};\n\n/*\n Write a function that will convert a binary number to a hexadecimal number.\n The function should take in a binary number as a string and return the hexadecimal number represented by the binary number.\n Examples:\n binaryToHex(\"11\") # returns \"3\"\n binaryToHex(\"100\") # returns \"10\"\n binaryToHex(\"101\") # returns \"11\"\n binaryToHex(\"1010\") # returns \"A\"\n binaryToHex(\"1110\") # returns \"F\"\n */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = hex + binaryToHex(binary[i]);\n  }\n  return hex;\n};\n\n/*\n Write a function that will convert a hexadecimal number to binary number.\n The function should take in a hexadecimal number as a string and return the binary number represented by the hexadecimal number.\n Examples:\n hexToBinary(\"3\") # returns \"11\"\n hexToBinary(\"10\") # returns \"100\"\n hexToBinary(\"11\") # returns \"101\"\n hexToBinary(\"A\") # returns \"1010\"\n hexToBinary(\"F\") # returns \"1110\"\n */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = binary + hexToBinary(hex[i]);\n  }\n  return binary;\n};\n\n/*\n Write a function that will convert a binary number to a hexadecimal number.\n The function should take in a binary number as a string and return the hexadecimal number represented by the binary number.\n Examples:\n binaryToHex(\"11\") # returns \"3\"\n binaryToHex(\"100\") # returns \"10\"\n binaryToHex(\"101\") # returns \"11\"\n binaryToHex(\"1010\") # returns \"A\"\n binaryToHex(\"1110\") # returns \"F\"\n */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = hex + binaryToHex(binary[i]);\n  }\n  return hex;\n};\n\n/*\n Write a function that will convert a hexadecimal number to binary number.\n The function should take in a hexadecimal number as a string and return the binary number represented by the hexadecimal number.\n Examples:\n hexToBinary(\"3\") # returns \"11\"\n hexToBinary(\"10\") # returns \"100\"\n hexToBinary(\"11\") # returns \"101\"\n hexToBinary(\"A\") # returns \"1010\"\n hexToBinary(\"F\") # returns \"1110\"\n */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = binary + hexToBinary(hex[i]);\n  }\n  return binary;\n};\n\n/*\n Write a function that will convert a binary number to a hexadecimal number.\n The function should take in a binary number as a string and return the hexadecimal number represented by the binary number.\n Examples:\n binaryToHex(\"11\") # returns \"3\"\n binaryToHex(\"100\") # returns \"10\"\n binaryToHex(\"101\") # returns \"11\"\n binaryToHex(\"1010\") # returns \"A\"\n binaryToHex(\"1110\") # returns \"F\"\n */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = hex + binaryToHex(binary[i]);\n  }\n  return hex;\n};\n\n/*\n Write a function that will convert a hexadecimal number to binary number.\n The function should take in a hexadecimal number as a string and return the binary number represented by the hexadecimal number.\n Examples:\n hexToBinary(\"3\") # returns \"11\"\n hexToBinary(\"10\") # returns \"100\"\n hexToBinary(\"11\") # returns \"101\"\n hexToBinary(\"A\") # returns \"1010\"\n hexToBinary(\"F\") # returns \"1110\"\n */\nconst hexToBinary = (hex) => {\n  let binary = '';\n  for (let i = 0; i < hex.length; i++) {\n    binary = binary + hexToBinary(hex[i]);\n  }\n  return binary;\n};\n\n/*\n Write a function that will convert a binary number to a hexadecimal number.\n The function should take in a binary number as a string and return the hexadecimal number represented by the binary number.\n Examples:\n binaryToHex(\"11\") # returns \"3\"\n binaryToHex(\"100\") # returns \"10\"\n binaryToHex(\"101\") # returns \"11\"\n binaryToHex(\"1010\") # returns \"A\"\n binaryToHex(\"1110\") # returns \"F\"\n */\nconst binaryToHex = (binary) => {\n  let hex = '';\n  for (let i = 0; i < binary.length; i++) {\n    hex = hex + binaryToHex(binary[i]);\n  }\n  return hex;\n};\n\n/*\n Write a function that will convert a hexadecimal number to binary number.\n The function should take in a hexadecimal number as a string and return the binary number represented by the hexadecimal number.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/8", "prompt": "/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = acc;\n    return [sum + curr, product * curr];\n  }, [0, 0]);\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  const [sum, product] = numbers.reduce((acc, curr) => {\n    const [sum, product] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You aregiven a strings.\n Your task is to check if the string ishappy or n ot .\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a strings.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const arr1 = s.split(\"\");\n  const arr2 = arr1.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr3 = arr2.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr4 = arr3.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr5 = arr4.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr6 = arr5.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr7 = arr6.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr8 = arr7.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr9 = arr8.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr10 = arr9.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr11 = arr10.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr12 = arr11.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr13 = arr12.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr14 = arr13.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr15 = arr14.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr16 = arr15.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr17 = arr16.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr18 = arr17.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr19 = arr18.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr20 = arr19.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr21 = arr20.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr22 = arr21.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr23 = arr22.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr24 = arr23.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr25 = arr24.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr26 = arr25.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr27 = arr26.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr28 = arr27.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr29 = arr28.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr30 = arr29.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr31 = arr30.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr32 = arr31.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr33 = arr32.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr34 = arr33.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr35 = arr34.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr36 = arr35.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr37 = arr36.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr38 = arr37.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr39 = arr38.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr40 = arr39.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr41 = arr40.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr42 = arr41.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr43 = arr42.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr44 = arr43.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr45 = arr44.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr46 = arr45.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr47 = arr46.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr48 = arr47.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr49 = arr48.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr50 = arr49.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr51 = arr50.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr52 = arr51.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr53 = arr52.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr54 = arr53.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr55 = arr54.filter((x) => x!== \"a\" && x!== \"b\" && x!== \"c\" && x!== \"d\");\n  const arr5", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is th e last week ofthesemester and the teacher has to give the grades\n to  students.  Theteacher has been maki ngher own al gorithm for gra ding.\n  The only problem is, she has lost t he code she used fo r gradi ng.\n  She has given you  alist of GPAs for some students and you have to write\n  a functiontha tcan  output a  list of letter grades using the following table:\n          GPA       |    Letter grade\n          4. 0               A+\n          > 3.7                A\n         > 3.3               A-\n         > 3.0              B+\n        > 2.7              B\n          > 2.3            B-\n       > 2.0            C+          > 1.7                C\n         >1.3              C -\n         > 1.0              D+\n        > 0.7               D\n         > 0. 0               D-\n            0 .0            E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*It is th e last week ofthesemester and the teacher has to give the grades\n to  students.  Theteacher has been maki ngher own al gorithm for gra ding.\n  The only problem is, she has lost t he code she used fo r gradi ng.\n  She has given you  alist of GPAs for some students and you have to write\n  a functiontha tcan  output a  list of letter grades using the following table:\n          GPA       |    Letter grade\n          4. 0               A+\n          > 3.7                A\n         > 3.3               A-\n         > 3.0              B+\n        > 2.7              B\n          > 2.3            B-\n       > 2.0            C+          > 1.7                C\n         >1.3              C -\n         > 1.0              D+\n        > 0.7               D\n         > 0. 0               D-\n            0.0            E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return `A+`;\n    } else if (grade >= gradesAverage - 0.1) {\n      return `A`;\n    } else if (grade >= gradesAverage - 0.01) {\n      return `A-`;\n    } else if (grade >= gradesAverage - 0.001) {\n      return `B+`;\n    } else if (grade >= gradesAverage - 0.0001) {\n      return `B`;\n    } else if (grade >= gradesAverage - 0.00001) {\n      return `B-`;\n    } else if (grade >= gradesAverage - 0.000001) {\n      return `C+`;\n    } else if (grade >= gradesAverage - 0.0000001) {\n      return `C`;\n    } else if (grade >= gradesAverage - 0.00000001) {\n      return `C-`;\n    } else if (grade >= gradesAverage - 0.000000001) {\n      return `D+`;\n    } else if (grade >= gradesAverage - 0.0000000001) {\n      return `D`;\n    } else if (grade >= gradesAverage - 0.00000000001) {\n      return `D-`;\n    } else if (grade >= gradesAverage - 0.000000000001) {\n      return `E`;\n    } else {\n      return `F`;\n    }\n  });\n  return gradesLetter;\n};\n\n/*\n  Write a function that takes in a list of GPAs and returns the letter grade for\n  each GPA.\n  Example:\n  GPAs([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n*/\nconst GPAs = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return `A+`;\n    } else if (grade >= gradesAverage - 0.1) {\n      return `A`;\n    } else if (grade >= gradesAverage - 0.01) {\n      return `A-`;\n    } else if (grade >= gradesAverage - 0.001) {\n      return `B+`;\n    } else if (grade >= gradesAverage - 0.0001) {\n      return `B`;\n    } else if (grade >= gradesAverage - 0.00001) {\n      return `B-`;\n    } else if (grade >= gradesAverage - 0.000001) {\n      return `C+`;\n    } else if (grade >= gradesAverage - 0.0000001) {\n      return `C`;\n    } else if (grade >= gradesAverage - 0.00000001) {\n      return `C-`;\n    } else if (grade >= gradesAverage - 0.000000001) {\n      return `D+`;\n    } else if (grade >= gradesAverage - 0.0000000001) {\n      return `D`;\n    } else if (grade >= gradesAverage - 0.00000000001) {\n      return `D-`;\n    } else if (grade >= gradesAverage - 0.000000000001) {\n      return `E`;\n    } else {\n      return `F`;\n    }\n  });\n  return gradesLetter;\n};\n\n/*\n  Write a function that takes in a list of GPAs and returns the letter grade for\n  each GPA.\n  Example:\n  GPAs([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n*/\nconst GPAs = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return `A+`;\n    } else if (grade >= gradesAverage - 0.1) {\n      return `A`;\n    } else if (grade >= gradesAverage - 0.01) {\n      return `A-`;\n    } else if (grade >= gradesAverage - 0.001) {\n      return `B+`;\n    } else if (grade >= gradesAverage - 0.0001) {\n      return `B`;\n    } else if (grade >= gradesAverage - 0.00001) {\n      return `B-`;\n    } else if (grade >= gradesAverage - 0.000001) {\n      return `C+`;\n    } else if (grade >= gradesAverage - 0.0000001) {\n      return `C`;\n    } else if (grade >= gradesAverage - 0.00000001) {\n      return `C-`;\n    } else if (grade >= gradesAverage - 0.000000001) {\n      return `D+`;\n    } else if (grade >= gradesAverage - 0.0000000001) {\n      return `D`;\n    } else if (grade >= gradesAverage - 0.00000000001) {\n      return `D-`;\n    } else if (grade >= gradesAverage - 0.000000000001) {\n      return `E`;\n    } else {\n      return `F`;\n    }\n  });\n  return gradesLetter;\n};\n\n/*\n  Write a function that takes in a list of GPAs and returns the letter grade for\n  each GPA.\n  Example:\n  GPAs([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n*/\nconst GPAs = (grades) => {\n  const gradesArray = grades.map(grade => grade * 10);\n  const gradesSum = gradesArray.reduce((sum, grade) => sum + grade, 0);\n  const gradesAverage = gradesSum / gradesArray.length;\n  const gradesLetter = gradesArray.map((grade, index) => {\n    if (grade >= gradesAverage) {\n      return `A+`;\n    } else if (grade >= gradesAverage - 0.1) {\n      return `A`;\n    } else if (grade >= gradesAverage - 0.01) {\n      return `A-`;\n    } else if (grade >= gradesAverage - 0.001) {\n      return `B+`;\n    } else if (grade >= gradesAverage - 0.0001) {\n      return `B`;\n    } else if (grade >= gradesAverage - 0.00001) {\n      return `B-`;\n    } else if (grade >= gradesAverage - 0.000001) {\n      return `C+`;\n    } else if (grade >= grade", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write afunction that takes  a string and returns true if the string\n lengthis  a prime n umber  or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that takes  a string and returns true if the string\n lengthis  a prime n umber  or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('abba') == true\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palindrome('abba') == false\n  palin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givena  positive integer n , return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    count += n % 10;\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let count = 0;\n  let i = 1;\n  while (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given apositive integer N,  return thetotal sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given apositive integer N,  return thetotal sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in binary\n  */\nconst count = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in decimal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in decimal\n  */\nconst countDecimal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in octal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in octal\n  */\nconst countOctal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in hexadecimal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in hexadecimal\n  */\nconst countHexadecimal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 16;\n    N = Math.floor(N / 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in binary\n  */\nconst countBinary = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in decimal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in decimal\n  */\nconst countDecimal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in octal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in octal\n  */\nconst countOctal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in hexadecimal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in hexadecimal\n  */\nconst countHexadecimal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 16;\n    N = Math.floor(N / 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in binary\n  */\nconst countBinary = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in decimal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in decimal\n  */\nconst countDecimal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in octal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in octal\n  */\nconst countOctal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in hexadecimal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in hexadecimal\n  */\nconst countHexadecimal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 16;\n    N = Math.floor(N / 16);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in binary\n  */\nconst countBinary = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in decimal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in decimal\n  */\nconst countDecimal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in octal.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer of the number of digits in octal\n  */\nconst countOctal = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 8;\n    N = Math.floor(N / 8);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the number of its digits in hexadecimal.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addEvenOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addEvenOddEvenOddEvenOddOdd = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writea  function thattake s a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thattake s a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newS = s\n  newS = newS.replace(/\\s+/g,'').split(' ').sort().join(' ')\n  return newS\n}\n\n/*\n  Writea  function thattake a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdl", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2) ...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (0, 0), (4, 5), (4, 0)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  findRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  findRow([], 1) == []\n  findRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst findRow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  findCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (0, 0), (4, 5), (4, 0)]\n  findCol([], 1) == []\n  findCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst findCol = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  findRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  findRowAndCol([], 1) == []\n  findRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst findRowAndCol = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(x)!== -1) {\n      res.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  return res;\n};\n\n/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  findRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  findRowAndCol([], 1) == []\n  findRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst findRowAndCol = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givena n array of non-nega tive integers, return a copy of the given array af te r sorting, \n  yo u will sort the given  ar ray in asc ending order if  the sum( first index value, last index val ue) is odd,\n  or so rt it i n descending order if t hesum( fi rstindex value, last index value) is even.\n\n  Note:\n  * do n't chan ge the gi ven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array of non-nega tive integers, return a copy of the given array af te r sorting, \n  yo u will sort the given  ar ray in asc ending order if  the sum( first index value, last index val ue) is odd,\n  or so rt it i n descending order if t hesum( fi rstindex value, last index value) is even.\n\n  Note:\n  * don't chan ge the gi ven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a, b) => a - b);\n  }\n  return array;\n};\n\n/*\n  Given a sorted array of non-negative integers, \n  rearrange the array so that each number in the new array is greater than the one \n  just before it, but less than the one just after it. The relative order of the \n  elements in the two subarrays does not change. \n  \n  Note:\n  * don't chan ge the gi ven array.\n\n  Examples:\n  * rearrangeArray([0, 3, 2, 5]) => [0, 5, 2, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrangeArray([0, 3, 5]) => [0, 5, 3]\n  * rearrange", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Createa  function encrypt t hat takes astring as an argument and\n returns ast ring encry ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Createa  function encrypt t hat takes astring as an argument and\n returns ast ring encry ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(rotate(ring[i]))\n  }\n  return newRing.join('')\n}\n\n/*Createa  function decrypt t hat takes astring as an argument and\n returns ast ring decry ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(rotate(ring[i]))\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(ring[i])\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(ring[i])\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(ring[i])\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(ring[i])\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(ring[i])\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(ring[i])\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {\n    newRing.push(ring[i])\n  }\n  return newRing.join('')\n}\n\n/*Createa  function rotate t hat takes astring as an argument and\n returns ast ring rotated ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  rotate('hi') returns 'gf'\n  rotate('asdfghjkl') returns 'ix'\n  rotate('gf') returns 'et'\n  rotate('et') returns 'kj'\n  */\nconst rotate = (s) => {\n  let ring = s.split('')\n  let newRing = []\n  for (let i = 0; i < ring.length; i++) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let currentMax = 0;\n  let currentNumber = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    currentMax = Math.max(currentMax, currentNumber);\n    if (currentMax > max) {\n      max = currentMax;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    currentNumber = numbers[i];\n    result.push(currentNumber);\n    if (currentNumber === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist .\n Return null if thereis no such element.\n  \n  nextSmallest([1, 2 , 3, 4, 5]) ==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) ==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  if(lst.length < 2){\n    return null;\n  }\n  let minIndex = lst.findIndex(x => x < lst[0]);\n  if(minIndex === -1){\n    return null;\n  }\n  return lst[minIndex];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {\n  let min = Math.min(...arr);\n  let index = arr.indexOf(min);\n  if (index === arr.length - 1) {\n    return null;\n  }\n  return arr[index + 1];\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction nextSmallest(arr) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '!' || S[i] === '.' || S[i] === '?') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'llbe given a string o f words, and your task", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  if (x > y && x > z) return true\n  if (y > x && y > z) return true\n  if (z > x && z > y) return true\n  return false\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writea  function thattake s a message, and encodes in such a \n  way that itsw aps case o f all  letters, replaces al l v owels in  the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thattake s a message, and encodes in such a \n  way that itsw aps case o f all  letters, replaces al l v owels in  the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else if (letter === 'l' || letter === 'v' || letter === 'w') {\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Takes a message and encodes it in such a way that its aps case o f all  letters, replaces al l v owels in the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else if (letter === 'l' || letter === 'v' || letter === 'w') {\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Takes a message and encodes it in such a way that its aps case o f all  letters, replaces al l v owels in the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else if (letter === 'l' || letter === 'v' || letter === 'w') {\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Takes a message and encodes it in such a way that its aps case o f all  letters, replaces al l v owels in the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else if (letter === 'l' || letter === 'v' || letter === 'w') {\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Takes a message and encodes it in such a way that its aps case o f all  letters, replaces al l v owels in the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else if (letter === 'l' || letter === 'v' || letter === 'w') {\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Takes a message and encodes it in such a way that its aps case o f all  letters, replaces al l v owels in the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else if (letter === 'l' || letter === 'v' || letter === 'w') {\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Takes a message and encodes it in such a way that its aps case o f all  letters, replaces al l v owels in the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter;\n    } else if (letter === 'l' || letter === 'v' || letter === 'w') {\n      result += nextLetter;\n    } else {\n      result += letter;\n    }\n  }\n  return result;\n};\n\n/*\n  Takes a message and encodes it in such a way that its aps case o f all  letters, replaces al l v owels in the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdk", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllStrings = false;\n      break;\n    }\n  }\n  return isAllStrings;\n};\n\n/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllStrings = false;\n      break;\n    }\n  }\n  return isAllStrings;\n};\n\n/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllStrings = false;\n      break;\n    }\n  }\n  return isAllStrings;\n};\n\n/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllStrings = false;\n      break;\n    }\n  }\n  return isAllStrings;\n};\n\n/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllStrings = false;\n      break;\n    }\n  }\n  return isAllStrings;\n};\n\n/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      isAllStrings = false;\n      break;\n    }\n  }\n  return isAllStrings;\n};\n\n/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllStrings = true;\n  for (let key in dict) {\n    if (typeof dict", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = n; i >= 1; i--) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,17,19]\n  countTowardsZero(1) => []\n  countTowardsZero(18) => [2,3,5,7,11,13,17]\n  */\nconst countTowardsZero = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countTowardsZero(5) => [2,3]\n  countTowardsZero(11) => [2,3,5,7]\n  countTowardsZero(0) => []\n  countTowardsZero(20) => [2,3,5,7,11,13,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete  the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Complete  the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply15 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply16 = (a, b) => {\n  return a * b\n}\n\n/*Complete the function thattakes two integers and returns \n  the product of t he ir unit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givena  string s, count th e number ofuppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  string s, count th e number ofuppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number oflowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofvowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in even indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in odd indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 3\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in even indices.\n  \n  For example:\n  countConsonantsEven('aBCdEf') returns 3\n  countConsonantsEven('abcdefg') returns 0\n  countConsonantsEven('dBBE') returns 0\n  */\nconst countConsonantsEvenOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in odd indices.\n  \n  For example:\n  countConsonantsOdd('aBCdEf') returns 3\n  countConsonantsOdd('abcdefg') returns 0\n  countConsonantsOdd('dBBE') returns 0\n  */\nconst countConsonantsOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in even indices.\n  \n  For example:\n  countConsonantsEvenOdd('aBCdEf') returns 3\n  countConsonantsEvenOdd('abcdefg') returns 0\n  countConsonantsEvenOdd('dBBE') returns 0\n  */\nconst countConsonantsEvenOddEven = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'c' || s[i] === 'd' || s[i] === 'f' || s[i] === 'g' || s[i] === 'h' || s[i] === 'j' || s[i] === 'k' || s[i] === 'l' || s[i] ==='m' || s[i] === 'n' || s[i] === 'p' || s[i] === 'q' || s[i] === 'r' || s[i] ==='s' || s[i] === 't' || s[i] === 'v' || s[i] === 'w' || s[i] === 'x' || s[i] === 'y' || s[i] === 'z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count th e number ofconsonants in odd indices.\n  \n  For example:\n  countConsonantsOddEven('aBCdEf') returns 3\n  countConsonantsOddEven('abcdefg", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger3 = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger4 = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger5 = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger6 = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger7 = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger8 = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff <.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
